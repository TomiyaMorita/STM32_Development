
TMC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e4  080054e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080054e4  080054e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054e4  080054e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054e4  080054e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054e8  080054e8  000154e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080054ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000005cc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000063c  2000063c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd4f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020c7  00000000  00000000  0002bdef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000908  00000000  00000000  0002deb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000830  00000000  00000000  0002e7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c0d2  00000000  00000000  0002eff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d36c  00000000  00000000  0004b0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f167  00000000  00000000  0005842e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f7595  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002af8  00000000  00000000  000f75e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800514c 	.word	0x0800514c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800514c 	.word	0x0800514c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000278:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800027c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d013      	beq.n	80002b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000290:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00b      	beq.n	80002b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000298:	e000      	b.n	800029c <ITM_SendChar+0x2c>
    {
      __NOP();
 800029a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800029c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b0:	687b      	ldr	r3, [r7, #4]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
	...

080002c0 <tmc2209_readWriteArray>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60b9      	str	r1, [r7, #8]
 80002c8:	607a      	str	r2, [r7, #4]
 80002ca:	603b      	str	r3, [r7, #0]
 80002cc:	4603      	mov	r3, r0
 80002ce:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 80002d0:	480e      	ldr	r0, [pc, #56]	; (800030c <tmc2209_readWriteArray+0x4c>)
 80002d2:	f002 ff8b 	bl	80031ec <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	b29a      	uxth	r2, r3
 80002da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002de:	68b9      	ldr	r1, [r7, #8]
 80002e0:	480a      	ldr	r0, [pc, #40]	; (800030c <tmc2209_readWriteArray+0x4c>)
 80002e2:	f002 fb1f 	bl	8002924 <HAL_UART_Transmit>

	if(readLength > 0){
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d00a      	beq.n	8000302 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 80002ec:	4807      	ldr	r0, [pc, #28]	; (800030c <tmc2209_readWriteArray+0x4c>)
 80002ee:	f002 ffcf 	bl	8003290 <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength, 3000);
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002fa:	68b9      	ldr	r1, [r7, #8]
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <tmc2209_readWriteArray+0x4c>)
 80002fe:	f002 fba5 	bl	8002a4c <HAL_UART_Receive>
	}
}
 8000302:	bf00      	nop
 8000304:	3710      	adds	r7, #16
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	2000008c 	.word	0x2000008c

08000310 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 800031a:	2201      	movs	r2, #1
 800031c:	6839      	ldr	r1, [r7, #0]
 800031e:	6878      	ldr	r0, [r7, #4]
 8000320:	f003 fc52 	bl	8003bc8 <tmc_CRC8>
 8000324:	4603      	mov	r3, r0
}
 8000326:	4618      	mov	r0, r3
 8000328:	3708      	adds	r7, #8
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <periodicJob>:

static void periodicJob(uint32_t tick)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]

	tmc2209_periodicJob(&TMC2209, tick);
 8000338:	6879      	ldr	r1, [r7, #4]
 800033a:	4803      	ldr	r0, [pc, #12]	; (8000348 <periodicJob+0x18>)
 800033c:	f003 fe6b 	bl	8004016 <tmc2209_periodicJob>

	//StepDir_periodicJob(0);
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000194 	.word	0x20000194

0800034c <reset>:

static uint8_t reset()
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 8000350:	4802      	ldr	r0, [pc, #8]	; (800035c <reset+0x10>)
 8000352:	f003 fe71 	bl	8004038 <tmc2209_reset>
 8000356:	4603      	mov	r3, r0
}
 8000358:	4618      	mov	r0, r3
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000194 	.word	0x20000194

08000360 <restore>:

static uint8_t restore()
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 8000364:	4802      	ldr	r0, [pc, #8]	; (8000370 <restore+0x10>)
 8000366:	f003 fea1 	bl	80040ac <tmc2209_restore>
 800036a:	4603      	mov	r3, r0
}
 800036c:	4618      	mov	r0, r3
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000194 	.word	0x20000194

08000374 <TMC2209_INIT>:


void TMC2209_INIT()
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 800037a:	2201      	movs	r2, #1
 800037c:	2101      	movs	r1, #1
 800037e:	2007      	movs	r0, #7
 8000380:	f003 fb6a 	bl	8003a58 <tmc_fillCRC8Table>

	TMC2209_config->reset = reset;
 8000384:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <TMC2209_INIT+0x3c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <TMC2209_INIT+0x40>)
 800038a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config->restore = restore;
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <TMC2209_INIT+0x3c>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a09      	ldr	r2, [pc, #36]	; (80003b8 <TMC2209_INIT+0x44>)
 8000394:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208

	tmc2209_init(&TMC2209, 0, 0, TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <TMC2209_INIT+0x3c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a07      	ldr	r2, [pc, #28]	; (80003bc <TMC2209_INIT+0x48>)
 800039e:	9200      	str	r2, [sp, #0]
 80003a0:	2200      	movs	r2, #0
 80003a2:	2100      	movs	r1, #0
 80003a4:	4806      	ldr	r0, [pc, #24]	; (80003c0 <TMC2209_INIT+0x4c>)
 80003a6:	f003 fd63 	bl	8003e70 <tmc2209_init>
	//restore();
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	2000041c 	.word	0x2000041c
 80003b4:	0800034d 	.word	0x0800034d
 80003b8:	08000361 	.word	0x08000361
 80003bc:	08005194 	.word	0x08005194
 80003c0:	20000194 	.word	0x20000194

080003c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ca:	f000 fae9 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ce:	f000 f835 	bl	800043c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d2:	f000 f8e7 	bl	80005a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003d6:	f000 f8b5 	bl	8000544 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80003da:	f000 f883 	bl	80004e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //uint8_t rxbuf[1];
  TMC2209_INIT();
 80003de:	f7ff ffc9 	bl	8000374 <TMC2209_INIT>
  printf("Start\r\n");
 80003e2:	4812      	ldr	r0, [pc, #72]	; (800042c <main+0x68>)
 80003e4:	f003 ff34 	bl	8004250 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_UART_Receive(&huart2,rxbuf, sizeof(rxbuf), 100);
	  periodicJob(HAL_GetTick());
 80003e8:	f000 fb34 	bl	8000a54 <HAL_GetTick>
 80003ec:	4603      	mov	r3, r0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff ff9e 	bl	8000330 <periodicJob>
	  //example read register value
	  uint32_t value = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	607b      	str	r3, [r7, #4]
	  value = tmc2209_readInt(&TMC2209, TMC2209_FACTORY_CONF);
 80003f8:	2107      	movs	r1, #7
 80003fa:	480d      	ldr	r0, [pc, #52]	; (8000430 <main+0x6c>)
 80003fc:	f003 fcd5 	bl	8003daa <tmc2209_readInt>
 8000400:	4603      	mov	r3, r0
 8000402:	607b      	str	r3, [r7, #4]
	  printf("FACTORY_CONF: %ld\r\n", value);
 8000404:	6879      	ldr	r1, [r7, #4]
 8000406:	480b      	ldr	r0, [pc, #44]	; (8000434 <main+0x70>)
 8000408:	f003 fe9c 	bl	8004144 <iprintf>
	  //HAL_UART_Transmit(&huart2,(uint8_t *)value, sizeof(value),3000);

	  value = tmc2209_readInt(&TMC2209, TMC2209_SG_RESULT);
 800040c:	2141      	movs	r1, #65	; 0x41
 800040e:	4808      	ldr	r0, [pc, #32]	; (8000430 <main+0x6c>)
 8000410:	f003 fccb 	bl	8003daa <tmc2209_readInt>
 8000414:	4603      	mov	r3, r0
 8000416:	607b      	str	r3, [r7, #4]
	  //tmc2209_writeInt(&TMC2209, );
	  printf("SG_RESULT: %ld\r\n", value);
 8000418:	6879      	ldr	r1, [r7, #4]
 800041a:	4807      	ldr	r0, [pc, #28]	; (8000438 <main+0x74>)
 800041c:	f003 fe92 	bl	8004144 <iprintf>
	  //value = tmc2209_readInt(&TMC2209, TMC2209_PWMCONF );
	  //printf("TMC2209_PWMCONF: %ld\r\n", value);
	  HAL_Delay(1000);
 8000420:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000424:	f000 fb22 	bl	8000a6c <HAL_Delay>
  {
 8000428:	e7de      	b.n	80003e8 <main+0x24>
 800042a:	bf00      	nop
 800042c:	08005164 	.word	0x08005164
 8000430:	20000194 	.word	0x20000194
 8000434:	0800516c 	.word	0x0800516c
 8000438:	08005180 	.word	0x08005180

0800043c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b096      	sub	sp, #88	; 0x58
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000446:	2228      	movs	r2, #40	; 0x28
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f003 fe72 	bl	8004134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000450:	f107 031c 	add.w	r3, r7, #28
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	611a      	str	r2, [r3, #16]
 800046e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000470:	2302      	movs	r3, #2
 8000472:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000474:	2301      	movs	r3, #1
 8000476:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000478:	2310      	movs	r3, #16
 800047a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800047c:	2300      	movs	r3, #0
 800047e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000480:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000484:	4618      	mov	r0, r3
 8000486:	f000 fe0f 	bl	80010a8 <HAL_RCC_OscConfig>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000490:	f000 f8d4 	bl	800063c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000494:	230f      	movs	r3, #15
 8000496:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000498:	2300      	movs	r3, #0
 800049a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004aa:	f107 031c 	add.w	r3, r7, #28
 80004ae:	2100      	movs	r1, #0
 80004b0:	4618      	mov	r0, r3
 80004b2:	f001 fe37 	bl	8002124 <HAL_RCC_ClockConfig>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80004bc:	f000 f8be 	bl	800063c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80004c0:	2301      	movs	r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	4618      	mov	r0, r3
 80004cc:	f002 f860 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80004d6:	f000 f8b1 	bl	800063c <Error_Handler>
  }
}
 80004da:	bf00      	nop
 80004dc:	3758      	adds	r7, #88	; 0x58
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_USART1_UART_Init+0x58>)
 80004ea:	4a15      	ldr	r2, [pc, #84]	; (8000540 <MX_USART1_UART_Init+0x5c>)
 80004ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004ee:	4b13      	ldr	r3, [pc, #76]	; (800053c <MX_USART1_UART_Init+0x58>)
 80004f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_USART1_UART_Init+0x58>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_USART1_UART_Init+0x58>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_USART1_UART_Init+0x58>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_USART1_UART_Init+0x58>)
 800050a:	220c      	movs	r2, #12
 800050c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <MX_USART1_UART_Init+0x58>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_USART1_UART_Init+0x58>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <MX_USART1_UART_Init+0x58>)
 800051c:	2200      	movs	r2, #0
 800051e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_USART1_UART_Init+0x58>)
 8000522:	2200      	movs	r2, #0
 8000524:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <MX_USART1_UART_Init+0x58>)
 8000528:	f002 f9a6 	bl	8002878 <HAL_HalfDuplex_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000532:	f000 f883 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	2000008c 	.word	0x2000008c
 8000540:	40013800 	.word	0x40013800

08000544 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_USART2_UART_Init+0x58>)
 800054a:	4a15      	ldr	r2, [pc, #84]	; (80005a0 <MX_USART2_UART_Init+0x5c>)
 800054c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800054e:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000554:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_USART2_UART_Init+0x58>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_USART2_UART_Init+0x58>)
 800056a:	220c      	movs	r2, #12
 800056c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <MX_USART2_UART_Init+0x58>)
 800057c:	2200      	movs	r2, #0
 800057e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000582:	2200      	movs	r2, #0
 8000584:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000586:	4805      	ldr	r0, [pc, #20]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000588:	f002 f928 	bl	80027dc <HAL_UART_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000592:	f000 f853 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000110 	.word	0x20000110
 80005a0:	40004400 	.word	0x40004400

080005a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a14      	ldr	r2, [pc, #80]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a08      	ldr	r2, [pc, #32]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000

08000604 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	e009      	b.n	800062a <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1c5a      	adds	r2, r3, #1
 800061a:	60ba      	str	r2, [r7, #8]
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fe26 	bl	8000270 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	3301      	adds	r3, #1
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	697a      	ldr	r2, [r7, #20]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	429a      	cmp	r2, r3
 8000630:	dbf1      	blt.n	8000616 <_write+0x12>
  }
  return len;
 8000632:	687b      	ldr	r3, [r7, #4]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000644:	e7fe      	b.n	8000644 <Error_Handler+0x8>
	...

08000648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <HAL_MspInit+0x44>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4a0e      	ldr	r2, [pc, #56]	; (800068c <HAL_MspInit+0x44>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6193      	str	r3, [r2, #24]
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <HAL_MspInit+0x44>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <HAL_MspInit+0x44>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	4a08      	ldr	r2, [pc, #32]	; (800068c <HAL_MspInit+0x44>)
 800066c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000670:	61d3      	str	r3, [r2, #28]
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_MspInit+0x44>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000

08000690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <HAL_UART_MspInit+0x100>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d132      	bne.n	8000718 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006b2:	4b38      	ldr	r3, [pc, #224]	; (8000794 <HAL_UART_MspInit+0x104>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	4a37      	ldr	r2, [pc, #220]	; (8000794 <HAL_UART_MspInit+0x104>)
 80006b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006bc:	6193      	str	r3, [r2, #24]
 80006be:	4b35      	ldr	r3, [pc, #212]	; (8000794 <HAL_UART_MspInit+0x104>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c6:	61bb      	str	r3, [r7, #24]
 80006c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b32      	ldr	r3, [pc, #200]	; (8000794 <HAL_UART_MspInit+0x104>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4a31      	ldr	r2, [pc, #196]	; (8000794 <HAL_UART_MspInit+0x104>)
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d4:	6153      	str	r3, [r2, #20]
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <HAL_UART_MspInit+0x104>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e8:	2312      	movs	r3, #18
 80006ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006f4:	2307      	movs	r3, #7
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000702:	f000 fb5f 	bl	8000dc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2025      	movs	r0, #37	; 0x25
 800070c:	f000 faad 	bl	8000c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000710:	2025      	movs	r0, #37	; 0x25
 8000712:	f000 fac6 	bl	8000ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000716:	e036      	b.n	8000786 <HAL_UART_MspInit+0xf6>
  else if(huart->Instance==USART2)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a1e      	ldr	r2, [pc, #120]	; (8000798 <HAL_UART_MspInit+0x108>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d131      	bne.n	8000786 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <HAL_UART_MspInit+0x104>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <HAL_UART_MspInit+0x104>)
 8000728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <HAL_UART_MspInit+0x104>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <HAL_UART_MspInit+0x104>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a15      	ldr	r2, [pc, #84]	; (8000794 <HAL_UART_MspInit+0x104>)
 8000740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000744:	6153      	str	r3, [r2, #20]
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <HAL_UART_MspInit+0x104>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000752:	f248 0304 	movw	r3, #32772	; 0x8004
 8000756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000764:	2307      	movs	r3, #7
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000772:	f000 fb27 	bl	8000dc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2026      	movs	r0, #38	; 0x26
 800077c:	f000 fa75 	bl	8000c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000780:	2026      	movs	r0, #38	; 0x26
 8000782:	f000 fa8e 	bl	8000ca2 <HAL_NVIC_EnableIRQ>
}
 8000786:	bf00      	nop
 8000788:	3730      	adds	r7, #48	; 0x30
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40013800 	.word	0x40013800
 8000794:	40021000 	.word	0x40021000
 8000798:	40004400 	.word	0x40004400

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <NMI_Handler+0x4>

080007a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <HardFault_Handler+0x4>

080007a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <MemManage_Handler+0x4>

080007ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <BusFault_Handler+0x4>

080007b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <UsageFault_Handler+0x4>

080007ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e8:	f000 f920 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <USART1_IRQHandler+0x10>)
 80007f6:	f002 f9fb 	bl	8002bf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2000008c 	.word	0x2000008c

08000804 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <USART2_IRQHandler+0x10>)
 800080a:	f002 f9f1 	bl	8002bf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000110 	.word	0x20000110

08000818 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	e00a      	b.n	8000840 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800082a:	f3af 8000 	nop.w
 800082e:	4601      	mov	r1, r0
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	60ba      	str	r2, [r7, #8]
 8000836:	b2ca      	uxtb	r2, r1
 8000838:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	3301      	adds	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	dbf0      	blt.n	800082a <_read+0x12>
	}

return len;
 8000848:	687b      	ldr	r3, [r7, #4]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
	return -1;
 800085a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800087a:	605a      	str	r2, [r3, #4]
	return 0;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <_isatty>:

int _isatty(int file)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
	return 1;
 8000892:	2301      	movs	r3, #1
}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
	return 0;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c4:	4a14      	ldr	r2, [pc, #80]	; (8000918 <_sbrk+0x5c>)
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <_sbrk+0x60>)
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <_sbrk+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d102      	bne.n	80008de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <_sbrk+0x64>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <_sbrk+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d207      	bcs.n	80008fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008ec:	f003 fbf8 	bl	80040e0 <__errno>
 80008f0:	4603      	mov	r3, r0
 80008f2:	220c      	movs	r2, #12
 80008f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008fa:	e009      	b.n	8000910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <_sbrk+0x64>)
 800090c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20003000 	.word	0x20003000
 800091c:	00000400 	.word	0x00000400
 8000920:	20000420 	.word	0x20000420
 8000924:	20000640 	.word	0x20000640

08000928 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <SystemInit+0x20>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <SystemInit+0x20>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800094c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000984 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000952:	490e      	ldr	r1, [pc, #56]	; (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <LoopForever+0xe>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000968:	4c0b      	ldr	r4, [pc, #44]	; (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000976:	f7ff ffd7 	bl	8000928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097a:	f003 fbb7 	bl	80040ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800097e:	f7ff fd21 	bl	80003c4 <main>

08000982 <LoopForever>:

LoopForever:
    b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000984:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000990:	080054ec 	.word	0x080054ec
  ldr r2, =_sbss
 8000994:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000998:	2000063c 	.word	0x2000063c

0800099c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_2_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_Init+0x28>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <HAL_Init+0x28>)
 80009aa:	f043 0310 	orr.w	r3, r3, #16
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 f94f 	bl	8000c54 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 f808 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009bc:	f7ff fe44 	bl	8000648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40022000 	.word	0x40022000

080009cc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_InitTick+0x54>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_InitTick+0x58>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f967 	bl	8000cbe <HAL_SYSTICK_Config>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00e      	b.n	8000a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d80a      	bhi.n	8000a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a08:	f000 f92f 	bl	8000c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <HAL_InitTick+0x5c>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000000 	.word	0x20000000
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000004 	.word	0x20000004

08000a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x20>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x24>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_IncTick+0x24>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000424 	.word	0x20000424

08000a54 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_GetTick+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000424 	.word	0x20000424

08000a6c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff ffee 	bl	8000a54 <HAL_GetTick>
 8000a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a84:	d005      	beq.n	8000a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_Delay+0x44>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a92:	bf00      	nop
 8000a94:	f7ff ffde 	bl	8000a54 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d8f7      	bhi.n	8000a94 <HAL_Delay+0x28>
  {
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008

08000ab4 <__NVIC_SetPriorityGrouping>:
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_GetPriorityGrouping>:
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <__NVIC_GetPriorityGrouping+0x18>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	f003 0307 	and.w	r3, r3, #7
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_EnableIRQ>:
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	db0b      	blt.n	8000b42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	f003 021f 	and.w	r2, r3, #31
 8000b30:	4907      	ldr	r1, [pc, #28]	; (8000b50 <__NVIC_EnableIRQ+0x38>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	095b      	lsrs	r3, r3, #5
 8000b38:	2001      	movs	r0, #1
 8000b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000e100 	.word	0xe000e100

08000b54 <__NVIC_SetPriority>:
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db0a      	blt.n	8000b7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	490c      	ldr	r1, [pc, #48]	; (8000ba0 <__NVIC_SetPriority+0x4c>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	0112      	lsls	r2, r2, #4
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	440b      	add	r3, r1
 8000b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b7c:	e00a      	b.n	8000b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4908      	ldr	r1, [pc, #32]	; (8000ba4 <__NVIC_SetPriority+0x50>)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f003 030f 	and.w	r3, r3, #15
 8000b8a:	3b04      	subs	r3, #4
 8000b8c:	0112      	lsls	r2, r2, #4
 8000b8e:	b2d2      	uxtb	r2, r2
 8000b90:	440b      	add	r3, r1
 8000b92:	761a      	strb	r2, [r3, #24]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000e100 	.word	0xe000e100
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <NVIC_EncodePriority>:
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f1c3 0307 	rsb	r3, r3, #7
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	bf28      	it	cs
 8000bc6:	2304      	movcs	r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	2b06      	cmp	r3, #6
 8000bd0:	d902      	bls.n	8000bd8 <NVIC_EncodePriority+0x30>
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3b03      	subs	r3, #3
 8000bd6:	e000      	b.n	8000bda <NVIC_EncodePriority+0x32>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43da      	mvns	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	401a      	ands	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfa:	43d9      	mvns	r1, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	4313      	orrs	r3, r2
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3724      	adds	r7, #36	; 0x24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
	...

08000c10 <SysTick_Config>:
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c20:	d301      	bcc.n	8000c26 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00f      	b.n	8000c46 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <SysTick_Config+0x40>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2e:	210f      	movs	r1, #15
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c34:	f7ff ff8e 	bl	8000b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <SysTick_Config+0x40>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <SysTick_Config+0x40>)
 8000c40:	2207      	movs	r2, #7
 8000c42:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	e000e010 	.word	0xe000e010

08000c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff29 	bl	8000ab4 <__NVIC_SetPriorityGrouping>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7c:	f7ff ff3e 	bl	8000afc <__NVIC_GetPriorityGrouping>
 8000c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	6978      	ldr	r0, [r7, #20]
 8000c88:	f7ff ff8e 	bl	8000ba8 <NVIC_EncodePriority>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff5d 	bl	8000b54 <__NVIC_SetPriority>
}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff31 	bl	8000b18 <__NVIC_EnableIRQ>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ffa2 	bl	8000c10 <SysTick_Config>
 8000ccc:	4603      	mov	r3, r0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d008      	beq.n	8000cfa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2204      	movs	r2, #4
 8000cec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e020      	b.n	8000d3c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 020e 	bic.w	r2, r2, #14
 8000d08:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f022 0201 	bic.w	r2, r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d22:	2101      	movs	r1, #1
 8000d24:	fa01 f202 	lsl.w	r2, r1, r2
 8000d28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d005      	beq.n	8000d6a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2204      	movs	r2, #4
 8000d62:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	73fb      	strb	r3, [r7, #15]
 8000d68:	e027      	b.n	8000dba <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f022 020e 	bic.w	r2, r2, #14
 8000d78:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0201 	bic.w	r2, r2, #1
 8000d88:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d92:	2101      	movs	r1, #1
 8000d94:	fa01 f202 	lsl.w	r2, r1, r2
 8000d98:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	4798      	blx	r3
    } 
  }
  return status;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd2:	e14e      	b.n	8001072 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	2101      	movs	r1, #1
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8000de0:	4013      	ands	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f000 8140 	beq.w	800106c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d005      	beq.n	8000e04 <HAL_GPIO_Init+0x40>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d130      	bne.n	8000e66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	68da      	ldr	r2, [r3, #12]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	091b      	lsrs	r3, r3, #4
 8000e50:	f003 0201 	and.w	r2, r3, #1
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d017      	beq.n	8000ea2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d123      	bne.n	8000ef6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	220f      	movs	r2, #15
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	691a      	ldr	r2, [r3, #16]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f003 0307 	and.w	r3, r3, #7
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3208      	adds	r2, #8
 8000ef0:	6939      	ldr	r1, [r7, #16]
 8000ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	2203      	movs	r2, #3
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0203 	and.w	r2, r3, #3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 809a 	beq.w	800106c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f38:	4b55      	ldr	r3, [pc, #340]	; (8001090 <HAL_GPIO_Init+0x2cc>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a54      	ldr	r2, [pc, #336]	; (8001090 <HAL_GPIO_Init+0x2cc>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b52      	ldr	r3, [pc, #328]	; (8001090 <HAL_GPIO_Init+0x2cc>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f50:	4a50      	ldr	r2, [pc, #320]	; (8001094 <HAL_GPIO_Init+0x2d0>)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f7a:	d013      	beq.n	8000fa4 <HAL_GPIO_Init+0x1e0>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a46      	ldr	r2, [pc, #280]	; (8001098 <HAL_GPIO_Init+0x2d4>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d00d      	beq.n	8000fa0 <HAL_GPIO_Init+0x1dc>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a45      	ldr	r2, [pc, #276]	; (800109c <HAL_GPIO_Init+0x2d8>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d007      	beq.n	8000f9c <HAL_GPIO_Init+0x1d8>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a44      	ldr	r2, [pc, #272]	; (80010a0 <HAL_GPIO_Init+0x2dc>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d101      	bne.n	8000f98 <HAL_GPIO_Init+0x1d4>
 8000f94:	2303      	movs	r3, #3
 8000f96:	e006      	b.n	8000fa6 <HAL_GPIO_Init+0x1e2>
 8000f98:	2305      	movs	r3, #5
 8000f9a:	e004      	b.n	8000fa6 <HAL_GPIO_Init+0x1e2>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	e002      	b.n	8000fa6 <HAL_GPIO_Init+0x1e2>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <HAL_GPIO_Init+0x1e2>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	f002 0203 	and.w	r2, r2, #3
 8000fac:	0092      	lsls	r2, r2, #2
 8000fae:	4093      	lsls	r3, r2
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fb6:	4937      	ldr	r1, [pc, #220]	; (8001094 <HAL_GPIO_Init+0x2d0>)
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc4:	4b37      	ldr	r3, [pc, #220]	; (80010a4 <HAL_GPIO_Init+0x2e0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fe8:	4a2e      	ldr	r2, [pc, #184]	; (80010a4 <HAL_GPIO_Init+0x2e0>)
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fee:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <HAL_GPIO_Init+0x2e0>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001012:	4a24      	ldr	r2, [pc, #144]	; (80010a4 <HAL_GPIO_Init+0x2e0>)
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001018:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <HAL_GPIO_Init+0x2e0>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800103c:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <HAL_GPIO_Init+0x2e0>)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_GPIO_Init+0x2e0>)
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <HAL_GPIO_Init+0x2e0>)
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	3301      	adds	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	fa22 f303 	lsr.w	r3, r2, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	f47f aea9 	bne.w	8000dd4 <HAL_GPIO_Init+0x10>
  }
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	40021000 	.word	0x40021000
 8001094:	40010000 	.word	0x40010000
 8001098:	48000400 	.word	0x48000400
 800109c:	48000800 	.word	0x48000800
 80010a0:	48000c00 	.word	0x48000c00
 80010a4:	40010400 	.word	0x40010400

080010a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010b8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	f001 b823 	b.w	8002114 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 817d 	beq.w	80013de <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010e4:	4bbc      	ldr	r3, [pc, #752]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 030c 	and.w	r3, r3, #12
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d00c      	beq.n	800110a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010f0:	4bb9      	ldr	r3, [pc, #740]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 030c 	and.w	r3, r3, #12
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d15c      	bne.n	80011b6 <HAL_RCC_OscConfig+0x10e>
 80010fc:	4bb6      	ldr	r3, [pc, #728]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001108:	d155      	bne.n	80011b6 <HAL_RCC_OscConfig+0x10e>
 800110a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800110e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001112:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001116:	fa93 f3a3 	rbit	r3, r3
 800111a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800111e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001122:	fab3 f383 	clz	r3, r3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	095b      	lsrs	r3, r3, #5
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b01      	cmp	r3, #1
 8001134:	d102      	bne.n	800113c <HAL_RCC_OscConfig+0x94>
 8001136:	4ba8      	ldr	r3, [pc, #672]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	e015      	b.n	8001168 <HAL_RCC_OscConfig+0xc0>
 800113c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001140:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001144:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001148:	fa93 f3a3 	rbit	r3, r3
 800114c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001154:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001158:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001164:	4b9c      	ldr	r3, [pc, #624]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800116c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001170:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001174:	fa92 f2a2 	rbit	r2, r2
 8001178:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800117c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001180:	fab2 f282 	clz	r2, r2
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	f042 0220 	orr.w	r2, r2, #32
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	f002 021f 	and.w	r2, r2, #31
 8001190:	2101      	movs	r1, #1
 8001192:	fa01 f202 	lsl.w	r2, r1, r2
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 811f 	beq.w	80013dc <HAL_RCC_OscConfig+0x334>
 800119e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f040 8116 	bne.w	80013dc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	f000 bfaf 	b.w	8002114 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c6:	d106      	bne.n	80011d6 <HAL_RCC_OscConfig+0x12e>
 80011c8:	4b83      	ldr	r3, [pc, #524]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a82      	ldr	r2, [pc, #520]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 80011ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	e036      	b.n	8001244 <HAL_RCC_OscConfig+0x19c>
 80011d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10c      	bne.n	8001200 <HAL_RCC_OscConfig+0x158>
 80011e6:	4b7c      	ldr	r3, [pc, #496]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a7b      	ldr	r2, [pc, #492]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 80011ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	4b79      	ldr	r3, [pc, #484]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a78      	ldr	r2, [pc, #480]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 80011f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e021      	b.n	8001244 <HAL_RCC_OscConfig+0x19c>
 8001200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001204:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0x184>
 8001212:	4b71      	ldr	r3, [pc, #452]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a70      	ldr	r2, [pc, #448]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 8001218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b6e      	ldr	r3, [pc, #440]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a6d      	ldr	r2, [pc, #436]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e00b      	b.n	8001244 <HAL_RCC_OscConfig+0x19c>
 800122c:	4b6a      	ldr	r3, [pc, #424]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a69      	ldr	r2, [pc, #420]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 8001232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b67      	ldr	r3, [pc, #412]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a66      	ldr	r2, [pc, #408]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 800123e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001242:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001244:	4b64      	ldr	r3, [pc, #400]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001248:	f023 020f 	bic.w	r2, r3, #15
 800124c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001250:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	495f      	ldr	r1, [pc, #380]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 800125a:	4313      	orrs	r3, r2
 800125c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800125e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001262:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d059      	beq.n	8001322 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126e:	f7ff fbf1 	bl	8000a54 <HAL_GetTick>
 8001272:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001276:	e00a      	b.n	800128e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff fbec 	bl	8000a54 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b64      	cmp	r3, #100	; 0x64
 8001286:	d902      	bls.n	800128e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	f000 bf43 	b.w	8002114 <HAL_RCC_OscConfig+0x106c>
 800128e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001292:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001296:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800129a:	fa93 f3a3 	rbit	r3, r3
 800129e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80012a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	095b      	lsrs	r3, r3, #5
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d102      	bne.n	80012c0 <HAL_RCC_OscConfig+0x218>
 80012ba:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	e015      	b.n	80012ec <HAL_RCC_OscConfig+0x244>
 80012c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012c4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80012cc:	fa93 f3a3 	rbit	r3, r3
 80012d0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80012d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80012dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80012e8:	4b3b      	ldr	r3, [pc, #236]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012f0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80012f4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012f8:	fa92 f2a2 	rbit	r2, r2
 80012fc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001300:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001304:	fab2 f282 	clz	r2, r2
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	f042 0220 	orr.w	r2, r2, #32
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	f002 021f 	and.w	r2, r2, #31
 8001314:	2101      	movs	r1, #1
 8001316:	fa01 f202 	lsl.w	r2, r1, r2
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0ab      	beq.n	8001278 <HAL_RCC_OscConfig+0x1d0>
 8001320:	e05d      	b.n	80013de <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001322:	f7ff fb97 	bl	8000a54 <HAL_GetTick>
 8001326:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	e00a      	b.n	8001342 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fb92 	bl	8000a54 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b64      	cmp	r3, #100	; 0x64
 800133a:	d902      	bls.n	8001342 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	f000 bee9 	b.w	8002114 <HAL_RCC_OscConfig+0x106c>
 8001342:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001346:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800134e:	fa93 f3a3 	rbit	r3, r3
 8001352:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001356:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	fab3 f383 	clz	r3, r3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	095b      	lsrs	r3, r3, #5
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b01      	cmp	r3, #1
 800136c:	d102      	bne.n	8001374 <HAL_RCC_OscConfig+0x2cc>
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	e015      	b.n	80013a0 <HAL_RCC_OscConfig+0x2f8>
 8001374:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001378:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001380:	fa93 f3a3 	rbit	r3, r3
 8001384:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001388:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800138c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001390:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001394:	fa93 f3a3 	rbit	r3, r3
 8001398:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013a4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80013a8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80013ac:	fa92 f2a2 	rbit	r2, r2
 80013b0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80013b4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80013b8:	fab2 f282 	clz	r2, r2
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	f042 0220 	orr.w	r2, r2, #32
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	f002 021f 	and.w	r2, r2, #31
 80013c8:	2101      	movs	r1, #1
 80013ca:	fa01 f202 	lsl.w	r2, r1, r2
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1ab      	bne.n	800132c <HAL_RCC_OscConfig+0x284>
 80013d4:	e003      	b.n	80013de <HAL_RCC_OscConfig+0x336>
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 817d 	beq.w	80016ee <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013f4:	4ba6      	ldr	r3, [pc, #664]	; (8001690 <HAL_RCC_OscConfig+0x5e8>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00b      	beq.n	8001418 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001400:	4ba3      	ldr	r3, [pc, #652]	; (8001690 <HAL_RCC_OscConfig+0x5e8>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b08      	cmp	r3, #8
 800140a:	d172      	bne.n	80014f2 <HAL_RCC_OscConfig+0x44a>
 800140c:	4ba0      	ldr	r3, [pc, #640]	; (8001690 <HAL_RCC_OscConfig+0x5e8>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d16c      	bne.n	80014f2 <HAL_RCC_OscConfig+0x44a>
 8001418:	2302      	movs	r3, #2
 800141a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001422:	fa93 f3a3 	rbit	r3, r3
 8001426:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800142a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	fab3 f383 	clz	r3, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	095b      	lsrs	r3, r3, #5
 8001436:	b2db      	uxtb	r3, r3
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b01      	cmp	r3, #1
 8001440:	d102      	bne.n	8001448 <HAL_RCC_OscConfig+0x3a0>
 8001442:	4b93      	ldr	r3, [pc, #588]	; (8001690 <HAL_RCC_OscConfig+0x5e8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	e013      	b.n	8001470 <HAL_RCC_OscConfig+0x3c8>
 8001448:	2302      	movs	r3, #2
 800144a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800145a:	2302      	movs	r3, #2
 800145c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001460:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800146c:	4b88      	ldr	r3, [pc, #544]	; (8001690 <HAL_RCC_OscConfig+0x5e8>)
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	2202      	movs	r2, #2
 8001472:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001476:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800147a:	fa92 f2a2 	rbit	r2, r2
 800147e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001482:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001486:	fab2 f282 	clz	r2, r2
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	f042 0220 	orr.w	r2, r2, #32
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	f002 021f 	and.w	r2, r2, #31
 8001496:	2101      	movs	r1, #1
 8001498:	fa01 f202 	lsl.w	r2, r1, r2
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00a      	beq.n	80014b8 <HAL_RCC_OscConfig+0x410>
 80014a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d002      	beq.n	80014b8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	f000 be2e 	b.w	8002114 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b8:	4b75      	ldr	r3, [pc, #468]	; (8001690 <HAL_RCC_OscConfig+0x5e8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	21f8      	movs	r1, #248	; 0xf8
 80014ce:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80014d6:	fa91 f1a1 	rbit	r1, r1
 80014da:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80014de:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80014e2:	fab1 f181 	clz	r1, r1
 80014e6:	b2c9      	uxtb	r1, r1
 80014e8:	408b      	lsls	r3, r1
 80014ea:	4969      	ldr	r1, [pc, #420]	; (8001690 <HAL_RCC_OscConfig+0x5e8>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f0:	e0fd      	b.n	80016ee <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8088 	beq.w	8001614 <HAL_RCC_OscConfig+0x56c>
 8001504:	2301      	movs	r3, #1
 8001506:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001516:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800151a:	fab3 f383 	clz	r3, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001524:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	461a      	mov	r2, r3
 800152c:	2301      	movs	r3, #1
 800152e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fa90 	bl	8000a54 <HAL_GetTick>
 8001534:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800153a:	f7ff fa8b 	bl	8000a54 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d902      	bls.n	8001550 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	f000 bde2 	b.w	8002114 <HAL_RCC_OscConfig+0x106c>
 8001550:	2302      	movs	r3, #2
 8001552:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001556:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800155a:	fa93 f3a3 	rbit	r3, r3
 800155e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001562:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001566:	fab3 f383 	clz	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	095b      	lsrs	r3, r3, #5
 800156e:	b2db      	uxtb	r3, r3
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b01      	cmp	r3, #1
 8001578:	d102      	bne.n	8001580 <HAL_RCC_OscConfig+0x4d8>
 800157a:	4b45      	ldr	r3, [pc, #276]	; (8001690 <HAL_RCC_OscConfig+0x5e8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	e013      	b.n	80015a8 <HAL_RCC_OscConfig+0x500>
 8001580:	2302      	movs	r3, #2
 8001582:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800158a:	fa93 f3a3 	rbit	r3, r3
 800158e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001598:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80015a4:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <HAL_RCC_OscConfig+0x5e8>)
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	2202      	movs	r2, #2
 80015aa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80015ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80015b2:	fa92 f2a2 	rbit	r2, r2
 80015b6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80015ba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80015be:	fab2 f282 	clz	r2, r2
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	f042 0220 	orr.w	r2, r2, #32
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	f002 021f 	and.w	r2, r2, #31
 80015ce:	2101      	movs	r1, #1
 80015d0:	fa01 f202 	lsl.w	r2, r1, r2
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0af      	beq.n	800153a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015da:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <HAL_RCC_OscConfig+0x5e8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	21f8      	movs	r1, #248	; 0xf8
 80015f0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80015f8:	fa91 f1a1 	rbit	r1, r1
 80015fc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001600:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001604:	fab1 f181 	clz	r1, r1
 8001608:	b2c9      	uxtb	r1, r1
 800160a:	408b      	lsls	r3, r1
 800160c:	4920      	ldr	r1, [pc, #128]	; (8001690 <HAL_RCC_OscConfig+0x5e8>)
 800160e:	4313      	orrs	r3, r2
 8001610:	600b      	str	r3, [r1, #0]
 8001612:	e06c      	b.n	80016ee <HAL_RCC_OscConfig+0x646>
 8001614:	2301      	movs	r3, #1
 8001616:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800161e:	fa93 f3a3 	rbit	r3, r3
 8001622:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001626:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162a:	fab3 f383 	clz	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001634:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	461a      	mov	r2, r3
 800163c:	2300      	movs	r3, #0
 800163e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fa08 	bl	8000a54 <HAL_GetTick>
 8001644:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001648:	e00a      	b.n	8001660 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff fa03 	bl	8000a54 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d902      	bls.n	8001660 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	f000 bd5a 	b.w	8002114 <HAL_RCC_OscConfig+0x106c>
 8001660:	2302      	movs	r3, #2
 8001662:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001666:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800166a:	fa93 f3a3 	rbit	r3, r3
 800166e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001676:	fab3 f383 	clz	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	095b      	lsrs	r3, r3, #5
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b01      	cmp	r3, #1
 8001688:	d104      	bne.n	8001694 <HAL_RCC_OscConfig+0x5ec>
 800168a:	4b01      	ldr	r3, [pc, #4]	; (8001690 <HAL_RCC_OscConfig+0x5e8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	e015      	b.n	80016bc <HAL_RCC_OscConfig+0x614>
 8001690:	40021000 	.word	0x40021000
 8001694:	2302      	movs	r3, #2
 8001696:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800169e:	fa93 f3a3 	rbit	r3, r3
 80016a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016a6:	2302      	movs	r3, #2
 80016a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80016ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80016b8:	4bc8      	ldr	r3, [pc, #800]	; (80019dc <HAL_RCC_OscConfig+0x934>)
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	2202      	movs	r2, #2
 80016be:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80016c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80016c6:	fa92 f2a2 	rbit	r2, r2
 80016ca:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80016ce:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016d2:	fab2 f282 	clz	r2, r2
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	f042 0220 	orr.w	r2, r2, #32
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	f002 021f 	and.w	r2, r2, #31
 80016e2:	2101      	movs	r1, #1
 80016e4:	fa01 f202 	lsl.w	r2, r1, r2
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1ad      	bne.n	800164a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 8110 	beq.w	8001924 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001708:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d079      	beq.n	8001808 <HAL_RCC_OscConfig+0x760>
 8001714:	2301      	movs	r3, #1
 8001716:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800172a:	fab3 f383 	clz	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	4bab      	ldr	r3, [pc, #684]	; (80019e0 <HAL_RCC_OscConfig+0x938>)
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	461a      	mov	r2, r3
 800173a:	2301      	movs	r3, #1
 800173c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff f989 	bl	8000a54 <HAL_GetTick>
 8001742:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001746:	e00a      	b.n	800175e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001748:	f7ff f984 	bl	8000a54 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d902      	bls.n	800175e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	f000 bcdb 	b.w	8002114 <HAL_RCC_OscConfig+0x106c>
 800175e:	2302      	movs	r3, #2
 8001760:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001768:	fa93 f3a3 	rbit	r3, r3
 800176c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001774:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001778:	2202      	movs	r2, #2
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001780:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	fa93 f2a3 	rbit	r2, r3
 800178a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800179c:	2202      	movs	r2, #2
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	fa93 f2a3 	rbit	r2, r3
 80017ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80017b6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b8:	4b88      	ldr	r3, [pc, #544]	; (80019dc <HAL_RCC_OscConfig+0x934>)
 80017ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017c4:	2102      	movs	r1, #2
 80017c6:	6019      	str	r1, [r3, #0]
 80017c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	fa93 f1a3 	rbit	r1, r3
 80017d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017de:	6019      	str	r1, [r3, #0]
  return result;
 80017e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	fab3 f383 	clz	r3, r3
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	2101      	movs	r1, #1
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	4013      	ands	r3, r2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0a0      	beq.n	8001748 <HAL_RCC_OscConfig+0x6a0>
 8001806:	e08d      	b.n	8001924 <HAL_RCC_OscConfig+0x87c>
 8001808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001818:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	fa93 f2a3 	rbit	r2, r3
 8001822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001826:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800182a:	601a      	str	r2, [r3, #0]
  return result;
 800182c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001830:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001834:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001836:	fab3 f383 	clz	r3, r3
 800183a:	b2db      	uxtb	r3, r3
 800183c:	461a      	mov	r2, r3
 800183e:	4b68      	ldr	r3, [pc, #416]	; (80019e0 <HAL_RCC_OscConfig+0x938>)
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	461a      	mov	r2, r3
 8001846:	2300      	movs	r3, #0
 8001848:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7ff f903 	bl	8000a54 <HAL_GetTick>
 800184e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001852:	e00a      	b.n	800186a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001854:	f7ff f8fe 	bl	8000a54 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d902      	bls.n	800186a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	f000 bc55 	b.w	8002114 <HAL_RCC_OscConfig+0x106c>
 800186a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001872:	2202      	movs	r2, #2
 8001874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	fa93 f2a3 	rbit	r2, r3
 8001884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001888:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001892:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001896:	2202      	movs	r2, #2
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	fa93 f2a3 	rbit	r2, r3
 80018a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80018ba:	2202      	movs	r2, #2
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	fa93 f2a3 	rbit	r2, r3
 80018cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80018d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d6:	4b41      	ldr	r3, [pc, #260]	; (80019dc <HAL_RCC_OscConfig+0x934>)
 80018d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018e2:	2102      	movs	r1, #2
 80018e4:	6019      	str	r1, [r3, #0]
 80018e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	fa93 f1a3 	rbit	r1, r3
 80018f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80018fc:	6019      	str	r1, [r3, #0]
  return result;
 80018fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001902:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001912:	b2db      	uxtb	r3, r3
 8001914:	f003 031f 	and.w	r3, r3, #31
 8001918:	2101      	movs	r1, #1
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	4013      	ands	r3, r2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d197      	bne.n	8001854 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001928:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 81a1 	beq.w	8001c7c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001940:	4b26      	ldr	r3, [pc, #152]	; (80019dc <HAL_RCC_OscConfig+0x934>)
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d116      	bne.n	800197a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194c:	4b23      	ldr	r3, [pc, #140]	; (80019dc <HAL_RCC_OscConfig+0x934>)
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	4a22      	ldr	r2, [pc, #136]	; (80019dc <HAL_RCC_OscConfig+0x934>)
 8001952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001956:	61d3      	str	r3, [r2, #28]
 8001958:	4b20      	ldr	r3, [pc, #128]	; (80019dc <HAL_RCC_OscConfig+0x934>)
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001972:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001974:	2301      	movs	r3, #1
 8001976:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <HAL_RCC_OscConfig+0x93c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001982:	2b00      	cmp	r3, #0
 8001984:	d11a      	bne.n	80019bc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001986:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <HAL_RCC_OscConfig+0x93c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a16      	ldr	r2, [pc, #88]	; (80019e4 <HAL_RCC_OscConfig+0x93c>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001990:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001992:	f7ff f85f 	bl	8000a54 <HAL_GetTick>
 8001996:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199a:	e009      	b.n	80019b0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199c:	f7ff f85a 	bl	8000a54 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b64      	cmp	r3, #100	; 0x64
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e3b1      	b.n	8002114 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_RCC_OscConfig+0x93c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ef      	beq.n	800199c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d10d      	bne.n	80019e8 <HAL_RCC_OscConfig+0x940>
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <HAL_RCC_OscConfig+0x934>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a02      	ldr	r2, [pc, #8]	; (80019dc <HAL_RCC_OscConfig+0x934>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	e03c      	b.n	8001a54 <HAL_RCC_OscConfig+0x9ac>
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000
 80019e0:	10908120 	.word	0x10908120
 80019e4:	40007000 	.word	0x40007000
 80019e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10c      	bne.n	8001a12 <HAL_RCC_OscConfig+0x96a>
 80019f8:	4bc1      	ldr	r3, [pc, #772]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4ac0      	ldr	r2, [pc, #768]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	6213      	str	r3, [r2, #32]
 8001a04:	4bbe      	ldr	r3, [pc, #760]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4abd      	ldr	r2, [pc, #756]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 8001a0a:	f023 0304 	bic.w	r3, r3, #4
 8001a0e:	6213      	str	r3, [r2, #32]
 8001a10:	e020      	b.n	8001a54 <HAL_RCC_OscConfig+0x9ac>
 8001a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2b05      	cmp	r3, #5
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x994>
 8001a22:	4bb7      	ldr	r3, [pc, #732]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4ab6      	ldr	r2, [pc, #728]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	6213      	str	r3, [r2, #32]
 8001a2e:	4bb4      	ldr	r3, [pc, #720]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4ab3      	ldr	r2, [pc, #716]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6213      	str	r3, [r2, #32]
 8001a3a:	e00b      	b.n	8001a54 <HAL_RCC_OscConfig+0x9ac>
 8001a3c:	4bb0      	ldr	r3, [pc, #704]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4aaf      	ldr	r2, [pc, #700]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	6213      	str	r3, [r2, #32]
 8001a48:	4bad      	ldr	r3, [pc, #692]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4aac      	ldr	r2, [pc, #688]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 8001a4e:	f023 0304 	bic.w	r3, r3, #4
 8001a52:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 8081 	beq.w	8001b68 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a66:	f7fe fff5 	bl	8000a54 <HAL_GetTick>
 8001a6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6e:	e00b      	b.n	8001a88 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a70:	f7fe fff0 	bl	8000a54 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e345      	b.n	8002114 <HAL_RCC_OscConfig+0x106c>
 8001a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a90:	2202      	movs	r2, #2
 8001a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a98:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	fa93 f2a3 	rbit	r2, r3
 8001aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	fa93 f2a3 	rbit	r2, r3
 8001ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ace:	601a      	str	r2, [r3, #0]
  return result;
 8001ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ad8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	095b      	lsrs	r3, r3, #5
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d102      	bne.n	8001af4 <HAL_RCC_OscConfig+0xa4c>
 8001aee:	4b84      	ldr	r3, [pc, #528]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	e013      	b.n	8001b1c <HAL_RCC_OscConfig+0xa74>
 8001af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001afc:	2202      	movs	r2, #2
 8001afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b04:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	fa93 f2a3 	rbit	r2, r3
 8001b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b12:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	4b79      	ldr	r3, [pc, #484]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b20:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001b24:	2102      	movs	r1, #2
 8001b26:	6011      	str	r1, [r2, #0]
 8001b28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b2c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	fa92 f1a2 	rbit	r1, r2
 8001b36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b3a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b3e:	6011      	str	r1, [r2, #0]
  return result;
 8001b40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b44:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	fab2 f282 	clz	r2, r2
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	f002 021f 	and.w	r2, r2, #31
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d084      	beq.n	8001a70 <HAL_RCC_OscConfig+0x9c8>
 8001b66:	e07f      	b.n	8001c68 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b68:	f7fe ff74 	bl	8000a54 <HAL_GetTick>
 8001b6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b70:	e00b      	b.n	8001b8a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7fe ff6f 	bl	8000a54 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e2c4      	b.n	8002114 <HAL_RCC_OscConfig+0x106c>
 8001b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b92:	2202      	movs	r2, #2
 8001b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	fa93 f2a3 	rbit	r2, r3
 8001ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	fa93 f2a3 	rbit	r2, r3
 8001bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bcc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001bd0:	601a      	str	r2, [r3, #0]
  return result;
 8001bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001bda:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bdc:	fab3 f383 	clz	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	095b      	lsrs	r3, r3, #5
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	f043 0302 	orr.w	r3, r3, #2
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d102      	bne.n	8001bf6 <HAL_RCC_OscConfig+0xb4e>
 8001bf0:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	e013      	b.n	8001c1e <HAL_RCC_OscConfig+0xb76>
 8001bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001bfe:	2202      	movs	r2, #2
 8001c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c06:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	fa93 f2a3 	rbit	r2, r3
 8001c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c14:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c22:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001c26:	2102      	movs	r1, #2
 8001c28:	6011      	str	r1, [r2, #0]
 8001c2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c2e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	fa92 f1a2 	rbit	r1, r2
 8001c38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c3c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c40:	6011      	str	r1, [r2, #0]
  return result;
 8001c42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c46:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	fab2 f282 	clz	r2, r2
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	f002 021f 	and.w	r2, r2, #31
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d184      	bne.n	8001b72 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c68:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d105      	bne.n	8001c7c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c70:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	4a22      	ldr	r2, [pc, #136]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 8001c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 8242 	beq.w	8002112 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_RCC_OscConfig+0xc58>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	f000 8213 	beq.w	80020c2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	f040 8162 	bne.w	8001f72 <HAL_RCC_OscConfig+0xeca>
 8001cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001cb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	fa93 f2a3 	rbit	r2, r3
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001cd2:	601a      	str	r2, [r3, #0]
  return result;
 8001cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001cdc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ce8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7fe feae 	bl	8000a54 <HAL_GetTick>
 8001cf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfc:	e00c      	b.n	8001d18 <HAL_RCC_OscConfig+0xc70>
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d04:	f7fe fea6 	bl	8000a54 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e1fd      	b.n	8002114 <HAL_RCC_OscConfig+0x106c>
 8001d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	fa93 f2a3 	rbit	r2, r3
 8001d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d38:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d3c:	601a      	str	r2, [r3, #0]
  return result;
 8001d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d42:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d102      	bne.n	8001d62 <HAL_RCC_OscConfig+0xcba>
 8001d5c:	4bb0      	ldr	r3, [pc, #704]	; (8002020 <HAL_RCC_OscConfig+0xf78>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	e027      	b.n	8001db2 <HAL_RCC_OscConfig+0xd0a>
 8001d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d66:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d74:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	fa93 f2a3 	rbit	r2, r3
 8001d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d82:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	fa93 f2a3 	rbit	r2, r3
 8001da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	4b9c      	ldr	r3, [pc, #624]	; (8002020 <HAL_RCC_OscConfig+0xf78>)
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001db6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001dba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dbe:	6011      	str	r1, [r2, #0]
 8001dc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dc4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	fa92 f1a2 	rbit	r1, r2
 8001dce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dd2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001dd6:	6011      	str	r1, [r2, #0]
  return result;
 8001dd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ddc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	fab2 f282 	clz	r2, r2
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	f042 0220 	orr.w	r2, r2, #32
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	f002 021f 	and.w	r2, r2, #31
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f202 	lsl.w	r2, r1, r2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d182      	bne.n	8001d04 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dfe:	4b88      	ldr	r3, [pc, #544]	; (8002020 <HAL_RCC_OscConfig+0xf78>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	430b      	orrs	r3, r1
 8001e20:	497f      	ldr	r1, [pc, #508]	; (8002020 <HAL_RCC_OscConfig+0xf78>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
 8001e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e38:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	fa93 f2a3 	rbit	r2, r3
 8001e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e46:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e4a:	601a      	str	r2, [r3, #0]
  return result;
 8001e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e50:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e54:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	461a      	mov	r2, r3
 8001e68:	2301      	movs	r3, #1
 8001e6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7fe fdf2 	bl	8000a54 <HAL_GetTick>
 8001e70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e74:	e009      	b.n	8001e8a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e76:	f7fe fded 	bl	8000a54 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e144      	b.n	8002114 <HAL_RCC_OscConfig+0x106c>
 8001e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	fa93 f2a3 	rbit	r2, r3
 8001ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eaa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001eae:	601a      	str	r2, [r3, #0]
  return result;
 8001eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001eb8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	095b      	lsrs	r3, r3, #5
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d102      	bne.n	8001ed4 <HAL_RCC_OscConfig+0xe2c>
 8001ece:	4b54      	ldr	r3, [pc, #336]	; (8002020 <HAL_RCC_OscConfig+0xf78>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	e027      	b.n	8001f24 <HAL_RCC_OscConfig+0xe7c>
 8001ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001edc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ee0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	fa93 f2a3 	rbit	r2, r3
 8001ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001f02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	fa93 f2a3 	rbit	r2, r3
 8001f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	4b3f      	ldr	r3, [pc, #252]	; (8002020 <HAL_RCC_OscConfig+0xf78>)
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f28:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001f2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f30:	6011      	str	r1, [r2, #0]
 8001f32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f36:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	fa92 f1a2 	rbit	r1, r2
 8001f40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f44:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f48:	6011      	str	r1, [r2, #0]
  return result;
 8001f4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f4e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	fab2 f282 	clz	r2, r2
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	f042 0220 	orr.w	r2, r2, #32
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	f002 021f 	and.w	r2, r2, #31
 8001f64:	2101      	movs	r1, #1
 8001f66:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d082      	beq.n	8001e76 <HAL_RCC_OscConfig+0xdce>
 8001f70:	e0cf      	b.n	8002112 <HAL_RCC_OscConfig+0x106a>
 8001f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f76:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f84:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	fa93 f2a3 	rbit	r2, r3
 8001f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f92:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f96:	601a      	str	r2, [r3, #0]
  return result;
 8001f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001fa0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7fe fd4c 	bl	8000a54 <HAL_GetTick>
 8001fbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc0:	e009      	b.n	8001fd6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7fe fd47 	bl	8000a54 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e09e      	b.n	8002114 <HAL_RCC_OscConfig+0x106c>
 8001fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fda:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001fde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fe2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	fa93 f2a3 	rbit	r2, r3
 8001ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ffa:	601a      	str	r2, [r3, #0]
  return result;
 8001ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002000:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002004:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	095b      	lsrs	r3, r3, #5
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d104      	bne.n	8002024 <HAL_RCC_OscConfig+0xf7c>
 800201a:	4b01      	ldr	r3, [pc, #4]	; (8002020 <HAL_RCC_OscConfig+0xf78>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	e029      	b.n	8002074 <HAL_RCC_OscConfig+0xfcc>
 8002020:	40021000 	.word	0x40021000
 8002024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002028:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800202c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002036:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	fa93 f2a3 	rbit	r2, r3
 8002040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002044:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	fa93 f2a3 	rbit	r2, r3
 8002066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_RCC_OscConfig+0x1078>)
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002078:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800207c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002080:	6011      	str	r1, [r2, #0]
 8002082:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002086:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	fa92 f1a2 	rbit	r1, r2
 8002090:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002094:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002098:	6011      	str	r1, [r2, #0]
  return result;
 800209a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800209e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	fab2 f282 	clz	r2, r2
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	f042 0220 	orr.w	r2, r2, #32
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	f002 021f 	and.w	r2, r2, #31
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d180      	bne.n	8001fc2 <HAL_RCC_OscConfig+0xf1a>
 80020c0:	e027      	b.n	8002112 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e01e      	b.n	8002114 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_RCC_OscConfig+0x1078>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020e2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d10b      	bne.n	800210e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80020f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002102:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800210a:	429a      	cmp	r2, r3
 800210c:	d001      	beq.n	8002112 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000

08002124 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b09e      	sub	sp, #120	; 0x78
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e162      	b.n	8002402 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800213c:	4b90      	ldr	r3, [pc, #576]	; (8002380 <HAL_RCC_ClockConfig+0x25c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d910      	bls.n	800216c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214a:	4b8d      	ldr	r3, [pc, #564]	; (8002380 <HAL_RCC_ClockConfig+0x25c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 0207 	bic.w	r2, r3, #7
 8002152:	498b      	ldr	r1, [pc, #556]	; (8002380 <HAL_RCC_ClockConfig+0x25c>)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b89      	ldr	r3, [pc, #548]	; (8002380 <HAL_RCC_ClockConfig+0x25c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e14a      	b.n	8002402 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002178:	4b82      	ldr	r3, [pc, #520]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	497f      	ldr	r1, [pc, #508]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 8002186:	4313      	orrs	r3, r2
 8002188:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 80dc 	beq.w	8002350 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d13c      	bne.n	800221a <HAL_RCC_ClockConfig+0xf6>
 80021a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b0:	fab3 f383 	clz	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d102      	bne.n	80021ca <HAL_RCC_ClockConfig+0xa6>
 80021c4:	4b6f      	ldr	r3, [pc, #444]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	e00f      	b.n	80021ea <HAL_RCC_ClockConfig+0xc6>
 80021ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	667b      	str	r3, [r7, #100]	; 0x64
 80021d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021dc:	663b      	str	r3, [r7, #96]	; 0x60
 80021de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021e6:	4b67      	ldr	r3, [pc, #412]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80021f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021f2:	fa92 f2a2 	rbit	r2, r2
 80021f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80021f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021fa:	fab2 f282 	clz	r2, r2
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	f042 0220 	orr.w	r2, r2, #32
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	f002 021f 	and.w	r2, r2, #31
 800220a:	2101      	movs	r1, #1
 800220c:	fa01 f202 	lsl.w	r2, r1, r2
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d17b      	bne.n	800230e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0f3      	b.n	8002402 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d13c      	bne.n	800229c <HAL_RCC_ClockConfig+0x178>
 8002222:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002226:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	095b      	lsrs	r3, r3, #5
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d102      	bne.n	800224c <HAL_RCC_ClockConfig+0x128>
 8002246:	4b4f      	ldr	r3, [pc, #316]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	e00f      	b.n	800226c <HAL_RCC_ClockConfig+0x148>
 800224c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002250:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	647b      	str	r3, [r7, #68]	; 0x44
 800225a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800225e:	643b      	str	r3, [r7, #64]	; 0x40
 8002260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002268:	4b46      	ldr	r3, [pc, #280]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002270:	63ba      	str	r2, [r7, #56]	; 0x38
 8002272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002274:	fa92 f2a2 	rbit	r2, r2
 8002278:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800227a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800227c:	fab2 f282 	clz	r2, r2
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	f042 0220 	orr.w	r2, r2, #32
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	f002 021f 	and.w	r2, r2, #31
 800228c:	2101      	movs	r1, #1
 800228e:	fa01 f202 	lsl.w	r2, r1, r2
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d13a      	bne.n	800230e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0b2      	b.n	8002402 <HAL_RCC_ClockConfig+0x2de>
 800229c:	2302      	movs	r3, #2
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	095b      	lsrs	r3, r3, #5
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d102      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x1a0>
 80022be:	4b31      	ldr	r3, [pc, #196]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	e00d      	b.n	80022e0 <HAL_RCC_ClockConfig+0x1bc>
 80022c4:	2302      	movs	r3, #2
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
 80022d0:	2302      	movs	r3, #2
 80022d2:	623b      	str	r3, [r7, #32]
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	61fb      	str	r3, [r7, #28]
 80022dc:	4b29      	ldr	r3, [pc, #164]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	2202      	movs	r2, #2
 80022e2:	61ba      	str	r2, [r7, #24]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	fa92 f2a2 	rbit	r2, r2
 80022ea:	617a      	str	r2, [r7, #20]
  return result;
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	fab2 f282 	clz	r2, r2
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	f042 0220 	orr.w	r2, r2, #32
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	f002 021f 	and.w	r2, r2, #31
 80022fe:	2101      	movs	r1, #1
 8002300:	fa01 f202 	lsl.w	r2, r1, r2
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e079      	b.n	8002402 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230e:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f023 0203 	bic.w	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	491a      	ldr	r1, [pc, #104]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002320:	f7fe fb98 	bl	8000a54 <HAL_GetTick>
 8002324:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	e00a      	b.n	800233e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002328:	f7fe fb94 	bl	8000a54 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	; 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e061      	b.n	8002402 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 020c 	and.w	r2, r3, #12
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	429a      	cmp	r2, r3
 800234e:	d1eb      	bne.n	8002328 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCC_ClockConfig+0x25c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d214      	bcs.n	8002388 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <HAL_RCC_ClockConfig+0x25c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 0207 	bic.w	r2, r3, #7
 8002366:	4906      	ldr	r1, [pc, #24]	; (8002380 <HAL_RCC_ClockConfig+0x25c>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <HAL_RCC_ClockConfig+0x25c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d005      	beq.n	8002388 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e040      	b.n	8002402 <HAL_RCC_ClockConfig+0x2de>
 8002380:	40022000 	.word	0x40022000
 8002384:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_RCC_ClockConfig+0x2e8>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	491a      	ldr	r1, [pc, #104]	; (800240c <HAL_RCC_ClockConfig+0x2e8>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023b2:	4b16      	ldr	r3, [pc, #88]	; (800240c <HAL_RCC_ClockConfig+0x2e8>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4912      	ldr	r1, [pc, #72]	; (800240c <HAL_RCC_ClockConfig+0x2e8>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023c6:	f000 f829 	bl	800241c <HAL_RCC_GetSysClockFreq>
 80023ca:	4601      	mov	r1, r0
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_RCC_ClockConfig+0x2e8>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d4:	22f0      	movs	r2, #240	; 0xf0
 80023d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	fa92 f2a2 	rbit	r2, r2
 80023de:	60fa      	str	r2, [r7, #12]
  return result;
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	fab2 f282 	clz	r2, r2
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	40d3      	lsrs	r3, r2
 80023ea:	4a09      	ldr	r2, [pc, #36]	; (8002410 <HAL_RCC_ClockConfig+0x2ec>)
 80023ec:	5cd3      	ldrb	r3, [r2, r3]
 80023ee:	fa21 f303 	lsr.w	r3, r1, r3
 80023f2:	4a08      	ldr	r2, [pc, #32]	; (8002414 <HAL_RCC_ClockConfig+0x2f0>)
 80023f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <HAL_RCC_ClockConfig+0x2f4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fae6 	bl	80009cc <HAL_InitTick>
  
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3778      	adds	r7, #120	; 0x78
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	08005394 	.word	0x08005394
 8002414:	20000000 	.word	0x20000000
 8002418:	20000004 	.word	0x20000004

0800241c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	b08b      	sub	sp, #44	; 0x2c
 8002420:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	2300      	movs	r3, #0
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002436:	4b29      	ldr	r3, [pc, #164]	; (80024dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b04      	cmp	r3, #4
 8002444:	d002      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x30>
 8002446:	2b08      	cmp	r3, #8
 8002448:	d003      	beq.n	8002452 <HAL_RCC_GetSysClockFreq+0x36>
 800244a:	e03c      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800244c:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800244e:	623b      	str	r3, [r7, #32]
      break;
 8002450:	e03c      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002458:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800245c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	fa92 f2a2 	rbit	r2, r2
 8002464:	607a      	str	r2, [r7, #4]
  return result;
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	fab2 f282 	clz	r2, r2
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	40d3      	lsrs	r3, r2
 8002470:	4a1c      	ldr	r2, [pc, #112]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002476:	4b19      	ldr	r3, [pc, #100]	; (80024dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	220f      	movs	r2, #15
 8002480:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	fa92 f2a2 	rbit	r2, r2
 8002488:	60fa      	str	r2, [r7, #12]
  return result;
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	fab2 f282 	clz	r2, r2
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	40d3      	lsrs	r3, r2
 8002494:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002496:	5cd3      	ldrb	r3, [r2, r3]
 8002498:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024a4:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
 80024b4:	e004      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	4a0c      	ldr	r2, [pc, #48]	; (80024ec <HAL_RCC_GetSysClockFreq+0xd0>)
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	623b      	str	r3, [r7, #32]
      break;
 80024c4:	e002      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024c8:	623b      	str	r3, [r7, #32]
      break;
 80024ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024cc:	6a3b      	ldr	r3, [r7, #32]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	372c      	adds	r7, #44	; 0x2c
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000
 80024e0:	007a1200 	.word	0x007a1200
 80024e4:	080053ac 	.word	0x080053ac
 80024e8:	080053bc 	.word	0x080053bc
 80024ec:	003d0900 	.word	0x003d0900

080024f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <HAL_RCC_GetHCLKFreq+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000000 	.word	0x20000000

08002508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800250e:	f7ff ffef 	bl	80024f0 <HAL_RCC_GetHCLKFreq>
 8002512:	4601      	mov	r1, r0
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800251c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002520:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	fa92 f2a2 	rbit	r2, r2
 8002528:	603a      	str	r2, [r7, #0]
  return result;
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	fab2 f282 	clz	r2, r2
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	40d3      	lsrs	r3, r2
 8002534:	4a04      	ldr	r2, [pc, #16]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002536:	5cd3      	ldrb	r3, [r2, r3]
 8002538:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000
 8002548:	080053a4 	.word	0x080053a4

0800254c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002552:	f7ff ffcd 	bl	80024f0 <HAL_RCC_GetHCLKFreq>
 8002556:	4601      	mov	r1, r0
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002560:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002564:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	fa92 f2a2 	rbit	r2, r2
 800256c:	603a      	str	r2, [r7, #0]
  return result;
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	fab2 f282 	clz	r2, r2
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	40d3      	lsrs	r3, r2
 8002578:	4a04      	ldr	r2, [pc, #16]	; (800258c <HAL_RCC_GetPCLK2Freq+0x40>)
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000
 800258c:	080053a4 	.word	0x080053a4

08002590 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b092      	sub	sp, #72	; 0x48
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 80cd 	beq.w	800274e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b4:	4b86      	ldr	r3, [pc, #536]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10e      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c0:	4b83      	ldr	r3, [pc, #524]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	4a82      	ldr	r2, [pc, #520]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ca:	61d3      	str	r3, [r2, #28]
 80025cc:	4b80      	ldr	r3, [pc, #512]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025de:	4b7d      	ldr	r3, [pc, #500]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d118      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ea:	4b7a      	ldr	r3, [pc, #488]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a79      	ldr	r2, [pc, #484]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f6:	f7fe fa2d 	bl	8000a54 <HAL_GetTick>
 80025fa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fc:	e008      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fe:	f7fe fa29 	bl	8000a54 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b64      	cmp	r3, #100	; 0x64
 800260a:	d901      	bls.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e0db      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	4b70      	ldr	r3, [pc, #448]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800261c:	4b6c      	ldr	r3, [pc, #432]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002624:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d07d      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002634:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002636:	429a      	cmp	r2, r3
 8002638:	d076      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800263a:	4b65      	ldr	r3, [pc, #404]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002648:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	4b5e      	ldr	r3, [pc, #376]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	461a      	mov	r2, r3
 8002664:	2301      	movs	r3, #1
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800266c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002678:	fab3 f383 	clz	r3, r3
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	4b55      	ldr	r3, [pc, #340]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	461a      	mov	r2, r3
 8002688:	2300      	movs	r3, #0
 800268a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800268c:	4a50      	ldr	r2, [pc, #320]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800268e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002690:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d045      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7fe f9da 	bl	8000a54 <HAL_GetTick>
 80026a0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a2:	e00a      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a4:	f7fe f9d6 	bl	8000a54 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e086      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80026ba:	2302      	movs	r3, #2
 80026bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	2302      	movs	r3, #2
 80026c8:	623b      	str	r3, [r7, #32]
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	61fb      	str	r3, [r7, #28]
  return result;
 80026d2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d4:	fab3 f383 	clz	r3, r3
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f043 0302 	orr.w	r3, r3, #2
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d102      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80026e8:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	e007      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80026ee:	2302      	movs	r3, #2
 80026f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	fa93 f3a3 	rbit	r3, r3
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	4b35      	ldr	r3, [pc, #212]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	2202      	movs	r2, #2
 8002700:	613a      	str	r2, [r7, #16]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	fa92 f2a2 	rbit	r2, r2
 8002708:	60fa      	str	r2, [r7, #12]
  return result;
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	fab2 f282 	clz	r2, r2
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	f002 021f 	and.w	r2, r2, #31
 800271c:	2101      	movs	r1, #1
 800271e:	fa01 f202 	lsl.w	r2, r1, r2
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0bd      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002728:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4926      	ldr	r1, [pc, #152]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002736:	4313      	orrs	r3, r2
 8002738:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800273a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800273e:	2b01      	cmp	r3, #1
 8002740:	d105      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002742:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	4a22      	ldr	r2, [pc, #136]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d008      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800275a:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f023 0203 	bic.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	491a      	ldr	r1, [pc, #104]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002768:	4313      	orrs	r3, r2
 800276a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	f023 0210 	bic.w	r2, r3, #16
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4912      	ldr	r1, [pc, #72]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002786:	4313      	orrs	r3, r2
 8002788:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	490b      	ldr	r1, [pc, #44]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	4903      	ldr	r1, [pc, #12]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3748      	adds	r7, #72	; 0x48
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40007000 	.word	0x40007000
 80027d8:	10908100 	.word	0x10908100

080027dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e040      	b.n	8002870 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fd ff46 	bl	8000690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2224      	movs	r2, #36	; 0x24
 8002808:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0201 	bic.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fd8a 	bl	8003334 <UART_SetConfig>
 8002820:	4603      	mov	r3, r0
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e022      	b.n	8002870 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 feb4 	bl	80035a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002846:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002856:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 ff3b 	bl	80036e4 <UART_CheckIdleState>
 800286e:	4603      	mov	r3, r0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e048      	b.n	800291c <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fd fef8 	bl	8000690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2224      	movs	r2, #36	; 0x24
 80028a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0201 	bic.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fd3c 	bl	8003334 <UART_SetConfig>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e02a      	b.n	800291c <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fe66 	bl	80035a0 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80028f2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0208 	orr.w	r2, r2, #8
 8002902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fee5 	bl	80036e4 <UART_CheckIdleState>
 800291a:	4603      	mov	r3, r0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af02      	add	r7, sp, #8
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	4613      	mov	r3, r2
 8002932:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002938:	2b20      	cmp	r3, #32
 800293a:	f040 8082 	bne.w	8002a42 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <HAL_UART_Transmit+0x26>
 8002944:	88fb      	ldrh	r3, [r7, #6]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e07a      	b.n	8002a44 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_UART_Transmit+0x38>
 8002958:	2302      	movs	r3, #2
 800295a:	e073      	b.n	8002a44 <HAL_UART_Transmit+0x120>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2221      	movs	r2, #33	; 0x21
 8002970:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002972:	f7fe f86f 	bl	8000a54 <HAL_GetTick>
 8002976:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	88fa      	ldrh	r2, [r7, #6]
 800297c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	88fa      	ldrh	r2, [r7, #6]
 8002984:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002990:	d108      	bne.n	80029a4 <HAL_UART_Transmit+0x80>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d104      	bne.n	80029a4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	e003      	b.n	80029ac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80029b4:	e02d      	b.n	8002a12 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2200      	movs	r2, #0
 80029be:	2180      	movs	r1, #128	; 0x80
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 fed8 	bl	8003776 <UART_WaitOnFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e039      	b.n	8002a44 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10b      	bne.n	80029ee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	881a      	ldrh	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e2:	b292      	uxth	r2, r2
 80029e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	3302      	adds	r3, #2
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	e008      	b.n	8002a00 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	781a      	ldrb	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	b292      	uxth	r2, r2
 80029f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3301      	adds	r3, #1
 80029fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1cb      	bne.n	80029b6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2200      	movs	r2, #0
 8002a26:	2140      	movs	r1, #64	; 0x40
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 fea4 	bl	8003776 <UART_WaitOnFlagUntilTimeout>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e005      	b.n	8002a44 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e000      	b.n	8002a44 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002a42:	2302      	movs	r3, #2
  }
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3720      	adds	r7, #32
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	; 0x28
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	f040 80bf 	bne.w	8002be4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_UART_Receive+0x26>
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0b7      	b.n	8002be6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_UART_Receive+0x38>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e0b0      	b.n	8002be6 <HAL_UART_Receive+0x19a>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2222      	movs	r2, #34	; 0x22
 8002a98:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aa0:	f7fd ffd8 	bl	8000a54 <HAL_GetTick>
 8002aa4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	88fa      	ldrh	r2, [r7, #6]
 8002aaa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	88fa      	ldrh	r2, [r7, #6]
 8002ab2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002abe:	d10e      	bne.n	8002ade <HAL_UART_Receive+0x92>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d105      	bne.n	8002ad4 <HAL_UART_Receive+0x88>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002ace:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ad2:	e02d      	b.n	8002b30 <HAL_UART_Receive+0xe4>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	22ff      	movs	r2, #255	; 0xff
 8002ad8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002adc:	e028      	b.n	8002b30 <HAL_UART_Receive+0xe4>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10d      	bne.n	8002b02 <HAL_UART_Receive+0xb6>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d104      	bne.n	8002af8 <HAL_UART_Receive+0xac>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	22ff      	movs	r2, #255	; 0xff
 8002af2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002af6:	e01b      	b.n	8002b30 <HAL_UART_Receive+0xe4>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	227f      	movs	r2, #127	; 0x7f
 8002afc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b00:	e016      	b.n	8002b30 <HAL_UART_Receive+0xe4>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b0a:	d10d      	bne.n	8002b28 <HAL_UART_Receive+0xdc>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d104      	bne.n	8002b1e <HAL_UART_Receive+0xd2>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	227f      	movs	r2, #127	; 0x7f
 8002b18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b1c:	e008      	b.n	8002b30 <HAL_UART_Receive+0xe4>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	223f      	movs	r2, #63	; 0x3f
 8002b22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b26:	e003      	b.n	8002b30 <HAL_UART_Receive+0xe4>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b36:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b40:	d108      	bne.n	8002b54 <HAL_UART_Receive+0x108>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d104      	bne.n	8002b54 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	e003      	b.n	8002b5c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002b64:	e033      	b.n	8002bce <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2120      	movs	r1, #32
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fe00 	bl	8003776 <UART_WaitOnFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e032      	b.n	8002be6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10c      	bne.n	8002ba0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	8a7b      	ldrh	r3, [r7, #18]
 8002b90:	4013      	ands	r3, r2
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	e00d      	b.n	8002bbc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	8a7b      	ldrh	r3, [r7, #18]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	4013      	ands	r3, r2
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1c5      	bne.n	8002b66 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e000      	b.n	8002be6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002be4:	2302      	movs	r3, #2
  }
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3720      	adds	r7, #32
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b0ba      	sub	sp, #232	; 0xe8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c1e:	4013      	ands	r3, r2
 8002c20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002c24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d115      	bne.n	8002c58 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00f      	beq.n	8002c58 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d009      	beq.n	8002c58 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 82a3 	beq.w	8003194 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	4798      	blx	r3
      }
      return;
 8002c56:	e29d      	b.n	8003194 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002c58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8117 	beq.w	8002e90 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c72:	4b85      	ldr	r3, [pc, #532]	; (8002e88 <HAL_UART_IRQHandler+0x298>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 810a 	beq.w	8002e90 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d011      	beq.n	8002cac <HAL_UART_IRQHandler+0xbc>
 8002c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00b      	beq.n	8002cac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ca2:	f043 0201 	orr.w	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d011      	beq.n	8002cdc <HAL_UART_IRQHandler+0xec>
 8002cb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00b      	beq.n	8002cdc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cd2:	f043 0204 	orr.w	r2, r3, #4
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d011      	beq.n	8002d0c <HAL_UART_IRQHandler+0x11c>
 8002ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00b      	beq.n	8002d0c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d02:	f043 0202 	orr.w	r2, r3, #2
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d017      	beq.n	8002d48 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d105      	bne.n	8002d30 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d28:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00b      	beq.n	8002d48 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2208      	movs	r2, #8
 8002d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d3e:	f043 0208 	orr.w	r2, r3, #8
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d012      	beq.n	8002d7a <HAL_UART_IRQHandler+0x18a>
 8002d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00c      	beq.n	8002d7a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d70:	f043 0220 	orr.w	r2, r3, #32
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 8209 	beq.w	8003198 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00d      	beq.n	8002dae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc2:	2b40      	cmp	r3, #64	; 0x40
 8002dc4:	d005      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002dc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d04f      	beq.n	8002e72 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fd93 	bl	80038fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	2b40      	cmp	r3, #64	; 0x40
 8002de4:	d141      	bne.n	8002e6a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3308      	adds	r3, #8
 8002dec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002df4:	e853 3f00 	ldrex	r3, [r3]
 8002df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3308      	adds	r3, #8
 8002e0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e22:	e841 2300 	strex	r3, r2, [r1]
 8002e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1d9      	bne.n	8002de6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d013      	beq.n	8002e62 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	4a13      	ldr	r2, [pc, #76]	; (8002e8c <HAL_UART_IRQHandler+0x29c>)
 8002e40:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd ff7e 	bl	8000d48 <HAL_DMA_Abort_IT>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d017      	beq.n	8002e82 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e60:	e00f      	b.n	8002e82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f9ac 	bl	80031c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e68:	e00b      	b.n	8002e82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f9a8 	bl	80031c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e70:	e007      	b.n	8002e82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f9a4 	bl	80031c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002e80:	e18a      	b.n	8003198 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e82:	bf00      	nop
    return;
 8002e84:	e188      	b.n	8003198 <HAL_UART_IRQHandler+0x5a8>
 8002e86:	bf00      	nop
 8002e88:	04000120 	.word	0x04000120
 8002e8c:	080039c5 	.word	0x080039c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	f040 8143 	bne.w	8003120 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 813c 	beq.w	8003120 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8135 	beq.w	8003120 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2210      	movs	r2, #16
 8002ebc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec8:	2b40      	cmp	r3, #64	; 0x40
 8002eca:	f040 80b1 	bne.w	8003030 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002eda:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 815c 	beq.w	800319c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002eea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	f080 8154 	bcs.w	800319c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002efa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	f000 8085 	beq.w	8003014 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f16:	e853 3f00 	ldrex	r3, [r3]
 8002f1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f38:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f44:	e841 2300 	strex	r3, r2, [r1]
 8002f48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1da      	bne.n	8002f0a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3308      	adds	r3, #8
 8002f5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f5e:	e853 3f00 	ldrex	r3, [r3]
 8002f62:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f66:	f023 0301 	bic.w	r3, r3, #1
 8002f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3308      	adds	r3, #8
 8002f74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f78:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f7c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f84:	e841 2300 	strex	r3, r2, [r1]
 8002f88:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e1      	bne.n	8002f54 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3308      	adds	r3, #8
 8002f96:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f9a:	e853 3f00 	ldrex	r3, [r3]
 8002f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3308      	adds	r3, #8
 8002fb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fb4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fbc:	e841 2300 	strex	r3, r2, [r1]
 8002fc0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e3      	bne.n	8002f90 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fdc:	e853 3f00 	ldrex	r3, [r3]
 8002fe0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe4:	f023 0310 	bic.w	r3, r3, #16
 8002fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ff6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ff8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ffc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ffe:	e841 2300 	strex	r3, r2, [r1]
 8003002:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1e4      	bne.n	8002fd4 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd fe61 	bl	8000cd6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003020:	b29b      	uxth	r3, r3
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	b29b      	uxth	r3, r3
 8003026:	4619      	mov	r1, r3
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f8d3 	bl	80031d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800302e:	e0b5      	b.n	800319c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800303c:	b29b      	uxth	r3, r3
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80a7 	beq.w	80031a0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003052:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 80a2 	beq.w	80031a0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003064:	e853 3f00 	ldrex	r3, [r3]
 8003068:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800306a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003070:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800307e:	647b      	str	r3, [r7, #68]	; 0x44
 8003080:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003082:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003084:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003086:	e841 2300 	strex	r3, r2, [r1]
 800308a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800308c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1e4      	bne.n	800305c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3308      	adds	r3, #8
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	e853 3f00 	ldrex	r3, [r3]
 80030a0:	623b      	str	r3, [r7, #32]
   return(result);
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3308      	adds	r3, #8
 80030b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030b6:	633a      	str	r2, [r7, #48]	; 0x30
 80030b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e3      	bne.n	8003092 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	e853 3f00 	ldrex	r3, [r3]
 80030e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f023 0310 	bic.w	r3, r3, #16
 80030f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030fe:	61fb      	str	r3, [r7, #28]
 8003100:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003102:	69b9      	ldr	r1, [r7, #24]
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	e841 2300 	strex	r3, r2, [r1]
 800310a:	617b      	str	r3, [r7, #20]
   return(result);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1e4      	bne.n	80030dc <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003112:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003116:	4619      	mov	r1, r3
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f85b 	bl	80031d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800311e:	e03f      	b.n	80031a0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00e      	beq.n	800314a <HAL_UART_IRQHandler+0x55a>
 800312c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003140:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fc7e 	bl	8003a44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003148:	e02d      	b.n	80031a6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800314a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00e      	beq.n	8003174 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800315a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315e:	2b00      	cmp	r3, #0
 8003160:	d008      	beq.n	8003174 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01c      	beq.n	80031a4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4798      	blx	r3
    }
    return;
 8003172:	e017      	b.n	80031a4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d012      	beq.n	80031a6 <HAL_UART_IRQHandler+0x5b6>
 8003180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00c      	beq.n	80031a6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fc2f 	bl	80039f0 <UART_EndTransmit_IT>
    return;
 8003192:	e008      	b.n	80031a6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003194:	bf00      	nop
 8003196:	e006      	b.n	80031a6 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003198:	bf00      	nop
 800319a:	e004      	b.n	80031a6 <HAL_UART_IRQHandler+0x5b6>
      return;
 800319c:	bf00      	nop
 800319e:	e002      	b.n	80031a6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80031a0:	bf00      	nop
 80031a2:	e000      	b.n	80031a6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80031a4:	bf00      	nop
  }

}
 80031a6:	37e8      	adds	r7, #232	; 0xe8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b08f      	sub	sp, #60	; 0x3c
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_HalfDuplex_EnableTransmitter+0x16>
 80031fe:	2302      	movs	r3, #2
 8003200:	e040      	b.n	8003284 <HAL_HalfDuplex_EnableTransmitter+0x98>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2224      	movs	r2, #36	; 0x24
 800320e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	e853 3f00 	ldrex	r3, [r3]
 800321c:	61fb      	str	r3, [r7, #28]
   return(result);
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	f023 030c 	bic.w	r3, r3, #12
 8003224:	637b      	str	r3, [r7, #52]	; 0x34
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003230:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003232:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003236:	e841 2300 	strex	r3, r2, [r1]
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1e6      	bne.n	8003210 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	e853 3f00 	ldrex	r3, [r3]
 800324e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f043 0308 	orr.w	r3, r3, #8
 8003256:	633b      	str	r3, [r7, #48]	; 0x30
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	61bb      	str	r3, [r7, #24]
 8003262:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003264:	6979      	ldr	r1, [r7, #20]
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	e841 2300 	strex	r3, r2, [r1]
 800326c:	613b      	str	r3, [r7, #16]
   return(result);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e6      	bne.n	8003242 <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	373c      	adds	r7, #60	; 0x3c
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8003290:	b480      	push	{r7}
 8003292:	b08f      	sub	sp, #60	; 0x3c
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_HalfDuplex_EnableReceiver+0x16>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e040      	b.n	8003328 <HAL_HalfDuplex_EnableReceiver+0x98>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2224      	movs	r2, #36	; 0x24
 80032b2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	e853 3f00 	ldrex	r3, [r3]
 80032c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f023 030c 	bic.w	r3, r3, #12
 80032c8:	637b      	str	r3, [r7, #52]	; 0x34
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032d4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032da:	e841 2300 	strex	r3, r2, [r1]
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1e6      	bne.n	80032b4 <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	e853 3f00 	ldrex	r3, [r3]
 80032f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f043 0304 	orr.w	r3, r3, #4
 80032fa:	633b      	str	r3, [r7, #48]	; 0x30
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	6979      	ldr	r1, [r7, #20]
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	e841 2300 	strex	r3, r2, [r1]
 8003310:	613b      	str	r3, [r7, #16]
   return(result);
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e6      	bne.n	80032e6 <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	373c      	adds	r7, #60	; 0x3c
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4b8a      	ldr	r3, [pc, #552]	; (8003588 <UART_SetConfig+0x254>)
 8003360:	4013      	ands	r3, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6812      	ldr	r2, [r2, #0]
 8003366:	6979      	ldr	r1, [r7, #20]
 8003368:	430b      	orrs	r3, r1
 800336a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a78      	ldr	r2, [pc, #480]	; (800358c <UART_SetConfig+0x258>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d120      	bne.n	80033f2 <UART_SetConfig+0xbe>
 80033b0:	4b77      	ldr	r3, [pc, #476]	; (8003590 <UART_SetConfig+0x25c>)
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	2b03      	cmp	r3, #3
 80033ba:	d817      	bhi.n	80033ec <UART_SetConfig+0xb8>
 80033bc:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <UART_SetConfig+0x90>)
 80033be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c2:	bf00      	nop
 80033c4:	080033d5 	.word	0x080033d5
 80033c8:	080033e1 	.word	0x080033e1
 80033cc:	080033e7 	.word	0x080033e7
 80033d0:	080033db 	.word	0x080033db
 80033d4:	2300      	movs	r3, #0
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	e01d      	b.n	8003416 <UART_SetConfig+0xe2>
 80033da:	2302      	movs	r3, #2
 80033dc:	77fb      	strb	r3, [r7, #31]
 80033de:	e01a      	b.n	8003416 <UART_SetConfig+0xe2>
 80033e0:	2304      	movs	r3, #4
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e017      	b.n	8003416 <UART_SetConfig+0xe2>
 80033e6:	2308      	movs	r3, #8
 80033e8:	77fb      	strb	r3, [r7, #31]
 80033ea:	e014      	b.n	8003416 <UART_SetConfig+0xe2>
 80033ec:	2310      	movs	r3, #16
 80033ee:	77fb      	strb	r3, [r7, #31]
 80033f0:	e011      	b.n	8003416 <UART_SetConfig+0xe2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a67      	ldr	r2, [pc, #412]	; (8003594 <UART_SetConfig+0x260>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d102      	bne.n	8003402 <UART_SetConfig+0xce>
 80033fc:	2300      	movs	r3, #0
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e009      	b.n	8003416 <UART_SetConfig+0xe2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a64      	ldr	r2, [pc, #400]	; (8003598 <UART_SetConfig+0x264>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d102      	bne.n	8003412 <UART_SetConfig+0xde>
 800340c:	2300      	movs	r3, #0
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e001      	b.n	8003416 <UART_SetConfig+0xe2>
 8003412:	2310      	movs	r3, #16
 8003414:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341e:	d15b      	bne.n	80034d8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003420:	7ffb      	ldrb	r3, [r7, #31]
 8003422:	2b08      	cmp	r3, #8
 8003424:	d827      	bhi.n	8003476 <UART_SetConfig+0x142>
 8003426:	a201      	add	r2, pc, #4	; (adr r2, 800342c <UART_SetConfig+0xf8>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	08003451 	.word	0x08003451
 8003430:	08003459 	.word	0x08003459
 8003434:	08003461 	.word	0x08003461
 8003438:	08003477 	.word	0x08003477
 800343c:	08003467 	.word	0x08003467
 8003440:	08003477 	.word	0x08003477
 8003444:	08003477 	.word	0x08003477
 8003448:	08003477 	.word	0x08003477
 800344c:	0800346f 	.word	0x0800346f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003450:	f7ff f85a 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 8003454:	61b8      	str	r0, [r7, #24]
        break;
 8003456:	e013      	b.n	8003480 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003458:	f7ff f878 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 800345c:	61b8      	str	r0, [r7, #24]
        break;
 800345e:	e00f      	b.n	8003480 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003460:	4b4e      	ldr	r3, [pc, #312]	; (800359c <UART_SetConfig+0x268>)
 8003462:	61bb      	str	r3, [r7, #24]
        break;
 8003464:	e00c      	b.n	8003480 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003466:	f7fe ffd9 	bl	800241c <HAL_RCC_GetSysClockFreq>
 800346a:	61b8      	str	r0, [r7, #24]
        break;
 800346c:	e008      	b.n	8003480 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800346e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003472:	61bb      	str	r3, [r7, #24]
        break;
 8003474:	e004      	b.n	8003480 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	77bb      	strb	r3, [r7, #30]
        break;
 800347e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d074      	beq.n	8003570 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	005a      	lsls	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	085b      	lsrs	r3, r3, #1
 8003490:	441a      	add	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	b29b      	uxth	r3, r3
 800349c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b0f      	cmp	r3, #15
 80034a2:	d916      	bls.n	80034d2 <UART_SetConfig+0x19e>
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034aa:	d212      	bcs.n	80034d2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f023 030f 	bic.w	r3, r3, #15
 80034b4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	085b      	lsrs	r3, r3, #1
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	89fb      	ldrh	r3, [r7, #14]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	89fa      	ldrh	r2, [r7, #14]
 80034ce:	60da      	str	r2, [r3, #12]
 80034d0:	e04e      	b.n	8003570 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	77bb      	strb	r3, [r7, #30]
 80034d6:	e04b      	b.n	8003570 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034d8:	7ffb      	ldrb	r3, [r7, #31]
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d827      	bhi.n	800352e <UART_SetConfig+0x1fa>
 80034de:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <UART_SetConfig+0x1b0>)
 80034e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e4:	08003509 	.word	0x08003509
 80034e8:	08003511 	.word	0x08003511
 80034ec:	08003519 	.word	0x08003519
 80034f0:	0800352f 	.word	0x0800352f
 80034f4:	0800351f 	.word	0x0800351f
 80034f8:	0800352f 	.word	0x0800352f
 80034fc:	0800352f 	.word	0x0800352f
 8003500:	0800352f 	.word	0x0800352f
 8003504:	08003527 	.word	0x08003527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003508:	f7fe fffe 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 800350c:	61b8      	str	r0, [r7, #24]
        break;
 800350e:	e013      	b.n	8003538 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003510:	f7ff f81c 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 8003514:	61b8      	str	r0, [r7, #24]
        break;
 8003516:	e00f      	b.n	8003538 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003518:	4b20      	ldr	r3, [pc, #128]	; (800359c <UART_SetConfig+0x268>)
 800351a:	61bb      	str	r3, [r7, #24]
        break;
 800351c:	e00c      	b.n	8003538 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800351e:	f7fe ff7d 	bl	800241c <HAL_RCC_GetSysClockFreq>
 8003522:	61b8      	str	r0, [r7, #24]
        break;
 8003524:	e008      	b.n	8003538 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800352a:	61bb      	str	r3, [r7, #24]
        break;
 800352c:	e004      	b.n	8003538 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	77bb      	strb	r3, [r7, #30]
        break;
 8003536:	bf00      	nop
    }

    if (pclk != 0U)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d018      	beq.n	8003570 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	085a      	lsrs	r2, r3, #1
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	441a      	add	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003550:	b29b      	uxth	r3, r3
 8003552:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	2b0f      	cmp	r3, #15
 8003558:	d908      	bls.n	800356c <UART_SetConfig+0x238>
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003560:	d204      	bcs.n	800356c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	e001      	b.n	8003570 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800357c:	7fbb      	ldrb	r3, [r7, #30]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3720      	adds	r7, #32
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	efff69f3 	.word	0xefff69f3
 800358c:	40013800 	.word	0x40013800
 8003590:	40021000 	.word	0x40021000
 8003594:	40004400 	.word	0x40004400
 8003598:	40004800 	.word	0x40004800
 800359c:	007a1200 	.word	0x007a1200

080035a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d01a      	beq.n	80036b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800369e:	d10a      	bne.n	80036b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	605a      	str	r2, [r3, #4]
  }
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036f4:	f7fd f9ae 	bl	8000a54 <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b08      	cmp	r3, #8
 8003706:	d10e      	bne.n	8003726 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f82d 	bl	8003776 <UART_WaitOnFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e023      	b.n	800376e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b04      	cmp	r3, #4
 8003732:	d10e      	bne.n	8003752 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f817 	bl	8003776 <UART_WaitOnFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e00d      	b.n	800376e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2220      	movs	r2, #32
 8003756:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b09c      	sub	sp, #112	; 0x70
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	603b      	str	r3, [r7, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003786:	e0a5      	b.n	80038d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800378e:	f000 80a1 	beq.w	80038d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003792:	f7fd f95f 	bl	8000a54 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80037a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d13e      	bne.n	8003826 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b0:	e853 3f00 	ldrex	r3, [r3]
 80037b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037bc:	667b      	str	r3, [r7, #100]	; 0x64
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e6      	bne.n	80037a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3308      	adds	r3, #8
 80037e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	663b      	str	r3, [r7, #96]	; 0x60
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3308      	adds	r3, #8
 80037f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80037fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003802:	e841 2300 	strex	r3, r2, [r1]
 8003806:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1e5      	bne.n	80037da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2220      	movs	r2, #32
 8003812:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e067      	b.n	80038f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d04f      	beq.n	80038d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800383e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003842:	d147      	bne.n	80038d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800384c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003856:	e853 3f00 	ldrex	r3, [r3]
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003862:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800386c:	637b      	str	r3, [r7, #52]	; 0x34
 800386e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003874:	e841 2300 	strex	r3, r2, [r1]
 8003878:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e6      	bne.n	800384e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3308      	adds	r3, #8
 8003886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	e853 3f00 	ldrex	r3, [r3]
 800388e:	613b      	str	r3, [r7, #16]
   return(result);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f023 0301 	bic.w	r3, r3, #1
 8003896:	66bb      	str	r3, [r7, #104]	; 0x68
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3308      	adds	r3, #8
 800389e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038a0:	623a      	str	r2, [r7, #32]
 80038a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a4:	69f9      	ldr	r1, [r7, #28]
 80038a6:	6a3a      	ldr	r2, [r7, #32]
 80038a8:	e841 2300 	strex	r3, r2, [r1]
 80038ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e5      	bne.n	8003880 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2220      	movs	r2, #32
 80038be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e010      	b.n	80038f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	4013      	ands	r3, r2
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	bf0c      	ite	eq
 80038e4:	2301      	moveq	r3, #1
 80038e6:	2300      	movne	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	461a      	mov	r2, r3
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	f43f af4a 	beq.w	8003788 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3770      	adds	r7, #112	; 0x70
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038fe:	b480      	push	{r7}
 8003900:	b095      	sub	sp, #84	; 0x54
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390e:	e853 3f00 	ldrex	r3, [r3]
 8003912:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003916:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800391a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003924:	643b      	str	r3, [r7, #64]	; 0x40
 8003926:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003928:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800392a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800392c:	e841 2300 	strex	r3, r2, [r1]
 8003930:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e6      	bne.n	8003906 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3308      	adds	r3, #8
 800393e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	e853 3f00 	ldrex	r3, [r3]
 8003946:	61fb      	str	r3, [r7, #28]
   return(result);
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3308      	adds	r3, #8
 8003956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003958:	62fa      	str	r2, [r7, #44]	; 0x2c
 800395a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800395e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e5      	bne.n	8003938 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003970:	2b01      	cmp	r3, #1
 8003972:	d118      	bne.n	80039a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	60bb      	str	r3, [r7, #8]
   return(result);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f023 0310 	bic.w	r3, r3, #16
 8003988:	647b      	str	r3, [r7, #68]	; 0x44
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003996:	6979      	ldr	r1, [r7, #20]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	e841 2300 	strex	r3, r2, [r1]
 800399e:	613b      	str	r3, [r7, #16]
   return(result);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1e6      	bne.n	8003974 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80039b8:	bf00      	nop
 80039ba:	3754      	adds	r7, #84	; 0x54
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f7ff fbec 	bl	80031c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039e8:	bf00      	nop
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	6979      	ldr	r1, [r7, #20]
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	613b      	str	r3, [r7, #16]
   return(result);
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e6      	bne.n	80039f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff fbb8 	bl	80031ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a3c:	bf00      	nop
 8003a3e:	3720      	adds	r7, #32
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	71fb      	strb	r3, [r7, #7]
 8003a62:	460b      	mov	r3, r1
 8003a64:	71bb      	strb	r3, [r7, #6]
 8003a66:	4613      	mov	r3, r2
 8003a68:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8003a6a:	797b      	ldrb	r3, [r7, #5]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d901      	bls.n	8003a74 <tmc_fillCRC8Table+0x1c>
		return 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	e09e      	b.n	8003bb2 <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 8003a74:	797a      	ldrb	r2, [r7, #5]
 8003a76:	4951      	ldr	r1, [pc, #324]	; (8003bbc <tmc_fillCRC8Table+0x164>)
 8003a78:	4613      	mov	r3, r2
 8003a7a:	01db      	lsls	r3, r3, #7
 8003a7c:	4413      	add	r3, r2
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	440b      	add	r3, r1
 8003a82:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003a86:	79fa      	ldrb	r2, [r7, #7]
 8003a88:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8003a8a:	797a      	ldrb	r2, [r7, #5]
 8003a8c:	494b      	ldr	r1, [pc, #300]	; (8003bbc <tmc_fillCRC8Table+0x164>)
 8003a8e:	4613      	mov	r3, r2
 8003a90:	01db      	lsls	r3, r3, #7
 8003a92:	4413      	add	r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	440b      	add	r3, r1
 8003a98:	f203 1301 	addw	r3, r3, #257	; 0x101
 8003a9c:	79ba      	ldrb	r2, [r7, #6]
 8003a9e:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 8003aa0:	797a      	ldrb	r2, [r7, #5]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	01db      	lsls	r3, r3, #7
 8003aa6:	4413      	add	r3, r2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4a44      	ldr	r2, [pc, #272]	; (8003bbc <tmc_fillCRC8Table+0x164>)
 8003aac:	4413      	add	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab6:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8003ab8:	4b41      	ldr	r3, [pc, #260]	; (8003bc0 <tmc_fillCRC8Table+0x168>)
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	e074      	b.n	8003ba8 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 8003abe:	79bb      	ldrb	r3, [r7, #6]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d004      	beq.n	8003ace <tmc_fillCRC8Table+0x76>
 8003ac4:	6978      	ldr	r0, [r7, #20]
 8003ac6:	f000 f8f7 	bl	8003cb8 <flipBitsInBytes>
 8003aca:	4603      	mov	r3, r0
 8003acc:	e000      	b.n	8003ad0 <tmc_fillCRC8Table+0x78>
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	e035      	b.n	8003b44 <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	0fdb      	lsrs	r3, r3, #31
 8003adc:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <tmc_fillCRC8Table+0x9a>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	e000      	b.n	8003af4 <tmc_fillCRC8Table+0x9c>
 8003af2:	2300      	movs	r3, #0
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	4053      	eors	r3, r2
 8003af8:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <tmc_fillCRC8Table+0xb2>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	021b      	lsls	r3, r3, #8
 8003b08:	e000      	b.n	8003b0c <tmc_fillCRC8Table+0xb4>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	4053      	eors	r3, r2
 8003b10:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <tmc_fillCRC8Table+0xca>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	041b      	lsls	r3, r3, #16
 8003b20:	e000      	b.n	8003b24 <tmc_fillCRC8Table+0xcc>
 8003b22:	2300      	movs	r3, #0
 8003b24:	69fa      	ldr	r2, [r7, #28]
 8003b26:	4053      	eors	r3, r2
 8003b28:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 8003b2a:	7afb      	ldrb	r3, [r7, #11]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <tmc_fillCRC8Table+0xde>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	061b      	lsls	r3, r3, #24
 8003b34:	e000      	b.n	8003b38 <tmc_fillCRC8Table+0xe0>
 8003b36:	2300      	movs	r3, #0
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	4053      	eors	r3, r2
 8003b3c:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	3301      	adds	r3, #1
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	2b07      	cmp	r3, #7
 8003b48:	ddc6      	ble.n	8003ad8 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 8003b4a:	79bb      	ldrb	r3, [r7, #6]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d004      	beq.n	8003b5a <tmc_fillCRC8Table+0x102>
 8003b50:	69f8      	ldr	r0, [r7, #28]
 8003b52:	f000 f8b1 	bl	8003cb8 <flipBitsInBytes>
 8003b56:	4603      	mov	r3, r0
 8003b58:	e000      	b.n	8003b5c <tmc_fillCRC8Table+0x104>
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	61ba      	str	r2, [r7, #24]
 8003b64:	69fa      	ldr	r2, [r7, #28]
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	0a1b      	lsrs	r3, r3, #8
 8003b6e:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	61ba      	str	r2, [r7, #24]
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	61ba      	str	r2, [r7, #24]
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	0a1b      	lsrs	r3, r3, #8
 8003b92:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	61ba      	str	r2, [r7, #24]
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	4a06      	ldr	r2, [pc, #24]	; (8003bc4 <tmc_fillCRC8Table+0x16c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d186      	bne.n	8003abe <tmc_fillCRC8Table+0x66>
	}

	return 1;
 8003bb0:	2301      	movs	r3, #1
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3720      	adds	r7, #32
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000428 	.word	0x20000428
 8003bc0:	03020100 	.word	0x03020100
 8003bc4:	04030200 	.word	0x04030200

08003bc8 <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d901      	bls.n	8003be4 <tmc_CRC8+0x1c>
		return 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e02c      	b.n	8003c3e <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 8003be4:	79fa      	ldrb	r2, [r7, #7]
 8003be6:	4613      	mov	r3, r2
 8003be8:	01db      	lsls	r3, r3, #7
 8003bea:	4413      	add	r3, r2
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	4a16      	ldr	r2, [pc, #88]	; (8003c48 <tmc_CRC8+0x80>)
 8003bf0:	4413      	add	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]

	while(bytes--)
 8003bf4:	e00b      	b.n	8003c0e <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	60fa      	str	r2, [r7, #12]
 8003bfc:	781a      	ldrb	r2, [r3, #0]
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	4053      	eors	r3, r2
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4413      	add	r3, r2
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	1e5a      	subs	r2, r3, #1
 8003c12:	60ba      	str	r2, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1ee      	bne.n	8003bf6 <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 8003c18:	79fa      	ldrb	r2, [r7, #7]
 8003c1a:	490b      	ldr	r1, [pc, #44]	; (8003c48 <tmc_CRC8+0x80>)
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	01db      	lsls	r3, r3, #7
 8003c20:	4413      	add	r3, r2
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	440b      	add	r3, r1
 8003c26:	f203 1301 	addw	r3, r3, #257	; 0x101
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <tmc_CRC8+0x74>
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f80a 	bl	8003c4c <flipByte>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	e000      	b.n	8003c3e <tmc_CRC8+0x76>
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000428 	.word	0x20000428

08003c4c <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	085b      	lsrs	r3, r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	b25b      	sxtb	r3, r3
 8003c5e:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8003c62:	b25a      	sxtb	r2, r3
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	b25b      	sxtb	r3, r3
 8003c6a:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8003c6e:	b25b      	sxtb	r3, r3
 8003c70:	4313      	orrs	r3, r2
 8003c72:	b25b      	sxtb	r3, r3
 8003c74:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	089b      	lsrs	r3, r3, #2
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	b25b      	sxtb	r3, r3
 8003c7e:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8003c82:	b25a      	sxtb	r2, r3
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	b25b      	sxtb	r3, r3
 8003c8a:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8003c8e:	b25b      	sxtb	r3, r3
 8003c90:	4313      	orrs	r3, r2
 8003c92:	b25b      	sxtb	r3, r3
 8003c94:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	091b      	lsrs	r3, r3, #4
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	b25a      	sxtb	r2, r3
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	b25b      	sxtb	r3, r3
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	b25b      	sxtb	r3, r3
 8003ca8:	71fb      	strb	r3, [r7, #7]

	return value;
 8003caa:	79fb      	ldrb	r3, [r7, #7]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	085b      	lsrs	r3, r3, #1
 8003cc4:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	089b      	lsrs	r3, r3, #2
 8003cd8:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	091b      	lsrs	r3, r3, #4
 8003cec:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	607b      	str	r3, [r7, #4]

	return value;
 8003cfc:	687b      	ldr	r3, [r7, #4]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b086      	sub	sp, #24
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	460b      	mov	r3, r1
 8003d14:	607a      	str	r2, [r7, #4]
 8003d16:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 8003d18:	2305      	movs	r3, #5
 8003d1a:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8003d22:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 8003d24:	7afb      	ldrb	r3, [r7, #11]
 8003d26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	0e1b      	lsrs	r3, r3, #24
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	141b      	asrs	r3, r3, #16
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	121b      	asrs	r3, r3, #8
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 8003d4c:	f107 0310 	add.w	r3, r7, #16
 8003d50:	2107      	movs	r1, #7
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fc fadc 	bl	8000310 <tmc2209_CRC8>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8003d64:	f107 0110 	add.w	r1, r7, #16
 8003d68:	2300      	movs	r3, #0
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	f7fc faa8 	bl	80002c0 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 8003d70:	7afb      	ldrb	r3, [r7, #11]
 8003d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d76:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 8003d86:	7afb      	ldrb	r3, [r7, #11]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 8003d90:	7afb      	ldrb	r3, [r7, #11]
 8003d92:	f042 0208 	orr.w	r2, r2, #8
 8003d96:	b2d1      	uxtb	r1, r2
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	460a      	mov	r2, r1
 8003d9e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8003da2:	bf00      	nop
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 8003daa:	b590      	push	{r4, r7, lr}
 8003dac:	b085      	sub	sp, #20
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	460b      	mov	r3, r1
 8003db4:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 8003dbe:	78fb      	ldrb	r3, [r7, #3]
 8003dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dc4:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d106      	bne.n	8003de6 <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	e03f      	b.n	8003e66 <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 8003de6:	2305      	movs	r3, #5
 8003de8:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8003df0:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 8003df6:	f107 0308 	add.w	r3, r7, #8
 8003dfa:	2103      	movs	r1, #3
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fc fa87 	bl	8000310 <tmc2209_CRC8>
 8003e02:	4603      	mov	r3, r0
 8003e04:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8003e0e:	f107 0108 	add.w	r1, r7, #8
 8003e12:	2308      	movs	r3, #8
 8003e14:	2204      	movs	r2, #4
 8003e16:	f7fc fa53 	bl	80002c0 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 8003e1a:	7a3b      	ldrb	r3, [r7, #8]
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	d001      	beq.n	8003e24 <tmc2209_readInt+0x7a>
		return 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	e020      	b.n	8003e66 <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 8003e24:	7a7b      	ldrb	r3, [r7, #9]
 8003e26:	2bff      	cmp	r3, #255	; 0xff
 8003e28:	d001      	beq.n	8003e2e <tmc2209_readInt+0x84>
		return 0;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e01b      	b.n	8003e66 <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 8003e2e:	7abb      	ldrb	r3, [r7, #10]
 8003e30:	78fa      	ldrb	r2, [r7, #3]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d001      	beq.n	8003e3a <tmc2209_readInt+0x90>
		return 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	e015      	b.n	8003e66 <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 8003e3a:	7bfc      	ldrb	r4, [r7, #15]
 8003e3c:	f107 0308 	add.w	r3, r7, #8
 8003e40:	2107      	movs	r1, #7
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fc fa64 	bl	8000310 <tmc2209_CRC8>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	429c      	cmp	r4, r3
 8003e4c:	d001      	beq.n	8003e52 <tmc2209_readInt+0xa8>
		return 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e009      	b.n	8003e66 <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 8003e52:	7afb      	ldrb	r3, [r7, #11]
 8003e54:	061a      	lsls	r2, r3, #24
 8003e56:	7b3b      	ldrb	r3, [r7, #12]
 8003e58:	041b      	lsls	r3, r3, #16
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	7b7a      	ldrb	r2, [r7, #13]
 8003e5e:	0212      	lsls	r2, r2, #8
 8003e60:	4313      	orrs	r3, r2
 8003e62:	7bba      	ldrb	r2, [r7, #14]
 8003e64:	4313      	orrs	r3, r2
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd90      	pop	{r4, r7, pc}
	...

08003e70 <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	72fb      	strb	r3, [r7, #11]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	7aba      	ldrb	r2, [r7, #10]
 8003e86:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	7afa      	ldrb	r2, [r7, #11]
 8003ea0:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	e017      	b.n	8003eea <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 8003eba:	4a11      	ldr	r2, [pc, #68]	; (8003f00 <tmc2209_init+0x90>)
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	7819      	ldrb	r1, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ecc:	460a      	mov	r2, r1
 8003ece:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	6a3a      	ldr	r2, [r7, #32]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68f9      	ldr	r1, [r7, #12]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b7f      	cmp	r3, #127	; 0x7f
 8003eee:	d9e4      	bls.n	8003eba <tmc2209_init+0x4a>
	}
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	371c      	adds	r7, #28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	080053cc 	.word	0x080053cc

08003f04 <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3301      	adds	r3, #1
 8003f12:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d131      	bne.n	8003f82 <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3304      	adds	r3, #4
 8003f24:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8003f26:	e005      	b.n	8003f34 <writeConfiguration+0x30>
		{
			(*ptr)++;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	b25b      	sxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	db3b      	blt.n	8003fb6 <writeConfiguration+0xb2>
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4413      	add	r3, r2
 8003f48:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0e9      	beq.n	8003f28 <writeConfiguration+0x24>
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8003f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d025      	beq.n	8003fb6 <writeConfiguration+0xb2>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4413      	add	r3, r2
 8003f74:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0d3      	beq.n	8003f28 <writeConfiguration+0x24>
 8003f80:	e019      	b.n	8003fb6 <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3304      	adds	r3, #4
 8003f86:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8003f88:	e005      	b.n	8003f96 <writeConfiguration+0x92>
		{
			(*ptr)++;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	b25b      	sxtb	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	db0a      	blt.n	8003fb6 <writeConfiguration+0xb2>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8003fae:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d1e9      	bne.n	8003f8a <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	b25b      	sxtb	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	db12      	blt.n	8003fe6 <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	7819      	ldrb	r1, [r3, #0]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4413      	add	r3, r2
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff fe99 	bl	8003d0a <tmc2209_writeInt>
		(*ptr)++;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 8003fe4:	e013      	b.n	800400e <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	7812      	ldrb	r2, [r2, #0]
 8004000:	4611      	mov	r1, r2
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2200      	movs	r2, #0
 800400c:	701a      	strb	r2, [r3, #0]
}
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff ff6a 	bl	8003f04 <writeConfiguration>
		return;
 8004030:	bf00      	nop
	}
}
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <tmc2209_reset+0x16>
		return false;
 800404a:	2300      	movs	r3, #0
 800404c:	e028      	b.n	80040a0 <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	e019      	b.n	8004088 <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4413      	add	r3, r2
 800405a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	f023 0308 	bic.w	r3, r3, #8
 8004064:	b2d9      	uxtb	r1, r3
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004070:	460a      	mov	r2, r1
 8004072:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	2200      	movs	r2, #0
 8004080:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3301      	adds	r3, #1
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b7f      	cmp	r3, #127	; 0x7f
 800408c:	d9e2      	bls.n	8004054 <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2201      	movs	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2200      	movs	r2, #0
 800409c:	705a      	strb	r2, [r3, #1]

	return true;
 800409e:	2301      	movs	r3, #1
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <tmc2209_restore+0x16>
		return false;
 80040be:	2300      	movs	r3, #0
 80040c0:	e008      	b.n	80040d4 <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2202      	movs	r2, #2
 80040c8:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2200      	movs	r2, #0
 80040d0:	705a      	strb	r2, [r3, #1]

	return true;
 80040d2:	2301      	movs	r3, #1
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <__errno>:
 80040e0:	4b01      	ldr	r3, [pc, #4]	; (80040e8 <__errno+0x8>)
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	2000000c 	.word	0x2000000c

080040ec <__libc_init_array>:
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	4d0d      	ldr	r5, [pc, #52]	; (8004124 <__libc_init_array+0x38>)
 80040f0:	4c0d      	ldr	r4, [pc, #52]	; (8004128 <__libc_init_array+0x3c>)
 80040f2:	1b64      	subs	r4, r4, r5
 80040f4:	10a4      	asrs	r4, r4, #2
 80040f6:	2600      	movs	r6, #0
 80040f8:	42a6      	cmp	r6, r4
 80040fa:	d109      	bne.n	8004110 <__libc_init_array+0x24>
 80040fc:	4d0b      	ldr	r5, [pc, #44]	; (800412c <__libc_init_array+0x40>)
 80040fe:	4c0c      	ldr	r4, [pc, #48]	; (8004130 <__libc_init_array+0x44>)
 8004100:	f001 f824 	bl	800514c <_init>
 8004104:	1b64      	subs	r4, r4, r5
 8004106:	10a4      	asrs	r4, r4, #2
 8004108:	2600      	movs	r6, #0
 800410a:	42a6      	cmp	r6, r4
 800410c:	d105      	bne.n	800411a <__libc_init_array+0x2e>
 800410e:	bd70      	pop	{r4, r5, r6, pc}
 8004110:	f855 3b04 	ldr.w	r3, [r5], #4
 8004114:	4798      	blx	r3
 8004116:	3601      	adds	r6, #1
 8004118:	e7ee      	b.n	80040f8 <__libc_init_array+0xc>
 800411a:	f855 3b04 	ldr.w	r3, [r5], #4
 800411e:	4798      	blx	r3
 8004120:	3601      	adds	r6, #1
 8004122:	e7f2      	b.n	800410a <__libc_init_array+0x1e>
 8004124:	080054e4 	.word	0x080054e4
 8004128:	080054e4 	.word	0x080054e4
 800412c:	080054e4 	.word	0x080054e4
 8004130:	080054e8 	.word	0x080054e8

08004134 <memset>:
 8004134:	4402      	add	r2, r0
 8004136:	4603      	mov	r3, r0
 8004138:	4293      	cmp	r3, r2
 800413a:	d100      	bne.n	800413e <memset+0xa>
 800413c:	4770      	bx	lr
 800413e:	f803 1b01 	strb.w	r1, [r3], #1
 8004142:	e7f9      	b.n	8004138 <memset+0x4>

08004144 <iprintf>:
 8004144:	b40f      	push	{r0, r1, r2, r3}
 8004146:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <iprintf+0x2c>)
 8004148:	b513      	push	{r0, r1, r4, lr}
 800414a:	681c      	ldr	r4, [r3, #0]
 800414c:	b124      	cbz	r4, 8004158 <iprintf+0x14>
 800414e:	69a3      	ldr	r3, [r4, #24]
 8004150:	b913      	cbnz	r3, 8004158 <iprintf+0x14>
 8004152:	4620      	mov	r0, r4
 8004154:	f000 fa5e 	bl	8004614 <__sinit>
 8004158:	ab05      	add	r3, sp, #20
 800415a:	9a04      	ldr	r2, [sp, #16]
 800415c:	68a1      	ldr	r1, [r4, #8]
 800415e:	9301      	str	r3, [sp, #4]
 8004160:	4620      	mov	r0, r4
 8004162:	f000 fc67 	bl	8004a34 <_vfiprintf_r>
 8004166:	b002      	add	sp, #8
 8004168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800416c:	b004      	add	sp, #16
 800416e:	4770      	bx	lr
 8004170:	2000000c 	.word	0x2000000c

08004174 <_puts_r>:
 8004174:	b570      	push	{r4, r5, r6, lr}
 8004176:	460e      	mov	r6, r1
 8004178:	4605      	mov	r5, r0
 800417a:	b118      	cbz	r0, 8004184 <_puts_r+0x10>
 800417c:	6983      	ldr	r3, [r0, #24]
 800417e:	b90b      	cbnz	r3, 8004184 <_puts_r+0x10>
 8004180:	f000 fa48 	bl	8004614 <__sinit>
 8004184:	69ab      	ldr	r3, [r5, #24]
 8004186:	68ac      	ldr	r4, [r5, #8]
 8004188:	b913      	cbnz	r3, 8004190 <_puts_r+0x1c>
 800418a:	4628      	mov	r0, r5
 800418c:	f000 fa42 	bl	8004614 <__sinit>
 8004190:	4b2c      	ldr	r3, [pc, #176]	; (8004244 <_puts_r+0xd0>)
 8004192:	429c      	cmp	r4, r3
 8004194:	d120      	bne.n	80041d8 <_puts_r+0x64>
 8004196:	686c      	ldr	r4, [r5, #4]
 8004198:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800419a:	07db      	lsls	r3, r3, #31
 800419c:	d405      	bmi.n	80041aa <_puts_r+0x36>
 800419e:	89a3      	ldrh	r3, [r4, #12]
 80041a0:	0598      	lsls	r0, r3, #22
 80041a2:	d402      	bmi.n	80041aa <_puts_r+0x36>
 80041a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041a6:	f000 fad3 	bl	8004750 <__retarget_lock_acquire_recursive>
 80041aa:	89a3      	ldrh	r3, [r4, #12]
 80041ac:	0719      	lsls	r1, r3, #28
 80041ae:	d51d      	bpl.n	80041ec <_puts_r+0x78>
 80041b0:	6923      	ldr	r3, [r4, #16]
 80041b2:	b1db      	cbz	r3, 80041ec <_puts_r+0x78>
 80041b4:	3e01      	subs	r6, #1
 80041b6:	68a3      	ldr	r3, [r4, #8]
 80041b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80041bc:	3b01      	subs	r3, #1
 80041be:	60a3      	str	r3, [r4, #8]
 80041c0:	bb39      	cbnz	r1, 8004212 <_puts_r+0x9e>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	da38      	bge.n	8004238 <_puts_r+0xc4>
 80041c6:	4622      	mov	r2, r4
 80041c8:	210a      	movs	r1, #10
 80041ca:	4628      	mov	r0, r5
 80041cc:	f000 f848 	bl	8004260 <__swbuf_r>
 80041d0:	3001      	adds	r0, #1
 80041d2:	d011      	beq.n	80041f8 <_puts_r+0x84>
 80041d4:	250a      	movs	r5, #10
 80041d6:	e011      	b.n	80041fc <_puts_r+0x88>
 80041d8:	4b1b      	ldr	r3, [pc, #108]	; (8004248 <_puts_r+0xd4>)
 80041da:	429c      	cmp	r4, r3
 80041dc:	d101      	bne.n	80041e2 <_puts_r+0x6e>
 80041de:	68ac      	ldr	r4, [r5, #8]
 80041e0:	e7da      	b.n	8004198 <_puts_r+0x24>
 80041e2:	4b1a      	ldr	r3, [pc, #104]	; (800424c <_puts_r+0xd8>)
 80041e4:	429c      	cmp	r4, r3
 80041e6:	bf08      	it	eq
 80041e8:	68ec      	ldreq	r4, [r5, #12]
 80041ea:	e7d5      	b.n	8004198 <_puts_r+0x24>
 80041ec:	4621      	mov	r1, r4
 80041ee:	4628      	mov	r0, r5
 80041f0:	f000 f888 	bl	8004304 <__swsetup_r>
 80041f4:	2800      	cmp	r0, #0
 80041f6:	d0dd      	beq.n	80041b4 <_puts_r+0x40>
 80041f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80041fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041fe:	07da      	lsls	r2, r3, #31
 8004200:	d405      	bmi.n	800420e <_puts_r+0x9a>
 8004202:	89a3      	ldrh	r3, [r4, #12]
 8004204:	059b      	lsls	r3, r3, #22
 8004206:	d402      	bmi.n	800420e <_puts_r+0x9a>
 8004208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800420a:	f000 faa2 	bl	8004752 <__retarget_lock_release_recursive>
 800420e:	4628      	mov	r0, r5
 8004210:	bd70      	pop	{r4, r5, r6, pc}
 8004212:	2b00      	cmp	r3, #0
 8004214:	da04      	bge.n	8004220 <_puts_r+0xac>
 8004216:	69a2      	ldr	r2, [r4, #24]
 8004218:	429a      	cmp	r2, r3
 800421a:	dc06      	bgt.n	800422a <_puts_r+0xb6>
 800421c:	290a      	cmp	r1, #10
 800421e:	d004      	beq.n	800422a <_puts_r+0xb6>
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	6022      	str	r2, [r4, #0]
 8004226:	7019      	strb	r1, [r3, #0]
 8004228:	e7c5      	b.n	80041b6 <_puts_r+0x42>
 800422a:	4622      	mov	r2, r4
 800422c:	4628      	mov	r0, r5
 800422e:	f000 f817 	bl	8004260 <__swbuf_r>
 8004232:	3001      	adds	r0, #1
 8004234:	d1bf      	bne.n	80041b6 <_puts_r+0x42>
 8004236:	e7df      	b.n	80041f8 <_puts_r+0x84>
 8004238:	6823      	ldr	r3, [r4, #0]
 800423a:	250a      	movs	r5, #10
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	6022      	str	r2, [r4, #0]
 8004240:	701d      	strb	r5, [r3, #0]
 8004242:	e7db      	b.n	80041fc <_puts_r+0x88>
 8004244:	08005470 	.word	0x08005470
 8004248:	08005490 	.word	0x08005490
 800424c:	08005450 	.word	0x08005450

08004250 <puts>:
 8004250:	4b02      	ldr	r3, [pc, #8]	; (800425c <puts+0xc>)
 8004252:	4601      	mov	r1, r0
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	f7ff bf8d 	b.w	8004174 <_puts_r>
 800425a:	bf00      	nop
 800425c:	2000000c 	.word	0x2000000c

08004260 <__swbuf_r>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	460e      	mov	r6, r1
 8004264:	4614      	mov	r4, r2
 8004266:	4605      	mov	r5, r0
 8004268:	b118      	cbz	r0, 8004272 <__swbuf_r+0x12>
 800426a:	6983      	ldr	r3, [r0, #24]
 800426c:	b90b      	cbnz	r3, 8004272 <__swbuf_r+0x12>
 800426e:	f000 f9d1 	bl	8004614 <__sinit>
 8004272:	4b21      	ldr	r3, [pc, #132]	; (80042f8 <__swbuf_r+0x98>)
 8004274:	429c      	cmp	r4, r3
 8004276:	d12b      	bne.n	80042d0 <__swbuf_r+0x70>
 8004278:	686c      	ldr	r4, [r5, #4]
 800427a:	69a3      	ldr	r3, [r4, #24]
 800427c:	60a3      	str	r3, [r4, #8]
 800427e:	89a3      	ldrh	r3, [r4, #12]
 8004280:	071a      	lsls	r2, r3, #28
 8004282:	d52f      	bpl.n	80042e4 <__swbuf_r+0x84>
 8004284:	6923      	ldr	r3, [r4, #16]
 8004286:	b36b      	cbz	r3, 80042e4 <__swbuf_r+0x84>
 8004288:	6923      	ldr	r3, [r4, #16]
 800428a:	6820      	ldr	r0, [r4, #0]
 800428c:	1ac0      	subs	r0, r0, r3
 800428e:	6963      	ldr	r3, [r4, #20]
 8004290:	b2f6      	uxtb	r6, r6
 8004292:	4283      	cmp	r3, r0
 8004294:	4637      	mov	r7, r6
 8004296:	dc04      	bgt.n	80042a2 <__swbuf_r+0x42>
 8004298:	4621      	mov	r1, r4
 800429a:	4628      	mov	r0, r5
 800429c:	f000 f926 	bl	80044ec <_fflush_r>
 80042a0:	bb30      	cbnz	r0, 80042f0 <__swbuf_r+0x90>
 80042a2:	68a3      	ldr	r3, [r4, #8]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	60a3      	str	r3, [r4, #8]
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	6022      	str	r2, [r4, #0]
 80042ae:	701e      	strb	r6, [r3, #0]
 80042b0:	6963      	ldr	r3, [r4, #20]
 80042b2:	3001      	adds	r0, #1
 80042b4:	4283      	cmp	r3, r0
 80042b6:	d004      	beq.n	80042c2 <__swbuf_r+0x62>
 80042b8:	89a3      	ldrh	r3, [r4, #12]
 80042ba:	07db      	lsls	r3, r3, #31
 80042bc:	d506      	bpl.n	80042cc <__swbuf_r+0x6c>
 80042be:	2e0a      	cmp	r6, #10
 80042c0:	d104      	bne.n	80042cc <__swbuf_r+0x6c>
 80042c2:	4621      	mov	r1, r4
 80042c4:	4628      	mov	r0, r5
 80042c6:	f000 f911 	bl	80044ec <_fflush_r>
 80042ca:	b988      	cbnz	r0, 80042f0 <__swbuf_r+0x90>
 80042cc:	4638      	mov	r0, r7
 80042ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042d0:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <__swbuf_r+0x9c>)
 80042d2:	429c      	cmp	r4, r3
 80042d4:	d101      	bne.n	80042da <__swbuf_r+0x7a>
 80042d6:	68ac      	ldr	r4, [r5, #8]
 80042d8:	e7cf      	b.n	800427a <__swbuf_r+0x1a>
 80042da:	4b09      	ldr	r3, [pc, #36]	; (8004300 <__swbuf_r+0xa0>)
 80042dc:	429c      	cmp	r4, r3
 80042de:	bf08      	it	eq
 80042e0:	68ec      	ldreq	r4, [r5, #12]
 80042e2:	e7ca      	b.n	800427a <__swbuf_r+0x1a>
 80042e4:	4621      	mov	r1, r4
 80042e6:	4628      	mov	r0, r5
 80042e8:	f000 f80c 	bl	8004304 <__swsetup_r>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	d0cb      	beq.n	8004288 <__swbuf_r+0x28>
 80042f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80042f4:	e7ea      	b.n	80042cc <__swbuf_r+0x6c>
 80042f6:	bf00      	nop
 80042f8:	08005470 	.word	0x08005470
 80042fc:	08005490 	.word	0x08005490
 8004300:	08005450 	.word	0x08005450

08004304 <__swsetup_r>:
 8004304:	4b32      	ldr	r3, [pc, #200]	; (80043d0 <__swsetup_r+0xcc>)
 8004306:	b570      	push	{r4, r5, r6, lr}
 8004308:	681d      	ldr	r5, [r3, #0]
 800430a:	4606      	mov	r6, r0
 800430c:	460c      	mov	r4, r1
 800430e:	b125      	cbz	r5, 800431a <__swsetup_r+0x16>
 8004310:	69ab      	ldr	r3, [r5, #24]
 8004312:	b913      	cbnz	r3, 800431a <__swsetup_r+0x16>
 8004314:	4628      	mov	r0, r5
 8004316:	f000 f97d 	bl	8004614 <__sinit>
 800431a:	4b2e      	ldr	r3, [pc, #184]	; (80043d4 <__swsetup_r+0xd0>)
 800431c:	429c      	cmp	r4, r3
 800431e:	d10f      	bne.n	8004340 <__swsetup_r+0x3c>
 8004320:	686c      	ldr	r4, [r5, #4]
 8004322:	89a3      	ldrh	r3, [r4, #12]
 8004324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004328:	0719      	lsls	r1, r3, #28
 800432a:	d42c      	bmi.n	8004386 <__swsetup_r+0x82>
 800432c:	06dd      	lsls	r5, r3, #27
 800432e:	d411      	bmi.n	8004354 <__swsetup_r+0x50>
 8004330:	2309      	movs	r3, #9
 8004332:	6033      	str	r3, [r6, #0]
 8004334:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004338:	81a3      	strh	r3, [r4, #12]
 800433a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800433e:	e03e      	b.n	80043be <__swsetup_r+0xba>
 8004340:	4b25      	ldr	r3, [pc, #148]	; (80043d8 <__swsetup_r+0xd4>)
 8004342:	429c      	cmp	r4, r3
 8004344:	d101      	bne.n	800434a <__swsetup_r+0x46>
 8004346:	68ac      	ldr	r4, [r5, #8]
 8004348:	e7eb      	b.n	8004322 <__swsetup_r+0x1e>
 800434a:	4b24      	ldr	r3, [pc, #144]	; (80043dc <__swsetup_r+0xd8>)
 800434c:	429c      	cmp	r4, r3
 800434e:	bf08      	it	eq
 8004350:	68ec      	ldreq	r4, [r5, #12]
 8004352:	e7e6      	b.n	8004322 <__swsetup_r+0x1e>
 8004354:	0758      	lsls	r0, r3, #29
 8004356:	d512      	bpl.n	800437e <__swsetup_r+0x7a>
 8004358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800435a:	b141      	cbz	r1, 800436e <__swsetup_r+0x6a>
 800435c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004360:	4299      	cmp	r1, r3
 8004362:	d002      	beq.n	800436a <__swsetup_r+0x66>
 8004364:	4630      	mov	r0, r6
 8004366:	f000 fa5b 	bl	8004820 <_free_r>
 800436a:	2300      	movs	r3, #0
 800436c:	6363      	str	r3, [r4, #52]	; 0x34
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004374:	81a3      	strh	r3, [r4, #12]
 8004376:	2300      	movs	r3, #0
 8004378:	6063      	str	r3, [r4, #4]
 800437a:	6923      	ldr	r3, [r4, #16]
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	89a3      	ldrh	r3, [r4, #12]
 8004380:	f043 0308 	orr.w	r3, r3, #8
 8004384:	81a3      	strh	r3, [r4, #12]
 8004386:	6923      	ldr	r3, [r4, #16]
 8004388:	b94b      	cbnz	r3, 800439e <__swsetup_r+0x9a>
 800438a:	89a3      	ldrh	r3, [r4, #12]
 800438c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004394:	d003      	beq.n	800439e <__swsetup_r+0x9a>
 8004396:	4621      	mov	r1, r4
 8004398:	4630      	mov	r0, r6
 800439a:	f000 fa01 	bl	80047a0 <__smakebuf_r>
 800439e:	89a0      	ldrh	r0, [r4, #12]
 80043a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043a4:	f010 0301 	ands.w	r3, r0, #1
 80043a8:	d00a      	beq.n	80043c0 <__swsetup_r+0xbc>
 80043aa:	2300      	movs	r3, #0
 80043ac:	60a3      	str	r3, [r4, #8]
 80043ae:	6963      	ldr	r3, [r4, #20]
 80043b0:	425b      	negs	r3, r3
 80043b2:	61a3      	str	r3, [r4, #24]
 80043b4:	6923      	ldr	r3, [r4, #16]
 80043b6:	b943      	cbnz	r3, 80043ca <__swsetup_r+0xc6>
 80043b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80043bc:	d1ba      	bne.n	8004334 <__swsetup_r+0x30>
 80043be:	bd70      	pop	{r4, r5, r6, pc}
 80043c0:	0781      	lsls	r1, r0, #30
 80043c2:	bf58      	it	pl
 80043c4:	6963      	ldrpl	r3, [r4, #20]
 80043c6:	60a3      	str	r3, [r4, #8]
 80043c8:	e7f4      	b.n	80043b4 <__swsetup_r+0xb0>
 80043ca:	2000      	movs	r0, #0
 80043cc:	e7f7      	b.n	80043be <__swsetup_r+0xba>
 80043ce:	bf00      	nop
 80043d0:	2000000c 	.word	0x2000000c
 80043d4:	08005470 	.word	0x08005470
 80043d8:	08005490 	.word	0x08005490
 80043dc:	08005450 	.word	0x08005450

080043e0 <__sflush_r>:
 80043e0:	898a      	ldrh	r2, [r1, #12]
 80043e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043e6:	4605      	mov	r5, r0
 80043e8:	0710      	lsls	r0, r2, #28
 80043ea:	460c      	mov	r4, r1
 80043ec:	d458      	bmi.n	80044a0 <__sflush_r+0xc0>
 80043ee:	684b      	ldr	r3, [r1, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	dc05      	bgt.n	8004400 <__sflush_r+0x20>
 80043f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	dc02      	bgt.n	8004400 <__sflush_r+0x20>
 80043fa:	2000      	movs	r0, #0
 80043fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004402:	2e00      	cmp	r6, #0
 8004404:	d0f9      	beq.n	80043fa <__sflush_r+0x1a>
 8004406:	2300      	movs	r3, #0
 8004408:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800440c:	682f      	ldr	r7, [r5, #0]
 800440e:	602b      	str	r3, [r5, #0]
 8004410:	d032      	beq.n	8004478 <__sflush_r+0x98>
 8004412:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004414:	89a3      	ldrh	r3, [r4, #12]
 8004416:	075a      	lsls	r2, r3, #29
 8004418:	d505      	bpl.n	8004426 <__sflush_r+0x46>
 800441a:	6863      	ldr	r3, [r4, #4]
 800441c:	1ac0      	subs	r0, r0, r3
 800441e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004420:	b10b      	cbz	r3, 8004426 <__sflush_r+0x46>
 8004422:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004424:	1ac0      	subs	r0, r0, r3
 8004426:	2300      	movs	r3, #0
 8004428:	4602      	mov	r2, r0
 800442a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800442c:	6a21      	ldr	r1, [r4, #32]
 800442e:	4628      	mov	r0, r5
 8004430:	47b0      	blx	r6
 8004432:	1c43      	adds	r3, r0, #1
 8004434:	89a3      	ldrh	r3, [r4, #12]
 8004436:	d106      	bne.n	8004446 <__sflush_r+0x66>
 8004438:	6829      	ldr	r1, [r5, #0]
 800443a:	291d      	cmp	r1, #29
 800443c:	d82c      	bhi.n	8004498 <__sflush_r+0xb8>
 800443e:	4a2a      	ldr	r2, [pc, #168]	; (80044e8 <__sflush_r+0x108>)
 8004440:	40ca      	lsrs	r2, r1
 8004442:	07d6      	lsls	r6, r2, #31
 8004444:	d528      	bpl.n	8004498 <__sflush_r+0xb8>
 8004446:	2200      	movs	r2, #0
 8004448:	6062      	str	r2, [r4, #4]
 800444a:	04d9      	lsls	r1, r3, #19
 800444c:	6922      	ldr	r2, [r4, #16]
 800444e:	6022      	str	r2, [r4, #0]
 8004450:	d504      	bpl.n	800445c <__sflush_r+0x7c>
 8004452:	1c42      	adds	r2, r0, #1
 8004454:	d101      	bne.n	800445a <__sflush_r+0x7a>
 8004456:	682b      	ldr	r3, [r5, #0]
 8004458:	b903      	cbnz	r3, 800445c <__sflush_r+0x7c>
 800445a:	6560      	str	r0, [r4, #84]	; 0x54
 800445c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800445e:	602f      	str	r7, [r5, #0]
 8004460:	2900      	cmp	r1, #0
 8004462:	d0ca      	beq.n	80043fa <__sflush_r+0x1a>
 8004464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004468:	4299      	cmp	r1, r3
 800446a:	d002      	beq.n	8004472 <__sflush_r+0x92>
 800446c:	4628      	mov	r0, r5
 800446e:	f000 f9d7 	bl	8004820 <_free_r>
 8004472:	2000      	movs	r0, #0
 8004474:	6360      	str	r0, [r4, #52]	; 0x34
 8004476:	e7c1      	b.n	80043fc <__sflush_r+0x1c>
 8004478:	6a21      	ldr	r1, [r4, #32]
 800447a:	2301      	movs	r3, #1
 800447c:	4628      	mov	r0, r5
 800447e:	47b0      	blx	r6
 8004480:	1c41      	adds	r1, r0, #1
 8004482:	d1c7      	bne.n	8004414 <__sflush_r+0x34>
 8004484:	682b      	ldr	r3, [r5, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0c4      	beq.n	8004414 <__sflush_r+0x34>
 800448a:	2b1d      	cmp	r3, #29
 800448c:	d001      	beq.n	8004492 <__sflush_r+0xb2>
 800448e:	2b16      	cmp	r3, #22
 8004490:	d101      	bne.n	8004496 <__sflush_r+0xb6>
 8004492:	602f      	str	r7, [r5, #0]
 8004494:	e7b1      	b.n	80043fa <__sflush_r+0x1a>
 8004496:	89a3      	ldrh	r3, [r4, #12]
 8004498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800449c:	81a3      	strh	r3, [r4, #12]
 800449e:	e7ad      	b.n	80043fc <__sflush_r+0x1c>
 80044a0:	690f      	ldr	r7, [r1, #16]
 80044a2:	2f00      	cmp	r7, #0
 80044a4:	d0a9      	beq.n	80043fa <__sflush_r+0x1a>
 80044a6:	0793      	lsls	r3, r2, #30
 80044a8:	680e      	ldr	r6, [r1, #0]
 80044aa:	bf08      	it	eq
 80044ac:	694b      	ldreq	r3, [r1, #20]
 80044ae:	600f      	str	r7, [r1, #0]
 80044b0:	bf18      	it	ne
 80044b2:	2300      	movne	r3, #0
 80044b4:	eba6 0807 	sub.w	r8, r6, r7
 80044b8:	608b      	str	r3, [r1, #8]
 80044ba:	f1b8 0f00 	cmp.w	r8, #0
 80044be:	dd9c      	ble.n	80043fa <__sflush_r+0x1a>
 80044c0:	6a21      	ldr	r1, [r4, #32]
 80044c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044c4:	4643      	mov	r3, r8
 80044c6:	463a      	mov	r2, r7
 80044c8:	4628      	mov	r0, r5
 80044ca:	47b0      	blx	r6
 80044cc:	2800      	cmp	r0, #0
 80044ce:	dc06      	bgt.n	80044de <__sflush_r+0xfe>
 80044d0:	89a3      	ldrh	r3, [r4, #12]
 80044d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d6:	81a3      	strh	r3, [r4, #12]
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044dc:	e78e      	b.n	80043fc <__sflush_r+0x1c>
 80044de:	4407      	add	r7, r0
 80044e0:	eba8 0800 	sub.w	r8, r8, r0
 80044e4:	e7e9      	b.n	80044ba <__sflush_r+0xda>
 80044e6:	bf00      	nop
 80044e8:	20400001 	.word	0x20400001

080044ec <_fflush_r>:
 80044ec:	b538      	push	{r3, r4, r5, lr}
 80044ee:	690b      	ldr	r3, [r1, #16]
 80044f0:	4605      	mov	r5, r0
 80044f2:	460c      	mov	r4, r1
 80044f4:	b913      	cbnz	r3, 80044fc <_fflush_r+0x10>
 80044f6:	2500      	movs	r5, #0
 80044f8:	4628      	mov	r0, r5
 80044fa:	bd38      	pop	{r3, r4, r5, pc}
 80044fc:	b118      	cbz	r0, 8004506 <_fflush_r+0x1a>
 80044fe:	6983      	ldr	r3, [r0, #24]
 8004500:	b90b      	cbnz	r3, 8004506 <_fflush_r+0x1a>
 8004502:	f000 f887 	bl	8004614 <__sinit>
 8004506:	4b14      	ldr	r3, [pc, #80]	; (8004558 <_fflush_r+0x6c>)
 8004508:	429c      	cmp	r4, r3
 800450a:	d11b      	bne.n	8004544 <_fflush_r+0x58>
 800450c:	686c      	ldr	r4, [r5, #4]
 800450e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0ef      	beq.n	80044f6 <_fflush_r+0xa>
 8004516:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004518:	07d0      	lsls	r0, r2, #31
 800451a:	d404      	bmi.n	8004526 <_fflush_r+0x3a>
 800451c:	0599      	lsls	r1, r3, #22
 800451e:	d402      	bmi.n	8004526 <_fflush_r+0x3a>
 8004520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004522:	f000 f915 	bl	8004750 <__retarget_lock_acquire_recursive>
 8004526:	4628      	mov	r0, r5
 8004528:	4621      	mov	r1, r4
 800452a:	f7ff ff59 	bl	80043e0 <__sflush_r>
 800452e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004530:	07da      	lsls	r2, r3, #31
 8004532:	4605      	mov	r5, r0
 8004534:	d4e0      	bmi.n	80044f8 <_fflush_r+0xc>
 8004536:	89a3      	ldrh	r3, [r4, #12]
 8004538:	059b      	lsls	r3, r3, #22
 800453a:	d4dd      	bmi.n	80044f8 <_fflush_r+0xc>
 800453c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800453e:	f000 f908 	bl	8004752 <__retarget_lock_release_recursive>
 8004542:	e7d9      	b.n	80044f8 <_fflush_r+0xc>
 8004544:	4b05      	ldr	r3, [pc, #20]	; (800455c <_fflush_r+0x70>)
 8004546:	429c      	cmp	r4, r3
 8004548:	d101      	bne.n	800454e <_fflush_r+0x62>
 800454a:	68ac      	ldr	r4, [r5, #8]
 800454c:	e7df      	b.n	800450e <_fflush_r+0x22>
 800454e:	4b04      	ldr	r3, [pc, #16]	; (8004560 <_fflush_r+0x74>)
 8004550:	429c      	cmp	r4, r3
 8004552:	bf08      	it	eq
 8004554:	68ec      	ldreq	r4, [r5, #12]
 8004556:	e7da      	b.n	800450e <_fflush_r+0x22>
 8004558:	08005470 	.word	0x08005470
 800455c:	08005490 	.word	0x08005490
 8004560:	08005450 	.word	0x08005450

08004564 <std>:
 8004564:	2300      	movs	r3, #0
 8004566:	b510      	push	{r4, lr}
 8004568:	4604      	mov	r4, r0
 800456a:	e9c0 3300 	strd	r3, r3, [r0]
 800456e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004572:	6083      	str	r3, [r0, #8]
 8004574:	8181      	strh	r1, [r0, #12]
 8004576:	6643      	str	r3, [r0, #100]	; 0x64
 8004578:	81c2      	strh	r2, [r0, #14]
 800457a:	6183      	str	r3, [r0, #24]
 800457c:	4619      	mov	r1, r3
 800457e:	2208      	movs	r2, #8
 8004580:	305c      	adds	r0, #92	; 0x5c
 8004582:	f7ff fdd7 	bl	8004134 <memset>
 8004586:	4b05      	ldr	r3, [pc, #20]	; (800459c <std+0x38>)
 8004588:	6263      	str	r3, [r4, #36]	; 0x24
 800458a:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <std+0x3c>)
 800458c:	62a3      	str	r3, [r4, #40]	; 0x28
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <std+0x40>)
 8004590:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004592:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <std+0x44>)
 8004594:	6224      	str	r4, [r4, #32]
 8004596:	6323      	str	r3, [r4, #48]	; 0x30
 8004598:	bd10      	pop	{r4, pc}
 800459a:	bf00      	nop
 800459c:	08004fdd 	.word	0x08004fdd
 80045a0:	08004fff 	.word	0x08004fff
 80045a4:	08005037 	.word	0x08005037
 80045a8:	0800505b 	.word	0x0800505b

080045ac <_cleanup_r>:
 80045ac:	4901      	ldr	r1, [pc, #4]	; (80045b4 <_cleanup_r+0x8>)
 80045ae:	f000 b8af 	b.w	8004710 <_fwalk_reent>
 80045b2:	bf00      	nop
 80045b4:	080044ed 	.word	0x080044ed

080045b8 <__sfmoreglue>:
 80045b8:	b570      	push	{r4, r5, r6, lr}
 80045ba:	2268      	movs	r2, #104	; 0x68
 80045bc:	1e4d      	subs	r5, r1, #1
 80045be:	4355      	muls	r5, r2
 80045c0:	460e      	mov	r6, r1
 80045c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045c6:	f000 f997 	bl	80048f8 <_malloc_r>
 80045ca:	4604      	mov	r4, r0
 80045cc:	b140      	cbz	r0, 80045e0 <__sfmoreglue+0x28>
 80045ce:	2100      	movs	r1, #0
 80045d0:	e9c0 1600 	strd	r1, r6, [r0]
 80045d4:	300c      	adds	r0, #12
 80045d6:	60a0      	str	r0, [r4, #8]
 80045d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045dc:	f7ff fdaa 	bl	8004134 <memset>
 80045e0:	4620      	mov	r0, r4
 80045e2:	bd70      	pop	{r4, r5, r6, pc}

080045e4 <__sfp_lock_acquire>:
 80045e4:	4801      	ldr	r0, [pc, #4]	; (80045ec <__sfp_lock_acquire+0x8>)
 80045e6:	f000 b8b3 	b.w	8004750 <__retarget_lock_acquire_recursive>
 80045ea:	bf00      	nop
 80045ec:	2000062d 	.word	0x2000062d

080045f0 <__sfp_lock_release>:
 80045f0:	4801      	ldr	r0, [pc, #4]	; (80045f8 <__sfp_lock_release+0x8>)
 80045f2:	f000 b8ae 	b.w	8004752 <__retarget_lock_release_recursive>
 80045f6:	bf00      	nop
 80045f8:	2000062d 	.word	0x2000062d

080045fc <__sinit_lock_acquire>:
 80045fc:	4801      	ldr	r0, [pc, #4]	; (8004604 <__sinit_lock_acquire+0x8>)
 80045fe:	f000 b8a7 	b.w	8004750 <__retarget_lock_acquire_recursive>
 8004602:	bf00      	nop
 8004604:	2000062e 	.word	0x2000062e

08004608 <__sinit_lock_release>:
 8004608:	4801      	ldr	r0, [pc, #4]	; (8004610 <__sinit_lock_release+0x8>)
 800460a:	f000 b8a2 	b.w	8004752 <__retarget_lock_release_recursive>
 800460e:	bf00      	nop
 8004610:	2000062e 	.word	0x2000062e

08004614 <__sinit>:
 8004614:	b510      	push	{r4, lr}
 8004616:	4604      	mov	r4, r0
 8004618:	f7ff fff0 	bl	80045fc <__sinit_lock_acquire>
 800461c:	69a3      	ldr	r3, [r4, #24]
 800461e:	b11b      	cbz	r3, 8004628 <__sinit+0x14>
 8004620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004624:	f7ff bff0 	b.w	8004608 <__sinit_lock_release>
 8004628:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800462c:	6523      	str	r3, [r4, #80]	; 0x50
 800462e:	4b13      	ldr	r3, [pc, #76]	; (800467c <__sinit+0x68>)
 8004630:	4a13      	ldr	r2, [pc, #76]	; (8004680 <__sinit+0x6c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	62a2      	str	r2, [r4, #40]	; 0x28
 8004636:	42a3      	cmp	r3, r4
 8004638:	bf04      	itt	eq
 800463a:	2301      	moveq	r3, #1
 800463c:	61a3      	streq	r3, [r4, #24]
 800463e:	4620      	mov	r0, r4
 8004640:	f000 f820 	bl	8004684 <__sfp>
 8004644:	6060      	str	r0, [r4, #4]
 8004646:	4620      	mov	r0, r4
 8004648:	f000 f81c 	bl	8004684 <__sfp>
 800464c:	60a0      	str	r0, [r4, #8]
 800464e:	4620      	mov	r0, r4
 8004650:	f000 f818 	bl	8004684 <__sfp>
 8004654:	2200      	movs	r2, #0
 8004656:	60e0      	str	r0, [r4, #12]
 8004658:	2104      	movs	r1, #4
 800465a:	6860      	ldr	r0, [r4, #4]
 800465c:	f7ff ff82 	bl	8004564 <std>
 8004660:	68a0      	ldr	r0, [r4, #8]
 8004662:	2201      	movs	r2, #1
 8004664:	2109      	movs	r1, #9
 8004666:	f7ff ff7d 	bl	8004564 <std>
 800466a:	68e0      	ldr	r0, [r4, #12]
 800466c:	2202      	movs	r2, #2
 800466e:	2112      	movs	r1, #18
 8004670:	f7ff ff78 	bl	8004564 <std>
 8004674:	2301      	movs	r3, #1
 8004676:	61a3      	str	r3, [r4, #24]
 8004678:	e7d2      	b.n	8004620 <__sinit+0xc>
 800467a:	bf00      	nop
 800467c:	0800544c 	.word	0x0800544c
 8004680:	080045ad 	.word	0x080045ad

08004684 <__sfp>:
 8004684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004686:	4607      	mov	r7, r0
 8004688:	f7ff ffac 	bl	80045e4 <__sfp_lock_acquire>
 800468c:	4b1e      	ldr	r3, [pc, #120]	; (8004708 <__sfp+0x84>)
 800468e:	681e      	ldr	r6, [r3, #0]
 8004690:	69b3      	ldr	r3, [r6, #24]
 8004692:	b913      	cbnz	r3, 800469a <__sfp+0x16>
 8004694:	4630      	mov	r0, r6
 8004696:	f7ff ffbd 	bl	8004614 <__sinit>
 800469a:	3648      	adds	r6, #72	; 0x48
 800469c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80046a0:	3b01      	subs	r3, #1
 80046a2:	d503      	bpl.n	80046ac <__sfp+0x28>
 80046a4:	6833      	ldr	r3, [r6, #0]
 80046a6:	b30b      	cbz	r3, 80046ec <__sfp+0x68>
 80046a8:	6836      	ldr	r6, [r6, #0]
 80046aa:	e7f7      	b.n	800469c <__sfp+0x18>
 80046ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80046b0:	b9d5      	cbnz	r5, 80046e8 <__sfp+0x64>
 80046b2:	4b16      	ldr	r3, [pc, #88]	; (800470c <__sfp+0x88>)
 80046b4:	60e3      	str	r3, [r4, #12]
 80046b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80046ba:	6665      	str	r5, [r4, #100]	; 0x64
 80046bc:	f000 f847 	bl	800474e <__retarget_lock_init_recursive>
 80046c0:	f7ff ff96 	bl	80045f0 <__sfp_lock_release>
 80046c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80046c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80046cc:	6025      	str	r5, [r4, #0]
 80046ce:	61a5      	str	r5, [r4, #24]
 80046d0:	2208      	movs	r2, #8
 80046d2:	4629      	mov	r1, r5
 80046d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046d8:	f7ff fd2c 	bl	8004134 <memset>
 80046dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80046e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80046e4:	4620      	mov	r0, r4
 80046e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046e8:	3468      	adds	r4, #104	; 0x68
 80046ea:	e7d9      	b.n	80046a0 <__sfp+0x1c>
 80046ec:	2104      	movs	r1, #4
 80046ee:	4638      	mov	r0, r7
 80046f0:	f7ff ff62 	bl	80045b8 <__sfmoreglue>
 80046f4:	4604      	mov	r4, r0
 80046f6:	6030      	str	r0, [r6, #0]
 80046f8:	2800      	cmp	r0, #0
 80046fa:	d1d5      	bne.n	80046a8 <__sfp+0x24>
 80046fc:	f7ff ff78 	bl	80045f0 <__sfp_lock_release>
 8004700:	230c      	movs	r3, #12
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	e7ee      	b.n	80046e4 <__sfp+0x60>
 8004706:	bf00      	nop
 8004708:	0800544c 	.word	0x0800544c
 800470c:	ffff0001 	.word	0xffff0001

08004710 <_fwalk_reent>:
 8004710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004714:	4606      	mov	r6, r0
 8004716:	4688      	mov	r8, r1
 8004718:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800471c:	2700      	movs	r7, #0
 800471e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004722:	f1b9 0901 	subs.w	r9, r9, #1
 8004726:	d505      	bpl.n	8004734 <_fwalk_reent+0x24>
 8004728:	6824      	ldr	r4, [r4, #0]
 800472a:	2c00      	cmp	r4, #0
 800472c:	d1f7      	bne.n	800471e <_fwalk_reent+0xe>
 800472e:	4638      	mov	r0, r7
 8004730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004734:	89ab      	ldrh	r3, [r5, #12]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d907      	bls.n	800474a <_fwalk_reent+0x3a>
 800473a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800473e:	3301      	adds	r3, #1
 8004740:	d003      	beq.n	800474a <_fwalk_reent+0x3a>
 8004742:	4629      	mov	r1, r5
 8004744:	4630      	mov	r0, r6
 8004746:	47c0      	blx	r8
 8004748:	4307      	orrs	r7, r0
 800474a:	3568      	adds	r5, #104	; 0x68
 800474c:	e7e9      	b.n	8004722 <_fwalk_reent+0x12>

0800474e <__retarget_lock_init_recursive>:
 800474e:	4770      	bx	lr

08004750 <__retarget_lock_acquire_recursive>:
 8004750:	4770      	bx	lr

08004752 <__retarget_lock_release_recursive>:
 8004752:	4770      	bx	lr

08004754 <__swhatbuf_r>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	460e      	mov	r6, r1
 8004758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800475c:	2900      	cmp	r1, #0
 800475e:	b096      	sub	sp, #88	; 0x58
 8004760:	4614      	mov	r4, r2
 8004762:	461d      	mov	r5, r3
 8004764:	da08      	bge.n	8004778 <__swhatbuf_r+0x24>
 8004766:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	602a      	str	r2, [r5, #0]
 800476e:	061a      	lsls	r2, r3, #24
 8004770:	d410      	bmi.n	8004794 <__swhatbuf_r+0x40>
 8004772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004776:	e00e      	b.n	8004796 <__swhatbuf_r+0x42>
 8004778:	466a      	mov	r2, sp
 800477a:	f000 fc95 	bl	80050a8 <_fstat_r>
 800477e:	2800      	cmp	r0, #0
 8004780:	dbf1      	blt.n	8004766 <__swhatbuf_r+0x12>
 8004782:	9a01      	ldr	r2, [sp, #4]
 8004784:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004788:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800478c:	425a      	negs	r2, r3
 800478e:	415a      	adcs	r2, r3
 8004790:	602a      	str	r2, [r5, #0]
 8004792:	e7ee      	b.n	8004772 <__swhatbuf_r+0x1e>
 8004794:	2340      	movs	r3, #64	; 0x40
 8004796:	2000      	movs	r0, #0
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	b016      	add	sp, #88	; 0x58
 800479c:	bd70      	pop	{r4, r5, r6, pc}
	...

080047a0 <__smakebuf_r>:
 80047a0:	898b      	ldrh	r3, [r1, #12]
 80047a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047a4:	079d      	lsls	r5, r3, #30
 80047a6:	4606      	mov	r6, r0
 80047a8:	460c      	mov	r4, r1
 80047aa:	d507      	bpl.n	80047bc <__smakebuf_r+0x1c>
 80047ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	6123      	str	r3, [r4, #16]
 80047b4:	2301      	movs	r3, #1
 80047b6:	6163      	str	r3, [r4, #20]
 80047b8:	b002      	add	sp, #8
 80047ba:	bd70      	pop	{r4, r5, r6, pc}
 80047bc:	ab01      	add	r3, sp, #4
 80047be:	466a      	mov	r2, sp
 80047c0:	f7ff ffc8 	bl	8004754 <__swhatbuf_r>
 80047c4:	9900      	ldr	r1, [sp, #0]
 80047c6:	4605      	mov	r5, r0
 80047c8:	4630      	mov	r0, r6
 80047ca:	f000 f895 	bl	80048f8 <_malloc_r>
 80047ce:	b948      	cbnz	r0, 80047e4 <__smakebuf_r+0x44>
 80047d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047d4:	059a      	lsls	r2, r3, #22
 80047d6:	d4ef      	bmi.n	80047b8 <__smakebuf_r+0x18>
 80047d8:	f023 0303 	bic.w	r3, r3, #3
 80047dc:	f043 0302 	orr.w	r3, r3, #2
 80047e0:	81a3      	strh	r3, [r4, #12]
 80047e2:	e7e3      	b.n	80047ac <__smakebuf_r+0xc>
 80047e4:	4b0d      	ldr	r3, [pc, #52]	; (800481c <__smakebuf_r+0x7c>)
 80047e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80047e8:	89a3      	ldrh	r3, [r4, #12]
 80047ea:	6020      	str	r0, [r4, #0]
 80047ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f0:	81a3      	strh	r3, [r4, #12]
 80047f2:	9b00      	ldr	r3, [sp, #0]
 80047f4:	6163      	str	r3, [r4, #20]
 80047f6:	9b01      	ldr	r3, [sp, #4]
 80047f8:	6120      	str	r0, [r4, #16]
 80047fa:	b15b      	cbz	r3, 8004814 <__smakebuf_r+0x74>
 80047fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004800:	4630      	mov	r0, r6
 8004802:	f000 fc63 	bl	80050cc <_isatty_r>
 8004806:	b128      	cbz	r0, 8004814 <__smakebuf_r+0x74>
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	f023 0303 	bic.w	r3, r3, #3
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	81a3      	strh	r3, [r4, #12]
 8004814:	89a0      	ldrh	r0, [r4, #12]
 8004816:	4305      	orrs	r5, r0
 8004818:	81a5      	strh	r5, [r4, #12]
 800481a:	e7cd      	b.n	80047b8 <__smakebuf_r+0x18>
 800481c:	080045ad 	.word	0x080045ad

08004820 <_free_r>:
 8004820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004822:	2900      	cmp	r1, #0
 8004824:	d044      	beq.n	80048b0 <_free_r+0x90>
 8004826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800482a:	9001      	str	r0, [sp, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f1a1 0404 	sub.w	r4, r1, #4
 8004832:	bfb8      	it	lt
 8004834:	18e4      	addlt	r4, r4, r3
 8004836:	f000 fc6b 	bl	8005110 <__malloc_lock>
 800483a:	4a1e      	ldr	r2, [pc, #120]	; (80048b4 <_free_r+0x94>)
 800483c:	9801      	ldr	r0, [sp, #4]
 800483e:	6813      	ldr	r3, [r2, #0]
 8004840:	b933      	cbnz	r3, 8004850 <_free_r+0x30>
 8004842:	6063      	str	r3, [r4, #4]
 8004844:	6014      	str	r4, [r2, #0]
 8004846:	b003      	add	sp, #12
 8004848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800484c:	f000 bc66 	b.w	800511c <__malloc_unlock>
 8004850:	42a3      	cmp	r3, r4
 8004852:	d908      	bls.n	8004866 <_free_r+0x46>
 8004854:	6825      	ldr	r5, [r4, #0]
 8004856:	1961      	adds	r1, r4, r5
 8004858:	428b      	cmp	r3, r1
 800485a:	bf01      	itttt	eq
 800485c:	6819      	ldreq	r1, [r3, #0]
 800485e:	685b      	ldreq	r3, [r3, #4]
 8004860:	1949      	addeq	r1, r1, r5
 8004862:	6021      	streq	r1, [r4, #0]
 8004864:	e7ed      	b.n	8004842 <_free_r+0x22>
 8004866:	461a      	mov	r2, r3
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	b10b      	cbz	r3, 8004870 <_free_r+0x50>
 800486c:	42a3      	cmp	r3, r4
 800486e:	d9fa      	bls.n	8004866 <_free_r+0x46>
 8004870:	6811      	ldr	r1, [r2, #0]
 8004872:	1855      	adds	r5, r2, r1
 8004874:	42a5      	cmp	r5, r4
 8004876:	d10b      	bne.n	8004890 <_free_r+0x70>
 8004878:	6824      	ldr	r4, [r4, #0]
 800487a:	4421      	add	r1, r4
 800487c:	1854      	adds	r4, r2, r1
 800487e:	42a3      	cmp	r3, r4
 8004880:	6011      	str	r1, [r2, #0]
 8004882:	d1e0      	bne.n	8004846 <_free_r+0x26>
 8004884:	681c      	ldr	r4, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	6053      	str	r3, [r2, #4]
 800488a:	4421      	add	r1, r4
 800488c:	6011      	str	r1, [r2, #0]
 800488e:	e7da      	b.n	8004846 <_free_r+0x26>
 8004890:	d902      	bls.n	8004898 <_free_r+0x78>
 8004892:	230c      	movs	r3, #12
 8004894:	6003      	str	r3, [r0, #0]
 8004896:	e7d6      	b.n	8004846 <_free_r+0x26>
 8004898:	6825      	ldr	r5, [r4, #0]
 800489a:	1961      	adds	r1, r4, r5
 800489c:	428b      	cmp	r3, r1
 800489e:	bf04      	itt	eq
 80048a0:	6819      	ldreq	r1, [r3, #0]
 80048a2:	685b      	ldreq	r3, [r3, #4]
 80048a4:	6063      	str	r3, [r4, #4]
 80048a6:	bf04      	itt	eq
 80048a8:	1949      	addeq	r1, r1, r5
 80048aa:	6021      	streq	r1, [r4, #0]
 80048ac:	6054      	str	r4, [r2, #4]
 80048ae:	e7ca      	b.n	8004846 <_free_r+0x26>
 80048b0:	b003      	add	sp, #12
 80048b2:	bd30      	pop	{r4, r5, pc}
 80048b4:	20000630 	.word	0x20000630

080048b8 <sbrk_aligned>:
 80048b8:	b570      	push	{r4, r5, r6, lr}
 80048ba:	4e0e      	ldr	r6, [pc, #56]	; (80048f4 <sbrk_aligned+0x3c>)
 80048bc:	460c      	mov	r4, r1
 80048be:	6831      	ldr	r1, [r6, #0]
 80048c0:	4605      	mov	r5, r0
 80048c2:	b911      	cbnz	r1, 80048ca <sbrk_aligned+0x12>
 80048c4:	f000 fb7a 	bl	8004fbc <_sbrk_r>
 80048c8:	6030      	str	r0, [r6, #0]
 80048ca:	4621      	mov	r1, r4
 80048cc:	4628      	mov	r0, r5
 80048ce:	f000 fb75 	bl	8004fbc <_sbrk_r>
 80048d2:	1c43      	adds	r3, r0, #1
 80048d4:	d00a      	beq.n	80048ec <sbrk_aligned+0x34>
 80048d6:	1cc4      	adds	r4, r0, #3
 80048d8:	f024 0403 	bic.w	r4, r4, #3
 80048dc:	42a0      	cmp	r0, r4
 80048de:	d007      	beq.n	80048f0 <sbrk_aligned+0x38>
 80048e0:	1a21      	subs	r1, r4, r0
 80048e2:	4628      	mov	r0, r5
 80048e4:	f000 fb6a 	bl	8004fbc <_sbrk_r>
 80048e8:	3001      	adds	r0, #1
 80048ea:	d101      	bne.n	80048f0 <sbrk_aligned+0x38>
 80048ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80048f0:	4620      	mov	r0, r4
 80048f2:	bd70      	pop	{r4, r5, r6, pc}
 80048f4:	20000634 	.word	0x20000634

080048f8 <_malloc_r>:
 80048f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048fc:	1ccd      	adds	r5, r1, #3
 80048fe:	f025 0503 	bic.w	r5, r5, #3
 8004902:	3508      	adds	r5, #8
 8004904:	2d0c      	cmp	r5, #12
 8004906:	bf38      	it	cc
 8004908:	250c      	movcc	r5, #12
 800490a:	2d00      	cmp	r5, #0
 800490c:	4607      	mov	r7, r0
 800490e:	db01      	blt.n	8004914 <_malloc_r+0x1c>
 8004910:	42a9      	cmp	r1, r5
 8004912:	d905      	bls.n	8004920 <_malloc_r+0x28>
 8004914:	230c      	movs	r3, #12
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	2600      	movs	r6, #0
 800491a:	4630      	mov	r0, r6
 800491c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004920:	4e2e      	ldr	r6, [pc, #184]	; (80049dc <_malloc_r+0xe4>)
 8004922:	f000 fbf5 	bl	8005110 <__malloc_lock>
 8004926:	6833      	ldr	r3, [r6, #0]
 8004928:	461c      	mov	r4, r3
 800492a:	bb34      	cbnz	r4, 800497a <_malloc_r+0x82>
 800492c:	4629      	mov	r1, r5
 800492e:	4638      	mov	r0, r7
 8004930:	f7ff ffc2 	bl	80048b8 <sbrk_aligned>
 8004934:	1c43      	adds	r3, r0, #1
 8004936:	4604      	mov	r4, r0
 8004938:	d14d      	bne.n	80049d6 <_malloc_r+0xde>
 800493a:	6834      	ldr	r4, [r6, #0]
 800493c:	4626      	mov	r6, r4
 800493e:	2e00      	cmp	r6, #0
 8004940:	d140      	bne.n	80049c4 <_malloc_r+0xcc>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	4631      	mov	r1, r6
 8004946:	4638      	mov	r0, r7
 8004948:	eb04 0803 	add.w	r8, r4, r3
 800494c:	f000 fb36 	bl	8004fbc <_sbrk_r>
 8004950:	4580      	cmp	r8, r0
 8004952:	d13a      	bne.n	80049ca <_malloc_r+0xd2>
 8004954:	6821      	ldr	r1, [r4, #0]
 8004956:	3503      	adds	r5, #3
 8004958:	1a6d      	subs	r5, r5, r1
 800495a:	f025 0503 	bic.w	r5, r5, #3
 800495e:	3508      	adds	r5, #8
 8004960:	2d0c      	cmp	r5, #12
 8004962:	bf38      	it	cc
 8004964:	250c      	movcc	r5, #12
 8004966:	4629      	mov	r1, r5
 8004968:	4638      	mov	r0, r7
 800496a:	f7ff ffa5 	bl	80048b8 <sbrk_aligned>
 800496e:	3001      	adds	r0, #1
 8004970:	d02b      	beq.n	80049ca <_malloc_r+0xd2>
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	442b      	add	r3, r5
 8004976:	6023      	str	r3, [r4, #0]
 8004978:	e00e      	b.n	8004998 <_malloc_r+0xa0>
 800497a:	6822      	ldr	r2, [r4, #0]
 800497c:	1b52      	subs	r2, r2, r5
 800497e:	d41e      	bmi.n	80049be <_malloc_r+0xc6>
 8004980:	2a0b      	cmp	r2, #11
 8004982:	d916      	bls.n	80049b2 <_malloc_r+0xba>
 8004984:	1961      	adds	r1, r4, r5
 8004986:	42a3      	cmp	r3, r4
 8004988:	6025      	str	r5, [r4, #0]
 800498a:	bf18      	it	ne
 800498c:	6059      	strne	r1, [r3, #4]
 800498e:	6863      	ldr	r3, [r4, #4]
 8004990:	bf08      	it	eq
 8004992:	6031      	streq	r1, [r6, #0]
 8004994:	5162      	str	r2, [r4, r5]
 8004996:	604b      	str	r3, [r1, #4]
 8004998:	4638      	mov	r0, r7
 800499a:	f104 060b 	add.w	r6, r4, #11
 800499e:	f000 fbbd 	bl	800511c <__malloc_unlock>
 80049a2:	f026 0607 	bic.w	r6, r6, #7
 80049a6:	1d23      	adds	r3, r4, #4
 80049a8:	1af2      	subs	r2, r6, r3
 80049aa:	d0b6      	beq.n	800491a <_malloc_r+0x22>
 80049ac:	1b9b      	subs	r3, r3, r6
 80049ae:	50a3      	str	r3, [r4, r2]
 80049b0:	e7b3      	b.n	800491a <_malloc_r+0x22>
 80049b2:	6862      	ldr	r2, [r4, #4]
 80049b4:	42a3      	cmp	r3, r4
 80049b6:	bf0c      	ite	eq
 80049b8:	6032      	streq	r2, [r6, #0]
 80049ba:	605a      	strne	r2, [r3, #4]
 80049bc:	e7ec      	b.n	8004998 <_malloc_r+0xa0>
 80049be:	4623      	mov	r3, r4
 80049c0:	6864      	ldr	r4, [r4, #4]
 80049c2:	e7b2      	b.n	800492a <_malloc_r+0x32>
 80049c4:	4634      	mov	r4, r6
 80049c6:	6876      	ldr	r6, [r6, #4]
 80049c8:	e7b9      	b.n	800493e <_malloc_r+0x46>
 80049ca:	230c      	movs	r3, #12
 80049cc:	603b      	str	r3, [r7, #0]
 80049ce:	4638      	mov	r0, r7
 80049d0:	f000 fba4 	bl	800511c <__malloc_unlock>
 80049d4:	e7a1      	b.n	800491a <_malloc_r+0x22>
 80049d6:	6025      	str	r5, [r4, #0]
 80049d8:	e7de      	b.n	8004998 <_malloc_r+0xa0>
 80049da:	bf00      	nop
 80049dc:	20000630 	.word	0x20000630

080049e0 <__sfputc_r>:
 80049e0:	6893      	ldr	r3, [r2, #8]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	b410      	push	{r4}
 80049e8:	6093      	str	r3, [r2, #8]
 80049ea:	da08      	bge.n	80049fe <__sfputc_r+0x1e>
 80049ec:	6994      	ldr	r4, [r2, #24]
 80049ee:	42a3      	cmp	r3, r4
 80049f0:	db01      	blt.n	80049f6 <__sfputc_r+0x16>
 80049f2:	290a      	cmp	r1, #10
 80049f4:	d103      	bne.n	80049fe <__sfputc_r+0x1e>
 80049f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049fa:	f7ff bc31 	b.w	8004260 <__swbuf_r>
 80049fe:	6813      	ldr	r3, [r2, #0]
 8004a00:	1c58      	adds	r0, r3, #1
 8004a02:	6010      	str	r0, [r2, #0]
 8004a04:	7019      	strb	r1, [r3, #0]
 8004a06:	4608      	mov	r0, r1
 8004a08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <__sfputs_r>:
 8004a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a10:	4606      	mov	r6, r0
 8004a12:	460f      	mov	r7, r1
 8004a14:	4614      	mov	r4, r2
 8004a16:	18d5      	adds	r5, r2, r3
 8004a18:	42ac      	cmp	r4, r5
 8004a1a:	d101      	bne.n	8004a20 <__sfputs_r+0x12>
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	e007      	b.n	8004a30 <__sfputs_r+0x22>
 8004a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a24:	463a      	mov	r2, r7
 8004a26:	4630      	mov	r0, r6
 8004a28:	f7ff ffda 	bl	80049e0 <__sfputc_r>
 8004a2c:	1c43      	adds	r3, r0, #1
 8004a2e:	d1f3      	bne.n	8004a18 <__sfputs_r+0xa>
 8004a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a34 <_vfiprintf_r>:
 8004a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a38:	460d      	mov	r5, r1
 8004a3a:	b09d      	sub	sp, #116	; 0x74
 8004a3c:	4614      	mov	r4, r2
 8004a3e:	4698      	mov	r8, r3
 8004a40:	4606      	mov	r6, r0
 8004a42:	b118      	cbz	r0, 8004a4c <_vfiprintf_r+0x18>
 8004a44:	6983      	ldr	r3, [r0, #24]
 8004a46:	b90b      	cbnz	r3, 8004a4c <_vfiprintf_r+0x18>
 8004a48:	f7ff fde4 	bl	8004614 <__sinit>
 8004a4c:	4b89      	ldr	r3, [pc, #548]	; (8004c74 <_vfiprintf_r+0x240>)
 8004a4e:	429d      	cmp	r5, r3
 8004a50:	d11b      	bne.n	8004a8a <_vfiprintf_r+0x56>
 8004a52:	6875      	ldr	r5, [r6, #4]
 8004a54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a56:	07d9      	lsls	r1, r3, #31
 8004a58:	d405      	bmi.n	8004a66 <_vfiprintf_r+0x32>
 8004a5a:	89ab      	ldrh	r3, [r5, #12]
 8004a5c:	059a      	lsls	r2, r3, #22
 8004a5e:	d402      	bmi.n	8004a66 <_vfiprintf_r+0x32>
 8004a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a62:	f7ff fe75 	bl	8004750 <__retarget_lock_acquire_recursive>
 8004a66:	89ab      	ldrh	r3, [r5, #12]
 8004a68:	071b      	lsls	r3, r3, #28
 8004a6a:	d501      	bpl.n	8004a70 <_vfiprintf_r+0x3c>
 8004a6c:	692b      	ldr	r3, [r5, #16]
 8004a6e:	b9eb      	cbnz	r3, 8004aac <_vfiprintf_r+0x78>
 8004a70:	4629      	mov	r1, r5
 8004a72:	4630      	mov	r0, r6
 8004a74:	f7ff fc46 	bl	8004304 <__swsetup_r>
 8004a78:	b1c0      	cbz	r0, 8004aac <_vfiprintf_r+0x78>
 8004a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a7c:	07dc      	lsls	r4, r3, #31
 8004a7e:	d50e      	bpl.n	8004a9e <_vfiprintf_r+0x6a>
 8004a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a84:	b01d      	add	sp, #116	; 0x74
 8004a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a8a:	4b7b      	ldr	r3, [pc, #492]	; (8004c78 <_vfiprintf_r+0x244>)
 8004a8c:	429d      	cmp	r5, r3
 8004a8e:	d101      	bne.n	8004a94 <_vfiprintf_r+0x60>
 8004a90:	68b5      	ldr	r5, [r6, #8]
 8004a92:	e7df      	b.n	8004a54 <_vfiprintf_r+0x20>
 8004a94:	4b79      	ldr	r3, [pc, #484]	; (8004c7c <_vfiprintf_r+0x248>)
 8004a96:	429d      	cmp	r5, r3
 8004a98:	bf08      	it	eq
 8004a9a:	68f5      	ldreq	r5, [r6, #12]
 8004a9c:	e7da      	b.n	8004a54 <_vfiprintf_r+0x20>
 8004a9e:	89ab      	ldrh	r3, [r5, #12]
 8004aa0:	0598      	lsls	r0, r3, #22
 8004aa2:	d4ed      	bmi.n	8004a80 <_vfiprintf_r+0x4c>
 8004aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004aa6:	f7ff fe54 	bl	8004752 <__retarget_lock_release_recursive>
 8004aaa:	e7e9      	b.n	8004a80 <_vfiprintf_r+0x4c>
 8004aac:	2300      	movs	r3, #0
 8004aae:	9309      	str	r3, [sp, #36]	; 0x24
 8004ab0:	2320      	movs	r3, #32
 8004ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ab6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004aba:	2330      	movs	r3, #48	; 0x30
 8004abc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004c80 <_vfiprintf_r+0x24c>
 8004ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ac4:	f04f 0901 	mov.w	r9, #1
 8004ac8:	4623      	mov	r3, r4
 8004aca:	469a      	mov	sl, r3
 8004acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ad0:	b10a      	cbz	r2, 8004ad6 <_vfiprintf_r+0xa2>
 8004ad2:	2a25      	cmp	r2, #37	; 0x25
 8004ad4:	d1f9      	bne.n	8004aca <_vfiprintf_r+0x96>
 8004ad6:	ebba 0b04 	subs.w	fp, sl, r4
 8004ada:	d00b      	beq.n	8004af4 <_vfiprintf_r+0xc0>
 8004adc:	465b      	mov	r3, fp
 8004ade:	4622      	mov	r2, r4
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	f7ff ff93 	bl	8004a0e <__sfputs_r>
 8004ae8:	3001      	adds	r0, #1
 8004aea:	f000 80aa 	beq.w	8004c42 <_vfiprintf_r+0x20e>
 8004aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004af0:	445a      	add	r2, fp
 8004af2:	9209      	str	r2, [sp, #36]	; 0x24
 8004af4:	f89a 3000 	ldrb.w	r3, [sl]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80a2 	beq.w	8004c42 <_vfiprintf_r+0x20e>
 8004afe:	2300      	movs	r3, #0
 8004b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b08:	f10a 0a01 	add.w	sl, sl, #1
 8004b0c:	9304      	str	r3, [sp, #16]
 8004b0e:	9307      	str	r3, [sp, #28]
 8004b10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b14:	931a      	str	r3, [sp, #104]	; 0x68
 8004b16:	4654      	mov	r4, sl
 8004b18:	2205      	movs	r2, #5
 8004b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b1e:	4858      	ldr	r0, [pc, #352]	; (8004c80 <_vfiprintf_r+0x24c>)
 8004b20:	f7fb fb56 	bl	80001d0 <memchr>
 8004b24:	9a04      	ldr	r2, [sp, #16]
 8004b26:	b9d8      	cbnz	r0, 8004b60 <_vfiprintf_r+0x12c>
 8004b28:	06d1      	lsls	r1, r2, #27
 8004b2a:	bf44      	itt	mi
 8004b2c:	2320      	movmi	r3, #32
 8004b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b32:	0713      	lsls	r3, r2, #28
 8004b34:	bf44      	itt	mi
 8004b36:	232b      	movmi	r3, #43	; 0x2b
 8004b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b40:	2b2a      	cmp	r3, #42	; 0x2a
 8004b42:	d015      	beq.n	8004b70 <_vfiprintf_r+0x13c>
 8004b44:	9a07      	ldr	r2, [sp, #28]
 8004b46:	4654      	mov	r4, sl
 8004b48:	2000      	movs	r0, #0
 8004b4a:	f04f 0c0a 	mov.w	ip, #10
 8004b4e:	4621      	mov	r1, r4
 8004b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b54:	3b30      	subs	r3, #48	; 0x30
 8004b56:	2b09      	cmp	r3, #9
 8004b58:	d94e      	bls.n	8004bf8 <_vfiprintf_r+0x1c4>
 8004b5a:	b1b0      	cbz	r0, 8004b8a <_vfiprintf_r+0x156>
 8004b5c:	9207      	str	r2, [sp, #28]
 8004b5e:	e014      	b.n	8004b8a <_vfiprintf_r+0x156>
 8004b60:	eba0 0308 	sub.w	r3, r0, r8
 8004b64:	fa09 f303 	lsl.w	r3, r9, r3
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	9304      	str	r3, [sp, #16]
 8004b6c:	46a2      	mov	sl, r4
 8004b6e:	e7d2      	b.n	8004b16 <_vfiprintf_r+0xe2>
 8004b70:	9b03      	ldr	r3, [sp, #12]
 8004b72:	1d19      	adds	r1, r3, #4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	9103      	str	r1, [sp, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bfbb      	ittet	lt
 8004b7c:	425b      	neglt	r3, r3
 8004b7e:	f042 0202 	orrlt.w	r2, r2, #2
 8004b82:	9307      	strge	r3, [sp, #28]
 8004b84:	9307      	strlt	r3, [sp, #28]
 8004b86:	bfb8      	it	lt
 8004b88:	9204      	strlt	r2, [sp, #16]
 8004b8a:	7823      	ldrb	r3, [r4, #0]
 8004b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8004b8e:	d10c      	bne.n	8004baa <_vfiprintf_r+0x176>
 8004b90:	7863      	ldrb	r3, [r4, #1]
 8004b92:	2b2a      	cmp	r3, #42	; 0x2a
 8004b94:	d135      	bne.n	8004c02 <_vfiprintf_r+0x1ce>
 8004b96:	9b03      	ldr	r3, [sp, #12]
 8004b98:	1d1a      	adds	r2, r3, #4
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	9203      	str	r2, [sp, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bfb8      	it	lt
 8004ba2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004ba6:	3402      	adds	r4, #2
 8004ba8:	9305      	str	r3, [sp, #20]
 8004baa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004c90 <_vfiprintf_r+0x25c>
 8004bae:	7821      	ldrb	r1, [r4, #0]
 8004bb0:	2203      	movs	r2, #3
 8004bb2:	4650      	mov	r0, sl
 8004bb4:	f7fb fb0c 	bl	80001d0 <memchr>
 8004bb8:	b140      	cbz	r0, 8004bcc <_vfiprintf_r+0x198>
 8004bba:	2340      	movs	r3, #64	; 0x40
 8004bbc:	eba0 000a 	sub.w	r0, r0, sl
 8004bc0:	fa03 f000 	lsl.w	r0, r3, r0
 8004bc4:	9b04      	ldr	r3, [sp, #16]
 8004bc6:	4303      	orrs	r3, r0
 8004bc8:	3401      	adds	r4, #1
 8004bca:	9304      	str	r3, [sp, #16]
 8004bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bd0:	482c      	ldr	r0, [pc, #176]	; (8004c84 <_vfiprintf_r+0x250>)
 8004bd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bd6:	2206      	movs	r2, #6
 8004bd8:	f7fb fafa 	bl	80001d0 <memchr>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d03f      	beq.n	8004c60 <_vfiprintf_r+0x22c>
 8004be0:	4b29      	ldr	r3, [pc, #164]	; (8004c88 <_vfiprintf_r+0x254>)
 8004be2:	bb1b      	cbnz	r3, 8004c2c <_vfiprintf_r+0x1f8>
 8004be4:	9b03      	ldr	r3, [sp, #12]
 8004be6:	3307      	adds	r3, #7
 8004be8:	f023 0307 	bic.w	r3, r3, #7
 8004bec:	3308      	adds	r3, #8
 8004bee:	9303      	str	r3, [sp, #12]
 8004bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf2:	443b      	add	r3, r7
 8004bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8004bf6:	e767      	b.n	8004ac8 <_vfiprintf_r+0x94>
 8004bf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	2001      	movs	r0, #1
 8004c00:	e7a5      	b.n	8004b4e <_vfiprintf_r+0x11a>
 8004c02:	2300      	movs	r3, #0
 8004c04:	3401      	adds	r4, #1
 8004c06:	9305      	str	r3, [sp, #20]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	f04f 0c0a 	mov.w	ip, #10
 8004c0e:	4620      	mov	r0, r4
 8004c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c14:	3a30      	subs	r2, #48	; 0x30
 8004c16:	2a09      	cmp	r2, #9
 8004c18:	d903      	bls.n	8004c22 <_vfiprintf_r+0x1ee>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0c5      	beq.n	8004baa <_vfiprintf_r+0x176>
 8004c1e:	9105      	str	r1, [sp, #20]
 8004c20:	e7c3      	b.n	8004baa <_vfiprintf_r+0x176>
 8004c22:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c26:	4604      	mov	r4, r0
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e7f0      	b.n	8004c0e <_vfiprintf_r+0x1da>
 8004c2c:	ab03      	add	r3, sp, #12
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	462a      	mov	r2, r5
 8004c32:	4b16      	ldr	r3, [pc, #88]	; (8004c8c <_vfiprintf_r+0x258>)
 8004c34:	a904      	add	r1, sp, #16
 8004c36:	4630      	mov	r0, r6
 8004c38:	f3af 8000 	nop.w
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	1c78      	adds	r0, r7, #1
 8004c40:	d1d6      	bne.n	8004bf0 <_vfiprintf_r+0x1bc>
 8004c42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c44:	07d9      	lsls	r1, r3, #31
 8004c46:	d405      	bmi.n	8004c54 <_vfiprintf_r+0x220>
 8004c48:	89ab      	ldrh	r3, [r5, #12]
 8004c4a:	059a      	lsls	r2, r3, #22
 8004c4c:	d402      	bmi.n	8004c54 <_vfiprintf_r+0x220>
 8004c4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c50:	f7ff fd7f 	bl	8004752 <__retarget_lock_release_recursive>
 8004c54:	89ab      	ldrh	r3, [r5, #12]
 8004c56:	065b      	lsls	r3, r3, #25
 8004c58:	f53f af12 	bmi.w	8004a80 <_vfiprintf_r+0x4c>
 8004c5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c5e:	e711      	b.n	8004a84 <_vfiprintf_r+0x50>
 8004c60:	ab03      	add	r3, sp, #12
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	462a      	mov	r2, r5
 8004c66:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <_vfiprintf_r+0x258>)
 8004c68:	a904      	add	r1, sp, #16
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f000 f880 	bl	8004d70 <_printf_i>
 8004c70:	e7e4      	b.n	8004c3c <_vfiprintf_r+0x208>
 8004c72:	bf00      	nop
 8004c74:	08005470 	.word	0x08005470
 8004c78:	08005490 	.word	0x08005490
 8004c7c:	08005450 	.word	0x08005450
 8004c80:	080054b0 	.word	0x080054b0
 8004c84:	080054ba 	.word	0x080054ba
 8004c88:	00000000 	.word	0x00000000
 8004c8c:	08004a0f 	.word	0x08004a0f
 8004c90:	080054b6 	.word	0x080054b6

08004c94 <_printf_common>:
 8004c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c98:	4616      	mov	r6, r2
 8004c9a:	4699      	mov	r9, r3
 8004c9c:	688a      	ldr	r2, [r1, #8]
 8004c9e:	690b      	ldr	r3, [r1, #16]
 8004ca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	bfb8      	it	lt
 8004ca8:	4613      	movlt	r3, r2
 8004caa:	6033      	str	r3, [r6, #0]
 8004cac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cb0:	4607      	mov	r7, r0
 8004cb2:	460c      	mov	r4, r1
 8004cb4:	b10a      	cbz	r2, 8004cba <_printf_common+0x26>
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	6033      	str	r3, [r6, #0]
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	0699      	lsls	r1, r3, #26
 8004cbe:	bf42      	ittt	mi
 8004cc0:	6833      	ldrmi	r3, [r6, #0]
 8004cc2:	3302      	addmi	r3, #2
 8004cc4:	6033      	strmi	r3, [r6, #0]
 8004cc6:	6825      	ldr	r5, [r4, #0]
 8004cc8:	f015 0506 	ands.w	r5, r5, #6
 8004ccc:	d106      	bne.n	8004cdc <_printf_common+0x48>
 8004cce:	f104 0a19 	add.w	sl, r4, #25
 8004cd2:	68e3      	ldr	r3, [r4, #12]
 8004cd4:	6832      	ldr	r2, [r6, #0]
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	42ab      	cmp	r3, r5
 8004cda:	dc26      	bgt.n	8004d2a <_printf_common+0x96>
 8004cdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ce0:	1e13      	subs	r3, r2, #0
 8004ce2:	6822      	ldr	r2, [r4, #0]
 8004ce4:	bf18      	it	ne
 8004ce6:	2301      	movne	r3, #1
 8004ce8:	0692      	lsls	r2, r2, #26
 8004cea:	d42b      	bmi.n	8004d44 <_printf_common+0xb0>
 8004cec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	4638      	mov	r0, r7
 8004cf4:	47c0      	blx	r8
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	d01e      	beq.n	8004d38 <_printf_common+0xa4>
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	68e5      	ldr	r5, [r4, #12]
 8004cfe:	6832      	ldr	r2, [r6, #0]
 8004d00:	f003 0306 	and.w	r3, r3, #6
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	bf08      	it	eq
 8004d08:	1aad      	subeq	r5, r5, r2
 8004d0a:	68a3      	ldr	r3, [r4, #8]
 8004d0c:	6922      	ldr	r2, [r4, #16]
 8004d0e:	bf0c      	ite	eq
 8004d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d14:	2500      	movne	r5, #0
 8004d16:	4293      	cmp	r3, r2
 8004d18:	bfc4      	itt	gt
 8004d1a:	1a9b      	subgt	r3, r3, r2
 8004d1c:	18ed      	addgt	r5, r5, r3
 8004d1e:	2600      	movs	r6, #0
 8004d20:	341a      	adds	r4, #26
 8004d22:	42b5      	cmp	r5, r6
 8004d24:	d11a      	bne.n	8004d5c <_printf_common+0xc8>
 8004d26:	2000      	movs	r0, #0
 8004d28:	e008      	b.n	8004d3c <_printf_common+0xa8>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	4652      	mov	r2, sl
 8004d2e:	4649      	mov	r1, r9
 8004d30:	4638      	mov	r0, r7
 8004d32:	47c0      	blx	r8
 8004d34:	3001      	adds	r0, #1
 8004d36:	d103      	bne.n	8004d40 <_printf_common+0xac>
 8004d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d40:	3501      	adds	r5, #1
 8004d42:	e7c6      	b.n	8004cd2 <_printf_common+0x3e>
 8004d44:	18e1      	adds	r1, r4, r3
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	2030      	movs	r0, #48	; 0x30
 8004d4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d4e:	4422      	add	r2, r4
 8004d50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d58:	3302      	adds	r3, #2
 8004d5a:	e7c7      	b.n	8004cec <_printf_common+0x58>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	4622      	mov	r2, r4
 8004d60:	4649      	mov	r1, r9
 8004d62:	4638      	mov	r0, r7
 8004d64:	47c0      	blx	r8
 8004d66:	3001      	adds	r0, #1
 8004d68:	d0e6      	beq.n	8004d38 <_printf_common+0xa4>
 8004d6a:	3601      	adds	r6, #1
 8004d6c:	e7d9      	b.n	8004d22 <_printf_common+0x8e>
	...

08004d70 <_printf_i>:
 8004d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d74:	7e0f      	ldrb	r7, [r1, #24]
 8004d76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d78:	2f78      	cmp	r7, #120	; 0x78
 8004d7a:	4691      	mov	r9, r2
 8004d7c:	4680      	mov	r8, r0
 8004d7e:	460c      	mov	r4, r1
 8004d80:	469a      	mov	sl, r3
 8004d82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d86:	d807      	bhi.n	8004d98 <_printf_i+0x28>
 8004d88:	2f62      	cmp	r7, #98	; 0x62
 8004d8a:	d80a      	bhi.n	8004da2 <_printf_i+0x32>
 8004d8c:	2f00      	cmp	r7, #0
 8004d8e:	f000 80d8 	beq.w	8004f42 <_printf_i+0x1d2>
 8004d92:	2f58      	cmp	r7, #88	; 0x58
 8004d94:	f000 80a3 	beq.w	8004ede <_printf_i+0x16e>
 8004d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004da0:	e03a      	b.n	8004e18 <_printf_i+0xa8>
 8004da2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004da6:	2b15      	cmp	r3, #21
 8004da8:	d8f6      	bhi.n	8004d98 <_printf_i+0x28>
 8004daa:	a101      	add	r1, pc, #4	; (adr r1, 8004db0 <_printf_i+0x40>)
 8004dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004db0:	08004e09 	.word	0x08004e09
 8004db4:	08004e1d 	.word	0x08004e1d
 8004db8:	08004d99 	.word	0x08004d99
 8004dbc:	08004d99 	.word	0x08004d99
 8004dc0:	08004d99 	.word	0x08004d99
 8004dc4:	08004d99 	.word	0x08004d99
 8004dc8:	08004e1d 	.word	0x08004e1d
 8004dcc:	08004d99 	.word	0x08004d99
 8004dd0:	08004d99 	.word	0x08004d99
 8004dd4:	08004d99 	.word	0x08004d99
 8004dd8:	08004d99 	.word	0x08004d99
 8004ddc:	08004f29 	.word	0x08004f29
 8004de0:	08004e4d 	.word	0x08004e4d
 8004de4:	08004f0b 	.word	0x08004f0b
 8004de8:	08004d99 	.word	0x08004d99
 8004dec:	08004d99 	.word	0x08004d99
 8004df0:	08004f4b 	.word	0x08004f4b
 8004df4:	08004d99 	.word	0x08004d99
 8004df8:	08004e4d 	.word	0x08004e4d
 8004dfc:	08004d99 	.word	0x08004d99
 8004e00:	08004d99 	.word	0x08004d99
 8004e04:	08004f13 	.word	0x08004f13
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	1d1a      	adds	r2, r3, #4
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	602a      	str	r2, [r5, #0]
 8004e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e0a3      	b.n	8004f64 <_printf_i+0x1f4>
 8004e1c:	6820      	ldr	r0, [r4, #0]
 8004e1e:	6829      	ldr	r1, [r5, #0]
 8004e20:	0606      	lsls	r6, r0, #24
 8004e22:	f101 0304 	add.w	r3, r1, #4
 8004e26:	d50a      	bpl.n	8004e3e <_printf_i+0xce>
 8004e28:	680e      	ldr	r6, [r1, #0]
 8004e2a:	602b      	str	r3, [r5, #0]
 8004e2c:	2e00      	cmp	r6, #0
 8004e2e:	da03      	bge.n	8004e38 <_printf_i+0xc8>
 8004e30:	232d      	movs	r3, #45	; 0x2d
 8004e32:	4276      	negs	r6, r6
 8004e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e38:	485e      	ldr	r0, [pc, #376]	; (8004fb4 <_printf_i+0x244>)
 8004e3a:	230a      	movs	r3, #10
 8004e3c:	e019      	b.n	8004e72 <_printf_i+0x102>
 8004e3e:	680e      	ldr	r6, [r1, #0]
 8004e40:	602b      	str	r3, [r5, #0]
 8004e42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e46:	bf18      	it	ne
 8004e48:	b236      	sxthne	r6, r6
 8004e4a:	e7ef      	b.n	8004e2c <_printf_i+0xbc>
 8004e4c:	682b      	ldr	r3, [r5, #0]
 8004e4e:	6820      	ldr	r0, [r4, #0]
 8004e50:	1d19      	adds	r1, r3, #4
 8004e52:	6029      	str	r1, [r5, #0]
 8004e54:	0601      	lsls	r1, r0, #24
 8004e56:	d501      	bpl.n	8004e5c <_printf_i+0xec>
 8004e58:	681e      	ldr	r6, [r3, #0]
 8004e5a:	e002      	b.n	8004e62 <_printf_i+0xf2>
 8004e5c:	0646      	lsls	r6, r0, #25
 8004e5e:	d5fb      	bpl.n	8004e58 <_printf_i+0xe8>
 8004e60:	881e      	ldrh	r6, [r3, #0]
 8004e62:	4854      	ldr	r0, [pc, #336]	; (8004fb4 <_printf_i+0x244>)
 8004e64:	2f6f      	cmp	r7, #111	; 0x6f
 8004e66:	bf0c      	ite	eq
 8004e68:	2308      	moveq	r3, #8
 8004e6a:	230a      	movne	r3, #10
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e72:	6865      	ldr	r5, [r4, #4]
 8004e74:	60a5      	str	r5, [r4, #8]
 8004e76:	2d00      	cmp	r5, #0
 8004e78:	bfa2      	ittt	ge
 8004e7a:	6821      	ldrge	r1, [r4, #0]
 8004e7c:	f021 0104 	bicge.w	r1, r1, #4
 8004e80:	6021      	strge	r1, [r4, #0]
 8004e82:	b90e      	cbnz	r6, 8004e88 <_printf_i+0x118>
 8004e84:	2d00      	cmp	r5, #0
 8004e86:	d04d      	beq.n	8004f24 <_printf_i+0x1b4>
 8004e88:	4615      	mov	r5, r2
 8004e8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e8e:	fb03 6711 	mls	r7, r3, r1, r6
 8004e92:	5dc7      	ldrb	r7, [r0, r7]
 8004e94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e98:	4637      	mov	r7, r6
 8004e9a:	42bb      	cmp	r3, r7
 8004e9c:	460e      	mov	r6, r1
 8004e9e:	d9f4      	bls.n	8004e8a <_printf_i+0x11a>
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d10b      	bne.n	8004ebc <_printf_i+0x14c>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	07de      	lsls	r6, r3, #31
 8004ea8:	d508      	bpl.n	8004ebc <_printf_i+0x14c>
 8004eaa:	6923      	ldr	r3, [r4, #16]
 8004eac:	6861      	ldr	r1, [r4, #4]
 8004eae:	4299      	cmp	r1, r3
 8004eb0:	bfde      	ittt	le
 8004eb2:	2330      	movle	r3, #48	; 0x30
 8004eb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004eb8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004ebc:	1b52      	subs	r2, r2, r5
 8004ebe:	6122      	str	r2, [r4, #16]
 8004ec0:	f8cd a000 	str.w	sl, [sp]
 8004ec4:	464b      	mov	r3, r9
 8004ec6:	aa03      	add	r2, sp, #12
 8004ec8:	4621      	mov	r1, r4
 8004eca:	4640      	mov	r0, r8
 8004ecc:	f7ff fee2 	bl	8004c94 <_printf_common>
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	d14c      	bne.n	8004f6e <_printf_i+0x1fe>
 8004ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ed8:	b004      	add	sp, #16
 8004eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ede:	4835      	ldr	r0, [pc, #212]	; (8004fb4 <_printf_i+0x244>)
 8004ee0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ee4:	6829      	ldr	r1, [r5, #0]
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004eec:	6029      	str	r1, [r5, #0]
 8004eee:	061d      	lsls	r5, r3, #24
 8004ef0:	d514      	bpl.n	8004f1c <_printf_i+0x1ac>
 8004ef2:	07df      	lsls	r7, r3, #31
 8004ef4:	bf44      	itt	mi
 8004ef6:	f043 0320 	orrmi.w	r3, r3, #32
 8004efa:	6023      	strmi	r3, [r4, #0]
 8004efc:	b91e      	cbnz	r6, 8004f06 <_printf_i+0x196>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	f023 0320 	bic.w	r3, r3, #32
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	2310      	movs	r3, #16
 8004f08:	e7b0      	b.n	8004e6c <_printf_i+0xfc>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	f043 0320 	orr.w	r3, r3, #32
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	2378      	movs	r3, #120	; 0x78
 8004f14:	4828      	ldr	r0, [pc, #160]	; (8004fb8 <_printf_i+0x248>)
 8004f16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f1a:	e7e3      	b.n	8004ee4 <_printf_i+0x174>
 8004f1c:	0659      	lsls	r1, r3, #25
 8004f1e:	bf48      	it	mi
 8004f20:	b2b6      	uxthmi	r6, r6
 8004f22:	e7e6      	b.n	8004ef2 <_printf_i+0x182>
 8004f24:	4615      	mov	r5, r2
 8004f26:	e7bb      	b.n	8004ea0 <_printf_i+0x130>
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	6826      	ldr	r6, [r4, #0]
 8004f2c:	6961      	ldr	r1, [r4, #20]
 8004f2e:	1d18      	adds	r0, r3, #4
 8004f30:	6028      	str	r0, [r5, #0]
 8004f32:	0635      	lsls	r5, r6, #24
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	d501      	bpl.n	8004f3c <_printf_i+0x1cc>
 8004f38:	6019      	str	r1, [r3, #0]
 8004f3a:	e002      	b.n	8004f42 <_printf_i+0x1d2>
 8004f3c:	0670      	lsls	r0, r6, #25
 8004f3e:	d5fb      	bpl.n	8004f38 <_printf_i+0x1c8>
 8004f40:	8019      	strh	r1, [r3, #0]
 8004f42:	2300      	movs	r3, #0
 8004f44:	6123      	str	r3, [r4, #16]
 8004f46:	4615      	mov	r5, r2
 8004f48:	e7ba      	b.n	8004ec0 <_printf_i+0x150>
 8004f4a:	682b      	ldr	r3, [r5, #0]
 8004f4c:	1d1a      	adds	r2, r3, #4
 8004f4e:	602a      	str	r2, [r5, #0]
 8004f50:	681d      	ldr	r5, [r3, #0]
 8004f52:	6862      	ldr	r2, [r4, #4]
 8004f54:	2100      	movs	r1, #0
 8004f56:	4628      	mov	r0, r5
 8004f58:	f7fb f93a 	bl	80001d0 <memchr>
 8004f5c:	b108      	cbz	r0, 8004f62 <_printf_i+0x1f2>
 8004f5e:	1b40      	subs	r0, r0, r5
 8004f60:	6060      	str	r0, [r4, #4]
 8004f62:	6863      	ldr	r3, [r4, #4]
 8004f64:	6123      	str	r3, [r4, #16]
 8004f66:	2300      	movs	r3, #0
 8004f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f6c:	e7a8      	b.n	8004ec0 <_printf_i+0x150>
 8004f6e:	6923      	ldr	r3, [r4, #16]
 8004f70:	462a      	mov	r2, r5
 8004f72:	4649      	mov	r1, r9
 8004f74:	4640      	mov	r0, r8
 8004f76:	47d0      	blx	sl
 8004f78:	3001      	adds	r0, #1
 8004f7a:	d0ab      	beq.n	8004ed4 <_printf_i+0x164>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	079b      	lsls	r3, r3, #30
 8004f80:	d413      	bmi.n	8004faa <_printf_i+0x23a>
 8004f82:	68e0      	ldr	r0, [r4, #12]
 8004f84:	9b03      	ldr	r3, [sp, #12]
 8004f86:	4298      	cmp	r0, r3
 8004f88:	bfb8      	it	lt
 8004f8a:	4618      	movlt	r0, r3
 8004f8c:	e7a4      	b.n	8004ed8 <_printf_i+0x168>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	4632      	mov	r2, r6
 8004f92:	4649      	mov	r1, r9
 8004f94:	4640      	mov	r0, r8
 8004f96:	47d0      	blx	sl
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d09b      	beq.n	8004ed4 <_printf_i+0x164>
 8004f9c:	3501      	adds	r5, #1
 8004f9e:	68e3      	ldr	r3, [r4, #12]
 8004fa0:	9903      	ldr	r1, [sp, #12]
 8004fa2:	1a5b      	subs	r3, r3, r1
 8004fa4:	42ab      	cmp	r3, r5
 8004fa6:	dcf2      	bgt.n	8004f8e <_printf_i+0x21e>
 8004fa8:	e7eb      	b.n	8004f82 <_printf_i+0x212>
 8004faa:	2500      	movs	r5, #0
 8004fac:	f104 0619 	add.w	r6, r4, #25
 8004fb0:	e7f5      	b.n	8004f9e <_printf_i+0x22e>
 8004fb2:	bf00      	nop
 8004fb4:	080054c1 	.word	0x080054c1
 8004fb8:	080054d2 	.word	0x080054d2

08004fbc <_sbrk_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	4d06      	ldr	r5, [pc, #24]	; (8004fd8 <_sbrk_r+0x1c>)
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	602b      	str	r3, [r5, #0]
 8004fc8:	f7fb fc78 	bl	80008bc <_sbrk>
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	d102      	bne.n	8004fd6 <_sbrk_r+0x1a>
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	b103      	cbz	r3, 8004fd6 <_sbrk_r+0x1a>
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	bd38      	pop	{r3, r4, r5, pc}
 8004fd8:	20000638 	.word	0x20000638

08004fdc <__sread>:
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	460c      	mov	r4, r1
 8004fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fe4:	f000 f8a0 	bl	8005128 <_read_r>
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	bfab      	itete	ge
 8004fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fee:	89a3      	ldrhlt	r3, [r4, #12]
 8004ff0:	181b      	addge	r3, r3, r0
 8004ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ff6:	bfac      	ite	ge
 8004ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ffa:	81a3      	strhlt	r3, [r4, #12]
 8004ffc:	bd10      	pop	{r4, pc}

08004ffe <__swrite>:
 8004ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005002:	461f      	mov	r7, r3
 8005004:	898b      	ldrh	r3, [r1, #12]
 8005006:	05db      	lsls	r3, r3, #23
 8005008:	4605      	mov	r5, r0
 800500a:	460c      	mov	r4, r1
 800500c:	4616      	mov	r6, r2
 800500e:	d505      	bpl.n	800501c <__swrite+0x1e>
 8005010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005014:	2302      	movs	r3, #2
 8005016:	2200      	movs	r2, #0
 8005018:	f000 f868 	bl	80050ec <_lseek_r>
 800501c:	89a3      	ldrh	r3, [r4, #12]
 800501e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005026:	81a3      	strh	r3, [r4, #12]
 8005028:	4632      	mov	r2, r6
 800502a:	463b      	mov	r3, r7
 800502c:	4628      	mov	r0, r5
 800502e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005032:	f000 b817 	b.w	8005064 <_write_r>

08005036 <__sseek>:
 8005036:	b510      	push	{r4, lr}
 8005038:	460c      	mov	r4, r1
 800503a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800503e:	f000 f855 	bl	80050ec <_lseek_r>
 8005042:	1c43      	adds	r3, r0, #1
 8005044:	89a3      	ldrh	r3, [r4, #12]
 8005046:	bf15      	itete	ne
 8005048:	6560      	strne	r0, [r4, #84]	; 0x54
 800504a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800504e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005052:	81a3      	strheq	r3, [r4, #12]
 8005054:	bf18      	it	ne
 8005056:	81a3      	strhne	r3, [r4, #12]
 8005058:	bd10      	pop	{r4, pc}

0800505a <__sclose>:
 800505a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800505e:	f000 b813 	b.w	8005088 <_close_r>
	...

08005064 <_write_r>:
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	4d07      	ldr	r5, [pc, #28]	; (8005084 <_write_r+0x20>)
 8005068:	4604      	mov	r4, r0
 800506a:	4608      	mov	r0, r1
 800506c:	4611      	mov	r1, r2
 800506e:	2200      	movs	r2, #0
 8005070:	602a      	str	r2, [r5, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	f7fb fac6 	bl	8000604 <_write>
 8005078:	1c43      	adds	r3, r0, #1
 800507a:	d102      	bne.n	8005082 <_write_r+0x1e>
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	b103      	cbz	r3, 8005082 <_write_r+0x1e>
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	bd38      	pop	{r3, r4, r5, pc}
 8005084:	20000638 	.word	0x20000638

08005088 <_close_r>:
 8005088:	b538      	push	{r3, r4, r5, lr}
 800508a:	4d06      	ldr	r5, [pc, #24]	; (80050a4 <_close_r+0x1c>)
 800508c:	2300      	movs	r3, #0
 800508e:	4604      	mov	r4, r0
 8005090:	4608      	mov	r0, r1
 8005092:	602b      	str	r3, [r5, #0]
 8005094:	f7fb fbdd 	bl	8000852 <_close>
 8005098:	1c43      	adds	r3, r0, #1
 800509a:	d102      	bne.n	80050a2 <_close_r+0x1a>
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	b103      	cbz	r3, 80050a2 <_close_r+0x1a>
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	bd38      	pop	{r3, r4, r5, pc}
 80050a4:	20000638 	.word	0x20000638

080050a8 <_fstat_r>:
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	4d07      	ldr	r5, [pc, #28]	; (80050c8 <_fstat_r+0x20>)
 80050ac:	2300      	movs	r3, #0
 80050ae:	4604      	mov	r4, r0
 80050b0:	4608      	mov	r0, r1
 80050b2:	4611      	mov	r1, r2
 80050b4:	602b      	str	r3, [r5, #0]
 80050b6:	f7fb fbd8 	bl	800086a <_fstat>
 80050ba:	1c43      	adds	r3, r0, #1
 80050bc:	d102      	bne.n	80050c4 <_fstat_r+0x1c>
 80050be:	682b      	ldr	r3, [r5, #0]
 80050c0:	b103      	cbz	r3, 80050c4 <_fstat_r+0x1c>
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	bd38      	pop	{r3, r4, r5, pc}
 80050c6:	bf00      	nop
 80050c8:	20000638 	.word	0x20000638

080050cc <_isatty_r>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	4d06      	ldr	r5, [pc, #24]	; (80050e8 <_isatty_r+0x1c>)
 80050d0:	2300      	movs	r3, #0
 80050d2:	4604      	mov	r4, r0
 80050d4:	4608      	mov	r0, r1
 80050d6:	602b      	str	r3, [r5, #0]
 80050d8:	f7fb fbd7 	bl	800088a <_isatty>
 80050dc:	1c43      	adds	r3, r0, #1
 80050de:	d102      	bne.n	80050e6 <_isatty_r+0x1a>
 80050e0:	682b      	ldr	r3, [r5, #0]
 80050e2:	b103      	cbz	r3, 80050e6 <_isatty_r+0x1a>
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	20000638 	.word	0x20000638

080050ec <_lseek_r>:
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4d07      	ldr	r5, [pc, #28]	; (800510c <_lseek_r+0x20>)
 80050f0:	4604      	mov	r4, r0
 80050f2:	4608      	mov	r0, r1
 80050f4:	4611      	mov	r1, r2
 80050f6:	2200      	movs	r2, #0
 80050f8:	602a      	str	r2, [r5, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	f7fb fbd0 	bl	80008a0 <_lseek>
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	d102      	bne.n	800510a <_lseek_r+0x1e>
 8005104:	682b      	ldr	r3, [r5, #0]
 8005106:	b103      	cbz	r3, 800510a <_lseek_r+0x1e>
 8005108:	6023      	str	r3, [r4, #0]
 800510a:	bd38      	pop	{r3, r4, r5, pc}
 800510c:	20000638 	.word	0x20000638

08005110 <__malloc_lock>:
 8005110:	4801      	ldr	r0, [pc, #4]	; (8005118 <__malloc_lock+0x8>)
 8005112:	f7ff bb1d 	b.w	8004750 <__retarget_lock_acquire_recursive>
 8005116:	bf00      	nop
 8005118:	2000062c 	.word	0x2000062c

0800511c <__malloc_unlock>:
 800511c:	4801      	ldr	r0, [pc, #4]	; (8005124 <__malloc_unlock+0x8>)
 800511e:	f7ff bb18 	b.w	8004752 <__retarget_lock_release_recursive>
 8005122:	bf00      	nop
 8005124:	2000062c 	.word	0x2000062c

08005128 <_read_r>:
 8005128:	b538      	push	{r3, r4, r5, lr}
 800512a:	4d07      	ldr	r5, [pc, #28]	; (8005148 <_read_r+0x20>)
 800512c:	4604      	mov	r4, r0
 800512e:	4608      	mov	r0, r1
 8005130:	4611      	mov	r1, r2
 8005132:	2200      	movs	r2, #0
 8005134:	602a      	str	r2, [r5, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	f7fb fb6e 	bl	8000818 <_read>
 800513c:	1c43      	adds	r3, r0, #1
 800513e:	d102      	bne.n	8005146 <_read_r+0x1e>
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	b103      	cbz	r3, 8005146 <_read_r+0x1e>
 8005144:	6023      	str	r3, [r4, #0]
 8005146:	bd38      	pop	{r3, r4, r5, pc}
 8005148:	20000638 	.word	0x20000638

0800514c <_init>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	bf00      	nop
 8005150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005152:	bc08      	pop	{r3}
 8005154:	469e      	mov	lr, r3
 8005156:	4770      	bx	lr

08005158 <_fini>:
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	bf00      	nop
 800515c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515e:	bc08      	pop	{r3}
 8005160:	469e      	mov	lr, r3
 8005162:	4770      	bx	lr
