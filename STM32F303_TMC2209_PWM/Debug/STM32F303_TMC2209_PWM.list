
STM32F303_TMC2209_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08006850  08006850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cdc  08006cdc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006cdc  08006cdc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006cdc  08006cdc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cdc  08006cdc  00016cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ce0  08006ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000828  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000116fe  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025e8  00000000  00000000  0003179e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  00033d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d90  00000000  00000000  00034c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d1bb  00000000  00000000  000359a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ff9  00000000  00000000  00052b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a96fd  00000000  00000000  00064b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010e251  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044c4  00000000  00000000  0010e2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006838 	.word	0x08006838

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006838 	.word	0x08006838

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <tmc2209_readWriteArray>:
    if (htim == &htim3){ //htim3に設定したタイマー割り込みの時間で発火する
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);//ピンの出力を切り替え
    }
}*/
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	60b9      	str	r1, [r7, #8]
 8000278:	607a      	str	r2, [r7, #4]
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	4603      	mov	r3, r0
 800027e:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8000280:	480e      	ldr	r0, [pc, #56]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000282:	f004 fa53 	bl	800472c <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b29a      	uxth	r2, r3
 800028a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800028e:	68b9      	ldr	r1, [r7, #8]
 8000290:	480a      	ldr	r0, [pc, #40]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000292:	f003 fde7 	bl	8003e64 <HAL_UART_Transmit>

	if(readLength > 0){
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00a      	beq.n	80002b2 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 800029c:	4807      	ldr	r0, [pc, #28]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 800029e:	f004 fa97 	bl	80047d0 <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength, 3000);
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002aa:	68b9      	ldr	r1, [r7, #8]
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 80002ae:	f003 fe6d 	bl	8003f8c <HAL_UART_Receive>
	}
}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	200000d8 	.word	0x200000d8

080002c0 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 80002ca:	2201      	movs	r2, #1
 80002cc:	6839      	ldr	r1, [r7, #0]
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f004 ff1a 	bl	8005108 <tmc_CRC8>
 80002d4:	4603      	mov	r3, r0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <reset>:

	//StepDir_periodicJob(0);
}

static uint8_t reset()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 80002e4:	4802      	ldr	r0, [pc, #8]	; (80002f0 <reset+0x10>)
 80002e6:	f005 f947 	bl	8005578 <tmc2209_reset>
 80002ea:	4603      	mov	r3, r0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	200001e0 	.word	0x200001e0

080002f4 <restore>:

static uint8_t restore()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 80002f8:	4802      	ldr	r0, [pc, #8]	; (8000304 <restore+0x10>)
 80002fa:	f005 f977 	bl	80055ec <tmc2209_restore>
 80002fe:	4603      	mov	r3, r0
}
 8000300:	4618      	mov	r0, r3
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200001e0 	.word	0x200001e0

08000308 <TMC2209_INIT>:


void TMC2209_INIT()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	2101      	movs	r1, #1
 8000312:	2007      	movs	r0, #7
 8000314:	f004 fe40 	bl	8004f98 <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <TMC2209_INIT+0x38>)
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <TMC2209_INIT+0x3c>)
 800031c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <TMC2209_INIT+0x38>)
 8000322:	4a09      	ldr	r2, [pc, #36]	; (8000348 <TMC2209_INIT+0x40>)
 8000324:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <TMC2209_INIT+0x44>)
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <TMC2209_INIT+0x38>)
 800032e:	2200      	movs	r2, #0
 8000330:	2100      	movs	r1, #0
 8000332:	4807      	ldr	r0, [pc, #28]	; (8000350 <TMC2209_INIT+0x48>)
 8000334:	f005 f83c 	bl	80053b0 <tmc2209_init>


	//restore();
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000468 	.word	0x20000468
 8000344:	080002e1 	.word	0x080002e1
 8000348:	080002f5 	.word	0x080002f5
 800034c:	0800698c 	.word	0x0800698c
 8000350:	200001e0 	.word	0x200001e0

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b5b0      	push	{r4, r5, r7, lr}
 8000356:	b098      	sub	sp, #96	; 0x60
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800035a:	4bb8      	ldr	r3, [pc, #736]	; (800063c <main+0x2e8>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f005 fa1c 	bl	80057a0 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000368:	f000 fd52 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036c:	f000 f98c 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000370:	f000 faba 	bl	80008e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000374:	f000 fa88 	bl	8000888 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000378:	f000 fa56 	bl	8000828 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800037c:	f000 f9dc 	bl	8000738 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //int getserial=0;
  TMC2209_INIT();
 8000380:	f7ff ffc2 	bl	8000308 <TMC2209_INIT>
  printf("Hello\r\n");
 8000384:	48ae      	ldr	r0, [pc, #696]	; (8000640 <main+0x2ec>)
 8000386:	f005 fa03 	bl	8005790 <puts>

  int i;
   char rxbuf[1];
   char start[] ="1:front,2:back\r\n";
 800038a:	4bae      	ldr	r3, [pc, #696]	; (8000644 <main+0x2f0>)
 800038c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000390:	461d      	mov	r5, r3
 8000392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000396:	682b      	ldr	r3, [r5, #0]
 8000398:	7023      	strb	r3, [r4, #0]
   char front[] ="front turn\r\n";
 800039a:	4bab      	ldr	r3, [pc, #684]	; (8000648 <main+0x2f4>)
 800039c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80003a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003a2:	c407      	stmia	r4!, {r0, r1, r2}
 80003a4:	7023      	strb	r3, [r4, #0]
   char back[] ="back turn\r\n";
 80003a6:	4aa9      	ldr	r2, [pc, #676]	; (800064c <main+0x2f8>)
 80003a8:	f107 0318 	add.w	r3, r7, #24
 80003ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80003ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   char nonans[] ="Not Understand \r\n";
 80003b2:	4ba7      	ldr	r3, [pc, #668]	; (8000650 <main+0x2fc>)
 80003b4:	1d3c      	adds	r4, r7, #4
 80003b6:	461d      	mov	r5, r3
 80003b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003bc:	682b      	ldr	r3, [r5, #0]
 80003be:	8023      	strh	r3, [r4, #0]
   int32_t mstep_value = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   int32_t toff_value = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	65bb      	str	r3, [r7, #88]	; 0x58
   int32_t microstep_value = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	657b      	str	r3, [r7, #84]	; 0x54
   int32_t stanby_value = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	653b      	str	r3, [r7, #80]	; 0x50
   int32_t max_value = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	64fb      	str	r3, [r7, #76]	; 0x4c

   HAL_UART_Transmit(&huart2,(uint8_t *)start,sizeof(start),3000);
 80003d4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80003d8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80003dc:	2211      	movs	r2, #17
 80003de:	489d      	ldr	r0, [pc, #628]	; (8000654 <main+0x300>)
 80003e0:	f003 fd40 	bl	8003e64 <HAL_UART_Transmit>

   mstep_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK,TMC2209_MSTEP_REG_SELECT_SHIFT);	//uartでのmicrostepの有効化
 80003e4:	2100      	movs	r1, #0
 80003e6:	489c      	ldr	r0, [pc, #624]	; (8000658 <main+0x304>)
 80003e8:	f004 ff7f 	bl	80052ea <tmc2209_readInt>
 80003ec:	4603      	mov	r3, r0
 80003ee:	11db      	asrs	r3, r3, #7
 80003f0:	f003 0301 	and.w	r3, r3, #1
 80003f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   printf("mstep_before : %ld\r\n", mstep_value);
 80003f6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80003f8:	4898      	ldr	r0, [pc, #608]	; (800065c <main+0x308>)
 80003fa:	f005 f943 	bl	8005684 <iprintf>
   mstep_value = 1;
 80003fe:	2301      	movs	r3, #1
 8000400:	65fb      	str	r3, [r7, #92]	; 0x5c
   TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT,mstep_value);
 8000402:	2100      	movs	r1, #0
 8000404:	4894      	ldr	r0, [pc, #592]	; (8000658 <main+0x304>)
 8000406:	f004 ff70 	bl	80052ea <tmc2209_readInt>
 800040a:	4603      	mov	r3, r0
 800040c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000412:	01db      	lsls	r3, r3, #7
 8000414:	b2db      	uxtb	r3, r3
 8000416:	4313      	orrs	r3, r2
 8000418:	461a      	mov	r2, r3
 800041a:	2100      	movs	r1, #0
 800041c:	488e      	ldr	r0, [pc, #568]	; (8000658 <main+0x304>)
 800041e:	f004 ff14 	bl	800524a <tmc2209_writeInt>
   tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000422:	f000 fd4f 	bl	8000ec4 <HAL_GetTick>
 8000426:	4603      	mov	r3, r0
 8000428:	4619      	mov	r1, r3
 800042a:	488b      	ldr	r0, [pc, #556]	; (8000658 <main+0x304>)
 800042c:	f005 f893 	bl	8005556 <tmc2209_periodicJob>
   mstep_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT);
 8000430:	2100      	movs	r1, #0
 8000432:	4889      	ldr	r0, [pc, #548]	; (8000658 <main+0x304>)
 8000434:	f004 ff59 	bl	80052ea <tmc2209_readInt>
 8000438:	4603      	mov	r3, r0
 800043a:	11db      	asrs	r3, r3, #7
 800043c:	f003 0301 	and.w	r3, r3, #1
 8000440:	65fb      	str	r3, [r7, #92]	; 0x5c
   printf("mstep_after : %ld\r\n", mstep_value);
 8000442:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000444:	4886      	ldr	r0, [pc, #536]	; (8000660 <main+0x30c>)
 8000446:	f005 f91d 	bl	8005684 <iprintf>


   toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);	//保持トルクの設定
 800044a:	216c      	movs	r1, #108	; 0x6c
 800044c:	4882      	ldr	r0, [pc, #520]	; (8000658 <main+0x304>)
 800044e:	f004 ff4c 	bl	80052ea <tmc2209_readInt>
 8000452:	4603      	mov	r3, r0
 8000454:	f003 030f 	and.w	r3, r3, #15
 8000458:	65bb      	str	r3, [r7, #88]	; 0x58
   printf("toff_before : %ld\r\n", toff_value);
 800045a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800045c:	4881      	ldr	r0, [pc, #516]	; (8000664 <main+0x310>)
 800045e:	f005 f911 	bl	8005684 <iprintf>
   toff_value = 3;
 8000462:	2303      	movs	r3, #3
 8000464:	65bb      	str	r3, [r7, #88]	; 0x58
   TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,toff_value);
 8000466:	216c      	movs	r1, #108	; 0x6c
 8000468:	487b      	ldr	r0, [pc, #492]	; (8000658 <main+0x304>)
 800046a:	f004 ff3e 	bl	80052ea <tmc2209_readInt>
 800046e:	4603      	mov	r3, r0
 8000470:	f023 020f 	bic.w	r2, r3, #15
 8000474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000476:	f003 030f 	and.w	r3, r3, #15
 800047a:	4313      	orrs	r3, r2
 800047c:	461a      	mov	r2, r3
 800047e:	216c      	movs	r1, #108	; 0x6c
 8000480:	4875      	ldr	r0, [pc, #468]	; (8000658 <main+0x304>)
 8000482:	f004 fee2 	bl	800524a <tmc2209_writeInt>
   tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000486:	f000 fd1d 	bl	8000ec4 <HAL_GetTick>
 800048a:	4603      	mov	r3, r0
 800048c:	4619      	mov	r1, r3
 800048e:	4872      	ldr	r0, [pc, #456]	; (8000658 <main+0x304>)
 8000490:	f005 f861 	bl	8005556 <tmc2209_periodicJob>
   toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 8000494:	216c      	movs	r1, #108	; 0x6c
 8000496:	4870      	ldr	r0, [pc, #448]	; (8000658 <main+0x304>)
 8000498:	f004 ff27 	bl	80052ea <tmc2209_readInt>
 800049c:	4603      	mov	r3, r0
 800049e:	f003 030f 	and.w	r3, r3, #15
 80004a2:	65bb      	str	r3, [r7, #88]	; 0x58
   printf("toff_after : %ld\r\n", toff_value);
 80004a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80004a6:	4870      	ldr	r0, [pc, #448]	; (8000668 <main+0x314>)
 80004a8:	f005 f8ec 	bl	8005684 <iprintf>

   microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);	//microstepの設定
 80004ac:	216c      	movs	r1, #108	; 0x6c
 80004ae:	486a      	ldr	r0, [pc, #424]	; (8000658 <main+0x304>)
 80004b0:	f004 ff1b 	bl	80052ea <tmc2209_readInt>
 80004b4:	4603      	mov	r3, r0
 80004b6:	161b      	asrs	r3, r3, #24
 80004b8:	f003 030f 	and.w	r3, r3, #15
 80004bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004c0:	fa42 f303 	asr.w	r3, r2, r3
 80004c4:	657b      	str	r3, [r7, #84]	; 0x54
   printf("microstep_before : %ld\r\n", microstep_value);
 80004c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80004c8:	4868      	ldr	r0, [pc, #416]	; (800066c <main+0x318>)
 80004ca:	f005 f8db 	bl	8005684 <iprintf>
   microstep_value = 4;
 80004ce:	2304      	movs	r3, #4
 80004d0:	657b      	str	r3, [r7, #84]	; 0x54
   TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT,microstep_value);
 80004d2:	216c      	movs	r1, #108	; 0x6c
 80004d4:	4860      	ldr	r0, [pc, #384]	; (8000658 <main+0x304>)
 80004d6:	f004 ff08 	bl	80052ea <tmc2209_readInt>
 80004da:	4603      	mov	r3, r0
 80004dc:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80004e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80004e2:	061b      	lsls	r3, r3, #24
 80004e4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80004e8:	4313      	orrs	r3, r2
 80004ea:	461a      	mov	r2, r3
 80004ec:	216c      	movs	r1, #108	; 0x6c
 80004ee:	485a      	ldr	r0, [pc, #360]	; (8000658 <main+0x304>)
 80004f0:	f004 feab 	bl	800524a <tmc2209_writeInt>
   tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80004f4:	f000 fce6 	bl	8000ec4 <HAL_GetTick>
 80004f8:	4603      	mov	r3, r0
 80004fa:	4619      	mov	r1, r3
 80004fc:	4856      	ldr	r0, [pc, #344]	; (8000658 <main+0x304>)
 80004fe:	f005 f82a 	bl	8005556 <tmc2209_periodicJob>
   microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 8000502:	216c      	movs	r1, #108	; 0x6c
 8000504:	4854      	ldr	r0, [pc, #336]	; (8000658 <main+0x304>)
 8000506:	f004 fef0 	bl	80052ea <tmc2209_readInt>
 800050a:	4603      	mov	r3, r0
 800050c:	161b      	asrs	r3, r3, #24
 800050e:	f003 030f 	and.w	r3, r3, #15
 8000512:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000516:	fa42 f303 	asr.w	r3, r2, r3
 800051a:	657b      	str	r3, [r7, #84]	; 0x54
   printf("microstep_after : %ld\r\n", microstep_value);
 800051c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800051e:	4854      	ldr	r0, [pc, #336]	; (8000670 <main+0x31c>)
 8000520:	f005 f8b0 	bl	8005684 <iprintf>

   stanby_value=TMC2209_FIELD_READ(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//待機電流の設定
 8000524:	2110      	movs	r1, #16
 8000526:	484c      	ldr	r0, [pc, #304]	; (8000658 <main+0x304>)
 8000528:	f004 fedf 	bl	80052ea <tmc2209_readInt>
 800052c:	4603      	mov	r3, r0
 800052e:	f003 031f 	and.w	r3, r3, #31
 8000532:	653b      	str	r3, [r7, #80]	; 0x50
   printf("stanbycurrent_before: %ld\r\n", stanby_value);
 8000534:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000536:	484f      	ldr	r0, [pc, #316]	; (8000674 <main+0x320>)
 8000538:	f005 f8a4 	bl	8005684 <iprintf>
   stanby_value = 10;
 800053c:	230a      	movs	r3, #10
 800053e:	653b      	str	r3, [r7, #80]	; 0x50
   TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, stanby_value);
 8000540:	2110      	movs	r1, #16
 8000542:	4845      	ldr	r0, [pc, #276]	; (8000658 <main+0x304>)
 8000544:	f004 fed1 	bl	80052ea <tmc2209_readInt>
 8000548:	4603      	mov	r3, r0
 800054a:	f023 021f 	bic.w	r2, r3, #31
 800054e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000550:	f003 031f 	and.w	r3, r3, #31
 8000554:	4313      	orrs	r3, r2
 8000556:	461a      	mov	r2, r3
 8000558:	2110      	movs	r1, #16
 800055a:	483f      	ldr	r0, [pc, #252]	; (8000658 <main+0x304>)
 800055c:	f004 fe75 	bl	800524a <tmc2209_writeInt>
   tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000560:	f000 fcb0 	bl	8000ec4 <HAL_GetTick>
 8000564:	4603      	mov	r3, r0
 8000566:	4619      	mov	r1, r3
 8000568:	483b      	ldr	r0, [pc, #236]	; (8000658 <main+0x304>)
 800056a:	f004 fff4 	bl	8005556 <tmc2209_periodicJob>
   HAL_Delay(200);
 800056e:	20c8      	movs	r0, #200	; 0xc8
 8000570:	f000 fcb4 	bl	8000edc <HAL_Delay>
   stanby_value=TMC2209_FIELD_READ(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);
 8000574:	2110      	movs	r1, #16
 8000576:	4838      	ldr	r0, [pc, #224]	; (8000658 <main+0x304>)
 8000578:	f004 feb7 	bl	80052ea <tmc2209_readInt>
 800057c:	4603      	mov	r3, r0
 800057e:	f003 031f 	and.w	r3, r3, #31
 8000582:	653b      	str	r3, [r7, #80]	; 0x50
   printf("stanbycurrent_after: %ld\r\n", stanby_value);
 8000584:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000586:	483c      	ldr	r0, [pc, #240]	; (8000678 <main+0x324>)
 8000588:	f005 f87c 	bl	8005684 <iprintf>

   max_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);	//最大電流の設定
 800058c:	2110      	movs	r1, #16
 800058e:	4832      	ldr	r0, [pc, #200]	; (8000658 <main+0x304>)
 8000590:	f004 feab 	bl	80052ea <tmc2209_readInt>
 8000594:	4603      	mov	r3, r0
 8000596:	121b      	asrs	r3, r3, #8
 8000598:	f003 031f 	and.w	r3, r3, #31
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
   printf("maxumum_before: %ld\r\n", max_value);
 800059e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80005a0:	4836      	ldr	r0, [pc, #216]	; (800067c <main+0x328>)
 80005a2:	f005 f86f 	bl	8005684 <iprintf>
   max_value = 10;
 80005a6:	230a      	movs	r3, #10
 80005a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, max_value);
 80005aa:	2110      	movs	r1, #16
 80005ac:	482a      	ldr	r0, [pc, #168]	; (8000658 <main+0x304>)
 80005ae:	f004 fe9c 	bl	80052ea <tmc2209_readInt>
 80005b2:	4603      	mov	r3, r0
 80005b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80005b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005ba:	021b      	lsls	r3, r3, #8
 80005bc:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80005c0:	4313      	orrs	r3, r2
 80005c2:	461a      	mov	r2, r3
 80005c4:	2110      	movs	r1, #16
 80005c6:	4824      	ldr	r0, [pc, #144]	; (8000658 <main+0x304>)
 80005c8:	f004 fe3f 	bl	800524a <tmc2209_writeInt>
   tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80005cc:	f000 fc7a 	bl	8000ec4 <HAL_GetTick>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4619      	mov	r1, r3
 80005d4:	4820      	ldr	r0, [pc, #128]	; (8000658 <main+0x304>)
 80005d6:	f004 ffbe 	bl	8005556 <tmc2209_periodicJob>
   HAL_Delay(200);
 80005da:	20c8      	movs	r0, #200	; 0xc8
 80005dc:	f000 fc7e 	bl	8000edc <HAL_Delay>
   max_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 80005e0:	2110      	movs	r1, #16
 80005e2:	481d      	ldr	r0, [pc, #116]	; (8000658 <main+0x304>)
 80005e4:	f004 fe81 	bl	80052ea <tmc2209_readInt>
 80005e8:	4603      	mov	r3, r0
 80005ea:	121b      	asrs	r3, r3, #8
 80005ec:	f003 031f 	and.w	r3, r3, #31
 80005f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   printf("maxumum_after: %ld\r\n", max_value);
 80005f2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80005f4:	4822      	ldr	r0, [pc, #136]	; (8000680 <main+0x32c>)
 80005f6:	f005 f845 	bl	8005684 <iprintf>

   HAL_UART_Transmit(&huart2,(uint8_t *)start,sizeof(start),3000);
 80005fa:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80005fe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000602:	2211      	movs	r2, #17
 8000604:	4813      	ldr	r0, [pc, #76]	; (8000654 <main+0x300>)
 8000606:	f003 fc2d 	bl	8003e64 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 50000);
 800060a:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <main+0x330>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000612:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_Delay(100);
 8000614:	2064      	movs	r0, #100	; 0x64
 8000616:	f000 fc61 	bl	8000edc <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 5000);
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <main+0x330>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000622:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(100);
 8000624:	2064      	movs	r0, #100	; 0x64
 8000626:	f000 fc59 	bl	8000edc <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <main+0x330>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000632:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(100);
 8000634:	2064      	movs	r0, #100	; 0x64
 8000636:	f000 fc51 	bl	8000edc <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 50000);
 800063a:	e7e6      	b.n	800060a <main+0x2b6>
 800063c:	2000000c 	.word	0x2000000c
 8000640:	08006850 	.word	0x08006850
 8000644:	08006948 	.word	0x08006948
 8000648:	0800695c 	.word	0x0800695c
 800064c:	0800696c 	.word	0x0800696c
 8000650:	08006978 	.word	0x08006978
 8000654:	2000015c 	.word	0x2000015c
 8000658:	200001e0 	.word	0x200001e0
 800065c:	08006858 	.word	0x08006858
 8000660:	08006870 	.word	0x08006870
 8000664:	08006884 	.word	0x08006884
 8000668:	08006898 	.word	0x08006898
 800066c:	080068ac 	.word	0x080068ac
 8000670:	080068c8 	.word	0x080068c8
 8000674:	080068e0 	.word	0x080068e0
 8000678:	080068fc 	.word	0x080068fc
 800067c:	08006918 	.word	0x08006918
 8000680:	08006930 	.word	0x08006930
 8000684:	2000008c 	.word	0x2000008c

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b096      	sub	sp, #88	; 0x58
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000692:	2228      	movs	r2, #40	; 0x28
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f004 ffec 	bl	8005674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
 80006ba:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006d0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80006d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 ff58 	bl	8001590 <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x62>
  {
    Error_Handler();
 80006e6:	f000 f973 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	2102      	movs	r1, #2
 8000706:	4618      	mov	r0, r3
 8000708:	f001 ff80 	bl	800260c <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000712:	f000 f95d 	bl	80009d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000716:	2301      	movs	r3, #1
 8000718:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4618      	mov	r0, r3
 8000722:	f002 f9a9 	bl	8002a78 <HAL_RCCEx_PeriphCLKConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800072c:	f000 f950 	bl	80009d0 <Error_Handler>
  }
}
 8000730:	bf00      	nop
 8000732:	3758      	adds	r7, #88	; 0x58
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08e      	sub	sp, #56	; 0x38
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000758:	463b      	mov	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
 8000766:	615a      	str	r2, [r3, #20]
 8000768:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <MX_TIM3_Init+0xe8>)
 800076c:	4a2d      	ldr	r2, [pc, #180]	; (8000824 <MX_TIM3_Init+0xec>)
 800076e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 128-1;
 8000770:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <MX_TIM3_Init+0xe8>)
 8000772:	227f      	movs	r2, #127	; 0x7f
 8000774:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000776:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <MX_TIM3_Init+0xe8>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800077c:	4b28      	ldr	r3, [pc, #160]	; (8000820 <MX_TIM3_Init+0xe8>)
 800077e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000782:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <MX_TIM3_Init+0xe8>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078a:	4b25      	ldr	r3, [pc, #148]	; (8000820 <MX_TIM3_Init+0xe8>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000790:	4823      	ldr	r0, [pc, #140]	; (8000820 <MX_TIM3_Init+0xe8>)
 8000792:	f002 fa97 	bl	8002cc4 <HAL_TIM_Base_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800079c:	f000 f918 	bl	80009d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007aa:	4619      	mov	r1, r3
 80007ac:	481c      	ldr	r0, [pc, #112]	; (8000820 <MX_TIM3_Init+0xe8>)
 80007ae:	f002 fd75 	bl	800329c <HAL_TIM_ConfigClockSource>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80007b8:	f000 f90a 	bl	80009d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007bc:	4818      	ldr	r0, [pc, #96]	; (8000820 <MX_TIM3_Init+0xe8>)
 80007be:	f002 fad8 	bl	8002d72 <HAL_TIM_PWM_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80007c8:	f000 f902 	bl	80009d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	4811      	ldr	r0, [pc, #68]	; (8000820 <MX_TIM3_Init+0xe8>)
 80007dc:	f003 fa12 	bl	8003c04 <HAL_TIMEx_MasterConfigSynchronization>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80007e6:	f000 f8f3 	bl	80009d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ea:	2360      	movs	r3, #96	; 0x60
 80007ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	2200      	movs	r2, #0
 80007fe:	4619      	mov	r1, r3
 8000800:	4807      	ldr	r0, [pc, #28]	; (8000820 <MX_TIM3_Init+0xe8>)
 8000802:	f002 fc37 	bl	8003074 <HAL_TIM_PWM_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800080c:	f000 f8e0 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000810:	4803      	ldr	r0, [pc, #12]	; (8000820 <MX_TIM3_Init+0xe8>)
 8000812:	f000 f92d 	bl	8000a70 <HAL_TIM_MspPostInit>

}
 8000816:	bf00      	nop
 8000818:	3738      	adds	r7, #56	; 0x38
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000008c 	.word	0x2000008c
 8000824:	40000400 	.word	0x40000400

08000828 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800082e:	4a15      	ldr	r2, [pc, #84]	; (8000884 <MX_USART1_UART_Init+0x5c>)
 8000830:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800086c:	f003 faa4 	bl	8003db8 <HAL_HalfDuplex_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 f8ab 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000d8 	.word	0x200000d8
 8000884:	40013800 	.word	0x40013800

08000888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 800088e:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <MX_USART2_UART_Init+0x5c>)
 8000890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008cc:	f003 fa26 	bl	8003d1c <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008d6:	f000 f87b 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000015c 	.word	0x2000015c
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fe:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <MX_GPIO_Init+0xb8>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4a27      	ldr	r2, [pc, #156]	; (80009a0 <MX_GPIO_Init+0xb8>)
 8000904:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000908:	6153      	str	r3, [r2, #20]
 800090a:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <MX_GPIO_Init+0xb8>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <MX_GPIO_Init+0xb8>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a21      	ldr	r2, [pc, #132]	; (80009a0 <MX_GPIO_Init+0xb8>)
 800091c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000920:	6153      	str	r3, [r2, #20]
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_GPIO_Init+0xb8>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_GPIO_Init+0xb8>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	4a1b      	ldr	r2, [pc, #108]	; (80009a0 <MX_GPIO_Init+0xb8>)
 8000934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000938:	6153      	str	r3, [r2, #20]
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_GPIO_Init+0xb8>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2130      	movs	r1, #48	; 0x30
 800094a:	4816      	ldr	r0, [pc, #88]	; (80009a4 <MX_GPIO_Init+0xbc>)
 800094c:	f000 fde4 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000950:	2330      	movs	r3, #48	; 0x30
 8000952:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4619      	mov	r1, r3
 8000966:	480f      	ldr	r0, [pc, #60]	; (80009a4 <MX_GPIO_Init+0xbc>)
 8000968:	f000 fc64 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800096c:	2340      	movs	r3, #64	; 0x40
 800096e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000970:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	4619      	mov	r1, r3
 8000980:	4808      	ldr	r0, [pc, #32]	; (80009a4 <MX_GPIO_Init+0xbc>)
 8000982:	f000 fc57 	bl	8001234 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	2017      	movs	r0, #23
 800098c:	f000 fba5 	bl	80010da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000990:	2017      	movs	r0, #23
 8000992:	f000 fbbe 	bl	8001112 <HAL_NVIC_EnableIRQ>

}
 8000996:	bf00      	nop
 8000998:	3720      	adds	r7, #32
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000
 80009a4:	48000400 	.word	0x48000400

080009a8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	230a      	movs	r3, #10
 80009ba:	68b9      	ldr	r1, [r7, #8]
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <_write+0x24>)
 80009be:	f003 fa51 	bl	8003e64 <HAL_UART_Transmit>
  return len;
 80009c2:	687b      	ldr	r3, [r7, #4]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000015c 	.word	0x2000015c

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>
	...

080009dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_MspInit+0x44>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <HAL_MspInit+0x44>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6193      	str	r3, [r2, #24]
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_MspInit+0x44>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_MspInit+0x44>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <HAL_MspInit+0x44>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	61d3      	str	r3, [r2, #28]
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_MspInit+0x44>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <HAL_TIM_Base_MspInit+0x44>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d113      	bne.n	8000a5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_TIM_Base_MspInit+0x48>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <HAL_TIM_Base_MspInit+0x48>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	61d3      	str	r3, [r2, #28]
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <HAL_TIM_Base_MspInit+0x48>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	201d      	movs	r0, #29
 8000a54:	f000 fb41 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a58:	201d      	movs	r0, #29
 8000a5a:	f000 fb5a 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40000400 	.word	0x40000400
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a11      	ldr	r2, [pc, #68]	; (8000ad4 <HAL_TIM_MspPostInit+0x64>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d11c      	bne.n	8000acc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <HAL_TIM_MspPostInit+0x68>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <HAL_TIM_MspPostInit+0x68>)
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9c:	6153      	str	r3, [r2, #20]
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_TIM_MspPostInit+0x68>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000aaa:	2340      	movs	r3, #64	; 0x40
 8000aac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac8:	f000 fbb4 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000acc:	bf00      	nop
 8000ace:	3720      	adds	r7, #32
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40000400 	.word	0x40000400
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	; 0x30
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a38      	ldr	r2, [pc, #224]	; (8000bdc <HAL_UART_MspInit+0x100>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d132      	bne.n	8000b64 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afe:	4b38      	ldr	r3, [pc, #224]	; (8000be0 <HAL_UART_MspInit+0x104>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	4a37      	ldr	r2, [pc, #220]	; (8000be0 <HAL_UART_MspInit+0x104>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b08:	6193      	str	r3, [r2, #24]
 8000b0a:	4b35      	ldr	r3, [pc, #212]	; (8000be0 <HAL_UART_MspInit+0x104>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b12:	61bb      	str	r3, [r7, #24]
 8000b14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b32      	ldr	r3, [pc, #200]	; (8000be0 <HAL_UART_MspInit+0x104>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4a31      	ldr	r2, [pc, #196]	; (8000be0 <HAL_UART_MspInit+0x104>)
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	6153      	str	r3, [r2, #20]
 8000b22:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <HAL_UART_MspInit+0x104>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b34:	2312      	movs	r3, #18
 8000b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b40:	2307      	movs	r3, #7
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f000 fb71 	bl	8001234 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	2025      	movs	r0, #37	; 0x25
 8000b58:	f000 fabf 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b5c:	2025      	movs	r0, #37	; 0x25
 8000b5e:	f000 fad8 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b62:	e036      	b.n	8000bd2 <HAL_UART_MspInit+0xf6>
  else if(huart->Instance==USART2)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a1e      	ldr	r2, [pc, #120]	; (8000be4 <HAL_UART_MspInit+0x108>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d131      	bne.n	8000bd2 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <HAL_UART_MspInit+0x104>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	4a1b      	ldr	r2, [pc, #108]	; (8000be0 <HAL_UART_MspInit+0x104>)
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	61d3      	str	r3, [r2, #28]
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <HAL_UART_MspInit+0x104>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <HAL_UART_MspInit+0x104>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <HAL_UART_MspInit+0x104>)
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	6153      	str	r3, [r2, #20]
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <HAL_UART_MspInit+0x104>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000b9e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb0:	2307      	movs	r3, #7
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbe:	f000 fb39 	bl	8001234 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2026      	movs	r0, #38	; 0x26
 8000bc8:	f000 fa87 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bcc:	2026      	movs	r0, #38	; 0x26
 8000bce:	f000 faa0 	bl	8001112 <HAL_NVIC_EnableIRQ>
}
 8000bd2:	bf00      	nop
 8000bd4:	3730      	adds	r7, #48	; 0x30
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40013800 	.word	0x40013800
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40004400 	.word	0x40004400

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c34:	f000 f932 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000c40:	2040      	movs	r0, #64	; 0x40
 8000c42:	f000 fc81 	bl	8001548 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <TIM3_IRQHandler+0x10>)
 8000c52:	f002 f8ef 	bl	8002e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000008c 	.word	0x2000008c

08000c60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <USART1_IRQHandler+0x10>)
 8000c66:	f003 fa63 	bl	8004130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000d8 	.word	0x200000d8

08000c74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <USART2_IRQHandler+0x10>)
 8000c7a:	f003 fa59 	bl	8004130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000015c 	.word	0x2000015c

08000c88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	e00a      	b.n	8000cb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c9a:	f3af 8000 	nop.w
 8000c9e:	4601      	mov	r1, r0
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	60ba      	str	r2, [r7, #8]
 8000ca6:	b2ca      	uxtb	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dbf0      	blt.n	8000c9a <_read+0x12>
	}

return len;
 8000cb8:	687b      	ldr	r3, [r7, #4]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
	return -1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cea:	605a      	str	r2, [r3, #4]
	return 0;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_isatty>:

int _isatty(int file)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
	return 1;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d207      	bcs.n	8000d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d5c:	f004 fc60 	bl	8005620 <__errno>
 8000d60:	4603      	mov	r3, r0
 8000d62:	220c      	movs	r2, #12
 8000d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d6a:	e009      	b.n	8000d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <_sbrk+0x64>)
 8000d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20003000 	.word	0x20003000
 8000d8c:	00000400 	.word	0x00000400
 8000d90:	2000067c 	.word	0x2000067c
 8000d94:	20000898 	.word	0x20000898

08000d98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SystemInit+0x20>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <SystemInit+0x20>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc2:	490e      	ldr	r1, [pc, #56]	; (8000dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <LoopForever+0xe>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd8:	4c0b      	ldr	r4, [pc, #44]	; (8000e08 <LoopForever+0x16>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000de6:	f7ff ffd7 	bl	8000d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dea:	f004 fc1f 	bl	800562c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dee:	f7ff fab1 	bl	8000354 <main>

08000df2 <LoopForever>:

LoopForever:
    b LoopForever
 8000df2:	e7fe      	b.n	8000df2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000df4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e00:	08006ce4 	.word	0x08006ce4
  ldr r2, =_sbss
 8000e04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e08:	20000898 	.word	0x20000898

08000e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC1_2_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <HAL_Init+0x28>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <HAL_Init+0x28>)
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 f94f 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e26:	2000      	movs	r0, #0
 8000e28:	f000 f808 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff fdd6 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40022000 	.word	0x40022000

08000e3c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x54>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f967 	bl	800112e <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e78:	f000 f92f 	bl	80010da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <HAL_InitTick+0x5c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000680 	.word	0x20000680

08000ec4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000680 	.word	0x20000680

08000edc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffde 	bl	8000ec4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008

08000f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f56:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	60d3      	str	r3, [r2, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db0b      	blt.n	8000fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 021f 	and.w	r2, r3, #31
 8000fa0:	4907      	ldr	r1, [pc, #28]	; (8000fc0 <__NVIC_EnableIRQ+0x38>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	2001      	movs	r0, #1
 8000faa:	fa00 f202 	lsl.w	r2, r0, r2
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	; (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	; (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	; 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010a4:	f7ff ff8e 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff29 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff3e 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff8e 	bl	8001018 <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5d 	bl	8000fc4 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff31 	bl	8000f88 <__NVIC_EnableIRQ>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffa2 	bl	8001080 <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001154:	2b02      	cmp	r3, #2
 8001156:	d008      	beq.n	800116a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2204      	movs	r2, #4
 800115c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e020      	b.n	80011ac <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 020e 	bic.w	r2, r2, #14
 8001178:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0201 	bic.w	r2, r2, #1
 8001188:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001192:	2101      	movs	r1, #1
 8001194:	fa01 f202 	lsl.w	r2, r1, r2
 8001198:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d005      	beq.n	80011da <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2204      	movs	r2, #4
 80011d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	e027      	b.n	800122a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 020e 	bic.w	r2, r2, #14
 80011e8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0201 	bic.w	r2, r2, #1
 80011f8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001202:	2101      	movs	r1, #1
 8001204:	fa01 f202 	lsl.w	r2, r1, r2
 8001208:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	4798      	blx	r3
    } 
  }
  return status;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001242:	e14e      	b.n	80014e2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2101      	movs	r1, #1
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	4013      	ands	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8140 	beq.w	80014dc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d005      	beq.n	8001274 <HAL_GPIO_Init+0x40>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d130      	bne.n	80012d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012aa:	2201      	movs	r2, #1
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	f003 0201 	and.w	r2, r3, #1
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d017      	beq.n	8001312 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d123      	bne.n	8001366 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	691a      	ldr	r2, [r3, #16]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	08da      	lsrs	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3208      	adds	r2, #8
 8001360:	6939      	ldr	r1, [r7, #16]
 8001362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2203      	movs	r2, #3
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0203 	and.w	r2, r3, #3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 809a 	beq.w	80014dc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a8:	4b55      	ldr	r3, [pc, #340]	; (8001500 <HAL_GPIO_Init+0x2cc>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a54      	ldr	r2, [pc, #336]	; (8001500 <HAL_GPIO_Init+0x2cc>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b52      	ldr	r3, [pc, #328]	; (8001500 <HAL_GPIO_Init+0x2cc>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013c0:	4a50      	ldr	r2, [pc, #320]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	220f      	movs	r2, #15
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ea:	d013      	beq.n	8001414 <HAL_GPIO_Init+0x1e0>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a46      	ldr	r2, [pc, #280]	; (8001508 <HAL_GPIO_Init+0x2d4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d00d      	beq.n	8001410 <HAL_GPIO_Init+0x1dc>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a45      	ldr	r2, [pc, #276]	; (800150c <HAL_GPIO_Init+0x2d8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d007      	beq.n	800140c <HAL_GPIO_Init+0x1d8>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a44      	ldr	r2, [pc, #272]	; (8001510 <HAL_GPIO_Init+0x2dc>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d101      	bne.n	8001408 <HAL_GPIO_Init+0x1d4>
 8001404:	2303      	movs	r3, #3
 8001406:	e006      	b.n	8001416 <HAL_GPIO_Init+0x1e2>
 8001408:	2305      	movs	r3, #5
 800140a:	e004      	b.n	8001416 <HAL_GPIO_Init+0x1e2>
 800140c:	2302      	movs	r3, #2
 800140e:	e002      	b.n	8001416 <HAL_GPIO_Init+0x1e2>
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <HAL_GPIO_Init+0x1e2>
 8001414:	2300      	movs	r3, #0
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	f002 0203 	and.w	r2, r2, #3
 800141c:	0092      	lsls	r2, r2, #2
 800141e:	4093      	lsls	r3, r2
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001426:	4937      	ldr	r1, [pc, #220]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001434:	4b37      	ldr	r3, [pc, #220]	; (8001514 <HAL_GPIO_Init+0x2e0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	43db      	mvns	r3, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001458:	4a2e      	ldr	r2, [pc, #184]	; (8001514 <HAL_GPIO_Init+0x2e0>)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <HAL_GPIO_Init+0x2e0>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4313      	orrs	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001482:	4a24      	ldr	r2, [pc, #144]	; (8001514 <HAL_GPIO_Init+0x2e0>)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_GPIO_Init+0x2e0>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014ac:	4a19      	ldr	r2, [pc, #100]	; (8001514 <HAL_GPIO_Init+0x2e0>)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_GPIO_Init+0x2e0>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014d6:	4a0f      	ldr	r2, [pc, #60]	; (8001514 <HAL_GPIO_Init+0x2e0>)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3301      	adds	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f47f aea9 	bne.w	8001244 <HAL_GPIO_Init+0x10>
  }
}
 80014f2:	bf00      	nop
 80014f4:	bf00      	nop
 80014f6:	371c      	adds	r7, #28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40021000 	.word	0x40021000
 8001504:	40010000 	.word	0x40010000
 8001508:	48000400 	.word	0x48000400
 800150c:	48000800 	.word	0x48000800
 8001510:	48000c00 	.word	0x48000c00
 8001514:	40010400 	.word	0x40010400

08001518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
 8001524:	4613      	mov	r3, r2
 8001526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001528:	787b      	ldrb	r3, [r7, #1]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800152e:	887a      	ldrh	r2, [r7, #2]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001534:	e002      	b.n	800153c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001554:	695a      	ldr	r2, [r3, #20]
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	4013      	ands	r3, r2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d006      	beq.n	800156c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f806 	bl	8001578 <HAL_GPIO_EXTI_Callback>
  }
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40010400 	.word	0x40010400

08001578 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001596:	af00      	add	r7, sp, #0
 8001598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015a0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d102      	bne.n	80015b6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	f001 b823 	b.w	80025fc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 817d 	beq.w	80018c6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015cc:	4bbc      	ldr	r3, [pc, #752]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d00c      	beq.n	80015f2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015d8:	4bb9      	ldr	r3, [pc, #740]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d15c      	bne.n	800169e <HAL_RCC_OscConfig+0x10e>
 80015e4:	4bb6      	ldr	r3, [pc, #728]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f0:	d155      	bne.n	800169e <HAL_RCC_OscConfig+0x10e>
 80015f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001606:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160a:	fab3 f383 	clz	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	095b      	lsrs	r3, r3, #5
 8001612:	b2db      	uxtb	r3, r3
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b01      	cmp	r3, #1
 800161c:	d102      	bne.n	8001624 <HAL_RCC_OscConfig+0x94>
 800161e:	4ba8      	ldr	r3, [pc, #672]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	e015      	b.n	8001650 <HAL_RCC_OscConfig+0xc0>
 8001624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001628:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001630:	fa93 f3a3 	rbit	r3, r3
 8001634:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001638:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800163c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001640:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001644:	fa93 f3a3 	rbit	r3, r3
 8001648:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800164c:	4b9c      	ldr	r3, [pc, #624]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001654:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001658:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800165c:	fa92 f2a2 	rbit	r2, r2
 8001660:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001664:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001668:	fab2 f282 	clz	r2, r2
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	f042 0220 	orr.w	r2, r2, #32
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	f002 021f 	and.w	r2, r2, #31
 8001678:	2101      	movs	r1, #1
 800167a:	fa01 f202 	lsl.w	r2, r1, r2
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 811f 	beq.w	80018c4 <HAL_RCC_OscConfig+0x334>
 8001686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	f040 8116 	bne.w	80018c4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	f000 bfaf 	b.w	80025fc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ae:	d106      	bne.n	80016be <HAL_RCC_OscConfig+0x12e>
 80016b0:	4b83      	ldr	r3, [pc, #524]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a82      	ldr	r2, [pc, #520]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 80016b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	e036      	b.n	800172c <HAL_RCC_OscConfig+0x19c>
 80016be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x158>
 80016ce:	4b7c      	ldr	r3, [pc, #496]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a7b      	ldr	r2, [pc, #492]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 80016d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b79      	ldr	r3, [pc, #484]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a78      	ldr	r2, [pc, #480]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 80016e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e021      	b.n	800172c <HAL_RCC_OscConfig+0x19c>
 80016e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f8:	d10c      	bne.n	8001714 <HAL_RCC_OscConfig+0x184>
 80016fa:	4b71      	ldr	r3, [pc, #452]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a70      	ldr	r2, [pc, #448]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 8001700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	4b6e      	ldr	r3, [pc, #440]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a6d      	ldr	r2, [pc, #436]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 800170c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	e00b      	b.n	800172c <HAL_RCC_OscConfig+0x19c>
 8001714:	4b6a      	ldr	r3, [pc, #424]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a69      	ldr	r2, [pc, #420]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 800171a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b67      	ldr	r3, [pc, #412]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a66      	ldr	r2, [pc, #408]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 8001726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800172c:	4b64      	ldr	r3, [pc, #400]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 800172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001730:	f023 020f 	bic.w	r2, r3, #15
 8001734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001738:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	495f      	ldr	r1, [pc, #380]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 8001742:	4313      	orrs	r3, r2
 8001744:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d059      	beq.n	800180a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff fbb5 	bl	8000ec4 <HAL_GetTick>
 800175a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	e00a      	b.n	8001776 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001760:	f7ff fbb0 	bl	8000ec4 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b64      	cmp	r3, #100	; 0x64
 800176e:	d902      	bls.n	8001776 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	f000 bf43 	b.w	80025fc <HAL_RCC_OscConfig+0x106c>
 8001776:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800177a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001782:	fa93 f3a3 	rbit	r3, r3
 8001786:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800178a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	095b      	lsrs	r3, r3, #5
 8001796:	b2db      	uxtb	r3, r3
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d102      	bne.n	80017a8 <HAL_RCC_OscConfig+0x218>
 80017a2:	4b47      	ldr	r3, [pc, #284]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	e015      	b.n	80017d4 <HAL_RCC_OscConfig+0x244>
 80017a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80017b4:	fa93 f3a3 	rbit	r3, r3
 80017b8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80017bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80017c4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80017d0:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017d8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80017dc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80017e0:	fa92 f2a2 	rbit	r2, r2
 80017e4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80017e8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80017ec:	fab2 f282 	clz	r2, r2
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	f042 0220 	orr.w	r2, r2, #32
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	f002 021f 	and.w	r2, r2, #31
 80017fc:	2101      	movs	r1, #1
 80017fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001802:	4013      	ands	r3, r2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0ab      	beq.n	8001760 <HAL_RCC_OscConfig+0x1d0>
 8001808:	e05d      	b.n	80018c6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180a:	f7ff fb5b 	bl	8000ec4 <HAL_GetTick>
 800180e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	e00a      	b.n	800182a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff fb56 	bl	8000ec4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b64      	cmp	r3, #100	; 0x64
 8001822:	d902      	bls.n	800182a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	f000 bee9 	b.w	80025fc <HAL_RCC_OscConfig+0x106c>
 800182a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800182e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800183e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001842:	fab3 f383 	clz	r3, r3
 8001846:	b2db      	uxtb	r3, r3
 8001848:	095b      	lsrs	r3, r3, #5
 800184a:	b2db      	uxtb	r3, r3
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b01      	cmp	r3, #1
 8001854:	d102      	bne.n	800185c <HAL_RCC_OscConfig+0x2cc>
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	e015      	b.n	8001888 <HAL_RCC_OscConfig+0x2f8>
 800185c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001860:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001868:	fa93 f3a3 	rbit	r3, r3
 800186c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001874:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001878:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800187c:	fa93 f3a3 	rbit	r3, r3
 8001880:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800188c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001890:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001894:	fa92 f2a2 	rbit	r2, r2
 8001898:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800189c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80018a0:	fab2 f282 	clz	r2, r2
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	f042 0220 	orr.w	r2, r2, #32
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	f002 021f 	and.w	r2, r2, #31
 80018b0:	2101      	movs	r1, #1
 80018b2:	fa01 f202 	lsl.w	r2, r1, r2
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1ab      	bne.n	8001814 <HAL_RCC_OscConfig+0x284>
 80018bc:	e003      	b.n	80018c6 <HAL_RCC_OscConfig+0x336>
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 817d 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018dc:	4ba6      	ldr	r3, [pc, #664]	; (8001b78 <HAL_RCC_OscConfig+0x5e8>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00b      	beq.n	8001900 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018e8:	4ba3      	ldr	r3, [pc, #652]	; (8001b78 <HAL_RCC_OscConfig+0x5e8>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 030c 	and.w	r3, r3, #12
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d172      	bne.n	80019da <HAL_RCC_OscConfig+0x44a>
 80018f4:	4ba0      	ldr	r3, [pc, #640]	; (8001b78 <HAL_RCC_OscConfig+0x5e8>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d16c      	bne.n	80019da <HAL_RCC_OscConfig+0x44a>
 8001900:	2302      	movs	r3, #2
 8001902:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001912:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	095b      	lsrs	r3, r3, #5
 800191e:	b2db      	uxtb	r3, r3
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d102      	bne.n	8001930 <HAL_RCC_OscConfig+0x3a0>
 800192a:	4b93      	ldr	r3, [pc, #588]	; (8001b78 <HAL_RCC_OscConfig+0x5e8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	e013      	b.n	8001958 <HAL_RCC_OscConfig+0x3c8>
 8001930:	2302      	movs	r3, #2
 8001932:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001942:	2302      	movs	r3, #2
 8001944:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001948:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001954:	4b88      	ldr	r3, [pc, #544]	; (8001b78 <HAL_RCC_OscConfig+0x5e8>)
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	2202      	movs	r2, #2
 800195a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800195e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001962:	fa92 f2a2 	rbit	r2, r2
 8001966:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800196a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800196e:	fab2 f282 	clz	r2, r2
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	f042 0220 	orr.w	r2, r2, #32
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	f002 021f 	and.w	r2, r2, #31
 800197e:	2101      	movs	r1, #1
 8001980:	fa01 f202 	lsl.w	r2, r1, r2
 8001984:	4013      	ands	r3, r2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00a      	beq.n	80019a0 <HAL_RCC_OscConfig+0x410>
 800198a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d002      	beq.n	80019a0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	f000 be2e 	b.w	80025fc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a0:	4b75      	ldr	r3, [pc, #468]	; (8001b78 <HAL_RCC_OscConfig+0x5e8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	21f8      	movs	r1, #248	; 0xf8
 80019b6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80019be:	fa91 f1a1 	rbit	r1, r1
 80019c2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80019c6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80019ca:	fab1 f181 	clz	r1, r1
 80019ce:	b2c9      	uxtb	r1, r1
 80019d0:	408b      	lsls	r3, r1
 80019d2:	4969      	ldr	r1, [pc, #420]	; (8001b78 <HAL_RCC_OscConfig+0x5e8>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d8:	e0fd      	b.n	8001bd6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 8088 	beq.w	8001afc <HAL_RCC_OscConfig+0x56c>
 80019ec:	2301      	movs	r3, #1
 80019ee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80019fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a02:	fab3 f383 	clz	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	461a      	mov	r2, r3
 8001a14:	2301      	movs	r3, #1
 8001a16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff fa54 	bl	8000ec4 <HAL_GetTick>
 8001a1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a20:	e00a      	b.n	8001a38 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a22:	f7ff fa4f 	bl	8000ec4 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d902      	bls.n	8001a38 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	f000 bde2 	b.w	80025fc <HAL_RCC_OscConfig+0x106c>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001a4a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	095b      	lsrs	r3, r3, #5
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d102      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4d8>
 8001a62:	4b45      	ldr	r3, [pc, #276]	; (8001b78 <HAL_RCC_OscConfig+0x5e8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	e013      	b.n	8001a90 <HAL_RCC_OscConfig+0x500>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a80:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001a8c:	4b3a      	ldr	r3, [pc, #232]	; (8001b78 <HAL_RCC_OscConfig+0x5e8>)
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	2202      	movs	r2, #2
 8001a92:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001a96:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001a9a:	fa92 f2a2 	rbit	r2, r2
 8001a9e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001aa2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001aa6:	fab2 f282 	clz	r2, r2
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	f042 0220 	orr.w	r2, r2, #32
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	f002 021f 	and.w	r2, r2, #31
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0af      	beq.n	8001a22 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac2:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <HAL_RCC_OscConfig+0x5e8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	21f8      	movs	r1, #248	; 0xf8
 8001ad8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ae0:	fa91 f1a1 	rbit	r1, r1
 8001ae4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001ae8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001aec:	fab1 f181 	clz	r1, r1
 8001af0:	b2c9      	uxtb	r1, r1
 8001af2:	408b      	lsls	r3, r1
 8001af4:	4920      	ldr	r1, [pc, #128]	; (8001b78 <HAL_RCC_OscConfig+0x5e8>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]
 8001afa:	e06c      	b.n	8001bd6 <HAL_RCC_OscConfig+0x646>
 8001afc:	2301      	movs	r3, #1
 8001afe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001b0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	461a      	mov	r2, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7ff f9cc 	bl	8000ec4 <HAL_GetTick>
 8001b2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b30:	e00a      	b.n	8001b48 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b32:	f7ff f9c7 	bl	8000ec4 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d902      	bls.n	8001b48 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	f000 bd5a 	b.w	80025fc <HAL_RCC_OscConfig+0x106c>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	095b      	lsrs	r3, r3, #5
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d104      	bne.n	8001b7c <HAL_RCC_OscConfig+0x5ec>
 8001b72:	4b01      	ldr	r3, [pc, #4]	; (8001b78 <HAL_RCC_OscConfig+0x5e8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	e015      	b.n	8001ba4 <HAL_RCC_OscConfig+0x614>
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b86:	fa93 f3a3 	rbit	r3, r3
 8001b8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b8e:	2302      	movs	r3, #2
 8001b90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001ba0:	4bc8      	ldr	r3, [pc, #800]	; (8001ec4 <HAL_RCC_OscConfig+0x934>)
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001baa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001bae:	fa92 f2a2 	rbit	r2, r2
 8001bb2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001bb6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001bba:	fab2 f282 	clz	r2, r2
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	f042 0220 	orr.w	r2, r2, #32
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	f002 021f 	and.w	r2, r2, #31
 8001bca:	2101      	movs	r1, #1
 8001bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1ad      	bne.n	8001b32 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8110 	beq.w	8001e0c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d079      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x760>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4bab      	ldr	r3, [pc, #684]	; (8001ec8 <HAL_RCC_OscConfig+0x938>)
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	461a      	mov	r2, r3
 8001c22:	2301      	movs	r3, #1
 8001c24:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c26:	f7ff f94d 	bl	8000ec4 <HAL_GetTick>
 8001c2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2e:	e00a      	b.n	8001c46 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c30:	f7ff f948 	bl	8000ec4 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d902      	bls.n	8001c46 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	f000 bcdb 	b.w	80025fc <HAL_RCC_OscConfig+0x106c>
 8001c46:	2302      	movs	r3, #2
 8001c48:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c50:	fa93 f3a3 	rbit	r3, r3
 8001c54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c60:	2202      	movs	r2, #2
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c68:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	fa93 f2a3 	rbit	r2, r3
 8001c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c84:	2202      	movs	r2, #2
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	fa93 f2a3 	rbit	r2, r3
 8001c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c9e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca0:	4b88      	ldr	r3, [pc, #544]	; (8001ec4 <HAL_RCC_OscConfig+0x934>)
 8001ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cac:	2102      	movs	r1, #2
 8001cae:	6019      	str	r1, [r3, #0]
 8001cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	fa93 f1a3 	rbit	r1, r3
 8001cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cc6:	6019      	str	r1, [r3, #0]
  return result;
 8001cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ccc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f003 031f 	and.w	r3, r3, #31
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0a0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x6a0>
 8001cee:	e08d      	b.n	8001e0c <HAL_RCC_OscConfig+0x87c>
 8001cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d00:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	fa93 f2a3 	rbit	r2, r3
 8001d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d12:	601a      	str	r2, [r3, #0]
  return result;
 8001d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d18:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d1c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b68      	ldr	r3, [pc, #416]	; (8001ec8 <HAL_RCC_OscConfig+0x938>)
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	2300      	movs	r3, #0
 8001d30:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d32:	f7ff f8c7 	bl	8000ec4 <HAL_GetTick>
 8001d36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d3c:	f7ff f8c2 	bl	8000ec4 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d902      	bls.n	8001d52 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	f000 bc55 	b.w	80025fc <HAL_RCC_OscConfig+0x106c>
 8001d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d56:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	fa93 f2a3 	rbit	r2, r3
 8001d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d70:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d7e:	2202      	movs	r2, #2
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d86:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	fa93 f2a3 	rbit	r2, r3
 8001d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001da2:	2202      	movs	r2, #2
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	fa93 f2a3 	rbit	r2, r3
 8001db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001dbc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dbe:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <HAL_RCC_OscConfig+0x934>)
 8001dc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001dca:	2102      	movs	r1, #2
 8001dcc:	6019      	str	r1, [r3, #0]
 8001dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	fa93 f1a3 	rbit	r1, r3
 8001ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001de4:	6019      	str	r1, [r3, #0]
  return result;
 8001de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	2101      	movs	r1, #1
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d197      	bne.n	8001d3c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 81a1 	beq.w	8002164 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e28:	4b26      	ldr	r3, [pc, #152]	; (8001ec4 <HAL_RCC_OscConfig+0x934>)
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d116      	bne.n	8001e62 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e34:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <HAL_RCC_OscConfig+0x934>)
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	4a22      	ldr	r2, [pc, #136]	; (8001ec4 <HAL_RCC_OscConfig+0x934>)
 8001e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	61d3      	str	r3, [r2, #28]
 8001e40:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <HAL_RCC_OscConfig+0x934>)
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e56:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001e5a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <HAL_RCC_OscConfig+0x93c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d11a      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_RCC_OscConfig+0x93c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a16      	ldr	r2, [pc, #88]	; (8001ecc <HAL_RCC_OscConfig+0x93c>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff f823 	bl	8000ec4 <HAL_GetTick>
 8001e7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e82:	e009      	b.n	8001e98 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e84:	f7ff f81e 	bl	8000ec4 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b64      	cmp	r3, #100	; 0x64
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e3b1      	b.n	80025fc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <HAL_RCC_OscConfig+0x93c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0ef      	beq.n	8001e84 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d10d      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x940>
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_RCC_OscConfig+0x934>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	4a02      	ldr	r2, [pc, #8]	; (8001ec4 <HAL_RCC_OscConfig+0x934>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6213      	str	r3, [r2, #32]
 8001ec0:	e03c      	b.n	8001f3c <HAL_RCC_OscConfig+0x9ac>
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	10908120 	.word	0x10908120
 8001ecc:	40007000 	.word	0x40007000
 8001ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10c      	bne.n	8001efa <HAL_RCC_OscConfig+0x96a>
 8001ee0:	4bc1      	ldr	r3, [pc, #772]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4ac0      	ldr	r2, [pc, #768]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 8001ee6:	f023 0301 	bic.w	r3, r3, #1
 8001eea:	6213      	str	r3, [r2, #32]
 8001eec:	4bbe      	ldr	r3, [pc, #760]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4abd      	ldr	r2, [pc, #756]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 8001ef2:	f023 0304 	bic.w	r3, r3, #4
 8001ef6:	6213      	str	r3, [r2, #32]
 8001ef8:	e020      	b.n	8001f3c <HAL_RCC_OscConfig+0x9ac>
 8001efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b05      	cmp	r3, #5
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x994>
 8001f0a:	4bb7      	ldr	r3, [pc, #732]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4ab6      	ldr	r2, [pc, #728]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	6213      	str	r3, [r2, #32]
 8001f16:	4bb4      	ldr	r3, [pc, #720]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4ab3      	ldr	r2, [pc, #716]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6213      	str	r3, [r2, #32]
 8001f22:	e00b      	b.n	8001f3c <HAL_RCC_OscConfig+0x9ac>
 8001f24:	4bb0      	ldr	r3, [pc, #704]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4aaf      	ldr	r2, [pc, #700]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 8001f2a:	f023 0301 	bic.w	r3, r3, #1
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	4bad      	ldr	r3, [pc, #692]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4aac      	ldr	r2, [pc, #688]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 8001f36:	f023 0304 	bic.w	r3, r3, #4
 8001f3a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8081 	beq.w	8002050 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4e:	f7fe ffb9 	bl	8000ec4 <HAL_GetTick>
 8001f52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f56:	e00b      	b.n	8001f70 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f58:	f7fe ffb4 	bl	8000ec4 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e345      	b.n	80025fc <HAL_RCC_OscConfig+0x106c>
 8001f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f74:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f78:	2202      	movs	r2, #2
 8001f7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f80:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	fa93 f2a3 	rbit	r2, r3
 8001f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f98:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	fa93 f2a3 	rbit	r2, r3
 8001fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001fb6:	601a      	str	r2, [r3, #0]
  return result;
 8001fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001fc0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	095b      	lsrs	r3, r3, #5
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d102      	bne.n	8001fdc <HAL_RCC_OscConfig+0xa4c>
 8001fd6:	4b84      	ldr	r3, [pc, #528]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	e013      	b.n	8002004 <HAL_RCC_OscConfig+0xa74>
 8001fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	fa93 f2a3 	rbit	r2, r3
 8001ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	4b79      	ldr	r3, [pc, #484]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002008:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800200c:	2102      	movs	r1, #2
 800200e:	6011      	str	r1, [r2, #0]
 8002010:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002014:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	fa92 f1a2 	rbit	r1, r2
 800201e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002022:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002026:	6011      	str	r1, [r2, #0]
  return result;
 8002028:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800202c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002030:	6812      	ldr	r2, [r2, #0]
 8002032:	fab2 f282 	clz	r2, r2
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	f002 021f 	and.w	r2, r2, #31
 8002042:	2101      	movs	r1, #1
 8002044:	fa01 f202 	lsl.w	r2, r1, r2
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d084      	beq.n	8001f58 <HAL_RCC_OscConfig+0x9c8>
 800204e:	e07f      	b.n	8002150 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7fe ff38 	bl	8000ec4 <HAL_GetTick>
 8002054:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	e00b      	b.n	8002072 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe ff33 	bl	8000ec4 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e2c4      	b.n	80025fc <HAL_RCC_OscConfig+0x106c>
 8002072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002076:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800207a:	2202      	movs	r2, #2
 800207c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002082:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	fa93 f2a3 	rbit	r2, r3
 800208c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002090:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800209e:	2202      	movs	r2, #2
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	fa93 f2a3 	rbit	r2, r3
 80020b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80020b8:	601a      	str	r2, [r3, #0]
  return result;
 80020ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020be:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80020c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f043 0302 	orr.w	r3, r3, #2
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d102      	bne.n	80020de <HAL_RCC_OscConfig+0xb4e>
 80020d8:	4b43      	ldr	r3, [pc, #268]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	e013      	b.n	8002106 <HAL_RCC_OscConfig+0xb76>
 80020de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80020e6:	2202      	movs	r2, #2
 80020e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	fa93 f2a3 	rbit	r2, r3
 80020f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	4b39      	ldr	r3, [pc, #228]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800210a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800210e:	2102      	movs	r1, #2
 8002110:	6011      	str	r1, [r2, #0]
 8002112:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002116:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	fa92 f1a2 	rbit	r1, r2
 8002120:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002124:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002128:	6011      	str	r1, [r2, #0]
  return result;
 800212a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800212e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	fab2 f282 	clz	r2, r2
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	f002 021f 	and.w	r2, r2, #31
 8002144:	2101      	movs	r1, #1
 8002146:	fa01 f202 	lsl.w	r2, r1, r2
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d184      	bne.n	800205a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002150:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002154:	2b01      	cmp	r3, #1
 8002156:	d105      	bne.n	8002164 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002158:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 800215e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002162:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002168:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 8242 	beq.w	80025fa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002176:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <HAL_RCC_OscConfig+0xc58>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b08      	cmp	r3, #8
 8002180:	f000 8213 	beq.w	80025aa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002188:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	2b02      	cmp	r3, #2
 8002192:	f040 8162 	bne.w	800245a <HAL_RCC_OscConfig+0xeca>
 8002196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800219e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	fa93 f2a3 	rbit	r2, r3
 80021b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80021ba:	601a      	str	r2, [r3, #0]
  return result;
 80021bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80021c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	461a      	mov	r2, r3
 80021d8:	2300      	movs	r3, #0
 80021da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7fe fe72 	bl	8000ec4 <HAL_GetTick>
 80021e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e4:	e00c      	b.n	8002200 <HAL_RCC_OscConfig+0xc70>
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ec:	f7fe fe6a 	bl	8000ec4 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e1fd      	b.n	80025fc <HAL_RCC_OscConfig+0x106c>
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002208:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800220c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002212:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	fa93 f2a3 	rbit	r2, r3
 800221c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002220:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002224:	601a      	str	r2, [r3, #0]
  return result;
 8002226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800222e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d102      	bne.n	800224a <HAL_RCC_OscConfig+0xcba>
 8002244:	4bb0      	ldr	r3, [pc, #704]	; (8002508 <HAL_RCC_OscConfig+0xf78>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	e027      	b.n	800229a <HAL_RCC_OscConfig+0xd0a>
 800224a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002252:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002256:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	fa93 f2a3 	rbit	r2, r3
 8002266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002274:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002278:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002282:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	fa93 f2a3 	rbit	r2, r3
 800228c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002290:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	4b9c      	ldr	r3, [pc, #624]	; (8002508 <HAL_RCC_OscConfig+0xf78>)
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800229e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80022a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022a6:	6011      	str	r1, [r2, #0]
 80022a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ac:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	fa92 f1a2 	rbit	r1, r2
 80022b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022be:	6011      	str	r1, [r2, #0]
  return result;
 80022c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022c4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	fab2 f282 	clz	r2, r2
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	f042 0220 	orr.w	r2, r2, #32
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	f002 021f 	and.w	r2, r2, #31
 80022da:	2101      	movs	r1, #1
 80022dc:	fa01 f202 	lsl.w	r2, r1, r2
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d182      	bne.n	80021ec <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e6:	4b88      	ldr	r3, [pc, #544]	; (8002508 <HAL_RCC_OscConfig+0xf78>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80022fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	430b      	orrs	r3, r1
 8002308:	497f      	ldr	r1, [pc, #508]	; (8002508 <HAL_RCC_OscConfig+0xf78>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
 800230e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002312:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002316:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800231a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002320:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	fa93 f2a3 	rbit	r2, r3
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002332:	601a      	str	r2, [r3, #0]
  return result;
 8002334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002338:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800233c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002348:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	461a      	mov	r2, r3
 8002350:	2301      	movs	r3, #1
 8002352:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7fe fdb6 	bl	8000ec4 <HAL_GetTick>
 8002358:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800235c:	e009      	b.n	8002372 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235e:	f7fe fdb1 	bl	8000ec4 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e144      	b.n	80025fc <HAL_RCC_OscConfig+0x106c>
 8002372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002376:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800237a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800237e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002384:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	fa93 f2a3 	rbit	r2, r3
 800238e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002392:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002396:	601a      	str	r2, [r3, #0]
  return result;
 8002398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	095b      	lsrs	r3, r3, #5
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d102      	bne.n	80023bc <HAL_RCC_OscConfig+0xe2c>
 80023b6:	4b54      	ldr	r3, [pc, #336]	; (8002508 <HAL_RCC_OscConfig+0xf78>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	e027      	b.n	800240c <HAL_RCC_OscConfig+0xe7c>
 80023bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	fa93 f2a3 	rbit	r2, r3
 80023d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023dc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80023ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	fa93 f2a3 	rbit	r2, r3
 80023fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002402:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	4b3f      	ldr	r3, [pc, #252]	; (8002508 <HAL_RCC_OscConfig+0xf78>)
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002410:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002414:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002418:	6011      	str	r1, [r2, #0]
 800241a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800241e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	fa92 f1a2 	rbit	r1, r2
 8002428:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800242c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002430:	6011      	str	r1, [r2, #0]
  return result;
 8002432:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002436:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	fab2 f282 	clz	r2, r2
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	f042 0220 	orr.w	r2, r2, #32
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	f002 021f 	and.w	r2, r2, #31
 800244c:	2101      	movs	r1, #1
 800244e:	fa01 f202 	lsl.w	r2, r1, r2
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d082      	beq.n	800235e <HAL_RCC_OscConfig+0xdce>
 8002458:	e0cf      	b.n	80025fa <HAL_RCC_OscConfig+0x106a>
 800245a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002462:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	fa93 f2a3 	rbit	r2, r3
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800247e:	601a      	str	r2, [r3, #0]
  return result;
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002488:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002494:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	461a      	mov	r2, r3
 800249c:	2300      	movs	r3, #0
 800249e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe fd10 	bl	8000ec4 <HAL_GetTick>
 80024a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a8:	e009      	b.n	80024be <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024aa:	f7fe fd0b 	bl	8000ec4 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e09e      	b.n	80025fc <HAL_RCC_OscConfig+0x106c>
 80024be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	fa93 f2a3 	rbit	r2, r3
 80024da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024de:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80024e2:	601a      	str	r2, [r3, #0]
  return result;
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80024ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d104      	bne.n	800250c <HAL_RCC_OscConfig+0xf7c>
 8002502:	4b01      	ldr	r3, [pc, #4]	; (8002508 <HAL_RCC_OscConfig+0xf78>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	e029      	b.n	800255c <HAL_RCC_OscConfig+0xfcc>
 8002508:	40021000 	.word	0x40021000
 800250c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002510:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	fa93 f2a3 	rbit	r2, r3
 8002528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800253a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002544:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	fa93 f2a3 	rbit	r2, r3
 800254e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002552:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <HAL_RCC_OscConfig+0x1078>)
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002560:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002564:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002568:	6011      	str	r1, [r2, #0]
 800256a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800256e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	fa92 f1a2 	rbit	r1, r2
 8002578:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800257c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002580:	6011      	str	r1, [r2, #0]
  return result;
 8002582:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002586:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	fab2 f282 	clz	r2, r2
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f042 0220 	orr.w	r2, r2, #32
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	f002 021f 	and.w	r2, r2, #31
 800259c:	2101      	movs	r1, #1
 800259e:	fa01 f202 	lsl.w	r2, r1, r2
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d180      	bne.n	80024aa <HAL_RCC_OscConfig+0xf1a>
 80025a8:	e027      	b.n	80025fa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e01e      	b.n	80025fc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025be:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_RCC_OscConfig+0x1078>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025ca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d10b      	bne.n	80025f6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80025de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000

0800260c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b09e      	sub	sp, #120	; 0x78
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e162      	b.n	80028ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002624:	4b90      	ldr	r3, [pc, #576]	; (8002868 <HAL_RCC_ClockConfig+0x25c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d910      	bls.n	8002654 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b8d      	ldr	r3, [pc, #564]	; (8002868 <HAL_RCC_ClockConfig+0x25c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 0207 	bic.w	r2, r3, #7
 800263a:	498b      	ldr	r1, [pc, #556]	; (8002868 <HAL_RCC_ClockConfig+0x25c>)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002642:	4b89      	ldr	r3, [pc, #548]	; (8002868 <HAL_RCC_ClockConfig+0x25c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e14a      	b.n	80028ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002660:	4b82      	ldr	r3, [pc, #520]	; (800286c <HAL_RCC_ClockConfig+0x260>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	497f      	ldr	r1, [pc, #508]	; (800286c <HAL_RCC_ClockConfig+0x260>)
 800266e:	4313      	orrs	r3, r2
 8002670:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 80dc 	beq.w	8002838 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d13c      	bne.n	8002702 <HAL_RCC_ClockConfig+0xf6>
 8002688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800268c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d102      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xa6>
 80026ac:	4b6f      	ldr	r3, [pc, #444]	; (800286c <HAL_RCC_ClockConfig+0x260>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	e00f      	b.n	80026d2 <HAL_RCC_ClockConfig+0xc6>
 80026b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	667b      	str	r3, [r7, #100]	; 0x64
 80026c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026c4:	663b      	str	r3, [r7, #96]	; 0x60
 80026c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026ce:	4b67      	ldr	r3, [pc, #412]	; (800286c <HAL_RCC_ClockConfig+0x260>)
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80026d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026da:	fa92 f2a2 	rbit	r2, r2
 80026de:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80026e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026e2:	fab2 f282 	clz	r2, r2
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	f042 0220 	orr.w	r2, r2, #32
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	f002 021f 	and.w	r2, r2, #31
 80026f2:	2101      	movs	r1, #1
 80026f4:	fa01 f202 	lsl.w	r2, r1, r2
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d17b      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e0f3      	b.n	80028ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d13c      	bne.n	8002784 <HAL_RCC_ClockConfig+0x178>
 800270a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800270e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	095b      	lsrs	r3, r3, #5
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b01      	cmp	r3, #1
 800272c:	d102      	bne.n	8002734 <HAL_RCC_ClockConfig+0x128>
 800272e:	4b4f      	ldr	r3, [pc, #316]	; (800286c <HAL_RCC_ClockConfig+0x260>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	e00f      	b.n	8002754 <HAL_RCC_ClockConfig+0x148>
 8002734:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002738:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	647b      	str	r3, [r7, #68]	; 0x44
 8002742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002746:	643b      	str	r3, [r7, #64]	; 0x40
 8002748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002750:	4b46      	ldr	r3, [pc, #280]	; (800286c <HAL_RCC_ClockConfig+0x260>)
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002758:	63ba      	str	r2, [r7, #56]	; 0x38
 800275a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800275c:	fa92 f2a2 	rbit	r2, r2
 8002760:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002764:	fab2 f282 	clz	r2, r2
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	f042 0220 	orr.w	r2, r2, #32
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	f002 021f 	and.w	r2, r2, #31
 8002774:	2101      	movs	r1, #1
 8002776:	fa01 f202 	lsl.w	r2, r1, r2
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d13a      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0b2      	b.n	80028ea <HAL_RCC_ClockConfig+0x2de>
 8002784:	2302      	movs	r3, #2
 8002786:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	095b      	lsrs	r3, r3, #5
 800279a:	b2db      	uxtb	r3, r3
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d102      	bne.n	80027ac <HAL_RCC_ClockConfig+0x1a0>
 80027a6:	4b31      	ldr	r3, [pc, #196]	; (800286c <HAL_RCC_ClockConfig+0x260>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	e00d      	b.n	80027c8 <HAL_RCC_ClockConfig+0x1bc>
 80027ac:	2302      	movs	r3, #2
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
 80027b8:	2302      	movs	r3, #2
 80027ba:	623b      	str	r3, [r7, #32]
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	61fb      	str	r3, [r7, #28]
 80027c4:	4b29      	ldr	r3, [pc, #164]	; (800286c <HAL_RCC_ClockConfig+0x260>)
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	2202      	movs	r2, #2
 80027ca:	61ba      	str	r2, [r7, #24]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	fa92 f2a2 	rbit	r2, r2
 80027d2:	617a      	str	r2, [r7, #20]
  return result;
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	fab2 f282 	clz	r2, r2
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	f042 0220 	orr.w	r2, r2, #32
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	f002 021f 	and.w	r2, r2, #31
 80027e6:	2101      	movs	r1, #1
 80027e8:	fa01 f202 	lsl.w	r2, r1, r2
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e079      	b.n	80028ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f6:	4b1d      	ldr	r3, [pc, #116]	; (800286c <HAL_RCC_ClockConfig+0x260>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f023 0203 	bic.w	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	491a      	ldr	r1, [pc, #104]	; (800286c <HAL_RCC_ClockConfig+0x260>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002808:	f7fe fb5c 	bl	8000ec4 <HAL_GetTick>
 800280c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	e00a      	b.n	8002826 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002810:	f7fe fb58 	bl	8000ec4 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	; 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e061      	b.n	80028ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_RCC_ClockConfig+0x260>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 020c 	and.w	r2, r3, #12
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	429a      	cmp	r2, r3
 8002836:	d1eb      	bne.n	8002810 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_ClockConfig+0x25c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d214      	bcs.n	8002870 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <HAL_RCC_ClockConfig+0x25c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 0207 	bic.w	r2, r3, #7
 800284e:	4906      	ldr	r1, [pc, #24]	; (8002868 <HAL_RCC_ClockConfig+0x25c>)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	4b04      	ldr	r3, [pc, #16]	; (8002868 <HAL_RCC_ClockConfig+0x25c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d005      	beq.n	8002870 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e040      	b.n	80028ea <HAL_RCC_ClockConfig+0x2de>
 8002868:	40022000 	.word	0x40022000
 800286c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800287c:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <HAL_RCC_ClockConfig+0x2e8>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	491a      	ldr	r1, [pc, #104]	; (80028f4 <HAL_RCC_ClockConfig+0x2e8>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800289a:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <HAL_RCC_ClockConfig+0x2e8>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4912      	ldr	r1, [pc, #72]	; (80028f4 <HAL_RCC_ClockConfig+0x2e8>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028ae:	f000 f829 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 80028b2:	4601      	mov	r1, r0
 80028b4:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <HAL_RCC_ClockConfig+0x2e8>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028bc:	22f0      	movs	r2, #240	; 0xf0
 80028be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	fa92 f2a2 	rbit	r2, r2
 80028c6:	60fa      	str	r2, [r7, #12]
  return result;
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	fab2 f282 	clz	r2, r2
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	40d3      	lsrs	r3, r2
 80028d2:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x2ec>)
 80028d4:	5cd3      	ldrb	r3, [r2, r3]
 80028d6:	fa21 f303 	lsr.w	r3, r1, r3
 80028da:	4a08      	ldr	r2, [pc, #32]	; (80028fc <HAL_RCC_ClockConfig+0x2f0>)
 80028dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <HAL_RCC_ClockConfig+0x2f4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe faaa 	bl	8000e3c <HAL_InitTick>
  
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3778      	adds	r7, #120	; 0x78
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40021000 	.word	0x40021000
 80028f8:	08006b8c 	.word	0x08006b8c
 80028fc:	20000000 	.word	0x20000000
 8002900:	20000004 	.word	0x20000004

08002904 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002904:	b480      	push	{r7}
 8002906:	b08b      	sub	sp, #44	; 0x2c
 8002908:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800291e:	4b29      	ldr	r3, [pc, #164]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b04      	cmp	r3, #4
 800292c:	d002      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x30>
 800292e:	2b08      	cmp	r3, #8
 8002930:	d003      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x36>
 8002932:	e03c      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002934:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002936:	623b      	str	r3, [r7, #32]
      break;
 8002938:	e03c      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002940:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002944:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	fa92 f2a2 	rbit	r2, r2
 800294c:	607a      	str	r2, [r7, #4]
  return result;
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	fab2 f282 	clz	r2, r2
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	40d3      	lsrs	r3, r2
 8002958:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800295a:	5cd3      	ldrb	r3, [r2, r3]
 800295c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800295e:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	220f      	movs	r2, #15
 8002968:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	fa92 f2a2 	rbit	r2, r2
 8002970:	60fa      	str	r2, [r7, #12]
  return result;
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	fab2 f282 	clz	r2, r2
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	40d3      	lsrs	r3, r2
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800297e:	5cd3      	ldrb	r3, [r2, r3]
 8002980:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800298c:	4a0e      	ldr	r2, [pc, #56]	; (80029c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	fbb2 f2f3 	udiv	r2, r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fb02 f303 	mul.w	r3, r2, r3
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
 800299c:	e004      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	4a0c      	ldr	r2, [pc, #48]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	623b      	str	r3, [r7, #32]
      break;
 80029ac:	e002      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029b0:	623b      	str	r3, [r7, #32]
      break;
 80029b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029b4:	6a3b      	ldr	r3, [r7, #32]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	372c      	adds	r7, #44	; 0x2c
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000
 80029c8:	007a1200 	.word	0x007a1200
 80029cc:	08006ba4 	.word	0x08006ba4
 80029d0:	08006bb4 	.word	0x08006bb4
 80029d4:	003d0900 	.word	0x003d0900

080029d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <HAL_RCC_GetHCLKFreq+0x14>)
 80029de:	681b      	ldr	r3, [r3, #0]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	20000000 	.word	0x20000000

080029f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80029f6:	f7ff ffef 	bl	80029d8 <HAL_RCC_GetHCLKFreq>
 80029fa:	4601      	mov	r1, r0
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a04:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a08:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	fa92 f2a2 	rbit	r2, r2
 8002a10:	603a      	str	r2, [r7, #0]
  return result;
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	fab2 f282 	clz	r2, r2
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	40d3      	lsrs	r3, r2
 8002a1c:	4a04      	ldr	r2, [pc, #16]	; (8002a30 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a1e:	5cd3      	ldrb	r3, [r2, r3]
 8002a20:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	08006b9c 	.word	0x08006b9c

08002a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a3a:	f7ff ffcd 	bl	80029d8 <HAL_RCC_GetHCLKFreq>
 8002a3e:	4601      	mov	r1, r0
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a48:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	fa92 f2a2 	rbit	r2, r2
 8002a54:	603a      	str	r2, [r7, #0]
  return result;
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	fab2 f282 	clz	r2, r2
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	40d3      	lsrs	r3, r2
 8002a60:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a62:	5cd3      	ldrb	r3, [r2, r3]
 8002a64:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40021000 	.word	0x40021000
 8002a74:	08006b9c 	.word	0x08006b9c

08002a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b092      	sub	sp, #72	; 0x48
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 80cd 	beq.w	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9c:	4b86      	ldr	r3, [pc, #536]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10e      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa8:	4b83      	ldr	r3, [pc, #524]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	4a82      	ldr	r2, [pc, #520]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	61d3      	str	r3, [r2, #28]
 8002ab4:	4b80      	ldr	r3, [pc, #512]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	4b7d      	ldr	r3, [pc, #500]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d118      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad2:	4b7a      	ldr	r3, [pc, #488]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a79      	ldr	r2, [pc, #484]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ade:	f7fe f9f1 	bl	8000ec4 <HAL_GetTick>
 8002ae2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae4:	e008      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae6:	f7fe f9ed 	bl	8000ec4 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b64      	cmp	r3, #100	; 0x64
 8002af2:	d901      	bls.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e0db      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af8:	4b70      	ldr	r3, [pc, #448]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b04:	4b6c      	ldr	r3, [pc, #432]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d07d      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d076      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b22:	4b65      	ldr	r3, [pc, #404]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b30:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b5e      	ldr	r3, [pc, #376]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b60:	fab3 f383 	clz	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	4b55      	ldr	r3, [pc, #340]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2300      	movs	r3, #0
 8002b72:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b74:	4a50      	ldr	r2, [pc, #320]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b78:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d045      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b84:	f7fe f99e 	bl	8000ec4 <HAL_GetTick>
 8002b88:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8c:	f7fe f99a 	bl	8000ec4 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e086      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
 8002bae:	2302      	movs	r3, #2
 8002bb0:	623b      	str	r3, [r7, #32]
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	fa93 f3a3 	rbit	r3, r3
 8002bb8:	61fb      	str	r3, [r7, #28]
  return result;
 8002bba:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f043 0302 	orr.w	r3, r3, #2
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d102      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002bd0:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	e007      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	4b35      	ldr	r3, [pc, #212]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	2202      	movs	r2, #2
 8002be8:	613a      	str	r2, [r7, #16]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	fa92 f2a2 	rbit	r2, r2
 8002bf0:	60fa      	str	r2, [r7, #12]
  return result;
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	fab2 f282 	clz	r2, r2
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	f002 021f 	and.w	r2, r2, #31
 8002c04:	2101      	movs	r1, #1
 8002c06:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0bd      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c10:	4b29      	ldr	r3, [pc, #164]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4926      	ldr	r1, [pc, #152]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d105      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2a:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	4a22      	ldr	r2, [pc, #136]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c34:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f023 0203 	bic.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	491a      	ldr	r1, [pc, #104]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c60:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	f023 0210 	bic.w	r2, r3, #16
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4912      	ldr	r1, [pc, #72]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	490b      	ldr	r1, [pc, #44]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	4903      	ldr	r1, [pc, #12]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3748      	adds	r7, #72	; 0x48
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	10908100 	.word	0x10908100

08002cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e049      	b.n	8002d6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fd fe9a 	bl	8000a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3304      	adds	r3, #4
 8002d00:	4619      	mov	r1, r3
 8002d02:	4610      	mov	r0, r2
 8002d04:	f000 fbc6 	bl	8003494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e049      	b.n	8002e18 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d106      	bne.n	8002d9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f841 	bl	8002e20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3304      	adds	r3, #4
 8002dae:	4619      	mov	r1, r3
 8002db0:	4610      	mov	r0, r2
 8002db2:	f000 fb6f 	bl	8003494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d122      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d11b      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0202 	mvn.w	r2, #2
 8002e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 faed 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 8002e7c:	e005      	b.n	8002e8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fadf 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 faf0 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d122      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d11b      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0204 	mvn.w	r2, #4
 8002eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fac3 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 8002ed0:	e005      	b.n	8002ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fab5 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fac6 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d122      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d11b      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0208 	mvn.w	r2, #8
 8002f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fa99 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 8002f24:	e005      	b.n	8002f32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fa8b 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 fa9c 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	d122      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b10      	cmp	r3, #16
 8002f52:	d11b      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0210 	mvn.w	r2, #16
 8002f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2208      	movs	r2, #8
 8002f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fa6f 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 8002f78:	e005      	b.n	8002f86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fa61 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fa72 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d10e      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d107      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0201 	mvn.w	r2, #1
 8002fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fa3b 	bl	800342e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc2:	2b80      	cmp	r3, #128	; 0x80
 8002fc4:	d10e      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd0:	2b80      	cmp	r3, #128	; 0x80
 8002fd2:	d107      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fe88 	bl	8003cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff2:	d10e      	bne.n	8003012 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffe:	2b80      	cmp	r3, #128	; 0x80
 8003000:	d107      	bne.n	8003012 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800300a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fe7b 	bl	8003d08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d10e      	bne.n	800303e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	d107      	bne.n	800303e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fa20 	bl	800347e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b20      	cmp	r3, #32
 800304a:	d10e      	bne.n	800306a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b20      	cmp	r3, #32
 8003058:	d107      	bne.n	800306a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f06f 0220 	mvn.w	r2, #32
 8003062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fe3b 	bl	8003ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800308e:	2302      	movs	r3, #2
 8003090:	e0ff      	b.n	8003292 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b14      	cmp	r3, #20
 800309e:	f200 80f0 	bhi.w	8003282 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80030a2:	a201      	add	r2, pc, #4	; (adr r2, 80030a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a8:	080030fd 	.word	0x080030fd
 80030ac:	08003283 	.word	0x08003283
 80030b0:	08003283 	.word	0x08003283
 80030b4:	08003283 	.word	0x08003283
 80030b8:	0800313d 	.word	0x0800313d
 80030bc:	08003283 	.word	0x08003283
 80030c0:	08003283 	.word	0x08003283
 80030c4:	08003283 	.word	0x08003283
 80030c8:	0800317f 	.word	0x0800317f
 80030cc:	08003283 	.word	0x08003283
 80030d0:	08003283 	.word	0x08003283
 80030d4:	08003283 	.word	0x08003283
 80030d8:	080031bf 	.word	0x080031bf
 80030dc:	08003283 	.word	0x08003283
 80030e0:	08003283 	.word	0x08003283
 80030e4:	08003283 	.word	0x08003283
 80030e8:	08003201 	.word	0x08003201
 80030ec:	08003283 	.word	0x08003283
 80030f0:	08003283 	.word	0x08003283
 80030f4:	08003283 	.word	0x08003283
 80030f8:	08003241 	.word	0x08003241
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fa3e 	bl	8003584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0208 	orr.w	r2, r2, #8
 8003116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0204 	bic.w	r2, r2, #4
 8003126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6999      	ldr	r1, [r3, #24]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	619a      	str	r2, [r3, #24]
      break;
 800313a:	e0a5      	b.n	8003288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	4618      	mov	r0, r3
 8003144:	f000 faa4 	bl	8003690 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6999      	ldr	r1, [r3, #24]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	021a      	lsls	r2, r3, #8
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	619a      	str	r2, [r3, #24]
      break;
 800317c:	e084      	b.n	8003288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fb03 	bl	8003790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69da      	ldr	r2, [r3, #28]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 0208 	orr.w	r2, r2, #8
 8003198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69da      	ldr	r2, [r3, #28]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0204 	bic.w	r2, r2, #4
 80031a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69d9      	ldr	r1, [r3, #28]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	61da      	str	r2, [r3, #28]
      break;
 80031bc:	e064      	b.n	8003288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fb61 	bl	800388c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69da      	ldr	r2, [r3, #28]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69d9      	ldr	r1, [r3, #28]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	021a      	lsls	r2, r3, #8
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	61da      	str	r2, [r3, #28]
      break;
 80031fe:	e043      	b.n	8003288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fba4 	bl	8003954 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0208 	orr.w	r2, r2, #8
 800321a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0204 	bic.w	r2, r2, #4
 800322a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800323e:	e023      	b.n	8003288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fbe2 	bl	8003a10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800325a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800326a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	021a      	lsls	r2, r3, #8
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003280:	e002      	b.n	8003288 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	75fb      	strb	r3, [r7, #23]
      break;
 8003286:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003290:	7dfb      	ldrb	r3, [r7, #23]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop

0800329c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_TIM_ConfigClockSource+0x1c>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e0b6      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x18a>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f4:	d03e      	beq.n	8003374 <HAL_TIM_ConfigClockSource+0xd8>
 80032f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032fa:	f200 8087 	bhi.w	800340c <HAL_TIM_ConfigClockSource+0x170>
 80032fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003302:	f000 8086 	beq.w	8003412 <HAL_TIM_ConfigClockSource+0x176>
 8003306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800330a:	d87f      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x170>
 800330c:	2b70      	cmp	r3, #112	; 0x70
 800330e:	d01a      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0xaa>
 8003310:	2b70      	cmp	r3, #112	; 0x70
 8003312:	d87b      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x170>
 8003314:	2b60      	cmp	r3, #96	; 0x60
 8003316:	d050      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x11e>
 8003318:	2b60      	cmp	r3, #96	; 0x60
 800331a:	d877      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x170>
 800331c:	2b50      	cmp	r3, #80	; 0x50
 800331e:	d03c      	beq.n	800339a <HAL_TIM_ConfigClockSource+0xfe>
 8003320:	2b50      	cmp	r3, #80	; 0x50
 8003322:	d873      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x170>
 8003324:	2b40      	cmp	r3, #64	; 0x40
 8003326:	d058      	beq.n	80033da <HAL_TIM_ConfigClockSource+0x13e>
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d86f      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x170>
 800332c:	2b30      	cmp	r3, #48	; 0x30
 800332e:	d064      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x15e>
 8003330:	2b30      	cmp	r3, #48	; 0x30
 8003332:	d86b      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x170>
 8003334:	2b20      	cmp	r3, #32
 8003336:	d060      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x15e>
 8003338:	2b20      	cmp	r3, #32
 800333a:	d867      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x170>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d05c      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x15e>
 8003340:	2b10      	cmp	r3, #16
 8003342:	d05a      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x15e>
 8003344:	e062      	b.n	800340c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6899      	ldr	r1, [r3, #8]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f000 fc35 	bl	8003bc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003368:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	609a      	str	r2, [r3, #8]
      break;
 8003372:	e04f      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	6899      	ldr	r1, [r3, #8]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f000 fc1e 	bl	8003bc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003396:	609a      	str	r2, [r3, #8]
      break;
 8003398:	e03c      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6859      	ldr	r1, [r3, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	461a      	mov	r2, r3
 80033a8:	f000 fb92 	bl	8003ad0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2150      	movs	r1, #80	; 0x50
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fbeb 	bl	8003b8e <TIM_ITRx_SetConfig>
      break;
 80033b8:	e02c      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6859      	ldr	r1, [r3, #4]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f000 fbb1 	bl	8003b2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2160      	movs	r1, #96	; 0x60
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fbdb 	bl	8003b8e <TIM_ITRx_SetConfig>
      break;
 80033d8:	e01c      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6859      	ldr	r1, [r3, #4]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f000 fb72 	bl	8003ad0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2140      	movs	r1, #64	; 0x40
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fbcb 	bl	8003b8e <TIM_ITRx_SetConfig>
      break;
 80033f8:	e00c      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4619      	mov	r1, r3
 8003404:	4610      	mov	r0, r2
 8003406:	f000 fbc2 	bl	8003b8e <TIM_ITRx_SetConfig>
      break;
 800340a:	e003      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
      break;
 8003410:	e000      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003424:	7bfb      	ldrb	r3, [r7, #15]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a32      	ldr	r2, [pc, #200]	; (8003570 <TIM_Base_SetConfig+0xdc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d007      	beq.n	80034bc <TIM_Base_SetConfig+0x28>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b2:	d003      	beq.n	80034bc <TIM_Base_SetConfig+0x28>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a2f      	ldr	r2, [pc, #188]	; (8003574 <TIM_Base_SetConfig+0xe0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d108      	bne.n	80034ce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a27      	ldr	r2, [pc, #156]	; (8003570 <TIM_Base_SetConfig+0xdc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <TIM_Base_SetConfig+0x6a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034dc:	d00f      	beq.n	80034fe <TIM_Base_SetConfig+0x6a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a24      	ldr	r2, [pc, #144]	; (8003574 <TIM_Base_SetConfig+0xe0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00b      	beq.n	80034fe <TIM_Base_SetConfig+0x6a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a23      	ldr	r2, [pc, #140]	; (8003578 <TIM_Base_SetConfig+0xe4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d007      	beq.n	80034fe <TIM_Base_SetConfig+0x6a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a22      	ldr	r2, [pc, #136]	; (800357c <TIM_Base_SetConfig+0xe8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d003      	beq.n	80034fe <TIM_Base_SetConfig+0x6a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a21      	ldr	r2, [pc, #132]	; (8003580 <TIM_Base_SetConfig+0xec>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d108      	bne.n	8003510 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a0e      	ldr	r2, [pc, #56]	; (8003570 <TIM_Base_SetConfig+0xdc>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00b      	beq.n	8003554 <TIM_Base_SetConfig+0xc0>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a0e      	ldr	r2, [pc, #56]	; (8003578 <TIM_Base_SetConfig+0xe4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d007      	beq.n	8003554 <TIM_Base_SetConfig+0xc0>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a0d      	ldr	r2, [pc, #52]	; (800357c <TIM_Base_SetConfig+0xe8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d003      	beq.n	8003554 <TIM_Base_SetConfig+0xc0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a0c      	ldr	r2, [pc, #48]	; (8003580 <TIM_Base_SetConfig+0xec>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d103      	bne.n	800355c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	615a      	str	r2, [r3, #20]
}
 8003562:	bf00      	nop
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40012c00 	.word	0x40012c00
 8003574:	40000400 	.word	0x40000400
 8003578:	40014000 	.word	0x40014000
 800357c:	40014400 	.word	0x40014400
 8003580:	40014800 	.word	0x40014800

08003584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	f023 0201 	bic.w	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f023 0302 	bic.w	r3, r3, #2
 80035d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a28      	ldr	r2, [pc, #160]	; (8003680 <TIM_OC1_SetConfig+0xfc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00b      	beq.n	80035fc <TIM_OC1_SetConfig+0x78>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a27      	ldr	r2, [pc, #156]	; (8003684 <TIM_OC1_SetConfig+0x100>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d007      	beq.n	80035fc <TIM_OC1_SetConfig+0x78>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a26      	ldr	r2, [pc, #152]	; (8003688 <TIM_OC1_SetConfig+0x104>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d003      	beq.n	80035fc <TIM_OC1_SetConfig+0x78>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a25      	ldr	r2, [pc, #148]	; (800368c <TIM_OC1_SetConfig+0x108>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d10c      	bne.n	8003616 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f023 0308 	bic.w	r3, r3, #8
 8003602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f023 0304 	bic.w	r3, r3, #4
 8003614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a19      	ldr	r2, [pc, #100]	; (8003680 <TIM_OC1_SetConfig+0xfc>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00b      	beq.n	8003636 <TIM_OC1_SetConfig+0xb2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a18      	ldr	r2, [pc, #96]	; (8003684 <TIM_OC1_SetConfig+0x100>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d007      	beq.n	8003636 <TIM_OC1_SetConfig+0xb2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a17      	ldr	r2, [pc, #92]	; (8003688 <TIM_OC1_SetConfig+0x104>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d003      	beq.n	8003636 <TIM_OC1_SetConfig+0xb2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a16      	ldr	r2, [pc, #88]	; (800368c <TIM_OC1_SetConfig+0x108>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d111      	bne.n	800365a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800363c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	621a      	str	r2, [r3, #32]
}
 8003674:	bf00      	nop
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40012c00 	.word	0x40012c00
 8003684:	40014000 	.word	0x40014000
 8003688:	40014400 	.word	0x40014400
 800368c:	40014800 	.word	0x40014800

08003690 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f023 0210 	bic.w	r2, r3, #16
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	021b      	lsls	r3, r3, #8
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f023 0320 	bic.w	r3, r3, #32
 80036de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a24      	ldr	r2, [pc, #144]	; (8003780 <TIM_OC2_SetConfig+0xf0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d10d      	bne.n	8003710 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800370e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a1b      	ldr	r2, [pc, #108]	; (8003780 <TIM_OC2_SetConfig+0xf0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00b      	beq.n	8003730 <TIM_OC2_SetConfig+0xa0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a1a      	ldr	r2, [pc, #104]	; (8003784 <TIM_OC2_SetConfig+0xf4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d007      	beq.n	8003730 <TIM_OC2_SetConfig+0xa0>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a19      	ldr	r2, [pc, #100]	; (8003788 <TIM_OC2_SetConfig+0xf8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d003      	beq.n	8003730 <TIM_OC2_SetConfig+0xa0>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a18      	ldr	r2, [pc, #96]	; (800378c <TIM_OC2_SetConfig+0xfc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d113      	bne.n	8003758 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003736:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800373e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	621a      	str	r2, [r3, #32]
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40012c00 	.word	0x40012c00
 8003784:	40014000 	.word	0x40014000
 8003788:	40014400 	.word	0x40014400
 800378c:	40014800 	.word	0x40014800

08003790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0303 	bic.w	r3, r3, #3
 80037ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	021b      	lsls	r3, r3, #8
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a23      	ldr	r2, [pc, #140]	; (800387c <TIM_OC3_SetConfig+0xec>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d10d      	bne.n	800380e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800380c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a1a      	ldr	r2, [pc, #104]	; (800387c <TIM_OC3_SetConfig+0xec>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00b      	beq.n	800382e <TIM_OC3_SetConfig+0x9e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a19      	ldr	r2, [pc, #100]	; (8003880 <TIM_OC3_SetConfig+0xf0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d007      	beq.n	800382e <TIM_OC3_SetConfig+0x9e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a18      	ldr	r2, [pc, #96]	; (8003884 <TIM_OC3_SetConfig+0xf4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d003      	beq.n	800382e <TIM_OC3_SetConfig+0x9e>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a17      	ldr	r2, [pc, #92]	; (8003888 <TIM_OC3_SetConfig+0xf8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d113      	bne.n	8003856 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800383c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	621a      	str	r2, [r3, #32]
}
 8003870:	bf00      	nop
 8003872:	371c      	adds	r7, #28
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40014000 	.word	0x40014000
 8003884:	40014400 	.word	0x40014400
 8003888:	40014800 	.word	0x40014800

0800388c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	031b      	lsls	r3, r3, #12
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a16      	ldr	r2, [pc, #88]	; (8003944 <TIM_OC4_SetConfig+0xb8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00b      	beq.n	8003908 <TIM_OC4_SetConfig+0x7c>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a15      	ldr	r2, [pc, #84]	; (8003948 <TIM_OC4_SetConfig+0xbc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d007      	beq.n	8003908 <TIM_OC4_SetConfig+0x7c>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a14      	ldr	r2, [pc, #80]	; (800394c <TIM_OC4_SetConfig+0xc0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d003      	beq.n	8003908 <TIM_OC4_SetConfig+0x7c>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a13      	ldr	r2, [pc, #76]	; (8003950 <TIM_OC4_SetConfig+0xc4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d109      	bne.n	800391c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800390e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	019b      	lsls	r3, r3, #6
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	621a      	str	r2, [r3, #32]
}
 8003936:	bf00      	nop
 8003938:	371c      	adds	r7, #28
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40012c00 	.word	0x40012c00
 8003948:	40014000 	.word	0x40014000
 800394c:	40014400 	.word	0x40014400
 8003950:	40014800 	.word	0x40014800

08003954 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003998:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	041b      	lsls	r3, r3, #16
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a15      	ldr	r2, [pc, #84]	; (8003a00 <TIM_OC5_SetConfig+0xac>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00b      	beq.n	80039c6 <TIM_OC5_SetConfig+0x72>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <TIM_OC5_SetConfig+0xb0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d007      	beq.n	80039c6 <TIM_OC5_SetConfig+0x72>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <TIM_OC5_SetConfig+0xb4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d003      	beq.n	80039c6 <TIM_OC5_SetConfig+0x72>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a12      	ldr	r2, [pc, #72]	; (8003a0c <TIM_OC5_SetConfig+0xb8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d109      	bne.n	80039da <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	621a      	str	r2, [r3, #32]
}
 80039f4:	bf00      	nop
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	40012c00 	.word	0x40012c00
 8003a04:	40014000 	.word	0x40014000
 8003a08:	40014400 	.word	0x40014400
 8003a0c:	40014800 	.word	0x40014800

08003a10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	051b      	lsls	r3, r3, #20
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a16      	ldr	r2, [pc, #88]	; (8003ac0 <TIM_OC6_SetConfig+0xb0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00b      	beq.n	8003a84 <TIM_OC6_SetConfig+0x74>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a15      	ldr	r2, [pc, #84]	; (8003ac4 <TIM_OC6_SetConfig+0xb4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d007      	beq.n	8003a84 <TIM_OC6_SetConfig+0x74>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a14      	ldr	r2, [pc, #80]	; (8003ac8 <TIM_OC6_SetConfig+0xb8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d003      	beq.n	8003a84 <TIM_OC6_SetConfig+0x74>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a13      	ldr	r2, [pc, #76]	; (8003acc <TIM_OC6_SetConfig+0xbc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d109      	bne.n	8003a98 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	029b      	lsls	r3, r3, #10
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40014000 	.word	0x40014000
 8003ac8:	40014400 	.word	0x40014400
 8003acc:	40014800 	.word	0x40014800

08003ad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	f023 0201 	bic.w	r2, r3, #1
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f023 030a 	bic.w	r3, r3, #10
 8003b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	621a      	str	r2, [r3, #32]
}
 8003b22:	bf00      	nop
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b087      	sub	sp, #28
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	f023 0210 	bic.w	r2, r3, #16
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	031b      	lsls	r3, r3, #12
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	621a      	str	r2, [r3, #32]
}
 8003b82:	bf00      	nop
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b085      	sub	sp, #20
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f043 0307 	orr.w	r3, r3, #7
 8003bb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	609a      	str	r2, [r3, #8]
}
 8003bb8:	bf00      	nop
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	021a      	lsls	r2, r3, #8
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	431a      	orrs	r2, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	609a      	str	r2, [r3, #8]
}
 8003bf8:	bf00      	nop
 8003bfa:	371c      	adds	r7, #28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e054      	b.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a24      	ldr	r2, [pc, #144]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d108      	bne.n	8003c58 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a17      	ldr	r2, [pc, #92]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00e      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c84:	d009      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a13      	ldr	r2, [pc, #76]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a11      	ldr	r2, [pc, #68]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d10c      	bne.n	8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ca0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40000400 	.word	0x40000400
 8003cdc:	40014000 	.word	0x40014000

08003ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e040      	b.n	8003db0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fc fecc 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2224      	movs	r2, #36	; 0x24
 8003d48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0201 	bic.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fd8a 	bl	8004874 <UART_SetConfig>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e022      	b.n	8003db0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 feb4 	bl	8004ae0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 ff3b 	bl	8004c24 <UART_CheckIdleState>
 8003dae:	4603      	mov	r3, r0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e048      	b.n	8003e5c <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fc fe7e 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2224      	movs	r2, #36	; 0x24
 8003de4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fd3c 	bl	8004874 <UART_SetConfig>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e02a      	b.n	8003e5c <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fe66 	bl	8004ae0 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003e32:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0208 	orr.w	r2, r2, #8
 8003e42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fee5 	bl	8004c24 <UART_CheckIdleState>
 8003e5a:	4603      	mov	r3, r0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	; 0x28
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	4613      	mov	r3, r2
 8003e72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	f040 8082 	bne.w	8003f82 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <HAL_UART_Transmit+0x26>
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e07a      	b.n	8003f84 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_UART_Transmit+0x38>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e073      	b.n	8003f84 <HAL_UART_Transmit+0x120>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2221      	movs	r2, #33	; 0x21
 8003eb0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eb2:	f7fd f807 	bl	8000ec4 <HAL_GetTick>
 8003eb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	88fa      	ldrh	r2, [r7, #6]
 8003ebc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	88fa      	ldrh	r2, [r7, #6]
 8003ec4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed0:	d108      	bne.n	8003ee4 <HAL_UART_Transmit+0x80>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d104      	bne.n	8003ee4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	e003      	b.n	8003eec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003ef4:	e02d      	b.n	8003f52 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2200      	movs	r2, #0
 8003efe:	2180      	movs	r1, #128	; 0x80
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 fed8 	bl	8004cb6 <UART_WaitOnFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e039      	b.n	8003f84 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10b      	bne.n	8003f2e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	881a      	ldrh	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f22:	b292      	uxth	r2, r2
 8003f24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	3302      	adds	r3, #2
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	e008      	b.n	8003f40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	781a      	ldrb	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	b292      	uxth	r2, r2
 8003f38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1cb      	bne.n	8003ef6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2200      	movs	r2, #0
 8003f66:	2140      	movs	r1, #64	; 0x40
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fea4 	bl	8004cb6 <UART_WaitOnFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e005      	b.n	8003f84 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e000      	b.n	8003f84 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003f82:	2302      	movs	r3, #2
  }
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3720      	adds	r7, #32
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08a      	sub	sp, #40	; 0x28
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	f040 80bf 	bne.w	8004124 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <HAL_UART_Receive+0x26>
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e0b7      	b.n	8004126 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_UART_Receive+0x38>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e0b0      	b.n	8004126 <HAL_UART_Receive+0x19a>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2222      	movs	r2, #34	; 0x22
 8003fd8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fe0:	f7fc ff70 	bl	8000ec4 <HAL_GetTick>
 8003fe4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	88fa      	ldrh	r2, [r7, #6]
 8003fea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffe:	d10e      	bne.n	800401e <HAL_UART_Receive+0x92>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d105      	bne.n	8004014 <HAL_UART_Receive+0x88>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800400e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004012:	e02d      	b.n	8004070 <HAL_UART_Receive+0xe4>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	22ff      	movs	r2, #255	; 0xff
 8004018:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800401c:	e028      	b.n	8004070 <HAL_UART_Receive+0xe4>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10d      	bne.n	8004042 <HAL_UART_Receive+0xb6>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d104      	bne.n	8004038 <HAL_UART_Receive+0xac>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	22ff      	movs	r2, #255	; 0xff
 8004032:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004036:	e01b      	b.n	8004070 <HAL_UART_Receive+0xe4>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	227f      	movs	r2, #127	; 0x7f
 800403c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004040:	e016      	b.n	8004070 <HAL_UART_Receive+0xe4>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800404a:	d10d      	bne.n	8004068 <HAL_UART_Receive+0xdc>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d104      	bne.n	800405e <HAL_UART_Receive+0xd2>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	227f      	movs	r2, #127	; 0x7f
 8004058:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800405c:	e008      	b.n	8004070 <HAL_UART_Receive+0xe4>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	223f      	movs	r2, #63	; 0x3f
 8004062:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004066:	e003      	b.n	8004070 <HAL_UART_Receive+0xe4>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004076:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004080:	d108      	bne.n	8004094 <HAL_UART_Receive+0x108>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d104      	bne.n	8004094 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	61bb      	str	r3, [r7, #24]
 8004092:	e003      	b.n	800409c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004098:	2300      	movs	r3, #0
 800409a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80040a4:	e033      	b.n	800410e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2200      	movs	r2, #0
 80040ae:	2120      	movs	r1, #32
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fe00 	bl	8004cb6 <UART_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e032      	b.n	8004126 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10c      	bne.n	80040e0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	8a7b      	ldrh	r3, [r7, #18]
 80040d0:	4013      	ands	r3, r2
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	3302      	adds	r3, #2
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	e00d      	b.n	80040fc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	8a7b      	ldrh	r3, [r7, #18]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	4013      	ands	r3, r2
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	3301      	adds	r3, #1
 80040fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1c5      	bne.n	80040a6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2220      	movs	r2, #32
 800411e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	e000      	b.n	8004126 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004124:	2302      	movs	r3, #2
  }
}
 8004126:	4618      	mov	r0, r3
 8004128:	3720      	adds	r7, #32
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b0ba      	sub	sp, #232	; 0xe8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004156:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800415a:	f640 030f 	movw	r3, #2063	; 0x80f
 800415e:	4013      	ands	r3, r2
 8004160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004164:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d115      	bne.n	8004198 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800416c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00f      	beq.n	8004198 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800417c:	f003 0320 	and.w	r3, r3, #32
 8004180:	2b00      	cmp	r3, #0
 8004182:	d009      	beq.n	8004198 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 82a3 	beq.w	80046d4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	4798      	blx	r3
      }
      return;
 8004196:	e29d      	b.n	80046d4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 8117 	beq.w	80043d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041b2:	4b85      	ldr	r3, [pc, #532]	; (80043c8 <HAL_UART_IRQHandler+0x298>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 810a 	beq.w	80043d0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d011      	beq.n	80041ec <HAL_UART_IRQHandler+0xbc>
 80041c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00b      	beq.n	80041ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2201      	movs	r2, #1
 80041da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e2:	f043 0201 	orr.w	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d011      	beq.n	800421c <HAL_UART_IRQHandler+0xec>
 80041f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00b      	beq.n	800421c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2202      	movs	r2, #2
 800420a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004212:	f043 0204 	orr.w	r2, r3, #4
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800421c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d011      	beq.n	800424c <HAL_UART_IRQHandler+0x11c>
 8004228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00b      	beq.n	800424c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2204      	movs	r2, #4
 800423a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004242:	f043 0202 	orr.w	r2, r3, #2
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800424c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d017      	beq.n	8004288 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800425c:	f003 0320 	and.w	r3, r3, #32
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004268:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00b      	beq.n	8004288 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2208      	movs	r2, #8
 8004276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800427e:	f043 0208 	orr.w	r2, r3, #8
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800428c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004290:	2b00      	cmp	r3, #0
 8004292:	d012      	beq.n	80042ba <HAL_UART_IRQHandler+0x18a>
 8004294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004298:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00c      	beq.n	80042ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b0:	f043 0220 	orr.w	r2, r3, #32
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8209 	beq.w	80046d8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00d      	beq.n	80042ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004302:	2b40      	cmp	r3, #64	; 0x40
 8004304:	d005      	beq.n	8004312 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800430a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800430e:	2b00      	cmp	r3, #0
 8004310:	d04f      	beq.n	80043b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fd93 	bl	8004e3e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004322:	2b40      	cmp	r3, #64	; 0x40
 8004324:	d141      	bne.n	80043aa <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3308      	adds	r3, #8
 800432c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800433c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3308      	adds	r3, #8
 800434e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004352:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800435e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800436a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1d9      	bne.n	8004326 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004376:	2b00      	cmp	r3, #0
 8004378:	d013      	beq.n	80043a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	4a13      	ldr	r2, [pc, #76]	; (80043cc <HAL_UART_IRQHandler+0x29c>)
 8004380:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	4618      	mov	r0, r3
 8004388:	f7fc ff16 	bl	80011b8 <HAL_DMA_Abort_IT>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d017      	beq.n	80043c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800439c:	4610      	mov	r0, r2
 800439e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a0:	e00f      	b.n	80043c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f9ac 	bl	8004700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a8:	e00b      	b.n	80043c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f9a8 	bl	8004700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b0:	e007      	b.n	80043c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f9a4 	bl	8004700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80043c0:	e18a      	b.n	80046d8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c2:	bf00      	nop
    return;
 80043c4:	e188      	b.n	80046d8 <HAL_UART_IRQHandler+0x5a8>
 80043c6:	bf00      	nop
 80043c8:	04000120 	.word	0x04000120
 80043cc:	08004f05 	.word	0x08004f05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	f040 8143 	bne.w	8004660 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 813c 	beq.w	8004660 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ec:	f003 0310 	and.w	r3, r3, #16
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 8135 	beq.w	8004660 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2210      	movs	r2, #16
 80043fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004408:	2b40      	cmp	r3, #64	; 0x40
 800440a:	f040 80b1 	bne.w	8004570 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800441a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 815c 	beq.w	80046dc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800442a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800442e:	429a      	cmp	r2, r3
 8004430:	f080 8154 	bcs.w	80046dc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800443a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	2b20      	cmp	r3, #32
 8004446:	f000 8085 	beq.w	8004554 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800445e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004462:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004466:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004474:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004478:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004480:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800448c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1da      	bne.n	800444a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3308      	adds	r3, #8
 800449a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3308      	adds	r3, #8
 80044b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e1      	bne.n	8004494 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3308      	adds	r3, #8
 80044d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3308      	adds	r3, #8
 80044f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044fc:	e841 2300 	strex	r3, r2, [r1]
 8004500:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e3      	bne.n	80044d0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004524:	f023 0310 	bic.w	r3, r3, #16
 8004528:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004536:	65bb      	str	r3, [r7, #88]	; 0x58
 8004538:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800453c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800453e:	e841 2300 	strex	r3, r2, [r1]
 8004542:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1e4      	bne.n	8004514 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	4618      	mov	r0, r3
 8004550:	f7fc fdf9 	bl	8001146 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004560:	b29b      	uxth	r3, r3
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	b29b      	uxth	r3, r3
 8004566:	4619      	mov	r1, r3
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f8d3 	bl	8004714 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800456e:	e0b5      	b.n	80046dc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800457c:	b29b      	uxth	r3, r3
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80a7 	beq.w	80046e0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004592:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 80a2 	beq.w	80046e0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a4:	e853 3f00 	ldrex	r3, [r3]
 80045a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045be:	647b      	str	r3, [r7, #68]	; 0x44
 80045c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e4      	bne.n	800459c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3308      	adds	r3, #8
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	623b      	str	r3, [r7, #32]
   return(result);
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3308      	adds	r3, #8
 80045f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045f6:	633a      	str	r2, [r7, #48]	; 0x30
 80045f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045fe:	e841 2300 	strex	r3, r2, [r1]
 8004602:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1e3      	bne.n	80045d2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	60fb      	str	r3, [r7, #12]
   return(result);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f023 0310 	bic.w	r3, r3, #16
 8004630:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800463e:	61fb      	str	r3, [r7, #28]
 8004640:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004642:	69b9      	ldr	r1, [r7, #24]
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	e841 2300 	strex	r3, r2, [r1]
 800464a:	617b      	str	r3, [r7, #20]
   return(result);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1e4      	bne.n	800461c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004652:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004656:	4619      	mov	r1, r3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f85b 	bl	8004714 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800465e:	e03f      	b.n	80046e0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00e      	beq.n	800468a <HAL_UART_IRQHandler+0x55a>
 800466c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004680:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fc7e 	bl	8004f84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004688:	e02d      	b.n	80046e6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800468a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800468e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00e      	beq.n	80046b4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800469a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d008      	beq.n	80046b4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d01c      	beq.n	80046e4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	4798      	blx	r3
    }
    return;
 80046b2:	e017      	b.n	80046e4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d012      	beq.n	80046e6 <HAL_UART_IRQHandler+0x5b6>
 80046c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00c      	beq.n	80046e6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fc2f 	bl	8004f30 <UART_EndTransmit_IT>
    return;
 80046d2:	e008      	b.n	80046e6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80046d4:	bf00      	nop
 80046d6:	e006      	b.n	80046e6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80046d8:	bf00      	nop
 80046da:	e004      	b.n	80046e6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80046dc:	bf00      	nop
 80046de:	e002      	b.n	80046e6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80046e0:	bf00      	nop
 80046e2:	e000      	b.n	80046e6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80046e4:	bf00      	nop
  }

}
 80046e6:	37e8      	adds	r7, #232	; 0xe8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800472c:	b480      	push	{r7}
 800472e:	b08f      	sub	sp, #60	; 0x3c
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_HalfDuplex_EnableTransmitter+0x16>
 800473e:	2302      	movs	r3, #2
 8004740:	e040      	b.n	80047c4 <HAL_HalfDuplex_EnableTransmitter+0x98>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2224      	movs	r2, #36	; 0x24
 800474e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	e853 3f00 	ldrex	r3, [r3]
 800475c:	61fb      	str	r3, [r7, #28]
   return(result);
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f023 030c 	bic.w	r3, r3, #12
 8004764:	637b      	str	r3, [r7, #52]	; 0x34
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004770:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004776:	e841 2300 	strex	r3, r2, [r1]
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1e6      	bne.n	8004750 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f043 0308 	orr.w	r3, r3, #8
 8004796:	633b      	str	r3, [r7, #48]	; 0x30
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	6979      	ldr	r1, [r7, #20]
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	e841 2300 	strex	r3, r2, [r1]
 80047ac:	613b      	str	r3, [r7, #16]
   return(result);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e6      	bne.n	8004782 <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	373c      	adds	r7, #60	; 0x3c
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b08f      	sub	sp, #60	; 0x3c
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_HalfDuplex_EnableReceiver+0x16>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e040      	b.n	8004868 <HAL_HalfDuplex_EnableReceiver+0x98>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2224      	movs	r2, #36	; 0x24
 80047f2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	61fb      	str	r3, [r7, #28]
   return(result);
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	f023 030c 	bic.w	r3, r3, #12
 8004808:	637b      	str	r3, [r7, #52]	; 0x34
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004814:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e6      	bne.n	80047f4 <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	e853 3f00 	ldrex	r3, [r3]
 8004832:	60bb      	str	r3, [r7, #8]
   return(result);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f043 0304 	orr.w	r3, r3, #4
 800483a:	633b      	str	r3, [r7, #48]	; 0x30
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	6979      	ldr	r1, [r7, #20]
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	e841 2300 	strex	r3, r2, [r1]
 8004850:	613b      	str	r3, [r7, #16]
   return(result);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e6      	bne.n	8004826 <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	373c      	adds	r7, #60	; 0x3c
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	431a      	orrs	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4b8a      	ldr	r3, [pc, #552]	; (8004ac8 <UART_SetConfig+0x254>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6812      	ldr	r2, [r2, #0]
 80048a6:	6979      	ldr	r1, [r7, #20]
 80048a8:	430b      	orrs	r3, r1
 80048aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a78      	ldr	r2, [pc, #480]	; (8004acc <UART_SetConfig+0x258>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d120      	bne.n	8004932 <UART_SetConfig+0xbe>
 80048f0:	4b77      	ldr	r3, [pc, #476]	; (8004ad0 <UART_SetConfig+0x25c>)
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d817      	bhi.n	800492c <UART_SetConfig+0xb8>
 80048fc:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <UART_SetConfig+0x90>)
 80048fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004902:	bf00      	nop
 8004904:	08004915 	.word	0x08004915
 8004908:	08004921 	.word	0x08004921
 800490c:	08004927 	.word	0x08004927
 8004910:	0800491b 	.word	0x0800491b
 8004914:	2300      	movs	r3, #0
 8004916:	77fb      	strb	r3, [r7, #31]
 8004918:	e01d      	b.n	8004956 <UART_SetConfig+0xe2>
 800491a:	2302      	movs	r3, #2
 800491c:	77fb      	strb	r3, [r7, #31]
 800491e:	e01a      	b.n	8004956 <UART_SetConfig+0xe2>
 8004920:	2304      	movs	r3, #4
 8004922:	77fb      	strb	r3, [r7, #31]
 8004924:	e017      	b.n	8004956 <UART_SetConfig+0xe2>
 8004926:	2308      	movs	r3, #8
 8004928:	77fb      	strb	r3, [r7, #31]
 800492a:	e014      	b.n	8004956 <UART_SetConfig+0xe2>
 800492c:	2310      	movs	r3, #16
 800492e:	77fb      	strb	r3, [r7, #31]
 8004930:	e011      	b.n	8004956 <UART_SetConfig+0xe2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a67      	ldr	r2, [pc, #412]	; (8004ad4 <UART_SetConfig+0x260>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d102      	bne.n	8004942 <UART_SetConfig+0xce>
 800493c:	2300      	movs	r3, #0
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e009      	b.n	8004956 <UART_SetConfig+0xe2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a64      	ldr	r2, [pc, #400]	; (8004ad8 <UART_SetConfig+0x264>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d102      	bne.n	8004952 <UART_SetConfig+0xde>
 800494c:	2300      	movs	r3, #0
 800494e:	77fb      	strb	r3, [r7, #31]
 8004950:	e001      	b.n	8004956 <UART_SetConfig+0xe2>
 8004952:	2310      	movs	r3, #16
 8004954:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800495e:	d15b      	bne.n	8004a18 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004960:	7ffb      	ldrb	r3, [r7, #31]
 8004962:	2b08      	cmp	r3, #8
 8004964:	d827      	bhi.n	80049b6 <UART_SetConfig+0x142>
 8004966:	a201      	add	r2, pc, #4	; (adr r2, 800496c <UART_SetConfig+0xf8>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	08004991 	.word	0x08004991
 8004970:	08004999 	.word	0x08004999
 8004974:	080049a1 	.word	0x080049a1
 8004978:	080049b7 	.word	0x080049b7
 800497c:	080049a7 	.word	0x080049a7
 8004980:	080049b7 	.word	0x080049b7
 8004984:	080049b7 	.word	0x080049b7
 8004988:	080049b7 	.word	0x080049b7
 800498c:	080049af 	.word	0x080049af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004990:	f7fe f82e 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8004994:	61b8      	str	r0, [r7, #24]
        break;
 8004996:	e013      	b.n	80049c0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004998:	f7fe f84c 	bl	8002a34 <HAL_RCC_GetPCLK2Freq>
 800499c:	61b8      	str	r0, [r7, #24]
        break;
 800499e:	e00f      	b.n	80049c0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049a0:	4b4e      	ldr	r3, [pc, #312]	; (8004adc <UART_SetConfig+0x268>)
 80049a2:	61bb      	str	r3, [r7, #24]
        break;
 80049a4:	e00c      	b.n	80049c0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049a6:	f7fd ffad 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 80049aa:	61b8      	str	r0, [r7, #24]
        break;
 80049ac:	e008      	b.n	80049c0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049b2:	61bb      	str	r3, [r7, #24]
        break;
 80049b4:	e004      	b.n	80049c0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	77bb      	strb	r3, [r7, #30]
        break;
 80049be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d074      	beq.n	8004ab0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	005a      	lsls	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	085b      	lsrs	r3, r3, #1
 80049d0:	441a      	add	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049da:	b29b      	uxth	r3, r3
 80049dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b0f      	cmp	r3, #15
 80049e2:	d916      	bls.n	8004a12 <UART_SetConfig+0x19e>
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ea:	d212      	bcs.n	8004a12 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	f023 030f 	bic.w	r3, r3, #15
 80049f4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	085b      	lsrs	r3, r3, #1
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	89fb      	ldrh	r3, [r7, #14]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	89fa      	ldrh	r2, [r7, #14]
 8004a0e:	60da      	str	r2, [r3, #12]
 8004a10:	e04e      	b.n	8004ab0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	77bb      	strb	r3, [r7, #30]
 8004a16:	e04b      	b.n	8004ab0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a18:	7ffb      	ldrb	r3, [r7, #31]
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d827      	bhi.n	8004a6e <UART_SetConfig+0x1fa>
 8004a1e:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <UART_SetConfig+0x1b0>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a49 	.word	0x08004a49
 8004a28:	08004a51 	.word	0x08004a51
 8004a2c:	08004a59 	.word	0x08004a59
 8004a30:	08004a6f 	.word	0x08004a6f
 8004a34:	08004a5f 	.word	0x08004a5f
 8004a38:	08004a6f 	.word	0x08004a6f
 8004a3c:	08004a6f 	.word	0x08004a6f
 8004a40:	08004a6f 	.word	0x08004a6f
 8004a44:	08004a67 	.word	0x08004a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a48:	f7fd ffd2 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8004a4c:	61b8      	str	r0, [r7, #24]
        break;
 8004a4e:	e013      	b.n	8004a78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a50:	f7fd fff0 	bl	8002a34 <HAL_RCC_GetPCLK2Freq>
 8004a54:	61b8      	str	r0, [r7, #24]
        break;
 8004a56:	e00f      	b.n	8004a78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a58:	4b20      	ldr	r3, [pc, #128]	; (8004adc <UART_SetConfig+0x268>)
 8004a5a:	61bb      	str	r3, [r7, #24]
        break;
 8004a5c:	e00c      	b.n	8004a78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a5e:	f7fd ff51 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 8004a62:	61b8      	str	r0, [r7, #24]
        break;
 8004a64:	e008      	b.n	8004a78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a6a:	61bb      	str	r3, [r7, #24]
        break;
 8004a6c:	e004      	b.n	8004a78 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	77bb      	strb	r3, [r7, #30]
        break;
 8004a76:	bf00      	nop
    }

    if (pclk != 0U)
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d018      	beq.n	8004ab0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	085a      	lsrs	r2, r3, #1
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	441a      	add	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	2b0f      	cmp	r3, #15
 8004a98:	d908      	bls.n	8004aac <UART_SetConfig+0x238>
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa0:	d204      	bcs.n	8004aac <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	60da      	str	r2, [r3, #12]
 8004aaa:	e001      	b.n	8004ab0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004abc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3720      	adds	r7, #32
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	efff69f3 	.word	0xefff69f3
 8004acc:	40013800 	.word	0x40013800
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40004400 	.word	0x40004400
 8004ad8:	40004800 	.word	0x40004800
 8004adc:	007a1200 	.word	0x007a1200

08004ae0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	f003 0310 	and.w	r3, r3, #16
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01a      	beq.n	8004bf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bde:	d10a      	bne.n	8004bf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	605a      	str	r2, [r3, #4]
  }
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c34:	f7fc f946 	bl	8000ec4 <HAL_GetTick>
 8004c38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d10e      	bne.n	8004c66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f82d 	bl	8004cb6 <UART_WaitOnFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e023      	b.n	8004cae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d10e      	bne.n	8004c92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f817 	bl	8004cb6 <UART_WaitOnFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e00d      	b.n	8004cae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b09c      	sub	sp, #112	; 0x70
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	603b      	str	r3, [r7, #0]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc6:	e0a5      	b.n	8004e14 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cce:	f000 80a1 	beq.w	8004e14 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd2:	f7fc f8f7 	bl	8000ec4 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d302      	bcc.n	8004ce8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004ce2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d13e      	bne.n	8004d66 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cf0:	e853 3f00 	ldrex	r3, [r3]
 8004cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cfc:	667b      	str	r3, [r7, #100]	; 0x64
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d0e:	e841 2300 	strex	r3, r2, [r1]
 8004d12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1e6      	bne.n	8004ce8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3308      	adds	r3, #8
 8004d20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d24:	e853 3f00 	ldrex	r3, [r3]
 8004d28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	f023 0301 	bic.w	r3, r3, #1
 8004d30:	663b      	str	r3, [r7, #96]	; 0x60
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3308      	adds	r3, #8
 8004d38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d42:	e841 2300 	strex	r3, r2, [r1]
 8004d46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1e5      	bne.n	8004d1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2220      	movs	r2, #32
 8004d52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2220      	movs	r2, #32
 8004d58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e067      	b.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d04f      	beq.n	8004e14 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d82:	d147      	bne.n	8004e14 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004da2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dac:	637b      	str	r3, [r7, #52]	; 0x34
 8004dae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e6      	bne.n	8004d8e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	613b      	str	r3, [r7, #16]
   return(result);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f023 0301 	bic.w	r3, r3, #1
 8004dd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3308      	adds	r3, #8
 8004dde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004de0:	623a      	str	r2, [r7, #32]
 8004de2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	69f9      	ldr	r1, [r7, #28]
 8004de6:	6a3a      	ldr	r2, [r7, #32]
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e5      	bne.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e010      	b.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	69da      	ldr	r2, [r3, #28]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	bf0c      	ite	eq
 8004e24:	2301      	moveq	r3, #1
 8004e26:	2300      	movne	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	f43f af4a 	beq.w	8004cc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3770      	adds	r7, #112	; 0x70
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b095      	sub	sp, #84	; 0x54
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4e:	e853 3f00 	ldrex	r3, [r3]
 8004e52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e64:	643b      	str	r3, [r7, #64]	; 0x40
 8004e66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e6c:	e841 2300 	strex	r3, r2, [r1]
 8004e70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e6      	bne.n	8004e46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3308      	adds	r3, #8
 8004e7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	e853 3f00 	ldrex	r3, [r3]
 8004e86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f023 0301 	bic.w	r3, r3, #1
 8004e8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3308      	adds	r3, #8
 8004e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ea0:	e841 2300 	strex	r3, r2, [r1]
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e5      	bne.n	8004e78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d118      	bne.n	8004ee6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	e853 3f00 	ldrex	r3, [r3]
 8004ec0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f023 0310 	bic.w	r3, r3, #16
 8004ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed2:	61bb      	str	r3, [r7, #24]
 8004ed4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	6979      	ldr	r1, [r7, #20]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	e841 2300 	strex	r3, r2, [r1]
 8004ede:	613b      	str	r3, [r7, #16]
   return(result);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1e6      	bne.n	8004eb4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004ef8:	bf00      	nop
 8004efa:	3754      	adds	r7, #84	; 0x54
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f7ff fbec 	bl	8004700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f28:	bf00      	nop
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	61bb      	str	r3, [r7, #24]
 8004f58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	6979      	ldr	r1, [r7, #20]
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	613b      	str	r3, [r7, #16]
   return(result);
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e6      	bne.n	8004f38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff fbb8 	bl	80046ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f7c:	bf00      	nop
 8004f7e:	3720      	adds	r7, #32
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	71fb      	strb	r3, [r7, #7]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	71bb      	strb	r3, [r7, #6]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8004faa:	797b      	ldrb	r3, [r7, #5]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d901      	bls.n	8004fb4 <tmc_fillCRC8Table+0x1c>
		return 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	e09e      	b.n	80050f2 <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 8004fb4:	797a      	ldrb	r2, [r7, #5]
 8004fb6:	4951      	ldr	r1, [pc, #324]	; (80050fc <tmc_fillCRC8Table+0x164>)
 8004fb8:	4613      	mov	r3, r2
 8004fba:	01db      	lsls	r3, r3, #7
 8004fbc:	4413      	add	r3, r2
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	440b      	add	r3, r1
 8004fc2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004fc6:	79fa      	ldrb	r2, [r7, #7]
 8004fc8:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8004fca:	797a      	ldrb	r2, [r7, #5]
 8004fcc:	494b      	ldr	r1, [pc, #300]	; (80050fc <tmc_fillCRC8Table+0x164>)
 8004fce:	4613      	mov	r3, r2
 8004fd0:	01db      	lsls	r3, r3, #7
 8004fd2:	4413      	add	r3, r2
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	440b      	add	r3, r1
 8004fd8:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004fdc:	79ba      	ldrb	r2, [r7, #6]
 8004fde:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 8004fe0:	797a      	ldrb	r2, [r7, #5]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	01db      	lsls	r3, r3, #7
 8004fe6:	4413      	add	r3, r2
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	4a44      	ldr	r2, [pc, #272]	; (80050fc <tmc_fillCRC8Table+0x164>)
 8004fec:	4413      	add	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff6:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8004ff8:	4b41      	ldr	r3, [pc, #260]	; (8005100 <tmc_fillCRC8Table+0x168>)
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	e074      	b.n	80050e8 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 8004ffe:	79bb      	ldrb	r3, [r7, #6]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d004      	beq.n	800500e <tmc_fillCRC8Table+0x76>
 8005004:	6978      	ldr	r0, [r7, #20]
 8005006:	f000 f8f7 	bl	80051f8 <flipBitsInBytes>
 800500a:	4603      	mov	r3, r0
 800500c:	e000      	b.n	8005010 <tmc_fillCRC8Table+0x78>
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 8005012:	2300      	movs	r3, #0
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	e035      	b.n	8005084 <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	0fdb      	lsrs	r3, r3, #31
 800501c:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <tmc_fillCRC8Table+0x9a>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	e000      	b.n	8005034 <tmc_fillCRC8Table+0x9c>
 8005032:	2300      	movs	r3, #0
 8005034:	69fa      	ldr	r2, [r7, #28]
 8005036:	4053      	eors	r3, r2
 8005038:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <tmc_fillCRC8Table+0xb2>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	021b      	lsls	r3, r3, #8
 8005048:	e000      	b.n	800504c <tmc_fillCRC8Table+0xb4>
 800504a:	2300      	movs	r3, #0
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	4053      	eors	r3, r2
 8005050:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <tmc_fillCRC8Table+0xca>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	041b      	lsls	r3, r3, #16
 8005060:	e000      	b.n	8005064 <tmc_fillCRC8Table+0xcc>
 8005062:	2300      	movs	r3, #0
 8005064:	69fa      	ldr	r2, [r7, #28]
 8005066:	4053      	eors	r3, r2
 8005068:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 800506a:	7afb      	ldrb	r3, [r7, #11]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <tmc_fillCRC8Table+0xde>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	061b      	lsls	r3, r3, #24
 8005074:	e000      	b.n	8005078 <tmc_fillCRC8Table+0xe0>
 8005076:	2300      	movs	r3, #0
 8005078:	69fa      	ldr	r2, [r7, #28]
 800507a:	4053      	eors	r3, r2
 800507c:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	3301      	adds	r3, #1
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	2b07      	cmp	r3, #7
 8005088:	ddc6      	ble.n	8005018 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 800508a:	79bb      	ldrb	r3, [r7, #6]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d004      	beq.n	800509a <tmc_fillCRC8Table+0x102>
 8005090:	69f8      	ldr	r0, [r7, #28]
 8005092:	f000 f8b1 	bl	80051f8 <flipBitsInBytes>
 8005096:	4603      	mov	r3, r0
 8005098:	e000      	b.n	800509c <tmc_fillCRC8Table+0x104>
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	61ba      	str	r2, [r7, #24]
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	0a1b      	lsrs	r3, r3, #8
 80050ae:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	61ba      	str	r2, [r7, #24]
 80050b6:	69fa      	ldr	r2, [r7, #28]
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	0a1b      	lsrs	r3, r3, #8
 80050c0:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	61ba      	str	r2, [r7, #24]
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	0a1b      	lsrs	r3, r3, #8
 80050d2:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	61ba      	str	r2, [r7, #24]
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	4a06      	ldr	r2, [pc, #24]	; (8005104 <tmc_fillCRC8Table+0x16c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d186      	bne.n	8004ffe <tmc_fillCRC8Table+0x66>
	}

	return 1;
 80050f0:	2301      	movs	r3, #1
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3720      	adds	r7, #32
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000684 	.word	0x20000684
 8005100:	03020100 	.word	0x03020100
 8005104:	04030200 	.word	0x04030200

08005108 <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	4613      	mov	r3, r2
 8005114:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d901      	bls.n	8005124 <tmc_CRC8+0x1c>
		return 0;
 8005120:	2300      	movs	r3, #0
 8005122:	e02c      	b.n	800517e <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 8005124:	79fa      	ldrb	r2, [r7, #7]
 8005126:	4613      	mov	r3, r2
 8005128:	01db      	lsls	r3, r3, #7
 800512a:	4413      	add	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4a16      	ldr	r2, [pc, #88]	; (8005188 <tmc_CRC8+0x80>)
 8005130:	4413      	add	r3, r2
 8005132:	613b      	str	r3, [r7, #16]

	while(bytes--)
 8005134:	e00b      	b.n	800514e <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	60fa      	str	r2, [r7, #12]
 800513c:	781a      	ldrb	r2, [r3, #0]
 800513e:	7dfb      	ldrb	r3, [r7, #23]
 8005140:	4053      	eors	r3, r2
 8005142:	b2db      	uxtb	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	4413      	add	r3, r2
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	1e5a      	subs	r2, r3, #1
 8005152:	60ba      	str	r2, [r7, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1ee      	bne.n	8005136 <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 8005158:	79fa      	ldrb	r2, [r7, #7]
 800515a:	490b      	ldr	r1, [pc, #44]	; (8005188 <tmc_CRC8+0x80>)
 800515c:	4613      	mov	r3, r2
 800515e:	01db      	lsls	r3, r3, #7
 8005160:	4413      	add	r3, r2
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	440b      	add	r3, r1
 8005166:	f203 1301 	addw	r3, r3, #257	; 0x101
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <tmc_CRC8+0x74>
 8005170:	7dfb      	ldrb	r3, [r7, #23]
 8005172:	4618      	mov	r0, r3
 8005174:	f000 f80a 	bl	800518c <flipByte>
 8005178:	4603      	mov	r3, r0
 800517a:	e000      	b.n	800517e <tmc_CRC8+0x76>
 800517c:	7dfb      	ldrb	r3, [r7, #23]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000684 	.word	0x20000684

0800518c <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	b2db      	uxtb	r3, r3
 800519c:	b25b      	sxtb	r3, r3
 800519e:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80051a2:	b25a      	sxtb	r2, r3
 80051a4:	79fb      	ldrb	r3, [r7, #7]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	b25b      	sxtb	r3, r3
 80051aa:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 80051ae:	b25b      	sxtb	r3, r3
 80051b0:	4313      	orrs	r3, r2
 80051b2:	b25b      	sxtb	r3, r3
 80051b4:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	089b      	lsrs	r3, r3, #2
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	b25b      	sxtb	r3, r3
 80051be:	f003 0333 	and.w	r3, r3, #51	; 0x33
 80051c2:	b25a      	sxtb	r2, r3
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	b25b      	sxtb	r3, r3
 80051ca:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 80051ce:	b25b      	sxtb	r3, r3
 80051d0:	4313      	orrs	r3, r2
 80051d2:	b25b      	sxtb	r3, r3
 80051d4:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	b25a      	sxtb	r2, r3
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	b25b      	sxtb	r3, r3
 80051e4:	4313      	orrs	r3, r2
 80051e6:	b25b      	sxtb	r3, r3
 80051e8:	71fb      	strb	r3, [r7, #7]

	return value;
 80051ea:	79fb      	ldrb	r3, [r7, #7]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	085b      	lsrs	r3, r3, #1
 8005204:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8005210:	4313      	orrs	r3, r2
 8005212:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	089b      	lsrs	r3, r3, #2
 8005218:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 8005224:	4313      	orrs	r3, r2
 8005226:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	091b      	lsrs	r3, r3, #4
 800522c:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8005238:	4313      	orrs	r3, r2
 800523a:	607b      	str	r3, [r7, #4]

	return value;
 800523c:	687b      	ldr	r3, [r7, #4]
}
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b086      	sub	sp, #24
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	460b      	mov	r3, r1
 8005254:	607a      	str	r2, [r7, #4]
 8005256:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 8005258:	2305      	movs	r3, #5
 800525a:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8005262:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 8005264:	7afb      	ldrb	r3, [r7, #11]
 8005266:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800526a:	b2db      	uxtb	r3, r3
 800526c:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	0e1b      	lsrs	r3, r3, #24
 8005272:	b2db      	uxtb	r3, r3
 8005274:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	141b      	asrs	r3, r3, #16
 800527a:	b2db      	uxtb	r3, r3
 800527c:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	121b      	asrs	r3, r3, #8
 8005282:	b2db      	uxtb	r3, r3
 8005284:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	b2db      	uxtb	r3, r3
 800528a:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 800528c:	f107 0310 	add.w	r3, r7, #16
 8005290:	2107      	movs	r1, #7
 8005292:	4618      	mov	r0, r3
 8005294:	f7fb f814 	bl	80002c0 <tmc2209_CRC8>
 8005298:	4603      	mov	r3, r0
 800529a:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 80052a4:	f107 0110 	add.w	r1, r7, #16
 80052a8:	2300      	movs	r3, #0
 80052aa:	2208      	movs	r2, #8
 80052ac:	f7fa ffe0 	bl	8000270 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 80052b0:	7afb      	ldrb	r3, [r7, #11]
 80052b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052b6:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	7afb      	ldrb	r3, [r7, #11]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 80052c6:	7afb      	ldrb	r3, [r7, #11]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4413      	add	r3, r2
 80052cc:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 80052d0:	7afb      	ldrb	r3, [r7, #11]
 80052d2:	f042 0208 	orr.w	r2, r2, #8
 80052d6:	b2d1      	uxtb	r1, r2
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	460a      	mov	r2, r1
 80052de:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 80052e2:	bf00      	nop
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 80052ea:	b590      	push	{r4, r7, lr}
 80052ec:	b085      	sub	sp, #20
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	460b      	mov	r3, r1
 80052f4:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 80052f6:	2300      	movs	r3, #0
 80052f8:	60bb      	str	r3, [r7, #8]
 80052fa:	2300      	movs	r3, #0
 80052fc:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 80052fe:	78fb      	ldrb	r3, [r7, #3]
 8005300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005304:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 8005306:	78fb      	ldrb	r3, [r7, #3]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	4413      	add	r3, r2
 800530c:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d106      	bne.n	8005326 <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	e03f      	b.n	80053a6 <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 8005326:	2305      	movs	r3, #5
 8005328:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8005330:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 8005332:	78fb      	ldrb	r3, [r7, #3]
 8005334:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 8005336:	f107 0308 	add.w	r3, r7, #8
 800533a:	2103      	movs	r1, #3
 800533c:	4618      	mov	r0, r3
 800533e:	f7fa ffbf 	bl	80002c0 <tmc2209_CRC8>
 8005342:	4603      	mov	r3, r0
 8005344:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 800534e:	f107 0108 	add.w	r1, r7, #8
 8005352:	2308      	movs	r3, #8
 8005354:	2204      	movs	r2, #4
 8005356:	f7fa ff8b 	bl	8000270 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 800535a:	7a3b      	ldrb	r3, [r7, #8]
 800535c:	2b05      	cmp	r3, #5
 800535e:	d001      	beq.n	8005364 <tmc2209_readInt+0x7a>
		return 0;
 8005360:	2300      	movs	r3, #0
 8005362:	e020      	b.n	80053a6 <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 8005364:	7a7b      	ldrb	r3, [r7, #9]
 8005366:	2bff      	cmp	r3, #255	; 0xff
 8005368:	d001      	beq.n	800536e <tmc2209_readInt+0x84>
		return 0;
 800536a:	2300      	movs	r3, #0
 800536c:	e01b      	b.n	80053a6 <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 800536e:	7abb      	ldrb	r3, [r7, #10]
 8005370:	78fa      	ldrb	r2, [r7, #3]
 8005372:	429a      	cmp	r2, r3
 8005374:	d001      	beq.n	800537a <tmc2209_readInt+0x90>
		return 0;
 8005376:	2300      	movs	r3, #0
 8005378:	e015      	b.n	80053a6 <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 800537a:	7bfc      	ldrb	r4, [r7, #15]
 800537c:	f107 0308 	add.w	r3, r7, #8
 8005380:	2107      	movs	r1, #7
 8005382:	4618      	mov	r0, r3
 8005384:	f7fa ff9c 	bl	80002c0 <tmc2209_CRC8>
 8005388:	4603      	mov	r3, r0
 800538a:	429c      	cmp	r4, r3
 800538c:	d001      	beq.n	8005392 <tmc2209_readInt+0xa8>
		return 0;
 800538e:	2300      	movs	r3, #0
 8005390:	e009      	b.n	80053a6 <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 8005392:	7afb      	ldrb	r3, [r7, #11]
 8005394:	061a      	lsls	r2, r3, #24
 8005396:	7b3b      	ldrb	r3, [r7, #12]
 8005398:	041b      	lsls	r3, r3, #16
 800539a:	4313      	orrs	r3, r2
 800539c:	7b7a      	ldrb	r2, [r7, #13]
 800539e:	0212      	lsls	r2, r2, #8
 80053a0:	4313      	orrs	r3, r2
 80053a2:	7bba      	ldrb	r2, [r7, #14]
 80053a4:	4313      	orrs	r3, r2
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd90      	pop	{r4, r7, pc}
	...

080053b0 <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	607b      	str	r3, [r7, #4]
 80053ba:	460b      	mov	r3, r1
 80053bc:	72fb      	strb	r3, [r7, #11]
 80053be:	4613      	mov	r3, r2
 80053c0:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	7aba      	ldrb	r2, [r7, #10]
 80053c6:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	7afa      	ldrb	r2, [r7, #11]
 80053e0:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2200      	movs	r2, #0
 80053ea:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2200      	movs	r2, #0
 80053f2:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	e017      	b.n	800542a <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 80053fa:	4a11      	ldr	r2, [pc, #68]	; (8005440 <tmc2209_init+0x90>)
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	4413      	add	r3, r2
 8005400:	7819      	ldrb	r1, [r3, #0]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	4413      	add	r3, r2
 8005408:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800540c:	460a      	mov	r2, r1
 800540e:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	6a3a      	ldr	r2, [r7, #32]
 8005416:	4413      	add	r3, r2
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	440b      	add	r3, r1
 8005422:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	3301      	adds	r3, #1
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b7f      	cmp	r3, #127	; 0x7f
 800542e:	d9e4      	bls.n	80053fa <tmc2209_init+0x4a>
	}
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	08006bc4 	.word	0x08006bc4

08005444 <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3301      	adds	r3, #1
 8005452:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b02      	cmp	r3, #2
 800545c:	d131      	bne.n	80054c2 <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3304      	adds	r3, #4
 8005464:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8005466:	e005      	b.n	8005474 <writeConfiguration+0x30>
		{
			(*ptr)++;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	3301      	adds	r3, #1
 800546e:	b2da      	uxtb	r2, r3
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	b25b      	sxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	db3b      	blt.n	80054f6 <writeConfiguration+0xb2>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4413      	add	r3, r2
 8005488:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0e9      	beq.n	8005468 <writeConfiguration+0x24>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4413      	add	r3, r2
 800549e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80054a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d025      	beq.n	80054f6 <writeConfiguration+0xb2>
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4413      	add	r3, r2
 80054b4:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0d3      	beq.n	8005468 <writeConfiguration+0x24>
 80054c0:	e019      	b.n	80054f6 <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3304      	adds	r3, #4
 80054c6:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 80054c8:	e005      	b.n	80054d6 <writeConfiguration+0x92>
		{
			(*ptr)++;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	3301      	adds	r3, #1
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	b25b      	sxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	db0a      	blt.n	80054f6 <writeConfiguration+0xb2>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4413      	add	r3, r2
 80054ea:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80054ee:	f003 0342 	and.w	r3, r3, #66	; 0x42
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d1e9      	bne.n	80054ca <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	b25b      	sxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	db12      	blt.n	8005526 <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	7819      	ldrb	r1, [r3, #0]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4413      	add	r3, r2
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	461a      	mov	r2, r3
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff fe99 	bl	800524a <tmc2209_writeInt>
		(*ptr)++;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	3301      	adds	r3, #1
 800551e:	b2da      	uxtb	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 8005524:	e013      	b.n	800554e <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6812      	ldr	r2, [r2, #0]
 800553e:	7812      	ldrb	r2, [r2, #0]
 8005540:	4611      	mov	r1, r2
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]
}
 800554e:	bf00      	nop
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7ff ff6a 	bl	8005444 <writeConfiguration>
		return;
 8005570:	bf00      	nop
	}
}
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <tmc2209_reset+0x16>
		return false;
 800558a:	2300      	movs	r3, #0
 800558c:	e028      	b.n	80055e0 <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	e019      	b.n	80055c8 <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	f023 0308 	bic.w	r3, r3, #8
 80055a4:	b2d9      	uxtb	r1, r3
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80055b0:	460a      	mov	r2, r1
 80055b2:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	2200      	movs	r2, #0
 80055c0:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3301      	adds	r3, #1
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b7f      	cmp	r3, #127	; 0x7f
 80055cc:	d9e2      	bls.n	8005594 <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2201      	movs	r2, #1
 80055d4:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2200      	movs	r2, #0
 80055dc:	705a      	strb	r2, [r3, #1]

	return true;
 80055de:	2301      	movs	r3, #1
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <tmc2209_restore+0x16>
		return false;
 80055fe:	2300      	movs	r3, #0
 8005600:	e008      	b.n	8005614 <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2202      	movs	r2, #2
 8005608:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2200      	movs	r2, #0
 8005610:	705a      	strb	r2, [r3, #1]

	return true;
 8005612:	2301      	movs	r3, #1
}
 8005614:	4618      	mov	r0, r3
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <__errno>:
 8005620:	4b01      	ldr	r3, [pc, #4]	; (8005628 <__errno+0x8>)
 8005622:	6818      	ldr	r0, [r3, #0]
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	2000000c 	.word	0x2000000c

0800562c <__libc_init_array>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	4d0d      	ldr	r5, [pc, #52]	; (8005664 <__libc_init_array+0x38>)
 8005630:	4c0d      	ldr	r4, [pc, #52]	; (8005668 <__libc_init_array+0x3c>)
 8005632:	1b64      	subs	r4, r4, r5
 8005634:	10a4      	asrs	r4, r4, #2
 8005636:	2600      	movs	r6, #0
 8005638:	42a6      	cmp	r6, r4
 800563a:	d109      	bne.n	8005650 <__libc_init_array+0x24>
 800563c:	4d0b      	ldr	r5, [pc, #44]	; (800566c <__libc_init_array+0x40>)
 800563e:	4c0c      	ldr	r4, [pc, #48]	; (8005670 <__libc_init_array+0x44>)
 8005640:	f001 f8fa 	bl	8006838 <_init>
 8005644:	1b64      	subs	r4, r4, r5
 8005646:	10a4      	asrs	r4, r4, #2
 8005648:	2600      	movs	r6, #0
 800564a:	42a6      	cmp	r6, r4
 800564c:	d105      	bne.n	800565a <__libc_init_array+0x2e>
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	f855 3b04 	ldr.w	r3, [r5], #4
 8005654:	4798      	blx	r3
 8005656:	3601      	adds	r6, #1
 8005658:	e7ee      	b.n	8005638 <__libc_init_array+0xc>
 800565a:	f855 3b04 	ldr.w	r3, [r5], #4
 800565e:	4798      	blx	r3
 8005660:	3601      	adds	r6, #1
 8005662:	e7f2      	b.n	800564a <__libc_init_array+0x1e>
 8005664:	08006cdc 	.word	0x08006cdc
 8005668:	08006cdc 	.word	0x08006cdc
 800566c:	08006cdc 	.word	0x08006cdc
 8005670:	08006ce0 	.word	0x08006ce0

08005674 <memset>:
 8005674:	4402      	add	r2, r0
 8005676:	4603      	mov	r3, r0
 8005678:	4293      	cmp	r3, r2
 800567a:	d100      	bne.n	800567e <memset+0xa>
 800567c:	4770      	bx	lr
 800567e:	f803 1b01 	strb.w	r1, [r3], #1
 8005682:	e7f9      	b.n	8005678 <memset+0x4>

08005684 <iprintf>:
 8005684:	b40f      	push	{r0, r1, r2, r3}
 8005686:	4b0a      	ldr	r3, [pc, #40]	; (80056b0 <iprintf+0x2c>)
 8005688:	b513      	push	{r0, r1, r4, lr}
 800568a:	681c      	ldr	r4, [r3, #0]
 800568c:	b124      	cbz	r4, 8005698 <iprintf+0x14>
 800568e:	69a3      	ldr	r3, [r4, #24]
 8005690:	b913      	cbnz	r3, 8005698 <iprintf+0x14>
 8005692:	4620      	mov	r0, r4
 8005694:	f000 fb2c 	bl	8005cf0 <__sinit>
 8005698:	ab05      	add	r3, sp, #20
 800569a:	9a04      	ldr	r2, [sp, #16]
 800569c:	68a1      	ldr	r1, [r4, #8]
 800569e:	9301      	str	r3, [sp, #4]
 80056a0:	4620      	mov	r0, r4
 80056a2:	f000 fd3d 	bl	8006120 <_vfiprintf_r>
 80056a6:	b002      	add	sp, #8
 80056a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ac:	b004      	add	sp, #16
 80056ae:	4770      	bx	lr
 80056b0:	2000000c 	.word	0x2000000c

080056b4 <_puts_r>:
 80056b4:	b570      	push	{r4, r5, r6, lr}
 80056b6:	460e      	mov	r6, r1
 80056b8:	4605      	mov	r5, r0
 80056ba:	b118      	cbz	r0, 80056c4 <_puts_r+0x10>
 80056bc:	6983      	ldr	r3, [r0, #24]
 80056be:	b90b      	cbnz	r3, 80056c4 <_puts_r+0x10>
 80056c0:	f000 fb16 	bl	8005cf0 <__sinit>
 80056c4:	69ab      	ldr	r3, [r5, #24]
 80056c6:	68ac      	ldr	r4, [r5, #8]
 80056c8:	b913      	cbnz	r3, 80056d0 <_puts_r+0x1c>
 80056ca:	4628      	mov	r0, r5
 80056cc:	f000 fb10 	bl	8005cf0 <__sinit>
 80056d0:	4b2c      	ldr	r3, [pc, #176]	; (8005784 <_puts_r+0xd0>)
 80056d2:	429c      	cmp	r4, r3
 80056d4:	d120      	bne.n	8005718 <_puts_r+0x64>
 80056d6:	686c      	ldr	r4, [r5, #4]
 80056d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056da:	07db      	lsls	r3, r3, #31
 80056dc:	d405      	bmi.n	80056ea <_puts_r+0x36>
 80056de:	89a3      	ldrh	r3, [r4, #12]
 80056e0:	0598      	lsls	r0, r3, #22
 80056e2:	d402      	bmi.n	80056ea <_puts_r+0x36>
 80056e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056e6:	f000 fba1 	bl	8005e2c <__retarget_lock_acquire_recursive>
 80056ea:	89a3      	ldrh	r3, [r4, #12]
 80056ec:	0719      	lsls	r1, r3, #28
 80056ee:	d51d      	bpl.n	800572c <_puts_r+0x78>
 80056f0:	6923      	ldr	r3, [r4, #16]
 80056f2:	b1db      	cbz	r3, 800572c <_puts_r+0x78>
 80056f4:	3e01      	subs	r6, #1
 80056f6:	68a3      	ldr	r3, [r4, #8]
 80056f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80056fc:	3b01      	subs	r3, #1
 80056fe:	60a3      	str	r3, [r4, #8]
 8005700:	bb39      	cbnz	r1, 8005752 <_puts_r+0x9e>
 8005702:	2b00      	cmp	r3, #0
 8005704:	da38      	bge.n	8005778 <_puts_r+0xc4>
 8005706:	4622      	mov	r2, r4
 8005708:	210a      	movs	r1, #10
 800570a:	4628      	mov	r0, r5
 800570c:	f000 f916 	bl	800593c <__swbuf_r>
 8005710:	3001      	adds	r0, #1
 8005712:	d011      	beq.n	8005738 <_puts_r+0x84>
 8005714:	250a      	movs	r5, #10
 8005716:	e011      	b.n	800573c <_puts_r+0x88>
 8005718:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <_puts_r+0xd4>)
 800571a:	429c      	cmp	r4, r3
 800571c:	d101      	bne.n	8005722 <_puts_r+0x6e>
 800571e:	68ac      	ldr	r4, [r5, #8]
 8005720:	e7da      	b.n	80056d8 <_puts_r+0x24>
 8005722:	4b1a      	ldr	r3, [pc, #104]	; (800578c <_puts_r+0xd8>)
 8005724:	429c      	cmp	r4, r3
 8005726:	bf08      	it	eq
 8005728:	68ec      	ldreq	r4, [r5, #12]
 800572a:	e7d5      	b.n	80056d8 <_puts_r+0x24>
 800572c:	4621      	mov	r1, r4
 800572e:	4628      	mov	r0, r5
 8005730:	f000 f956 	bl	80059e0 <__swsetup_r>
 8005734:	2800      	cmp	r0, #0
 8005736:	d0dd      	beq.n	80056f4 <_puts_r+0x40>
 8005738:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800573c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800573e:	07da      	lsls	r2, r3, #31
 8005740:	d405      	bmi.n	800574e <_puts_r+0x9a>
 8005742:	89a3      	ldrh	r3, [r4, #12]
 8005744:	059b      	lsls	r3, r3, #22
 8005746:	d402      	bmi.n	800574e <_puts_r+0x9a>
 8005748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800574a:	f000 fb70 	bl	8005e2e <__retarget_lock_release_recursive>
 800574e:	4628      	mov	r0, r5
 8005750:	bd70      	pop	{r4, r5, r6, pc}
 8005752:	2b00      	cmp	r3, #0
 8005754:	da04      	bge.n	8005760 <_puts_r+0xac>
 8005756:	69a2      	ldr	r2, [r4, #24]
 8005758:	429a      	cmp	r2, r3
 800575a:	dc06      	bgt.n	800576a <_puts_r+0xb6>
 800575c:	290a      	cmp	r1, #10
 800575e:	d004      	beq.n	800576a <_puts_r+0xb6>
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	6022      	str	r2, [r4, #0]
 8005766:	7019      	strb	r1, [r3, #0]
 8005768:	e7c5      	b.n	80056f6 <_puts_r+0x42>
 800576a:	4622      	mov	r2, r4
 800576c:	4628      	mov	r0, r5
 800576e:	f000 f8e5 	bl	800593c <__swbuf_r>
 8005772:	3001      	adds	r0, #1
 8005774:	d1bf      	bne.n	80056f6 <_puts_r+0x42>
 8005776:	e7df      	b.n	8005738 <_puts_r+0x84>
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	250a      	movs	r5, #10
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	6022      	str	r2, [r4, #0]
 8005780:	701d      	strb	r5, [r3, #0]
 8005782:	e7db      	b.n	800573c <_puts_r+0x88>
 8005784:	08006c68 	.word	0x08006c68
 8005788:	08006c88 	.word	0x08006c88
 800578c:	08006c48 	.word	0x08006c48

08005790 <puts>:
 8005790:	4b02      	ldr	r3, [pc, #8]	; (800579c <puts+0xc>)
 8005792:	4601      	mov	r1, r0
 8005794:	6818      	ldr	r0, [r3, #0]
 8005796:	f7ff bf8d 	b.w	80056b4 <_puts_r>
 800579a:	bf00      	nop
 800579c:	2000000c 	.word	0x2000000c

080057a0 <setbuf>:
 80057a0:	2900      	cmp	r1, #0
 80057a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057a6:	bf0c      	ite	eq
 80057a8:	2202      	moveq	r2, #2
 80057aa:	2200      	movne	r2, #0
 80057ac:	f000 b800 	b.w	80057b0 <setvbuf>

080057b0 <setvbuf>:
 80057b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80057b4:	461d      	mov	r5, r3
 80057b6:	4b5d      	ldr	r3, [pc, #372]	; (800592c <setvbuf+0x17c>)
 80057b8:	681f      	ldr	r7, [r3, #0]
 80057ba:	4604      	mov	r4, r0
 80057bc:	460e      	mov	r6, r1
 80057be:	4690      	mov	r8, r2
 80057c0:	b127      	cbz	r7, 80057cc <setvbuf+0x1c>
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	b913      	cbnz	r3, 80057cc <setvbuf+0x1c>
 80057c6:	4638      	mov	r0, r7
 80057c8:	f000 fa92 	bl	8005cf0 <__sinit>
 80057cc:	4b58      	ldr	r3, [pc, #352]	; (8005930 <setvbuf+0x180>)
 80057ce:	429c      	cmp	r4, r3
 80057d0:	d167      	bne.n	80058a2 <setvbuf+0xf2>
 80057d2:	687c      	ldr	r4, [r7, #4]
 80057d4:	f1b8 0f02 	cmp.w	r8, #2
 80057d8:	d006      	beq.n	80057e8 <setvbuf+0x38>
 80057da:	f1b8 0f01 	cmp.w	r8, #1
 80057de:	f200 809f 	bhi.w	8005920 <setvbuf+0x170>
 80057e2:	2d00      	cmp	r5, #0
 80057e4:	f2c0 809c 	blt.w	8005920 <setvbuf+0x170>
 80057e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057ea:	07db      	lsls	r3, r3, #31
 80057ec:	d405      	bmi.n	80057fa <setvbuf+0x4a>
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	0598      	lsls	r0, r3, #22
 80057f2:	d402      	bmi.n	80057fa <setvbuf+0x4a>
 80057f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057f6:	f000 fb19 	bl	8005e2c <__retarget_lock_acquire_recursive>
 80057fa:	4621      	mov	r1, r4
 80057fc:	4638      	mov	r0, r7
 80057fe:	f000 f9e3 	bl	8005bc8 <_fflush_r>
 8005802:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005804:	b141      	cbz	r1, 8005818 <setvbuf+0x68>
 8005806:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800580a:	4299      	cmp	r1, r3
 800580c:	d002      	beq.n	8005814 <setvbuf+0x64>
 800580e:	4638      	mov	r0, r7
 8005810:	f000 fb7c 	bl	8005f0c <_free_r>
 8005814:	2300      	movs	r3, #0
 8005816:	6363      	str	r3, [r4, #52]	; 0x34
 8005818:	2300      	movs	r3, #0
 800581a:	61a3      	str	r3, [r4, #24]
 800581c:	6063      	str	r3, [r4, #4]
 800581e:	89a3      	ldrh	r3, [r4, #12]
 8005820:	0619      	lsls	r1, r3, #24
 8005822:	d503      	bpl.n	800582c <setvbuf+0x7c>
 8005824:	6921      	ldr	r1, [r4, #16]
 8005826:	4638      	mov	r0, r7
 8005828:	f000 fb70 	bl	8005f0c <_free_r>
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005832:	f023 0303 	bic.w	r3, r3, #3
 8005836:	f1b8 0f02 	cmp.w	r8, #2
 800583a:	81a3      	strh	r3, [r4, #12]
 800583c:	d06c      	beq.n	8005918 <setvbuf+0x168>
 800583e:	ab01      	add	r3, sp, #4
 8005840:	466a      	mov	r2, sp
 8005842:	4621      	mov	r1, r4
 8005844:	4638      	mov	r0, r7
 8005846:	f000 faf3 	bl	8005e30 <__swhatbuf_r>
 800584a:	89a3      	ldrh	r3, [r4, #12]
 800584c:	4318      	orrs	r0, r3
 800584e:	81a0      	strh	r0, [r4, #12]
 8005850:	2d00      	cmp	r5, #0
 8005852:	d130      	bne.n	80058b6 <setvbuf+0x106>
 8005854:	9d00      	ldr	r5, [sp, #0]
 8005856:	4628      	mov	r0, r5
 8005858:	f000 fb50 	bl	8005efc <malloc>
 800585c:	4606      	mov	r6, r0
 800585e:	2800      	cmp	r0, #0
 8005860:	d155      	bne.n	800590e <setvbuf+0x15e>
 8005862:	f8dd 9000 	ldr.w	r9, [sp]
 8005866:	45a9      	cmp	r9, r5
 8005868:	d14a      	bne.n	8005900 <setvbuf+0x150>
 800586a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800586e:	2200      	movs	r2, #0
 8005870:	60a2      	str	r2, [r4, #8]
 8005872:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005876:	6022      	str	r2, [r4, #0]
 8005878:	6122      	str	r2, [r4, #16]
 800587a:	2201      	movs	r2, #1
 800587c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005880:	6162      	str	r2, [r4, #20]
 8005882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005884:	f043 0302 	orr.w	r3, r3, #2
 8005888:	07d2      	lsls	r2, r2, #31
 800588a:	81a3      	strh	r3, [r4, #12]
 800588c:	d405      	bmi.n	800589a <setvbuf+0xea>
 800588e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005892:	d102      	bne.n	800589a <setvbuf+0xea>
 8005894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005896:	f000 faca 	bl	8005e2e <__retarget_lock_release_recursive>
 800589a:	4628      	mov	r0, r5
 800589c:	b003      	add	sp, #12
 800589e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058a2:	4b24      	ldr	r3, [pc, #144]	; (8005934 <setvbuf+0x184>)
 80058a4:	429c      	cmp	r4, r3
 80058a6:	d101      	bne.n	80058ac <setvbuf+0xfc>
 80058a8:	68bc      	ldr	r4, [r7, #8]
 80058aa:	e793      	b.n	80057d4 <setvbuf+0x24>
 80058ac:	4b22      	ldr	r3, [pc, #136]	; (8005938 <setvbuf+0x188>)
 80058ae:	429c      	cmp	r4, r3
 80058b0:	bf08      	it	eq
 80058b2:	68fc      	ldreq	r4, [r7, #12]
 80058b4:	e78e      	b.n	80057d4 <setvbuf+0x24>
 80058b6:	2e00      	cmp	r6, #0
 80058b8:	d0cd      	beq.n	8005856 <setvbuf+0xa6>
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	b913      	cbnz	r3, 80058c4 <setvbuf+0x114>
 80058be:	4638      	mov	r0, r7
 80058c0:	f000 fa16 	bl	8005cf0 <__sinit>
 80058c4:	f1b8 0f01 	cmp.w	r8, #1
 80058c8:	bf08      	it	eq
 80058ca:	89a3      	ldrheq	r3, [r4, #12]
 80058cc:	6026      	str	r6, [r4, #0]
 80058ce:	bf04      	itt	eq
 80058d0:	f043 0301 	orreq.w	r3, r3, #1
 80058d4:	81a3      	strheq	r3, [r4, #12]
 80058d6:	89a2      	ldrh	r2, [r4, #12]
 80058d8:	f012 0308 	ands.w	r3, r2, #8
 80058dc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80058e0:	d01c      	beq.n	800591c <setvbuf+0x16c>
 80058e2:	07d3      	lsls	r3, r2, #31
 80058e4:	bf41      	itttt	mi
 80058e6:	2300      	movmi	r3, #0
 80058e8:	426d      	negmi	r5, r5
 80058ea:	60a3      	strmi	r3, [r4, #8]
 80058ec:	61a5      	strmi	r5, [r4, #24]
 80058ee:	bf58      	it	pl
 80058f0:	60a5      	strpl	r5, [r4, #8]
 80058f2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80058f4:	f015 0501 	ands.w	r5, r5, #1
 80058f8:	d115      	bne.n	8005926 <setvbuf+0x176>
 80058fa:	f412 7f00 	tst.w	r2, #512	; 0x200
 80058fe:	e7c8      	b.n	8005892 <setvbuf+0xe2>
 8005900:	4648      	mov	r0, r9
 8005902:	f000 fafb 	bl	8005efc <malloc>
 8005906:	4606      	mov	r6, r0
 8005908:	2800      	cmp	r0, #0
 800590a:	d0ae      	beq.n	800586a <setvbuf+0xba>
 800590c:	464d      	mov	r5, r9
 800590e:	89a3      	ldrh	r3, [r4, #12]
 8005910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005914:	81a3      	strh	r3, [r4, #12]
 8005916:	e7d0      	b.n	80058ba <setvbuf+0x10a>
 8005918:	2500      	movs	r5, #0
 800591a:	e7a8      	b.n	800586e <setvbuf+0xbe>
 800591c:	60a3      	str	r3, [r4, #8]
 800591e:	e7e8      	b.n	80058f2 <setvbuf+0x142>
 8005920:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005924:	e7b9      	b.n	800589a <setvbuf+0xea>
 8005926:	2500      	movs	r5, #0
 8005928:	e7b7      	b.n	800589a <setvbuf+0xea>
 800592a:	bf00      	nop
 800592c:	2000000c 	.word	0x2000000c
 8005930:	08006c68 	.word	0x08006c68
 8005934:	08006c88 	.word	0x08006c88
 8005938:	08006c48 	.word	0x08006c48

0800593c <__swbuf_r>:
 800593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593e:	460e      	mov	r6, r1
 8005940:	4614      	mov	r4, r2
 8005942:	4605      	mov	r5, r0
 8005944:	b118      	cbz	r0, 800594e <__swbuf_r+0x12>
 8005946:	6983      	ldr	r3, [r0, #24]
 8005948:	b90b      	cbnz	r3, 800594e <__swbuf_r+0x12>
 800594a:	f000 f9d1 	bl	8005cf0 <__sinit>
 800594e:	4b21      	ldr	r3, [pc, #132]	; (80059d4 <__swbuf_r+0x98>)
 8005950:	429c      	cmp	r4, r3
 8005952:	d12b      	bne.n	80059ac <__swbuf_r+0x70>
 8005954:	686c      	ldr	r4, [r5, #4]
 8005956:	69a3      	ldr	r3, [r4, #24]
 8005958:	60a3      	str	r3, [r4, #8]
 800595a:	89a3      	ldrh	r3, [r4, #12]
 800595c:	071a      	lsls	r2, r3, #28
 800595e:	d52f      	bpl.n	80059c0 <__swbuf_r+0x84>
 8005960:	6923      	ldr	r3, [r4, #16]
 8005962:	b36b      	cbz	r3, 80059c0 <__swbuf_r+0x84>
 8005964:	6923      	ldr	r3, [r4, #16]
 8005966:	6820      	ldr	r0, [r4, #0]
 8005968:	1ac0      	subs	r0, r0, r3
 800596a:	6963      	ldr	r3, [r4, #20]
 800596c:	b2f6      	uxtb	r6, r6
 800596e:	4283      	cmp	r3, r0
 8005970:	4637      	mov	r7, r6
 8005972:	dc04      	bgt.n	800597e <__swbuf_r+0x42>
 8005974:	4621      	mov	r1, r4
 8005976:	4628      	mov	r0, r5
 8005978:	f000 f926 	bl	8005bc8 <_fflush_r>
 800597c:	bb30      	cbnz	r0, 80059cc <__swbuf_r+0x90>
 800597e:	68a3      	ldr	r3, [r4, #8]
 8005980:	3b01      	subs	r3, #1
 8005982:	60a3      	str	r3, [r4, #8]
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	6022      	str	r2, [r4, #0]
 800598a:	701e      	strb	r6, [r3, #0]
 800598c:	6963      	ldr	r3, [r4, #20]
 800598e:	3001      	adds	r0, #1
 8005990:	4283      	cmp	r3, r0
 8005992:	d004      	beq.n	800599e <__swbuf_r+0x62>
 8005994:	89a3      	ldrh	r3, [r4, #12]
 8005996:	07db      	lsls	r3, r3, #31
 8005998:	d506      	bpl.n	80059a8 <__swbuf_r+0x6c>
 800599a:	2e0a      	cmp	r6, #10
 800599c:	d104      	bne.n	80059a8 <__swbuf_r+0x6c>
 800599e:	4621      	mov	r1, r4
 80059a0:	4628      	mov	r0, r5
 80059a2:	f000 f911 	bl	8005bc8 <_fflush_r>
 80059a6:	b988      	cbnz	r0, 80059cc <__swbuf_r+0x90>
 80059a8:	4638      	mov	r0, r7
 80059aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ac:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <__swbuf_r+0x9c>)
 80059ae:	429c      	cmp	r4, r3
 80059b0:	d101      	bne.n	80059b6 <__swbuf_r+0x7a>
 80059b2:	68ac      	ldr	r4, [r5, #8]
 80059b4:	e7cf      	b.n	8005956 <__swbuf_r+0x1a>
 80059b6:	4b09      	ldr	r3, [pc, #36]	; (80059dc <__swbuf_r+0xa0>)
 80059b8:	429c      	cmp	r4, r3
 80059ba:	bf08      	it	eq
 80059bc:	68ec      	ldreq	r4, [r5, #12]
 80059be:	e7ca      	b.n	8005956 <__swbuf_r+0x1a>
 80059c0:	4621      	mov	r1, r4
 80059c2:	4628      	mov	r0, r5
 80059c4:	f000 f80c 	bl	80059e0 <__swsetup_r>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d0cb      	beq.n	8005964 <__swbuf_r+0x28>
 80059cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80059d0:	e7ea      	b.n	80059a8 <__swbuf_r+0x6c>
 80059d2:	bf00      	nop
 80059d4:	08006c68 	.word	0x08006c68
 80059d8:	08006c88 	.word	0x08006c88
 80059dc:	08006c48 	.word	0x08006c48

080059e0 <__swsetup_r>:
 80059e0:	4b32      	ldr	r3, [pc, #200]	; (8005aac <__swsetup_r+0xcc>)
 80059e2:	b570      	push	{r4, r5, r6, lr}
 80059e4:	681d      	ldr	r5, [r3, #0]
 80059e6:	4606      	mov	r6, r0
 80059e8:	460c      	mov	r4, r1
 80059ea:	b125      	cbz	r5, 80059f6 <__swsetup_r+0x16>
 80059ec:	69ab      	ldr	r3, [r5, #24]
 80059ee:	b913      	cbnz	r3, 80059f6 <__swsetup_r+0x16>
 80059f0:	4628      	mov	r0, r5
 80059f2:	f000 f97d 	bl	8005cf0 <__sinit>
 80059f6:	4b2e      	ldr	r3, [pc, #184]	; (8005ab0 <__swsetup_r+0xd0>)
 80059f8:	429c      	cmp	r4, r3
 80059fa:	d10f      	bne.n	8005a1c <__swsetup_r+0x3c>
 80059fc:	686c      	ldr	r4, [r5, #4]
 80059fe:	89a3      	ldrh	r3, [r4, #12]
 8005a00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a04:	0719      	lsls	r1, r3, #28
 8005a06:	d42c      	bmi.n	8005a62 <__swsetup_r+0x82>
 8005a08:	06dd      	lsls	r5, r3, #27
 8005a0a:	d411      	bmi.n	8005a30 <__swsetup_r+0x50>
 8005a0c:	2309      	movs	r3, #9
 8005a0e:	6033      	str	r3, [r6, #0]
 8005a10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a14:	81a3      	strh	r3, [r4, #12]
 8005a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a1a:	e03e      	b.n	8005a9a <__swsetup_r+0xba>
 8005a1c:	4b25      	ldr	r3, [pc, #148]	; (8005ab4 <__swsetup_r+0xd4>)
 8005a1e:	429c      	cmp	r4, r3
 8005a20:	d101      	bne.n	8005a26 <__swsetup_r+0x46>
 8005a22:	68ac      	ldr	r4, [r5, #8]
 8005a24:	e7eb      	b.n	80059fe <__swsetup_r+0x1e>
 8005a26:	4b24      	ldr	r3, [pc, #144]	; (8005ab8 <__swsetup_r+0xd8>)
 8005a28:	429c      	cmp	r4, r3
 8005a2a:	bf08      	it	eq
 8005a2c:	68ec      	ldreq	r4, [r5, #12]
 8005a2e:	e7e6      	b.n	80059fe <__swsetup_r+0x1e>
 8005a30:	0758      	lsls	r0, r3, #29
 8005a32:	d512      	bpl.n	8005a5a <__swsetup_r+0x7a>
 8005a34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a36:	b141      	cbz	r1, 8005a4a <__swsetup_r+0x6a>
 8005a38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a3c:	4299      	cmp	r1, r3
 8005a3e:	d002      	beq.n	8005a46 <__swsetup_r+0x66>
 8005a40:	4630      	mov	r0, r6
 8005a42:	f000 fa63 	bl	8005f0c <_free_r>
 8005a46:	2300      	movs	r3, #0
 8005a48:	6363      	str	r3, [r4, #52]	; 0x34
 8005a4a:	89a3      	ldrh	r3, [r4, #12]
 8005a4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a50:	81a3      	strh	r3, [r4, #12]
 8005a52:	2300      	movs	r3, #0
 8005a54:	6063      	str	r3, [r4, #4]
 8005a56:	6923      	ldr	r3, [r4, #16]
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	f043 0308 	orr.w	r3, r3, #8
 8005a60:	81a3      	strh	r3, [r4, #12]
 8005a62:	6923      	ldr	r3, [r4, #16]
 8005a64:	b94b      	cbnz	r3, 8005a7a <__swsetup_r+0x9a>
 8005a66:	89a3      	ldrh	r3, [r4, #12]
 8005a68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a70:	d003      	beq.n	8005a7a <__swsetup_r+0x9a>
 8005a72:	4621      	mov	r1, r4
 8005a74:	4630      	mov	r0, r6
 8005a76:	f000 fa01 	bl	8005e7c <__smakebuf_r>
 8005a7a:	89a0      	ldrh	r0, [r4, #12]
 8005a7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a80:	f010 0301 	ands.w	r3, r0, #1
 8005a84:	d00a      	beq.n	8005a9c <__swsetup_r+0xbc>
 8005a86:	2300      	movs	r3, #0
 8005a88:	60a3      	str	r3, [r4, #8]
 8005a8a:	6963      	ldr	r3, [r4, #20]
 8005a8c:	425b      	negs	r3, r3
 8005a8e:	61a3      	str	r3, [r4, #24]
 8005a90:	6923      	ldr	r3, [r4, #16]
 8005a92:	b943      	cbnz	r3, 8005aa6 <__swsetup_r+0xc6>
 8005a94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a98:	d1ba      	bne.n	8005a10 <__swsetup_r+0x30>
 8005a9a:	bd70      	pop	{r4, r5, r6, pc}
 8005a9c:	0781      	lsls	r1, r0, #30
 8005a9e:	bf58      	it	pl
 8005aa0:	6963      	ldrpl	r3, [r4, #20]
 8005aa2:	60a3      	str	r3, [r4, #8]
 8005aa4:	e7f4      	b.n	8005a90 <__swsetup_r+0xb0>
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	e7f7      	b.n	8005a9a <__swsetup_r+0xba>
 8005aaa:	bf00      	nop
 8005aac:	2000000c 	.word	0x2000000c
 8005ab0:	08006c68 	.word	0x08006c68
 8005ab4:	08006c88 	.word	0x08006c88
 8005ab8:	08006c48 	.word	0x08006c48

08005abc <__sflush_r>:
 8005abc:	898a      	ldrh	r2, [r1, #12]
 8005abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac2:	4605      	mov	r5, r0
 8005ac4:	0710      	lsls	r0, r2, #28
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	d458      	bmi.n	8005b7c <__sflush_r+0xc0>
 8005aca:	684b      	ldr	r3, [r1, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	dc05      	bgt.n	8005adc <__sflush_r+0x20>
 8005ad0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	dc02      	bgt.n	8005adc <__sflush_r+0x20>
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005adc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ade:	2e00      	cmp	r6, #0
 8005ae0:	d0f9      	beq.n	8005ad6 <__sflush_r+0x1a>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ae8:	682f      	ldr	r7, [r5, #0]
 8005aea:	602b      	str	r3, [r5, #0]
 8005aec:	d032      	beq.n	8005b54 <__sflush_r+0x98>
 8005aee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005af0:	89a3      	ldrh	r3, [r4, #12]
 8005af2:	075a      	lsls	r2, r3, #29
 8005af4:	d505      	bpl.n	8005b02 <__sflush_r+0x46>
 8005af6:	6863      	ldr	r3, [r4, #4]
 8005af8:	1ac0      	subs	r0, r0, r3
 8005afa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005afc:	b10b      	cbz	r3, 8005b02 <__sflush_r+0x46>
 8005afe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b00:	1ac0      	subs	r0, r0, r3
 8005b02:	2300      	movs	r3, #0
 8005b04:	4602      	mov	r2, r0
 8005b06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b08:	6a21      	ldr	r1, [r4, #32]
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	47b0      	blx	r6
 8005b0e:	1c43      	adds	r3, r0, #1
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	d106      	bne.n	8005b22 <__sflush_r+0x66>
 8005b14:	6829      	ldr	r1, [r5, #0]
 8005b16:	291d      	cmp	r1, #29
 8005b18:	d82c      	bhi.n	8005b74 <__sflush_r+0xb8>
 8005b1a:	4a2a      	ldr	r2, [pc, #168]	; (8005bc4 <__sflush_r+0x108>)
 8005b1c:	40ca      	lsrs	r2, r1
 8005b1e:	07d6      	lsls	r6, r2, #31
 8005b20:	d528      	bpl.n	8005b74 <__sflush_r+0xb8>
 8005b22:	2200      	movs	r2, #0
 8005b24:	6062      	str	r2, [r4, #4]
 8005b26:	04d9      	lsls	r1, r3, #19
 8005b28:	6922      	ldr	r2, [r4, #16]
 8005b2a:	6022      	str	r2, [r4, #0]
 8005b2c:	d504      	bpl.n	8005b38 <__sflush_r+0x7c>
 8005b2e:	1c42      	adds	r2, r0, #1
 8005b30:	d101      	bne.n	8005b36 <__sflush_r+0x7a>
 8005b32:	682b      	ldr	r3, [r5, #0]
 8005b34:	b903      	cbnz	r3, 8005b38 <__sflush_r+0x7c>
 8005b36:	6560      	str	r0, [r4, #84]	; 0x54
 8005b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b3a:	602f      	str	r7, [r5, #0]
 8005b3c:	2900      	cmp	r1, #0
 8005b3e:	d0ca      	beq.n	8005ad6 <__sflush_r+0x1a>
 8005b40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b44:	4299      	cmp	r1, r3
 8005b46:	d002      	beq.n	8005b4e <__sflush_r+0x92>
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f000 f9df 	bl	8005f0c <_free_r>
 8005b4e:	2000      	movs	r0, #0
 8005b50:	6360      	str	r0, [r4, #52]	; 0x34
 8005b52:	e7c1      	b.n	8005ad8 <__sflush_r+0x1c>
 8005b54:	6a21      	ldr	r1, [r4, #32]
 8005b56:	2301      	movs	r3, #1
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b0      	blx	r6
 8005b5c:	1c41      	adds	r1, r0, #1
 8005b5e:	d1c7      	bne.n	8005af0 <__sflush_r+0x34>
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0c4      	beq.n	8005af0 <__sflush_r+0x34>
 8005b66:	2b1d      	cmp	r3, #29
 8005b68:	d001      	beq.n	8005b6e <__sflush_r+0xb2>
 8005b6a:	2b16      	cmp	r3, #22
 8005b6c:	d101      	bne.n	8005b72 <__sflush_r+0xb6>
 8005b6e:	602f      	str	r7, [r5, #0]
 8005b70:	e7b1      	b.n	8005ad6 <__sflush_r+0x1a>
 8005b72:	89a3      	ldrh	r3, [r4, #12]
 8005b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b78:	81a3      	strh	r3, [r4, #12]
 8005b7a:	e7ad      	b.n	8005ad8 <__sflush_r+0x1c>
 8005b7c:	690f      	ldr	r7, [r1, #16]
 8005b7e:	2f00      	cmp	r7, #0
 8005b80:	d0a9      	beq.n	8005ad6 <__sflush_r+0x1a>
 8005b82:	0793      	lsls	r3, r2, #30
 8005b84:	680e      	ldr	r6, [r1, #0]
 8005b86:	bf08      	it	eq
 8005b88:	694b      	ldreq	r3, [r1, #20]
 8005b8a:	600f      	str	r7, [r1, #0]
 8005b8c:	bf18      	it	ne
 8005b8e:	2300      	movne	r3, #0
 8005b90:	eba6 0807 	sub.w	r8, r6, r7
 8005b94:	608b      	str	r3, [r1, #8]
 8005b96:	f1b8 0f00 	cmp.w	r8, #0
 8005b9a:	dd9c      	ble.n	8005ad6 <__sflush_r+0x1a>
 8005b9c:	6a21      	ldr	r1, [r4, #32]
 8005b9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ba0:	4643      	mov	r3, r8
 8005ba2:	463a      	mov	r2, r7
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	47b0      	blx	r6
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	dc06      	bgt.n	8005bba <__sflush_r+0xfe>
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bb2:	81a3      	strh	r3, [r4, #12]
 8005bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bb8:	e78e      	b.n	8005ad8 <__sflush_r+0x1c>
 8005bba:	4407      	add	r7, r0
 8005bbc:	eba8 0800 	sub.w	r8, r8, r0
 8005bc0:	e7e9      	b.n	8005b96 <__sflush_r+0xda>
 8005bc2:	bf00      	nop
 8005bc4:	20400001 	.word	0x20400001

08005bc8 <_fflush_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	690b      	ldr	r3, [r1, #16]
 8005bcc:	4605      	mov	r5, r0
 8005bce:	460c      	mov	r4, r1
 8005bd0:	b913      	cbnz	r3, 8005bd8 <_fflush_r+0x10>
 8005bd2:	2500      	movs	r5, #0
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}
 8005bd8:	b118      	cbz	r0, 8005be2 <_fflush_r+0x1a>
 8005bda:	6983      	ldr	r3, [r0, #24]
 8005bdc:	b90b      	cbnz	r3, 8005be2 <_fflush_r+0x1a>
 8005bde:	f000 f887 	bl	8005cf0 <__sinit>
 8005be2:	4b14      	ldr	r3, [pc, #80]	; (8005c34 <_fflush_r+0x6c>)
 8005be4:	429c      	cmp	r4, r3
 8005be6:	d11b      	bne.n	8005c20 <_fflush_r+0x58>
 8005be8:	686c      	ldr	r4, [r5, #4]
 8005bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0ef      	beq.n	8005bd2 <_fflush_r+0xa>
 8005bf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005bf4:	07d0      	lsls	r0, r2, #31
 8005bf6:	d404      	bmi.n	8005c02 <_fflush_r+0x3a>
 8005bf8:	0599      	lsls	r1, r3, #22
 8005bfa:	d402      	bmi.n	8005c02 <_fflush_r+0x3a>
 8005bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bfe:	f000 f915 	bl	8005e2c <__retarget_lock_acquire_recursive>
 8005c02:	4628      	mov	r0, r5
 8005c04:	4621      	mov	r1, r4
 8005c06:	f7ff ff59 	bl	8005abc <__sflush_r>
 8005c0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c0c:	07da      	lsls	r2, r3, #31
 8005c0e:	4605      	mov	r5, r0
 8005c10:	d4e0      	bmi.n	8005bd4 <_fflush_r+0xc>
 8005c12:	89a3      	ldrh	r3, [r4, #12]
 8005c14:	059b      	lsls	r3, r3, #22
 8005c16:	d4dd      	bmi.n	8005bd4 <_fflush_r+0xc>
 8005c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c1a:	f000 f908 	bl	8005e2e <__retarget_lock_release_recursive>
 8005c1e:	e7d9      	b.n	8005bd4 <_fflush_r+0xc>
 8005c20:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <_fflush_r+0x70>)
 8005c22:	429c      	cmp	r4, r3
 8005c24:	d101      	bne.n	8005c2a <_fflush_r+0x62>
 8005c26:	68ac      	ldr	r4, [r5, #8]
 8005c28:	e7df      	b.n	8005bea <_fflush_r+0x22>
 8005c2a:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <_fflush_r+0x74>)
 8005c2c:	429c      	cmp	r4, r3
 8005c2e:	bf08      	it	eq
 8005c30:	68ec      	ldreq	r4, [r5, #12]
 8005c32:	e7da      	b.n	8005bea <_fflush_r+0x22>
 8005c34:	08006c68 	.word	0x08006c68
 8005c38:	08006c88 	.word	0x08006c88
 8005c3c:	08006c48 	.word	0x08006c48

08005c40 <std>:
 8005c40:	2300      	movs	r3, #0
 8005c42:	b510      	push	{r4, lr}
 8005c44:	4604      	mov	r4, r0
 8005c46:	e9c0 3300 	strd	r3, r3, [r0]
 8005c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c4e:	6083      	str	r3, [r0, #8]
 8005c50:	8181      	strh	r1, [r0, #12]
 8005c52:	6643      	str	r3, [r0, #100]	; 0x64
 8005c54:	81c2      	strh	r2, [r0, #14]
 8005c56:	6183      	str	r3, [r0, #24]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	2208      	movs	r2, #8
 8005c5c:	305c      	adds	r0, #92	; 0x5c
 8005c5e:	f7ff fd09 	bl	8005674 <memset>
 8005c62:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <std+0x38>)
 8005c64:	6263      	str	r3, [r4, #36]	; 0x24
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <std+0x3c>)
 8005c68:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c6a:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <std+0x40>)
 8005c6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c6e:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <std+0x44>)
 8005c70:	6224      	str	r4, [r4, #32]
 8005c72:	6323      	str	r3, [r4, #48]	; 0x30
 8005c74:	bd10      	pop	{r4, pc}
 8005c76:	bf00      	nop
 8005c78:	080066c9 	.word	0x080066c9
 8005c7c:	080066eb 	.word	0x080066eb
 8005c80:	08006723 	.word	0x08006723
 8005c84:	08006747 	.word	0x08006747

08005c88 <_cleanup_r>:
 8005c88:	4901      	ldr	r1, [pc, #4]	; (8005c90 <_cleanup_r+0x8>)
 8005c8a:	f000 b8af 	b.w	8005dec <_fwalk_reent>
 8005c8e:	bf00      	nop
 8005c90:	08005bc9 	.word	0x08005bc9

08005c94 <__sfmoreglue>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	2268      	movs	r2, #104	; 0x68
 8005c98:	1e4d      	subs	r5, r1, #1
 8005c9a:	4355      	muls	r5, r2
 8005c9c:	460e      	mov	r6, r1
 8005c9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ca2:	f000 f99f 	bl	8005fe4 <_malloc_r>
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	b140      	cbz	r0, 8005cbc <__sfmoreglue+0x28>
 8005caa:	2100      	movs	r1, #0
 8005cac:	e9c0 1600 	strd	r1, r6, [r0]
 8005cb0:	300c      	adds	r0, #12
 8005cb2:	60a0      	str	r0, [r4, #8]
 8005cb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005cb8:	f7ff fcdc 	bl	8005674 <memset>
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	bd70      	pop	{r4, r5, r6, pc}

08005cc0 <__sfp_lock_acquire>:
 8005cc0:	4801      	ldr	r0, [pc, #4]	; (8005cc8 <__sfp_lock_acquire+0x8>)
 8005cc2:	f000 b8b3 	b.w	8005e2c <__retarget_lock_acquire_recursive>
 8005cc6:	bf00      	nop
 8005cc8:	20000889 	.word	0x20000889

08005ccc <__sfp_lock_release>:
 8005ccc:	4801      	ldr	r0, [pc, #4]	; (8005cd4 <__sfp_lock_release+0x8>)
 8005cce:	f000 b8ae 	b.w	8005e2e <__retarget_lock_release_recursive>
 8005cd2:	bf00      	nop
 8005cd4:	20000889 	.word	0x20000889

08005cd8 <__sinit_lock_acquire>:
 8005cd8:	4801      	ldr	r0, [pc, #4]	; (8005ce0 <__sinit_lock_acquire+0x8>)
 8005cda:	f000 b8a7 	b.w	8005e2c <__retarget_lock_acquire_recursive>
 8005cde:	bf00      	nop
 8005ce0:	2000088a 	.word	0x2000088a

08005ce4 <__sinit_lock_release>:
 8005ce4:	4801      	ldr	r0, [pc, #4]	; (8005cec <__sinit_lock_release+0x8>)
 8005ce6:	f000 b8a2 	b.w	8005e2e <__retarget_lock_release_recursive>
 8005cea:	bf00      	nop
 8005cec:	2000088a 	.word	0x2000088a

08005cf0 <__sinit>:
 8005cf0:	b510      	push	{r4, lr}
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	f7ff fff0 	bl	8005cd8 <__sinit_lock_acquire>
 8005cf8:	69a3      	ldr	r3, [r4, #24]
 8005cfa:	b11b      	cbz	r3, 8005d04 <__sinit+0x14>
 8005cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d00:	f7ff bff0 	b.w	8005ce4 <__sinit_lock_release>
 8005d04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d08:	6523      	str	r3, [r4, #80]	; 0x50
 8005d0a:	4b13      	ldr	r3, [pc, #76]	; (8005d58 <__sinit+0x68>)
 8005d0c:	4a13      	ldr	r2, [pc, #76]	; (8005d5c <__sinit+0x6c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d12:	42a3      	cmp	r3, r4
 8005d14:	bf04      	itt	eq
 8005d16:	2301      	moveq	r3, #1
 8005d18:	61a3      	streq	r3, [r4, #24]
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f000 f820 	bl	8005d60 <__sfp>
 8005d20:	6060      	str	r0, [r4, #4]
 8005d22:	4620      	mov	r0, r4
 8005d24:	f000 f81c 	bl	8005d60 <__sfp>
 8005d28:	60a0      	str	r0, [r4, #8]
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f000 f818 	bl	8005d60 <__sfp>
 8005d30:	2200      	movs	r2, #0
 8005d32:	60e0      	str	r0, [r4, #12]
 8005d34:	2104      	movs	r1, #4
 8005d36:	6860      	ldr	r0, [r4, #4]
 8005d38:	f7ff ff82 	bl	8005c40 <std>
 8005d3c:	68a0      	ldr	r0, [r4, #8]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	2109      	movs	r1, #9
 8005d42:	f7ff ff7d 	bl	8005c40 <std>
 8005d46:	68e0      	ldr	r0, [r4, #12]
 8005d48:	2202      	movs	r2, #2
 8005d4a:	2112      	movs	r1, #18
 8005d4c:	f7ff ff78 	bl	8005c40 <std>
 8005d50:	2301      	movs	r3, #1
 8005d52:	61a3      	str	r3, [r4, #24]
 8005d54:	e7d2      	b.n	8005cfc <__sinit+0xc>
 8005d56:	bf00      	nop
 8005d58:	08006c44 	.word	0x08006c44
 8005d5c:	08005c89 	.word	0x08005c89

08005d60 <__sfp>:
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	4607      	mov	r7, r0
 8005d64:	f7ff ffac 	bl	8005cc0 <__sfp_lock_acquire>
 8005d68:	4b1e      	ldr	r3, [pc, #120]	; (8005de4 <__sfp+0x84>)
 8005d6a:	681e      	ldr	r6, [r3, #0]
 8005d6c:	69b3      	ldr	r3, [r6, #24]
 8005d6e:	b913      	cbnz	r3, 8005d76 <__sfp+0x16>
 8005d70:	4630      	mov	r0, r6
 8005d72:	f7ff ffbd 	bl	8005cf0 <__sinit>
 8005d76:	3648      	adds	r6, #72	; 0x48
 8005d78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	d503      	bpl.n	8005d88 <__sfp+0x28>
 8005d80:	6833      	ldr	r3, [r6, #0]
 8005d82:	b30b      	cbz	r3, 8005dc8 <__sfp+0x68>
 8005d84:	6836      	ldr	r6, [r6, #0]
 8005d86:	e7f7      	b.n	8005d78 <__sfp+0x18>
 8005d88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d8c:	b9d5      	cbnz	r5, 8005dc4 <__sfp+0x64>
 8005d8e:	4b16      	ldr	r3, [pc, #88]	; (8005de8 <__sfp+0x88>)
 8005d90:	60e3      	str	r3, [r4, #12]
 8005d92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d96:	6665      	str	r5, [r4, #100]	; 0x64
 8005d98:	f000 f847 	bl	8005e2a <__retarget_lock_init_recursive>
 8005d9c:	f7ff ff96 	bl	8005ccc <__sfp_lock_release>
 8005da0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005da4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005da8:	6025      	str	r5, [r4, #0]
 8005daa:	61a5      	str	r5, [r4, #24]
 8005dac:	2208      	movs	r2, #8
 8005dae:	4629      	mov	r1, r5
 8005db0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005db4:	f7ff fc5e 	bl	8005674 <memset>
 8005db8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005dbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dc4:	3468      	adds	r4, #104	; 0x68
 8005dc6:	e7d9      	b.n	8005d7c <__sfp+0x1c>
 8005dc8:	2104      	movs	r1, #4
 8005dca:	4638      	mov	r0, r7
 8005dcc:	f7ff ff62 	bl	8005c94 <__sfmoreglue>
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	6030      	str	r0, [r6, #0]
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	d1d5      	bne.n	8005d84 <__sfp+0x24>
 8005dd8:	f7ff ff78 	bl	8005ccc <__sfp_lock_release>
 8005ddc:	230c      	movs	r3, #12
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	e7ee      	b.n	8005dc0 <__sfp+0x60>
 8005de2:	bf00      	nop
 8005de4:	08006c44 	.word	0x08006c44
 8005de8:	ffff0001 	.word	0xffff0001

08005dec <_fwalk_reent>:
 8005dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005df0:	4606      	mov	r6, r0
 8005df2:	4688      	mov	r8, r1
 8005df4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005df8:	2700      	movs	r7, #0
 8005dfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dfe:	f1b9 0901 	subs.w	r9, r9, #1
 8005e02:	d505      	bpl.n	8005e10 <_fwalk_reent+0x24>
 8005e04:	6824      	ldr	r4, [r4, #0]
 8005e06:	2c00      	cmp	r4, #0
 8005e08:	d1f7      	bne.n	8005dfa <_fwalk_reent+0xe>
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e10:	89ab      	ldrh	r3, [r5, #12]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d907      	bls.n	8005e26 <_fwalk_reent+0x3a>
 8005e16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	d003      	beq.n	8005e26 <_fwalk_reent+0x3a>
 8005e1e:	4629      	mov	r1, r5
 8005e20:	4630      	mov	r0, r6
 8005e22:	47c0      	blx	r8
 8005e24:	4307      	orrs	r7, r0
 8005e26:	3568      	adds	r5, #104	; 0x68
 8005e28:	e7e9      	b.n	8005dfe <_fwalk_reent+0x12>

08005e2a <__retarget_lock_init_recursive>:
 8005e2a:	4770      	bx	lr

08005e2c <__retarget_lock_acquire_recursive>:
 8005e2c:	4770      	bx	lr

08005e2e <__retarget_lock_release_recursive>:
 8005e2e:	4770      	bx	lr

08005e30 <__swhatbuf_r>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	460e      	mov	r6, r1
 8005e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e38:	2900      	cmp	r1, #0
 8005e3a:	b096      	sub	sp, #88	; 0x58
 8005e3c:	4614      	mov	r4, r2
 8005e3e:	461d      	mov	r5, r3
 8005e40:	da08      	bge.n	8005e54 <__swhatbuf_r+0x24>
 8005e42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	602a      	str	r2, [r5, #0]
 8005e4a:	061a      	lsls	r2, r3, #24
 8005e4c:	d410      	bmi.n	8005e70 <__swhatbuf_r+0x40>
 8005e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e52:	e00e      	b.n	8005e72 <__swhatbuf_r+0x42>
 8005e54:	466a      	mov	r2, sp
 8005e56:	f000 fc9d 	bl	8006794 <_fstat_r>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	dbf1      	blt.n	8005e42 <__swhatbuf_r+0x12>
 8005e5e:	9a01      	ldr	r2, [sp, #4]
 8005e60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e68:	425a      	negs	r2, r3
 8005e6a:	415a      	adcs	r2, r3
 8005e6c:	602a      	str	r2, [r5, #0]
 8005e6e:	e7ee      	b.n	8005e4e <__swhatbuf_r+0x1e>
 8005e70:	2340      	movs	r3, #64	; 0x40
 8005e72:	2000      	movs	r0, #0
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	b016      	add	sp, #88	; 0x58
 8005e78:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e7c <__smakebuf_r>:
 8005e7c:	898b      	ldrh	r3, [r1, #12]
 8005e7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e80:	079d      	lsls	r5, r3, #30
 8005e82:	4606      	mov	r6, r0
 8005e84:	460c      	mov	r4, r1
 8005e86:	d507      	bpl.n	8005e98 <__smakebuf_r+0x1c>
 8005e88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	6123      	str	r3, [r4, #16]
 8005e90:	2301      	movs	r3, #1
 8005e92:	6163      	str	r3, [r4, #20]
 8005e94:	b002      	add	sp, #8
 8005e96:	bd70      	pop	{r4, r5, r6, pc}
 8005e98:	ab01      	add	r3, sp, #4
 8005e9a:	466a      	mov	r2, sp
 8005e9c:	f7ff ffc8 	bl	8005e30 <__swhatbuf_r>
 8005ea0:	9900      	ldr	r1, [sp, #0]
 8005ea2:	4605      	mov	r5, r0
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	f000 f89d 	bl	8005fe4 <_malloc_r>
 8005eaa:	b948      	cbnz	r0, 8005ec0 <__smakebuf_r+0x44>
 8005eac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eb0:	059a      	lsls	r2, r3, #22
 8005eb2:	d4ef      	bmi.n	8005e94 <__smakebuf_r+0x18>
 8005eb4:	f023 0303 	bic.w	r3, r3, #3
 8005eb8:	f043 0302 	orr.w	r3, r3, #2
 8005ebc:	81a3      	strh	r3, [r4, #12]
 8005ebe:	e7e3      	b.n	8005e88 <__smakebuf_r+0xc>
 8005ec0:	4b0d      	ldr	r3, [pc, #52]	; (8005ef8 <__smakebuf_r+0x7c>)
 8005ec2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	6020      	str	r0, [r4, #0]
 8005ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ecc:	81a3      	strh	r3, [r4, #12]
 8005ece:	9b00      	ldr	r3, [sp, #0]
 8005ed0:	6163      	str	r3, [r4, #20]
 8005ed2:	9b01      	ldr	r3, [sp, #4]
 8005ed4:	6120      	str	r0, [r4, #16]
 8005ed6:	b15b      	cbz	r3, 8005ef0 <__smakebuf_r+0x74>
 8005ed8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005edc:	4630      	mov	r0, r6
 8005ede:	f000 fc6b 	bl	80067b8 <_isatty_r>
 8005ee2:	b128      	cbz	r0, 8005ef0 <__smakebuf_r+0x74>
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	f023 0303 	bic.w	r3, r3, #3
 8005eea:	f043 0301 	orr.w	r3, r3, #1
 8005eee:	81a3      	strh	r3, [r4, #12]
 8005ef0:	89a0      	ldrh	r0, [r4, #12]
 8005ef2:	4305      	orrs	r5, r0
 8005ef4:	81a5      	strh	r5, [r4, #12]
 8005ef6:	e7cd      	b.n	8005e94 <__smakebuf_r+0x18>
 8005ef8:	08005c89 	.word	0x08005c89

08005efc <malloc>:
 8005efc:	4b02      	ldr	r3, [pc, #8]	; (8005f08 <malloc+0xc>)
 8005efe:	4601      	mov	r1, r0
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	f000 b86f 	b.w	8005fe4 <_malloc_r>
 8005f06:	bf00      	nop
 8005f08:	2000000c 	.word	0x2000000c

08005f0c <_free_r>:
 8005f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f0e:	2900      	cmp	r1, #0
 8005f10:	d044      	beq.n	8005f9c <_free_r+0x90>
 8005f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f16:	9001      	str	r0, [sp, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f1a1 0404 	sub.w	r4, r1, #4
 8005f1e:	bfb8      	it	lt
 8005f20:	18e4      	addlt	r4, r4, r3
 8005f22:	f000 fc6b 	bl	80067fc <__malloc_lock>
 8005f26:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <_free_r+0x94>)
 8005f28:	9801      	ldr	r0, [sp, #4]
 8005f2a:	6813      	ldr	r3, [r2, #0]
 8005f2c:	b933      	cbnz	r3, 8005f3c <_free_r+0x30>
 8005f2e:	6063      	str	r3, [r4, #4]
 8005f30:	6014      	str	r4, [r2, #0]
 8005f32:	b003      	add	sp, #12
 8005f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f38:	f000 bc66 	b.w	8006808 <__malloc_unlock>
 8005f3c:	42a3      	cmp	r3, r4
 8005f3e:	d908      	bls.n	8005f52 <_free_r+0x46>
 8005f40:	6825      	ldr	r5, [r4, #0]
 8005f42:	1961      	adds	r1, r4, r5
 8005f44:	428b      	cmp	r3, r1
 8005f46:	bf01      	itttt	eq
 8005f48:	6819      	ldreq	r1, [r3, #0]
 8005f4a:	685b      	ldreq	r3, [r3, #4]
 8005f4c:	1949      	addeq	r1, r1, r5
 8005f4e:	6021      	streq	r1, [r4, #0]
 8005f50:	e7ed      	b.n	8005f2e <_free_r+0x22>
 8005f52:	461a      	mov	r2, r3
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	b10b      	cbz	r3, 8005f5c <_free_r+0x50>
 8005f58:	42a3      	cmp	r3, r4
 8005f5a:	d9fa      	bls.n	8005f52 <_free_r+0x46>
 8005f5c:	6811      	ldr	r1, [r2, #0]
 8005f5e:	1855      	adds	r5, r2, r1
 8005f60:	42a5      	cmp	r5, r4
 8005f62:	d10b      	bne.n	8005f7c <_free_r+0x70>
 8005f64:	6824      	ldr	r4, [r4, #0]
 8005f66:	4421      	add	r1, r4
 8005f68:	1854      	adds	r4, r2, r1
 8005f6a:	42a3      	cmp	r3, r4
 8005f6c:	6011      	str	r1, [r2, #0]
 8005f6e:	d1e0      	bne.n	8005f32 <_free_r+0x26>
 8005f70:	681c      	ldr	r4, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	6053      	str	r3, [r2, #4]
 8005f76:	4421      	add	r1, r4
 8005f78:	6011      	str	r1, [r2, #0]
 8005f7a:	e7da      	b.n	8005f32 <_free_r+0x26>
 8005f7c:	d902      	bls.n	8005f84 <_free_r+0x78>
 8005f7e:	230c      	movs	r3, #12
 8005f80:	6003      	str	r3, [r0, #0]
 8005f82:	e7d6      	b.n	8005f32 <_free_r+0x26>
 8005f84:	6825      	ldr	r5, [r4, #0]
 8005f86:	1961      	adds	r1, r4, r5
 8005f88:	428b      	cmp	r3, r1
 8005f8a:	bf04      	itt	eq
 8005f8c:	6819      	ldreq	r1, [r3, #0]
 8005f8e:	685b      	ldreq	r3, [r3, #4]
 8005f90:	6063      	str	r3, [r4, #4]
 8005f92:	bf04      	itt	eq
 8005f94:	1949      	addeq	r1, r1, r5
 8005f96:	6021      	streq	r1, [r4, #0]
 8005f98:	6054      	str	r4, [r2, #4]
 8005f9a:	e7ca      	b.n	8005f32 <_free_r+0x26>
 8005f9c:	b003      	add	sp, #12
 8005f9e:	bd30      	pop	{r4, r5, pc}
 8005fa0:	2000088c 	.word	0x2000088c

08005fa4 <sbrk_aligned>:
 8005fa4:	b570      	push	{r4, r5, r6, lr}
 8005fa6:	4e0e      	ldr	r6, [pc, #56]	; (8005fe0 <sbrk_aligned+0x3c>)
 8005fa8:	460c      	mov	r4, r1
 8005faa:	6831      	ldr	r1, [r6, #0]
 8005fac:	4605      	mov	r5, r0
 8005fae:	b911      	cbnz	r1, 8005fb6 <sbrk_aligned+0x12>
 8005fb0:	f000 fb7a 	bl	80066a8 <_sbrk_r>
 8005fb4:	6030      	str	r0, [r6, #0]
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	4628      	mov	r0, r5
 8005fba:	f000 fb75 	bl	80066a8 <_sbrk_r>
 8005fbe:	1c43      	adds	r3, r0, #1
 8005fc0:	d00a      	beq.n	8005fd8 <sbrk_aligned+0x34>
 8005fc2:	1cc4      	adds	r4, r0, #3
 8005fc4:	f024 0403 	bic.w	r4, r4, #3
 8005fc8:	42a0      	cmp	r0, r4
 8005fca:	d007      	beq.n	8005fdc <sbrk_aligned+0x38>
 8005fcc:	1a21      	subs	r1, r4, r0
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f000 fb6a 	bl	80066a8 <_sbrk_r>
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d101      	bne.n	8005fdc <sbrk_aligned+0x38>
 8005fd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005fdc:	4620      	mov	r0, r4
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
 8005fe0:	20000890 	.word	0x20000890

08005fe4 <_malloc_r>:
 8005fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe8:	1ccd      	adds	r5, r1, #3
 8005fea:	f025 0503 	bic.w	r5, r5, #3
 8005fee:	3508      	adds	r5, #8
 8005ff0:	2d0c      	cmp	r5, #12
 8005ff2:	bf38      	it	cc
 8005ff4:	250c      	movcc	r5, #12
 8005ff6:	2d00      	cmp	r5, #0
 8005ff8:	4607      	mov	r7, r0
 8005ffa:	db01      	blt.n	8006000 <_malloc_r+0x1c>
 8005ffc:	42a9      	cmp	r1, r5
 8005ffe:	d905      	bls.n	800600c <_malloc_r+0x28>
 8006000:	230c      	movs	r3, #12
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	2600      	movs	r6, #0
 8006006:	4630      	mov	r0, r6
 8006008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800600c:	4e2e      	ldr	r6, [pc, #184]	; (80060c8 <_malloc_r+0xe4>)
 800600e:	f000 fbf5 	bl	80067fc <__malloc_lock>
 8006012:	6833      	ldr	r3, [r6, #0]
 8006014:	461c      	mov	r4, r3
 8006016:	bb34      	cbnz	r4, 8006066 <_malloc_r+0x82>
 8006018:	4629      	mov	r1, r5
 800601a:	4638      	mov	r0, r7
 800601c:	f7ff ffc2 	bl	8005fa4 <sbrk_aligned>
 8006020:	1c43      	adds	r3, r0, #1
 8006022:	4604      	mov	r4, r0
 8006024:	d14d      	bne.n	80060c2 <_malloc_r+0xde>
 8006026:	6834      	ldr	r4, [r6, #0]
 8006028:	4626      	mov	r6, r4
 800602a:	2e00      	cmp	r6, #0
 800602c:	d140      	bne.n	80060b0 <_malloc_r+0xcc>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	4631      	mov	r1, r6
 8006032:	4638      	mov	r0, r7
 8006034:	eb04 0803 	add.w	r8, r4, r3
 8006038:	f000 fb36 	bl	80066a8 <_sbrk_r>
 800603c:	4580      	cmp	r8, r0
 800603e:	d13a      	bne.n	80060b6 <_malloc_r+0xd2>
 8006040:	6821      	ldr	r1, [r4, #0]
 8006042:	3503      	adds	r5, #3
 8006044:	1a6d      	subs	r5, r5, r1
 8006046:	f025 0503 	bic.w	r5, r5, #3
 800604a:	3508      	adds	r5, #8
 800604c:	2d0c      	cmp	r5, #12
 800604e:	bf38      	it	cc
 8006050:	250c      	movcc	r5, #12
 8006052:	4629      	mov	r1, r5
 8006054:	4638      	mov	r0, r7
 8006056:	f7ff ffa5 	bl	8005fa4 <sbrk_aligned>
 800605a:	3001      	adds	r0, #1
 800605c:	d02b      	beq.n	80060b6 <_malloc_r+0xd2>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	442b      	add	r3, r5
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	e00e      	b.n	8006084 <_malloc_r+0xa0>
 8006066:	6822      	ldr	r2, [r4, #0]
 8006068:	1b52      	subs	r2, r2, r5
 800606a:	d41e      	bmi.n	80060aa <_malloc_r+0xc6>
 800606c:	2a0b      	cmp	r2, #11
 800606e:	d916      	bls.n	800609e <_malloc_r+0xba>
 8006070:	1961      	adds	r1, r4, r5
 8006072:	42a3      	cmp	r3, r4
 8006074:	6025      	str	r5, [r4, #0]
 8006076:	bf18      	it	ne
 8006078:	6059      	strne	r1, [r3, #4]
 800607a:	6863      	ldr	r3, [r4, #4]
 800607c:	bf08      	it	eq
 800607e:	6031      	streq	r1, [r6, #0]
 8006080:	5162      	str	r2, [r4, r5]
 8006082:	604b      	str	r3, [r1, #4]
 8006084:	4638      	mov	r0, r7
 8006086:	f104 060b 	add.w	r6, r4, #11
 800608a:	f000 fbbd 	bl	8006808 <__malloc_unlock>
 800608e:	f026 0607 	bic.w	r6, r6, #7
 8006092:	1d23      	adds	r3, r4, #4
 8006094:	1af2      	subs	r2, r6, r3
 8006096:	d0b6      	beq.n	8006006 <_malloc_r+0x22>
 8006098:	1b9b      	subs	r3, r3, r6
 800609a:	50a3      	str	r3, [r4, r2]
 800609c:	e7b3      	b.n	8006006 <_malloc_r+0x22>
 800609e:	6862      	ldr	r2, [r4, #4]
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	bf0c      	ite	eq
 80060a4:	6032      	streq	r2, [r6, #0]
 80060a6:	605a      	strne	r2, [r3, #4]
 80060a8:	e7ec      	b.n	8006084 <_malloc_r+0xa0>
 80060aa:	4623      	mov	r3, r4
 80060ac:	6864      	ldr	r4, [r4, #4]
 80060ae:	e7b2      	b.n	8006016 <_malloc_r+0x32>
 80060b0:	4634      	mov	r4, r6
 80060b2:	6876      	ldr	r6, [r6, #4]
 80060b4:	e7b9      	b.n	800602a <_malloc_r+0x46>
 80060b6:	230c      	movs	r3, #12
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	4638      	mov	r0, r7
 80060bc:	f000 fba4 	bl	8006808 <__malloc_unlock>
 80060c0:	e7a1      	b.n	8006006 <_malloc_r+0x22>
 80060c2:	6025      	str	r5, [r4, #0]
 80060c4:	e7de      	b.n	8006084 <_malloc_r+0xa0>
 80060c6:	bf00      	nop
 80060c8:	2000088c 	.word	0x2000088c

080060cc <__sfputc_r>:
 80060cc:	6893      	ldr	r3, [r2, #8]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	b410      	push	{r4}
 80060d4:	6093      	str	r3, [r2, #8]
 80060d6:	da08      	bge.n	80060ea <__sfputc_r+0x1e>
 80060d8:	6994      	ldr	r4, [r2, #24]
 80060da:	42a3      	cmp	r3, r4
 80060dc:	db01      	blt.n	80060e2 <__sfputc_r+0x16>
 80060de:	290a      	cmp	r1, #10
 80060e0:	d103      	bne.n	80060ea <__sfputc_r+0x1e>
 80060e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060e6:	f7ff bc29 	b.w	800593c <__swbuf_r>
 80060ea:	6813      	ldr	r3, [r2, #0]
 80060ec:	1c58      	adds	r0, r3, #1
 80060ee:	6010      	str	r0, [r2, #0]
 80060f0:	7019      	strb	r1, [r3, #0]
 80060f2:	4608      	mov	r0, r1
 80060f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <__sfputs_r>:
 80060fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fc:	4606      	mov	r6, r0
 80060fe:	460f      	mov	r7, r1
 8006100:	4614      	mov	r4, r2
 8006102:	18d5      	adds	r5, r2, r3
 8006104:	42ac      	cmp	r4, r5
 8006106:	d101      	bne.n	800610c <__sfputs_r+0x12>
 8006108:	2000      	movs	r0, #0
 800610a:	e007      	b.n	800611c <__sfputs_r+0x22>
 800610c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006110:	463a      	mov	r2, r7
 8006112:	4630      	mov	r0, r6
 8006114:	f7ff ffda 	bl	80060cc <__sfputc_r>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d1f3      	bne.n	8006104 <__sfputs_r+0xa>
 800611c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006120 <_vfiprintf_r>:
 8006120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006124:	460d      	mov	r5, r1
 8006126:	b09d      	sub	sp, #116	; 0x74
 8006128:	4614      	mov	r4, r2
 800612a:	4698      	mov	r8, r3
 800612c:	4606      	mov	r6, r0
 800612e:	b118      	cbz	r0, 8006138 <_vfiprintf_r+0x18>
 8006130:	6983      	ldr	r3, [r0, #24]
 8006132:	b90b      	cbnz	r3, 8006138 <_vfiprintf_r+0x18>
 8006134:	f7ff fddc 	bl	8005cf0 <__sinit>
 8006138:	4b89      	ldr	r3, [pc, #548]	; (8006360 <_vfiprintf_r+0x240>)
 800613a:	429d      	cmp	r5, r3
 800613c:	d11b      	bne.n	8006176 <_vfiprintf_r+0x56>
 800613e:	6875      	ldr	r5, [r6, #4]
 8006140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006142:	07d9      	lsls	r1, r3, #31
 8006144:	d405      	bmi.n	8006152 <_vfiprintf_r+0x32>
 8006146:	89ab      	ldrh	r3, [r5, #12]
 8006148:	059a      	lsls	r2, r3, #22
 800614a:	d402      	bmi.n	8006152 <_vfiprintf_r+0x32>
 800614c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800614e:	f7ff fe6d 	bl	8005e2c <__retarget_lock_acquire_recursive>
 8006152:	89ab      	ldrh	r3, [r5, #12]
 8006154:	071b      	lsls	r3, r3, #28
 8006156:	d501      	bpl.n	800615c <_vfiprintf_r+0x3c>
 8006158:	692b      	ldr	r3, [r5, #16]
 800615a:	b9eb      	cbnz	r3, 8006198 <_vfiprintf_r+0x78>
 800615c:	4629      	mov	r1, r5
 800615e:	4630      	mov	r0, r6
 8006160:	f7ff fc3e 	bl	80059e0 <__swsetup_r>
 8006164:	b1c0      	cbz	r0, 8006198 <_vfiprintf_r+0x78>
 8006166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006168:	07dc      	lsls	r4, r3, #31
 800616a:	d50e      	bpl.n	800618a <_vfiprintf_r+0x6a>
 800616c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006170:	b01d      	add	sp, #116	; 0x74
 8006172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006176:	4b7b      	ldr	r3, [pc, #492]	; (8006364 <_vfiprintf_r+0x244>)
 8006178:	429d      	cmp	r5, r3
 800617a:	d101      	bne.n	8006180 <_vfiprintf_r+0x60>
 800617c:	68b5      	ldr	r5, [r6, #8]
 800617e:	e7df      	b.n	8006140 <_vfiprintf_r+0x20>
 8006180:	4b79      	ldr	r3, [pc, #484]	; (8006368 <_vfiprintf_r+0x248>)
 8006182:	429d      	cmp	r5, r3
 8006184:	bf08      	it	eq
 8006186:	68f5      	ldreq	r5, [r6, #12]
 8006188:	e7da      	b.n	8006140 <_vfiprintf_r+0x20>
 800618a:	89ab      	ldrh	r3, [r5, #12]
 800618c:	0598      	lsls	r0, r3, #22
 800618e:	d4ed      	bmi.n	800616c <_vfiprintf_r+0x4c>
 8006190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006192:	f7ff fe4c 	bl	8005e2e <__retarget_lock_release_recursive>
 8006196:	e7e9      	b.n	800616c <_vfiprintf_r+0x4c>
 8006198:	2300      	movs	r3, #0
 800619a:	9309      	str	r3, [sp, #36]	; 0x24
 800619c:	2320      	movs	r3, #32
 800619e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80061a6:	2330      	movs	r3, #48	; 0x30
 80061a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800636c <_vfiprintf_r+0x24c>
 80061ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061b0:	f04f 0901 	mov.w	r9, #1
 80061b4:	4623      	mov	r3, r4
 80061b6:	469a      	mov	sl, r3
 80061b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061bc:	b10a      	cbz	r2, 80061c2 <_vfiprintf_r+0xa2>
 80061be:	2a25      	cmp	r2, #37	; 0x25
 80061c0:	d1f9      	bne.n	80061b6 <_vfiprintf_r+0x96>
 80061c2:	ebba 0b04 	subs.w	fp, sl, r4
 80061c6:	d00b      	beq.n	80061e0 <_vfiprintf_r+0xc0>
 80061c8:	465b      	mov	r3, fp
 80061ca:	4622      	mov	r2, r4
 80061cc:	4629      	mov	r1, r5
 80061ce:	4630      	mov	r0, r6
 80061d0:	f7ff ff93 	bl	80060fa <__sfputs_r>
 80061d4:	3001      	adds	r0, #1
 80061d6:	f000 80aa 	beq.w	800632e <_vfiprintf_r+0x20e>
 80061da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061dc:	445a      	add	r2, fp
 80061de:	9209      	str	r2, [sp, #36]	; 0x24
 80061e0:	f89a 3000 	ldrb.w	r3, [sl]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 80a2 	beq.w	800632e <_vfiprintf_r+0x20e>
 80061ea:	2300      	movs	r3, #0
 80061ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061f4:	f10a 0a01 	add.w	sl, sl, #1
 80061f8:	9304      	str	r3, [sp, #16]
 80061fa:	9307      	str	r3, [sp, #28]
 80061fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006200:	931a      	str	r3, [sp, #104]	; 0x68
 8006202:	4654      	mov	r4, sl
 8006204:	2205      	movs	r2, #5
 8006206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800620a:	4858      	ldr	r0, [pc, #352]	; (800636c <_vfiprintf_r+0x24c>)
 800620c:	f7f9 ffe0 	bl	80001d0 <memchr>
 8006210:	9a04      	ldr	r2, [sp, #16]
 8006212:	b9d8      	cbnz	r0, 800624c <_vfiprintf_r+0x12c>
 8006214:	06d1      	lsls	r1, r2, #27
 8006216:	bf44      	itt	mi
 8006218:	2320      	movmi	r3, #32
 800621a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800621e:	0713      	lsls	r3, r2, #28
 8006220:	bf44      	itt	mi
 8006222:	232b      	movmi	r3, #43	; 0x2b
 8006224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006228:	f89a 3000 	ldrb.w	r3, [sl]
 800622c:	2b2a      	cmp	r3, #42	; 0x2a
 800622e:	d015      	beq.n	800625c <_vfiprintf_r+0x13c>
 8006230:	9a07      	ldr	r2, [sp, #28]
 8006232:	4654      	mov	r4, sl
 8006234:	2000      	movs	r0, #0
 8006236:	f04f 0c0a 	mov.w	ip, #10
 800623a:	4621      	mov	r1, r4
 800623c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006240:	3b30      	subs	r3, #48	; 0x30
 8006242:	2b09      	cmp	r3, #9
 8006244:	d94e      	bls.n	80062e4 <_vfiprintf_r+0x1c4>
 8006246:	b1b0      	cbz	r0, 8006276 <_vfiprintf_r+0x156>
 8006248:	9207      	str	r2, [sp, #28]
 800624a:	e014      	b.n	8006276 <_vfiprintf_r+0x156>
 800624c:	eba0 0308 	sub.w	r3, r0, r8
 8006250:	fa09 f303 	lsl.w	r3, r9, r3
 8006254:	4313      	orrs	r3, r2
 8006256:	9304      	str	r3, [sp, #16]
 8006258:	46a2      	mov	sl, r4
 800625a:	e7d2      	b.n	8006202 <_vfiprintf_r+0xe2>
 800625c:	9b03      	ldr	r3, [sp, #12]
 800625e:	1d19      	adds	r1, r3, #4
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	9103      	str	r1, [sp, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	bfbb      	ittet	lt
 8006268:	425b      	neglt	r3, r3
 800626a:	f042 0202 	orrlt.w	r2, r2, #2
 800626e:	9307      	strge	r3, [sp, #28]
 8006270:	9307      	strlt	r3, [sp, #28]
 8006272:	bfb8      	it	lt
 8006274:	9204      	strlt	r2, [sp, #16]
 8006276:	7823      	ldrb	r3, [r4, #0]
 8006278:	2b2e      	cmp	r3, #46	; 0x2e
 800627a:	d10c      	bne.n	8006296 <_vfiprintf_r+0x176>
 800627c:	7863      	ldrb	r3, [r4, #1]
 800627e:	2b2a      	cmp	r3, #42	; 0x2a
 8006280:	d135      	bne.n	80062ee <_vfiprintf_r+0x1ce>
 8006282:	9b03      	ldr	r3, [sp, #12]
 8006284:	1d1a      	adds	r2, r3, #4
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	9203      	str	r2, [sp, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	bfb8      	it	lt
 800628e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006292:	3402      	adds	r4, #2
 8006294:	9305      	str	r3, [sp, #20]
 8006296:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800637c <_vfiprintf_r+0x25c>
 800629a:	7821      	ldrb	r1, [r4, #0]
 800629c:	2203      	movs	r2, #3
 800629e:	4650      	mov	r0, sl
 80062a0:	f7f9 ff96 	bl	80001d0 <memchr>
 80062a4:	b140      	cbz	r0, 80062b8 <_vfiprintf_r+0x198>
 80062a6:	2340      	movs	r3, #64	; 0x40
 80062a8:	eba0 000a 	sub.w	r0, r0, sl
 80062ac:	fa03 f000 	lsl.w	r0, r3, r0
 80062b0:	9b04      	ldr	r3, [sp, #16]
 80062b2:	4303      	orrs	r3, r0
 80062b4:	3401      	adds	r4, #1
 80062b6:	9304      	str	r3, [sp, #16]
 80062b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062bc:	482c      	ldr	r0, [pc, #176]	; (8006370 <_vfiprintf_r+0x250>)
 80062be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062c2:	2206      	movs	r2, #6
 80062c4:	f7f9 ff84 	bl	80001d0 <memchr>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	d03f      	beq.n	800634c <_vfiprintf_r+0x22c>
 80062cc:	4b29      	ldr	r3, [pc, #164]	; (8006374 <_vfiprintf_r+0x254>)
 80062ce:	bb1b      	cbnz	r3, 8006318 <_vfiprintf_r+0x1f8>
 80062d0:	9b03      	ldr	r3, [sp, #12]
 80062d2:	3307      	adds	r3, #7
 80062d4:	f023 0307 	bic.w	r3, r3, #7
 80062d8:	3308      	adds	r3, #8
 80062da:	9303      	str	r3, [sp, #12]
 80062dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062de:	443b      	add	r3, r7
 80062e0:	9309      	str	r3, [sp, #36]	; 0x24
 80062e2:	e767      	b.n	80061b4 <_vfiprintf_r+0x94>
 80062e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80062e8:	460c      	mov	r4, r1
 80062ea:	2001      	movs	r0, #1
 80062ec:	e7a5      	b.n	800623a <_vfiprintf_r+0x11a>
 80062ee:	2300      	movs	r3, #0
 80062f0:	3401      	adds	r4, #1
 80062f2:	9305      	str	r3, [sp, #20]
 80062f4:	4619      	mov	r1, r3
 80062f6:	f04f 0c0a 	mov.w	ip, #10
 80062fa:	4620      	mov	r0, r4
 80062fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006300:	3a30      	subs	r2, #48	; 0x30
 8006302:	2a09      	cmp	r2, #9
 8006304:	d903      	bls.n	800630e <_vfiprintf_r+0x1ee>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0c5      	beq.n	8006296 <_vfiprintf_r+0x176>
 800630a:	9105      	str	r1, [sp, #20]
 800630c:	e7c3      	b.n	8006296 <_vfiprintf_r+0x176>
 800630e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006312:	4604      	mov	r4, r0
 8006314:	2301      	movs	r3, #1
 8006316:	e7f0      	b.n	80062fa <_vfiprintf_r+0x1da>
 8006318:	ab03      	add	r3, sp, #12
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	462a      	mov	r2, r5
 800631e:	4b16      	ldr	r3, [pc, #88]	; (8006378 <_vfiprintf_r+0x258>)
 8006320:	a904      	add	r1, sp, #16
 8006322:	4630      	mov	r0, r6
 8006324:	f3af 8000 	nop.w
 8006328:	4607      	mov	r7, r0
 800632a:	1c78      	adds	r0, r7, #1
 800632c:	d1d6      	bne.n	80062dc <_vfiprintf_r+0x1bc>
 800632e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006330:	07d9      	lsls	r1, r3, #31
 8006332:	d405      	bmi.n	8006340 <_vfiprintf_r+0x220>
 8006334:	89ab      	ldrh	r3, [r5, #12]
 8006336:	059a      	lsls	r2, r3, #22
 8006338:	d402      	bmi.n	8006340 <_vfiprintf_r+0x220>
 800633a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800633c:	f7ff fd77 	bl	8005e2e <__retarget_lock_release_recursive>
 8006340:	89ab      	ldrh	r3, [r5, #12]
 8006342:	065b      	lsls	r3, r3, #25
 8006344:	f53f af12 	bmi.w	800616c <_vfiprintf_r+0x4c>
 8006348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800634a:	e711      	b.n	8006170 <_vfiprintf_r+0x50>
 800634c:	ab03      	add	r3, sp, #12
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	462a      	mov	r2, r5
 8006352:	4b09      	ldr	r3, [pc, #36]	; (8006378 <_vfiprintf_r+0x258>)
 8006354:	a904      	add	r1, sp, #16
 8006356:	4630      	mov	r0, r6
 8006358:	f000 f880 	bl	800645c <_printf_i>
 800635c:	e7e4      	b.n	8006328 <_vfiprintf_r+0x208>
 800635e:	bf00      	nop
 8006360:	08006c68 	.word	0x08006c68
 8006364:	08006c88 	.word	0x08006c88
 8006368:	08006c48 	.word	0x08006c48
 800636c:	08006ca8 	.word	0x08006ca8
 8006370:	08006cb2 	.word	0x08006cb2
 8006374:	00000000 	.word	0x00000000
 8006378:	080060fb 	.word	0x080060fb
 800637c:	08006cae 	.word	0x08006cae

08006380 <_printf_common>:
 8006380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006384:	4616      	mov	r6, r2
 8006386:	4699      	mov	r9, r3
 8006388:	688a      	ldr	r2, [r1, #8]
 800638a:	690b      	ldr	r3, [r1, #16]
 800638c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006390:	4293      	cmp	r3, r2
 8006392:	bfb8      	it	lt
 8006394:	4613      	movlt	r3, r2
 8006396:	6033      	str	r3, [r6, #0]
 8006398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800639c:	4607      	mov	r7, r0
 800639e:	460c      	mov	r4, r1
 80063a0:	b10a      	cbz	r2, 80063a6 <_printf_common+0x26>
 80063a2:	3301      	adds	r3, #1
 80063a4:	6033      	str	r3, [r6, #0]
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	0699      	lsls	r1, r3, #26
 80063aa:	bf42      	ittt	mi
 80063ac:	6833      	ldrmi	r3, [r6, #0]
 80063ae:	3302      	addmi	r3, #2
 80063b0:	6033      	strmi	r3, [r6, #0]
 80063b2:	6825      	ldr	r5, [r4, #0]
 80063b4:	f015 0506 	ands.w	r5, r5, #6
 80063b8:	d106      	bne.n	80063c8 <_printf_common+0x48>
 80063ba:	f104 0a19 	add.w	sl, r4, #25
 80063be:	68e3      	ldr	r3, [r4, #12]
 80063c0:	6832      	ldr	r2, [r6, #0]
 80063c2:	1a9b      	subs	r3, r3, r2
 80063c4:	42ab      	cmp	r3, r5
 80063c6:	dc26      	bgt.n	8006416 <_printf_common+0x96>
 80063c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063cc:	1e13      	subs	r3, r2, #0
 80063ce:	6822      	ldr	r2, [r4, #0]
 80063d0:	bf18      	it	ne
 80063d2:	2301      	movne	r3, #1
 80063d4:	0692      	lsls	r2, r2, #26
 80063d6:	d42b      	bmi.n	8006430 <_printf_common+0xb0>
 80063d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063dc:	4649      	mov	r1, r9
 80063de:	4638      	mov	r0, r7
 80063e0:	47c0      	blx	r8
 80063e2:	3001      	adds	r0, #1
 80063e4:	d01e      	beq.n	8006424 <_printf_common+0xa4>
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	68e5      	ldr	r5, [r4, #12]
 80063ea:	6832      	ldr	r2, [r6, #0]
 80063ec:	f003 0306 	and.w	r3, r3, #6
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	bf08      	it	eq
 80063f4:	1aad      	subeq	r5, r5, r2
 80063f6:	68a3      	ldr	r3, [r4, #8]
 80063f8:	6922      	ldr	r2, [r4, #16]
 80063fa:	bf0c      	ite	eq
 80063fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006400:	2500      	movne	r5, #0
 8006402:	4293      	cmp	r3, r2
 8006404:	bfc4      	itt	gt
 8006406:	1a9b      	subgt	r3, r3, r2
 8006408:	18ed      	addgt	r5, r5, r3
 800640a:	2600      	movs	r6, #0
 800640c:	341a      	adds	r4, #26
 800640e:	42b5      	cmp	r5, r6
 8006410:	d11a      	bne.n	8006448 <_printf_common+0xc8>
 8006412:	2000      	movs	r0, #0
 8006414:	e008      	b.n	8006428 <_printf_common+0xa8>
 8006416:	2301      	movs	r3, #1
 8006418:	4652      	mov	r2, sl
 800641a:	4649      	mov	r1, r9
 800641c:	4638      	mov	r0, r7
 800641e:	47c0      	blx	r8
 8006420:	3001      	adds	r0, #1
 8006422:	d103      	bne.n	800642c <_printf_common+0xac>
 8006424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800642c:	3501      	adds	r5, #1
 800642e:	e7c6      	b.n	80063be <_printf_common+0x3e>
 8006430:	18e1      	adds	r1, r4, r3
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	2030      	movs	r0, #48	; 0x30
 8006436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800643a:	4422      	add	r2, r4
 800643c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006444:	3302      	adds	r3, #2
 8006446:	e7c7      	b.n	80063d8 <_printf_common+0x58>
 8006448:	2301      	movs	r3, #1
 800644a:	4622      	mov	r2, r4
 800644c:	4649      	mov	r1, r9
 800644e:	4638      	mov	r0, r7
 8006450:	47c0      	blx	r8
 8006452:	3001      	adds	r0, #1
 8006454:	d0e6      	beq.n	8006424 <_printf_common+0xa4>
 8006456:	3601      	adds	r6, #1
 8006458:	e7d9      	b.n	800640e <_printf_common+0x8e>
	...

0800645c <_printf_i>:
 800645c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006460:	7e0f      	ldrb	r7, [r1, #24]
 8006462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006464:	2f78      	cmp	r7, #120	; 0x78
 8006466:	4691      	mov	r9, r2
 8006468:	4680      	mov	r8, r0
 800646a:	460c      	mov	r4, r1
 800646c:	469a      	mov	sl, r3
 800646e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006472:	d807      	bhi.n	8006484 <_printf_i+0x28>
 8006474:	2f62      	cmp	r7, #98	; 0x62
 8006476:	d80a      	bhi.n	800648e <_printf_i+0x32>
 8006478:	2f00      	cmp	r7, #0
 800647a:	f000 80d8 	beq.w	800662e <_printf_i+0x1d2>
 800647e:	2f58      	cmp	r7, #88	; 0x58
 8006480:	f000 80a3 	beq.w	80065ca <_printf_i+0x16e>
 8006484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800648c:	e03a      	b.n	8006504 <_printf_i+0xa8>
 800648e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006492:	2b15      	cmp	r3, #21
 8006494:	d8f6      	bhi.n	8006484 <_printf_i+0x28>
 8006496:	a101      	add	r1, pc, #4	; (adr r1, 800649c <_printf_i+0x40>)
 8006498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800649c:	080064f5 	.word	0x080064f5
 80064a0:	08006509 	.word	0x08006509
 80064a4:	08006485 	.word	0x08006485
 80064a8:	08006485 	.word	0x08006485
 80064ac:	08006485 	.word	0x08006485
 80064b0:	08006485 	.word	0x08006485
 80064b4:	08006509 	.word	0x08006509
 80064b8:	08006485 	.word	0x08006485
 80064bc:	08006485 	.word	0x08006485
 80064c0:	08006485 	.word	0x08006485
 80064c4:	08006485 	.word	0x08006485
 80064c8:	08006615 	.word	0x08006615
 80064cc:	08006539 	.word	0x08006539
 80064d0:	080065f7 	.word	0x080065f7
 80064d4:	08006485 	.word	0x08006485
 80064d8:	08006485 	.word	0x08006485
 80064dc:	08006637 	.word	0x08006637
 80064e0:	08006485 	.word	0x08006485
 80064e4:	08006539 	.word	0x08006539
 80064e8:	08006485 	.word	0x08006485
 80064ec:	08006485 	.word	0x08006485
 80064f0:	080065ff 	.word	0x080065ff
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	1d1a      	adds	r2, r3, #4
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	602a      	str	r2, [r5, #0]
 80064fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006504:	2301      	movs	r3, #1
 8006506:	e0a3      	b.n	8006650 <_printf_i+0x1f4>
 8006508:	6820      	ldr	r0, [r4, #0]
 800650a:	6829      	ldr	r1, [r5, #0]
 800650c:	0606      	lsls	r6, r0, #24
 800650e:	f101 0304 	add.w	r3, r1, #4
 8006512:	d50a      	bpl.n	800652a <_printf_i+0xce>
 8006514:	680e      	ldr	r6, [r1, #0]
 8006516:	602b      	str	r3, [r5, #0]
 8006518:	2e00      	cmp	r6, #0
 800651a:	da03      	bge.n	8006524 <_printf_i+0xc8>
 800651c:	232d      	movs	r3, #45	; 0x2d
 800651e:	4276      	negs	r6, r6
 8006520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006524:	485e      	ldr	r0, [pc, #376]	; (80066a0 <_printf_i+0x244>)
 8006526:	230a      	movs	r3, #10
 8006528:	e019      	b.n	800655e <_printf_i+0x102>
 800652a:	680e      	ldr	r6, [r1, #0]
 800652c:	602b      	str	r3, [r5, #0]
 800652e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006532:	bf18      	it	ne
 8006534:	b236      	sxthne	r6, r6
 8006536:	e7ef      	b.n	8006518 <_printf_i+0xbc>
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	6820      	ldr	r0, [r4, #0]
 800653c:	1d19      	adds	r1, r3, #4
 800653e:	6029      	str	r1, [r5, #0]
 8006540:	0601      	lsls	r1, r0, #24
 8006542:	d501      	bpl.n	8006548 <_printf_i+0xec>
 8006544:	681e      	ldr	r6, [r3, #0]
 8006546:	e002      	b.n	800654e <_printf_i+0xf2>
 8006548:	0646      	lsls	r6, r0, #25
 800654a:	d5fb      	bpl.n	8006544 <_printf_i+0xe8>
 800654c:	881e      	ldrh	r6, [r3, #0]
 800654e:	4854      	ldr	r0, [pc, #336]	; (80066a0 <_printf_i+0x244>)
 8006550:	2f6f      	cmp	r7, #111	; 0x6f
 8006552:	bf0c      	ite	eq
 8006554:	2308      	moveq	r3, #8
 8006556:	230a      	movne	r3, #10
 8006558:	2100      	movs	r1, #0
 800655a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800655e:	6865      	ldr	r5, [r4, #4]
 8006560:	60a5      	str	r5, [r4, #8]
 8006562:	2d00      	cmp	r5, #0
 8006564:	bfa2      	ittt	ge
 8006566:	6821      	ldrge	r1, [r4, #0]
 8006568:	f021 0104 	bicge.w	r1, r1, #4
 800656c:	6021      	strge	r1, [r4, #0]
 800656e:	b90e      	cbnz	r6, 8006574 <_printf_i+0x118>
 8006570:	2d00      	cmp	r5, #0
 8006572:	d04d      	beq.n	8006610 <_printf_i+0x1b4>
 8006574:	4615      	mov	r5, r2
 8006576:	fbb6 f1f3 	udiv	r1, r6, r3
 800657a:	fb03 6711 	mls	r7, r3, r1, r6
 800657e:	5dc7      	ldrb	r7, [r0, r7]
 8006580:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006584:	4637      	mov	r7, r6
 8006586:	42bb      	cmp	r3, r7
 8006588:	460e      	mov	r6, r1
 800658a:	d9f4      	bls.n	8006576 <_printf_i+0x11a>
 800658c:	2b08      	cmp	r3, #8
 800658e:	d10b      	bne.n	80065a8 <_printf_i+0x14c>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	07de      	lsls	r6, r3, #31
 8006594:	d508      	bpl.n	80065a8 <_printf_i+0x14c>
 8006596:	6923      	ldr	r3, [r4, #16]
 8006598:	6861      	ldr	r1, [r4, #4]
 800659a:	4299      	cmp	r1, r3
 800659c:	bfde      	ittt	le
 800659e:	2330      	movle	r3, #48	; 0x30
 80065a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80065a8:	1b52      	subs	r2, r2, r5
 80065aa:	6122      	str	r2, [r4, #16]
 80065ac:	f8cd a000 	str.w	sl, [sp]
 80065b0:	464b      	mov	r3, r9
 80065b2:	aa03      	add	r2, sp, #12
 80065b4:	4621      	mov	r1, r4
 80065b6:	4640      	mov	r0, r8
 80065b8:	f7ff fee2 	bl	8006380 <_printf_common>
 80065bc:	3001      	adds	r0, #1
 80065be:	d14c      	bne.n	800665a <_printf_i+0x1fe>
 80065c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065c4:	b004      	add	sp, #16
 80065c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ca:	4835      	ldr	r0, [pc, #212]	; (80066a0 <_printf_i+0x244>)
 80065cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065d0:	6829      	ldr	r1, [r5, #0]
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80065d8:	6029      	str	r1, [r5, #0]
 80065da:	061d      	lsls	r5, r3, #24
 80065dc:	d514      	bpl.n	8006608 <_printf_i+0x1ac>
 80065de:	07df      	lsls	r7, r3, #31
 80065e0:	bf44      	itt	mi
 80065e2:	f043 0320 	orrmi.w	r3, r3, #32
 80065e6:	6023      	strmi	r3, [r4, #0]
 80065e8:	b91e      	cbnz	r6, 80065f2 <_printf_i+0x196>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	f023 0320 	bic.w	r3, r3, #32
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	2310      	movs	r3, #16
 80065f4:	e7b0      	b.n	8006558 <_printf_i+0xfc>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	f043 0320 	orr.w	r3, r3, #32
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	2378      	movs	r3, #120	; 0x78
 8006600:	4828      	ldr	r0, [pc, #160]	; (80066a4 <_printf_i+0x248>)
 8006602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006606:	e7e3      	b.n	80065d0 <_printf_i+0x174>
 8006608:	0659      	lsls	r1, r3, #25
 800660a:	bf48      	it	mi
 800660c:	b2b6      	uxthmi	r6, r6
 800660e:	e7e6      	b.n	80065de <_printf_i+0x182>
 8006610:	4615      	mov	r5, r2
 8006612:	e7bb      	b.n	800658c <_printf_i+0x130>
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	6826      	ldr	r6, [r4, #0]
 8006618:	6961      	ldr	r1, [r4, #20]
 800661a:	1d18      	adds	r0, r3, #4
 800661c:	6028      	str	r0, [r5, #0]
 800661e:	0635      	lsls	r5, r6, #24
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	d501      	bpl.n	8006628 <_printf_i+0x1cc>
 8006624:	6019      	str	r1, [r3, #0]
 8006626:	e002      	b.n	800662e <_printf_i+0x1d2>
 8006628:	0670      	lsls	r0, r6, #25
 800662a:	d5fb      	bpl.n	8006624 <_printf_i+0x1c8>
 800662c:	8019      	strh	r1, [r3, #0]
 800662e:	2300      	movs	r3, #0
 8006630:	6123      	str	r3, [r4, #16]
 8006632:	4615      	mov	r5, r2
 8006634:	e7ba      	b.n	80065ac <_printf_i+0x150>
 8006636:	682b      	ldr	r3, [r5, #0]
 8006638:	1d1a      	adds	r2, r3, #4
 800663a:	602a      	str	r2, [r5, #0]
 800663c:	681d      	ldr	r5, [r3, #0]
 800663e:	6862      	ldr	r2, [r4, #4]
 8006640:	2100      	movs	r1, #0
 8006642:	4628      	mov	r0, r5
 8006644:	f7f9 fdc4 	bl	80001d0 <memchr>
 8006648:	b108      	cbz	r0, 800664e <_printf_i+0x1f2>
 800664a:	1b40      	subs	r0, r0, r5
 800664c:	6060      	str	r0, [r4, #4]
 800664e:	6863      	ldr	r3, [r4, #4]
 8006650:	6123      	str	r3, [r4, #16]
 8006652:	2300      	movs	r3, #0
 8006654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006658:	e7a8      	b.n	80065ac <_printf_i+0x150>
 800665a:	6923      	ldr	r3, [r4, #16]
 800665c:	462a      	mov	r2, r5
 800665e:	4649      	mov	r1, r9
 8006660:	4640      	mov	r0, r8
 8006662:	47d0      	blx	sl
 8006664:	3001      	adds	r0, #1
 8006666:	d0ab      	beq.n	80065c0 <_printf_i+0x164>
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	079b      	lsls	r3, r3, #30
 800666c:	d413      	bmi.n	8006696 <_printf_i+0x23a>
 800666e:	68e0      	ldr	r0, [r4, #12]
 8006670:	9b03      	ldr	r3, [sp, #12]
 8006672:	4298      	cmp	r0, r3
 8006674:	bfb8      	it	lt
 8006676:	4618      	movlt	r0, r3
 8006678:	e7a4      	b.n	80065c4 <_printf_i+0x168>
 800667a:	2301      	movs	r3, #1
 800667c:	4632      	mov	r2, r6
 800667e:	4649      	mov	r1, r9
 8006680:	4640      	mov	r0, r8
 8006682:	47d0      	blx	sl
 8006684:	3001      	adds	r0, #1
 8006686:	d09b      	beq.n	80065c0 <_printf_i+0x164>
 8006688:	3501      	adds	r5, #1
 800668a:	68e3      	ldr	r3, [r4, #12]
 800668c:	9903      	ldr	r1, [sp, #12]
 800668e:	1a5b      	subs	r3, r3, r1
 8006690:	42ab      	cmp	r3, r5
 8006692:	dcf2      	bgt.n	800667a <_printf_i+0x21e>
 8006694:	e7eb      	b.n	800666e <_printf_i+0x212>
 8006696:	2500      	movs	r5, #0
 8006698:	f104 0619 	add.w	r6, r4, #25
 800669c:	e7f5      	b.n	800668a <_printf_i+0x22e>
 800669e:	bf00      	nop
 80066a0:	08006cb9 	.word	0x08006cb9
 80066a4:	08006cca 	.word	0x08006cca

080066a8 <_sbrk_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d06      	ldr	r5, [pc, #24]	; (80066c4 <_sbrk_r+0x1c>)
 80066ac:	2300      	movs	r3, #0
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	602b      	str	r3, [r5, #0]
 80066b4:	f7fa fb3a 	bl	8000d2c <_sbrk>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d102      	bne.n	80066c2 <_sbrk_r+0x1a>
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	b103      	cbz	r3, 80066c2 <_sbrk_r+0x1a>
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	bd38      	pop	{r3, r4, r5, pc}
 80066c4:	20000894 	.word	0x20000894

080066c8 <__sread>:
 80066c8:	b510      	push	{r4, lr}
 80066ca:	460c      	mov	r4, r1
 80066cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d0:	f000 f8a0 	bl	8006814 <_read_r>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	bfab      	itete	ge
 80066d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066da:	89a3      	ldrhlt	r3, [r4, #12]
 80066dc:	181b      	addge	r3, r3, r0
 80066de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066e2:	bfac      	ite	ge
 80066e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80066e6:	81a3      	strhlt	r3, [r4, #12]
 80066e8:	bd10      	pop	{r4, pc}

080066ea <__swrite>:
 80066ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ee:	461f      	mov	r7, r3
 80066f0:	898b      	ldrh	r3, [r1, #12]
 80066f2:	05db      	lsls	r3, r3, #23
 80066f4:	4605      	mov	r5, r0
 80066f6:	460c      	mov	r4, r1
 80066f8:	4616      	mov	r6, r2
 80066fa:	d505      	bpl.n	8006708 <__swrite+0x1e>
 80066fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006700:	2302      	movs	r3, #2
 8006702:	2200      	movs	r2, #0
 8006704:	f000 f868 	bl	80067d8 <_lseek_r>
 8006708:	89a3      	ldrh	r3, [r4, #12]
 800670a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800670e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006712:	81a3      	strh	r3, [r4, #12]
 8006714:	4632      	mov	r2, r6
 8006716:	463b      	mov	r3, r7
 8006718:	4628      	mov	r0, r5
 800671a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800671e:	f000 b817 	b.w	8006750 <_write_r>

08006722 <__sseek>:
 8006722:	b510      	push	{r4, lr}
 8006724:	460c      	mov	r4, r1
 8006726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800672a:	f000 f855 	bl	80067d8 <_lseek_r>
 800672e:	1c43      	adds	r3, r0, #1
 8006730:	89a3      	ldrh	r3, [r4, #12]
 8006732:	bf15      	itete	ne
 8006734:	6560      	strne	r0, [r4, #84]	; 0x54
 8006736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800673a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800673e:	81a3      	strheq	r3, [r4, #12]
 8006740:	bf18      	it	ne
 8006742:	81a3      	strhne	r3, [r4, #12]
 8006744:	bd10      	pop	{r4, pc}

08006746 <__sclose>:
 8006746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800674a:	f000 b813 	b.w	8006774 <_close_r>
	...

08006750 <_write_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4d07      	ldr	r5, [pc, #28]	; (8006770 <_write_r+0x20>)
 8006754:	4604      	mov	r4, r0
 8006756:	4608      	mov	r0, r1
 8006758:	4611      	mov	r1, r2
 800675a:	2200      	movs	r2, #0
 800675c:	602a      	str	r2, [r5, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	f7fa f922 	bl	80009a8 <_write>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_write_r+0x1e>
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	b103      	cbz	r3, 800676e <_write_r+0x1e>
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	20000894 	.word	0x20000894

08006774 <_close_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4d06      	ldr	r5, [pc, #24]	; (8006790 <_close_r+0x1c>)
 8006778:	2300      	movs	r3, #0
 800677a:	4604      	mov	r4, r0
 800677c:	4608      	mov	r0, r1
 800677e:	602b      	str	r3, [r5, #0]
 8006780:	f7fa fa9f 	bl	8000cc2 <_close>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d102      	bne.n	800678e <_close_r+0x1a>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	b103      	cbz	r3, 800678e <_close_r+0x1a>
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	20000894 	.word	0x20000894

08006794 <_fstat_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4d07      	ldr	r5, [pc, #28]	; (80067b4 <_fstat_r+0x20>)
 8006798:	2300      	movs	r3, #0
 800679a:	4604      	mov	r4, r0
 800679c:	4608      	mov	r0, r1
 800679e:	4611      	mov	r1, r2
 80067a0:	602b      	str	r3, [r5, #0]
 80067a2:	f7fa fa9a 	bl	8000cda <_fstat>
 80067a6:	1c43      	adds	r3, r0, #1
 80067a8:	d102      	bne.n	80067b0 <_fstat_r+0x1c>
 80067aa:	682b      	ldr	r3, [r5, #0]
 80067ac:	b103      	cbz	r3, 80067b0 <_fstat_r+0x1c>
 80067ae:	6023      	str	r3, [r4, #0]
 80067b0:	bd38      	pop	{r3, r4, r5, pc}
 80067b2:	bf00      	nop
 80067b4:	20000894 	.word	0x20000894

080067b8 <_isatty_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4d06      	ldr	r5, [pc, #24]	; (80067d4 <_isatty_r+0x1c>)
 80067bc:	2300      	movs	r3, #0
 80067be:	4604      	mov	r4, r0
 80067c0:	4608      	mov	r0, r1
 80067c2:	602b      	str	r3, [r5, #0]
 80067c4:	f7fa fa99 	bl	8000cfa <_isatty>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d102      	bne.n	80067d2 <_isatty_r+0x1a>
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	b103      	cbz	r3, 80067d2 <_isatty_r+0x1a>
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	bd38      	pop	{r3, r4, r5, pc}
 80067d4:	20000894 	.word	0x20000894

080067d8 <_lseek_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4d07      	ldr	r5, [pc, #28]	; (80067f8 <_lseek_r+0x20>)
 80067dc:	4604      	mov	r4, r0
 80067de:	4608      	mov	r0, r1
 80067e0:	4611      	mov	r1, r2
 80067e2:	2200      	movs	r2, #0
 80067e4:	602a      	str	r2, [r5, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	f7fa fa92 	bl	8000d10 <_lseek>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d102      	bne.n	80067f6 <_lseek_r+0x1e>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	b103      	cbz	r3, 80067f6 <_lseek_r+0x1e>
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	20000894 	.word	0x20000894

080067fc <__malloc_lock>:
 80067fc:	4801      	ldr	r0, [pc, #4]	; (8006804 <__malloc_lock+0x8>)
 80067fe:	f7ff bb15 	b.w	8005e2c <__retarget_lock_acquire_recursive>
 8006802:	bf00      	nop
 8006804:	20000888 	.word	0x20000888

08006808 <__malloc_unlock>:
 8006808:	4801      	ldr	r0, [pc, #4]	; (8006810 <__malloc_unlock+0x8>)
 800680a:	f7ff bb10 	b.w	8005e2e <__retarget_lock_release_recursive>
 800680e:	bf00      	nop
 8006810:	20000888 	.word	0x20000888

08006814 <_read_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	4d07      	ldr	r5, [pc, #28]	; (8006834 <_read_r+0x20>)
 8006818:	4604      	mov	r4, r0
 800681a:	4608      	mov	r0, r1
 800681c:	4611      	mov	r1, r2
 800681e:	2200      	movs	r2, #0
 8006820:	602a      	str	r2, [r5, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	f7fa fa30 	bl	8000c88 <_read>
 8006828:	1c43      	adds	r3, r0, #1
 800682a:	d102      	bne.n	8006832 <_read_r+0x1e>
 800682c:	682b      	ldr	r3, [r5, #0]
 800682e:	b103      	cbz	r3, 8006832 <_read_r+0x1e>
 8006830:	6023      	str	r3, [r4, #0]
 8006832:	bd38      	pop	{r3, r4, r5, pc}
 8006834:	20000894 	.word	0x20000894

08006838 <_init>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	bf00      	nop
 800683c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683e:	bc08      	pop	{r3}
 8006840:	469e      	mov	lr, r3
 8006842:	4770      	bx	lr

08006844 <_fini>:
 8006844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006846:	bf00      	nop
 8006848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800684a:	bc08      	pop	{r3}
 800684c:	469e      	mov	lr, r3
 800684e:	4770      	bx	lr
