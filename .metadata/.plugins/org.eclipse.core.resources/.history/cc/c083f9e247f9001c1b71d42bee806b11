
STMF446_RMD_SteppingMotor_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  08008028  08008028  00018028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086a8  080086a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080086a8  080086a8  000186a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086b0  080086b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086b0  080086b0  000186b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086b4  080086b4  000186b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080086b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a8  20000070  08008728  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000918  08008728  00020918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012776  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002763  00000000  00000000  00032816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00034f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  00035fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000420e  00000000  00000000  00036f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a89  00000000  00000000  0003b156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d85ca  00000000  00000000  0004dbdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001261a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d5c  00000000  00000000  001261fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008010 	.word	0x08008010

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08008010 	.word	0x08008010

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <tmc2209_readWriteArray>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60b9      	str	r1, [r7, #8]
 80005bc:	607a      	str	r2, [r7, #4]
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	4603      	mov	r3, r0
 80005c2:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 80005c4:	480e      	ldr	r0, [pc, #56]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005c6:	f005 fbb1 	bl	8005d2c <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005d2:	68b9      	ldr	r1, [r7, #8]
 80005d4:	480a      	ldr	r0, [pc, #40]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005d6:	f004 ff97 	bl	8005508 <HAL_UART_Transmit>

	if(readLength > 0){
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00a      	beq.n	80005f6 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005e2:	f005 fbd7 	bl	8005d94 <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength, 3000);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005ee:	68b9      	ldr	r1, [r7, #8]
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005f2:	f005 f81b 	bl	800562c <HAL_UART_Receive>
	}
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000fc 	.word	0x200000fc

08000604 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 800060e:	2201      	movs	r2, #1
 8000610:	6839      	ldr	r1, [r7, #0]
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f006 f964 	bl	80068e0 <tmc_CRC8>
 8000618:	4603      	mov	r3, r0
}
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <reset>:
uint8_t uart_data;
char tx_data[]="get_data\r\n";
int flag = 1;

static uint8_t reset()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <reset+0x10>)
 800062a:	f006 fb91 	bl	8006d50 <tmc2209_reset>
 800062e:	4603      	mov	r3, r0
}
 8000630:	4618      	mov	r0, r3
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000184 	.word	0x20000184

08000638 <restore>:

static uint8_t restore()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 800063c:	4802      	ldr	r0, [pc, #8]	; (8000648 <restore+0x10>)
 800063e:	f006 fbc1 	bl	8006dc4 <tmc2209_restore>
 8000642:	4603      	mov	r3, r0
}
 8000644:	4618      	mov	r0, r3
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000184 	.word	0x20000184

0800064c <TMC2209_INIT>:


void TMC2209_INIT()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 8000652:	2201      	movs	r2, #1
 8000654:	2101      	movs	r1, #1
 8000656:	2007      	movs	r0, #7
 8000658:	f006 f88a 	bl	8006770 <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <TMC2209_INIT+0x38>)
 800065e:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <TMC2209_INIT+0x3c>)
 8000660:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <TMC2209_INIT+0x38>)
 8000666:	4a09      	ldr	r2, [pc, #36]	; (800068c <TMC2209_INIT+0x40>)
 8000668:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <TMC2209_INIT+0x44>)
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <TMC2209_INIT+0x38>)
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <TMC2209_INIT+0x48>)
 8000678:	f006 fa86 	bl	8006b88 <tmc2209_init>


	//restore();
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000040c 	.word	0x2000040c
 8000688:	08000625 	.word	0x08000625
 800068c:	08000639 	.word	0x08000639
 8000690:	08008378 	.word	0x08008378
 8000694:	20000184 	.word	0x20000184

08000698 <HAL_GPIO_EXTI_Callback>:
	return &TMC2209;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
	//stepper 0 end stop senssor
	if(GPIO_Pin == GPIO_PIN_6 ){
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	2b40      	cmp	r3, #64	; 0x40
 80006a6:	d11b      	bne.n	80006e0 <HAL_GPIO_EXTI_Callback+0x48>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 80006a8:	2140      	movs	r1, #64	; 0x40
 80006aa:	481b      	ldr	r0, [pc, #108]	; (8000718 <HAL_GPIO_EXTI_Callback+0x80>)
 80006ac:	f003 f8a6 	bl	80037fc <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d106      	bne.n	80006c4 <HAL_GPIO_EXTI_Callback+0x2c>
			end_stop_state |= 1;
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <HAL_GPIO_EXTI_Callback+0x84>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <HAL_GPIO_EXTI_Callback+0x84>)
 80006c2:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 80006c4:	2140      	movs	r1, #64	; 0x40
 80006c6:	4814      	ldr	r0, [pc, #80]	; (8000718 <HAL_GPIO_EXTI_Callback+0x80>)
 80006c8:	f003 f898 	bl	80037fc <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d006      	beq.n	80006e0 <HAL_GPIO_EXTI_Callback+0x48>
			end_stop_state &= ~1;
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <HAL_GPIO_EXTI_Callback+0x84>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	f023 0301 	bic.w	r3, r3, #1
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_GPIO_EXTI_Callback+0x84>)
 80006de:	701a      	strb	r2, [r3, #0]
		}
	}
	if(GPIO_Pin == GPIO_PIN_7 ){
 80006e0:	88fb      	ldrh	r3, [r7, #6]
 80006e2:	2b80      	cmp	r3, #128	; 0x80
 80006e4:	d114      	bne.n	8000710 <HAL_GPIO_EXTI_Callback+0x78>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)){
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <HAL_GPIO_EXTI_Callback+0x80>)
 80006ea:	f003 f887 	bl	80037fc <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d103      	bne.n	80006fc <HAL_GPIO_EXTI_Callback+0x64>
			current_stall|= 0;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <HAL_GPIO_EXTI_Callback+0x88>)
 80006f6:	781a      	ldrb	r2, [r3, #0]
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_GPIO_EXTI_Callback+0x88>)
 80006fa:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)){
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <HAL_GPIO_EXTI_Callback+0x80>)
 8000700:	f003 f87c 	bl	80037fc <HAL_GPIO_ReadPin>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d002      	beq.n	8000710 <HAL_GPIO_EXTI_Callback+0x78>
			current_stall = 1;
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <HAL_GPIO_EXTI_Callback+0x88>)
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40020400 	.word	0x40020400
 800071c:	20000670 	.word	0x20000670
 8000720:	20000672 	.word	0x20000672

08000724 <Step0>:
void Step0(){                                       //step pin
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	//pull+

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <Step0+0x20>)
 8000730:	f003 f87c 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073a:	4802      	ldr	r0, [pc, #8]	; (8000744 <Step0+0x20>)
 800073c:	f003 f876 	bl	800382c <HAL_GPIO_WritePin>
	/*
	 * pull-
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
	 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40020400 	.word	0x40020400

08000748 <Dir0>:

void Dir0(int dir){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, dir); //Dir0関数にdirピンを指定して格納
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	461a      	mov	r2, r3
 8000756:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075a:	4803      	ldr	r0, [pc, #12]	; (8000768 <Dir0+0x20>)
 800075c:	f003 f866 	bl	800382c <HAL_GPIO_WritePin>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40020400 	.word	0x40020400

0800076c <resetStepper>:
	si->stepPosition = 0;
	si->movementDone = 0;
}


void resetStepper(volatile stepperInfo* si){    //resetStepper関数に引数をstepperInfo構造隊にポイント型変数siとして与える
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	si->c0 = si->acceleration;      //変数*siがメンバc0にアクセス.した値に変数*siがメンバaccelerationにアクセス.した値を代入する
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	edd3 7a00 	vldr	s15, [r3]
 800077a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800077e:	ee17 2a90 	vmov	r2, s15
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	615a      	str	r2, [r3, #20]
	si->d = si->c0;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	ee07 3a90 	vmov	s15, r3
 800078e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	si->di = si->d;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800079e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007a2:	ee17 2a90 	vmov	r2, s15
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	649a      	str	r2, [r3, #72]	; 0x48
	si->stepCount = 0;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	64da      	str	r2, [r3, #76]	; 0x4c
	si->n = 0;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	641a      	str	r2, [r3, #64]	; 0x40
	si->rampUpStepCount = 0;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2200      	movs	r2, #0
 80007ba:	63da      	str	r2, [r3, #60]	; 0x3c
	si->movementDone = 0;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <prepareMovement>:

volatile uint8_t remainingSteppersFlag = 0; //remainingSteppersFlagをuint8_t型で定義し、初期化

void prepareMovement(int steps){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	if(steps == 0){
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d039      	beq.n	8000852 <prepareMovement+0x82>
		return;
	}
	volatile stepperInfo* si = &steppers[0];
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <prepareMovement+0x8c>)
 80007e0:	60fb      	str	r3, [r7, #12]
	if(si->dir_inv){
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	6a1b      	ldr	r3, [r3, #32]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d011      	beq.n	800080e <prepareMovement+0x3e>
		si->dirFunc( steps < 0 ? 0 : 1);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	43d2      	mvns	r2, r2
 80007f2:	0fd2      	lsrs	r2, r2, #31
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	4610      	mov	r0, r2
 80007f8:	4798      	blx	r3
		si->dir = steps > 0 ? -1:1;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	dd02      	ble.n	8000806 <prepareMovement+0x36>
 8000800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000804:	e000      	b.n	8000808 <prepareMovement+0x38>
 8000806:	2201      	movs	r2, #1
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	61da      	str	r2, [r3, #28]
 800080c:	e00e      	b.n	800082c <prepareMovement+0x5c>
	}else{
		si->dirFunc( steps < 0 ? 1 : 0);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	0fd2      	lsrs	r2, r2, #31
 8000816:	4610      	mov	r0, r2
 8000818:	4798      	blx	r3
		si->dir = steps > 0 ? 1:-1;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b00      	cmp	r3, #0
 800081e:	dd01      	ble.n	8000824 <prepareMovement+0x54>
 8000820:	2201      	movs	r2, #1
 8000822:	e001      	b.n	8000828 <prepareMovement+0x58>
 8000824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	61da      	str	r2, [r3, #28]
	}
		si->totalSteps = abs(steps);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	bfb8      	it	lt
 8000832:	425b      	neglt	r3, r3
 8000834:	461a      	mov	r2, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	635a      	str	r2, [r3, #52]	; 0x34
		resetStepper(si);
 800083a:	68f8      	ldr	r0, [r7, #12]
 800083c:	f7ff ff96 	bl	800076c <resetStepper>
		remainingSteppersFlag |= (1 << 0);
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <prepareMovement+0x90>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	b2da      	uxtb	r2, r3
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <prepareMovement+0x90>)
 800084e:	701a      	strb	r2, [r3, #0]
 8000850:	e000      	b.n	8000854 <prepareMovement+0x84>
		return;
 8000852:	bf00      	nop

}
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000620 	.word	0x20000620
 8000860:	200006f8 	.word	0x200006f8

08000864 <prepareAbsoluteMovement>:

void prepareAbsoluteMovement(int absolute_steps){   //prepareAbsoluteMovementで与えられたステップ数だけモータを回す(main文から）
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	printf("absolute_steps:%d\r\n",absolute_steps);
 800086c:	6879      	ldr	r1, [r7, #4]
 800086e:	4820      	ldr	r0, [pc, #128]	; (80008f0 <prepareAbsoluteMovement+0x8c>)
 8000870:	f006 faf4 	bl	8006e5c <iprintf>
	volatile stepperInfo* si = &steppers[0];	//steppers[0]のアドレスをstepperInfo* si に代入
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <prepareAbsoluteMovement+0x90>)
 8000876:	60fb      	str	r3, [r7, #12]
	int steps = absolute_steps - si->stepPosition;	//目標値からstepPositionを引いた値（stepposition=毎ステップカウントされるdirの値)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	60bb      	str	r3, [r7, #8]
	printf("steps:%d\r\n",steps);
 8000882:	68b9      	ldr	r1, [r7, #8]
 8000884:	481c      	ldr	r0, [pc, #112]	; (80008f8 <prepareAbsoluteMovement+0x94>)
 8000886:	f006 fae9 	bl	8006e5c <iprintf>
	if(steps == 0){
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d02b      	beq.n	80008e8 <prepareAbsoluteMovement+0x84>
					return;
				}
	si->dirFunc( steps < 0 ? 1 : 0);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	0fd2      	lsrs	r2, r2, #31
 8000898:	4610      	mov	r0, r2
 800089a:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	dd01      	ble.n	80008a6 <prepareAbsoluteMovement+0x42>
 80008a2:	2201      	movs	r2, #1
 80008a4:	e001      	b.n	80008aa <prepareAbsoluteMovement+0x46>
 80008a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	61da      	str	r2, [r3, #28]
	//printf("prepareAbsoluteMovement\r\n");
	si->totalSteps = abs(steps);	//stepsの値をアブソリュートでtotalstepsに格納
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	bfb8      	it	lt
 80008b4:	425b      	neglt	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	635a      	str	r2, [r3, #52]	; 0x34
	printf("steps:%d\r\n",si->totalSteps);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008c0:	4619      	mov	r1, r3
 80008c2:	480d      	ldr	r0, [pc, #52]	; (80008f8 <prepareAbsoluteMovement+0x94>)
 80008c4:	f006 faca 	bl	8006e5c <iprintf>

	resetStepper(si);
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f7ff ff4f 	bl	800076c <resetStepper>
	printf("steps:%d\r\n",steps);
 80008ce:	68b9      	ldr	r1, [r7, #8]
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <prepareAbsoluteMovement+0x94>)
 80008d2:	f006 fac3 	bl	8006e5c <iprintf>
	remainingSteppersFlag |= (1 << 0);
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <prepareAbsoluteMovement+0x98>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <prepareAbsoluteMovement+0x98>)
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	e000      	b.n	80008ea <prepareAbsoluteMovement+0x86>
					return;
 80008e8:	bf00      	nop
}
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	08008028 	.word	0x08008028
 80008f4:	20000620 	.word	0x20000620
 80008f8:	0800803c 	.word	0x0800803c
 80008fc:	200006f8 	.word	0x200006f8

08000900 <setNextInterruptInterval>:
volatile uint8_t nextStepperFlag = 0;

void setNextInterruptInterval(){
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0

	unsigned int mind = 999999;
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <setNextInterruptInterval+0x7c>)
 8000908:	607b      	str	r3, [r7, #4]

		if( ((1 << 0)& remainingSteppersFlag) && steppers[0].di < mind ){
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <setNextInterruptInterval+0x80>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d007      	beq.n	800092a <setNextInterruptInterval+0x2a>
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <setNextInterruptInterval+0x84>)
 800091c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	429a      	cmp	r2, r3
 8000922:	d902      	bls.n	800092a <setNextInterruptInterval+0x2a>
			mind = steppers[0].di;
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <setNextInterruptInterval+0x84>)
 8000926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000928:	607b      	str	r3, [r7, #4]
		}
		nextStepperFlag = 0;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <setNextInterruptInterval+0x88>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]

			if( (1 << 0) && steppers[0].di == mind ){
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <setNextInterruptInterval+0x84>)
 8000932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	429a      	cmp	r2, r3
 8000938:	d107      	bne.n	800094a <setNextInterruptInterval+0x4a>
				nextStepperFlag |= (1 << 0);
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <setNextInterruptInterval+0x88>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <setNextInterruptInterval+0x88>)
 8000948:	701a      	strb	r2, [r3, #0]
			}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);		//mindにコンペアを設定
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <setNextInterruptInterval+0x8c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
			//printf("mind:%d \r\n",mind);

	if (remainingSteppersFlag == 0){
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <setNextInterruptInterval+0x80>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d104      	bne.n	8000966 <setNextInterruptInterval+0x66>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);    //65500→コンペアマッチさせない
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <setNextInterruptInterval+0x8c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8000964:	635a      	str	r2, [r3, #52]	; 0x34
	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <setNextInterruptInterval+0x8c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 800096e:	bf00      	nop

}
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	000f423f 	.word	0x000f423f
 8000980:	200006f8 	.word	0x200006f8
 8000984:	20000620 	.word	0x20000620
 8000988:	200006f9 	.word	0x200006f9
 800098c:	200000b4 	.word	0x200000b4

08000990 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){      //指定したコンペアを超えた時発火
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
	if(htim == &htim3){
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a6e      	ldr	r2, [pc, #440]	; (8000b54 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 800099c:	4293      	cmp	r3, r2
 800099e:	f040 80d5 	bne.w	8000b4c <HAL_TIM_OC_DelayElapsedCallback+0x1bc>
	unsigned int tmpCtr = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);	//指定されたタイマーチャンネルのコンペアを所得
 80009a2:	4b6c      	ldr	r3, [pc, #432]	; (8000b54 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009a8:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);			//コンペアを65500にセット
 80009aa:	4b6a      	ldr	r3, [pc, #424]	; (8000b54 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80009b2:	635a      	str	r2, [r3, #52]	; 0x34

	if( homing_flag & (1 << 0)){
 80009b4:	4b68      	ldr	r3, [pc, #416]	; (8000b58 <HAL_TIM_OC_DelayElapsedCallback+0x1c8>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d00d      	beq.n	80009dc <HAL_TIM_OC_DelayElapsedCallback+0x4c>
				if(end_stop_state & (1 << 0)){
 80009c0:	4b66      	ldr	r3, [pc, #408]	; (8000b5c <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d007      	beq.n	80009dc <HAL_TIM_OC_DelayElapsedCallback+0x4c>
					remainingSteppersFlag &= ~(1 << 0);
 80009cc:	4b64      	ldr	r3, [pc, #400]	; (8000b60 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f023 0301 	bic.w	r3, r3, #1
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b61      	ldr	r3, [pc, #388]	; (8000b60 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 80009da:	701a      	strb	r2, [r3, #0]
				}
			}
	if ( ! (nextStepperFlag & (1 << 0)) ){				//nextStepperFlagが真でない(0なら)
 80009dc:	4b61      	ldr	r3, [pc, #388]	; (8000b64 <HAL_TIM_OC_DelayElapsedCallback+0x1d4>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d105      	bne.n	80009f6 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			steppers[0].di -= tmpCtr;           //tmpCtrの値からsteppers[i].di引いた値を新しくsteppers[i].diに代入
 80009ea:	4b5f      	ldr	r3, [pc, #380]	; (8000b68 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80009ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	4a5d      	ldr	r2, [pc, #372]	; (8000b68 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80009f4:	6493      	str	r3, [r2, #72]	; 0x48
		}
		//printf("steppers:%ld \r\n",steppers[0].di);

		volatile stepperInfo* s = &steppers[0];
 80009f6:	4b5c      	ldr	r3, [pc, #368]	; (8000b68 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80009f8:	60bb      	str	r3, [r7, #8]

		if( (s->stepCount) < (s->totalSteps)&& !(current_stall)  ){		//1周ごとにカウントしたstepCountがabs(steps)より小さかったら==動作が終了するまで
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d224      	bcs.n	8000a50 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
 8000a06:	4b59      	ldr	r3, [pc, #356]	; (8000b6c <HAL_TIM_OC_DelayElapsedCallback+0x1dc>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d120      	bne.n	8000a50 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
			s->stepFunc();
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	4798      	blx	r3
			s->stepCount++;							//カウントし続ける
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	64da      	str	r2, [r3, #76]	; 0x4c
			s->stepPosition += s->dir;		//dir(+もしくはー(dirの向き）を加算してstepPositionに格納
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	69da      	ldr	r2, [r3, #28]
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	441a      	add	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	619a      	str	r2, [r3, #24]
			if ( (s->stepCount) >= (s->totalSteps) ){	//stepCountがtotalStepsを超えたとき
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d30b      	bcc.n	8000a50 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
				s->movementDone = 1;	//movementDoneを1にする
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				remainingSteppersFlag &= ~(1 << 0);
 8000a40:	4b47      	ldr	r3, [pc, #284]	; (8000b60 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	f023 0301 	bic.w	r3, r3, #1
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b44      	ldr	r3, [pc, #272]	; (8000b60 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 8000a4e:	701a      	strb	r2, [r3, #0]
			}
		}

		if (s->rampUpStepCount == 0){
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d142      	bne.n	8000ade <HAL_TIM_OC_DelayElapsedCallback+0x14e>
			s->n++;									//sにnを代入して、nをプラス1する
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	641a      	str	r2, [r3, #64]	; 0x40
			s->d = s->d - (2*s->d) / (4*s->n +1);	//加減速遅延時間
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000a6e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	3301      	adds	r3, #1
 8000a7a:	ee07 3a90 	vmov	s15, r3
 8000a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a82:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			if (s->d <= s->minStepInterval ){		//加減速遅延時間がminStepIntervalより短いなら（定数で指定）
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	ee07 3a90 	vmov	s15, r3
 8000a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aaa:	d80c      	bhi.n	8000ac6 <HAL_TIM_OC_DelayElapsedCallback+0x136>
				s->d = s->minStepInterval;			//minStepIntervalを加減速遅延時間にする
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	ee07 3a90 	vmov	s15, r3
 8000ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
				s->rampUpStepCount = s->stepCount;	//rampUpStepCountはstepCountとする
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	63da      	str	r2, [r3, #60]	; 0x3c
			}
			if (s->stepCount >= (s->totalSteps / 2) ){  //目標値から現在のステップを引いた値の1/2よりstepCountが大きくなったとき
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ace:	085b      	lsrs	r3, r3, #1
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d32c      	bcc.n	8000b2e <HAL_TIM_OC_DelayElapsedCallback+0x19e>
				s->rampUpStepCount = s->stepCount;		//rampUpStepCountはstepCountとする
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	63da      	str	r2, [r3, #60]	; 0x3c
 8000adc:	e027      	b.n	8000b2e <HAL_TIM_OC_DelayElapsedCallback+0x19e>
			}
		} else if ( s->stepCount >= s->totalSteps - s->rampUpStepCount) {	//目標値から現在のステップを引いた値からrampUpStepCountを引いた値がstepCountより小さいなら
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aea:	1acb      	subs	r3, r1, r3
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d31e      	bcc.n	8000b2e <HAL_TIM_OC_DelayElapsedCallback+0x19e>
			s->d = (s->d * (4 * s->n + 1)) / (4 * s->n + 1 -2);				//減速の時のステップ
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	3301      	adds	r3, #1
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b06:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	3b01      	subs	r3, #1
 8000b12:	ee07 3a90 	vmov	s15, r3
 8000b16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			s->n--;		//sにnを代入し、nから1を引く
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40
		}
		s->di = s->d;	//計算結果sをstepperInfoのメンバdに代入したものをメンバdiに代入
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b38:	ee17 2a90 	vmov	r2, s15
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	649a      	str	r2, [r3, #72]	; 0x48
		//printf("stepPosition:%ld \r\n",s->stepPosition);
		setNextInterruptInterval();
 8000b40:	f7ff fede 	bl	8000900 <setNextInterruptInterval>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200000b4 	.word	0x200000b4
 8000b58:	20000671 	.word	0x20000671
 8000b5c:	20000670 	.word	0x20000670
 8000b60:	200006f8 	.word	0x200006f8
 8000b64:	200006f9 	.word	0x200006f9
 8000b68:	20000620 	.word	0x20000620
 8000b6c:	20000672 	.word	0x20000672

08000b70 <stallguard_back>:
	if( ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){	//割り込みピンが真でない(1でない=0なら)
		end_stop_state |= 1;					//end_stop_stateに左辺か右辺が1なら1を代入
	}
}

void stallguard_back(){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	prepareMovement(steppers[0].stall_off);	//stall_off
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <stallguard_back+0x18>)
 8000b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fe29 	bl	80007d0 <prepareMovement>
	current_stall=0;
 8000b7e:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <stallguard_back+0x1c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
	return;
 8000b84:	bf00      	nop
}
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000620 	.word	0x20000620
 8000b8c:	20000672 	.word	0x20000672

08000b90 <runAndWait>:

void runAndWait(){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	setNextInterruptInterval();
 8000b94:	f7ff feb4 	bl	8000900 <setNextInterruptInterval>
	while(remainingSteppersFlag && !(current_stall));
 8000b98:	bf00      	nop
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <runAndWait+0x38>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <runAndWait+0x1c>
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <runAndWait+0x3c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0f6      	beq.n	8000b9a <runAndWait+0xa>
	if(current_stall==1){
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <runAndWait+0x3c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d101      	bne.n	8000bb8 <runAndWait+0x28>
		stallguard_back();
 8000bb4:	f7ff ffdc 	bl	8000b70 <stallguard_back>
	}
	HAL_Delay(100);
 8000bb8:	2064      	movs	r0, #100	; 0x64
 8000bba:	f001 fbed 	bl	8002398 <HAL_Delay>
	end_flag=1;
 8000bbe:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <runAndWait+0x40>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
	//printf("posi%d\r\n",re->totalSteps);
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200006f8 	.word	0x200006f8
 8000bcc:	20000672 	.word	0x20000672
 8000bd0:	200006ed 	.word	0x200006ed

08000bd4 <AbsoluteReset>:
void AbsoluteReset(){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
	volatile stepperInfo* re = &steppers[0];
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <AbsoluteReset+0x4c>)
 8000bdc:	607b      	str	r3, [r7, #4]

	re->n = 0;  //変数*siがメンバnにアクセス.した値に0を代入する
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	641a      	str	r2, [r3, #64]	; 0x40
	re->d = 0;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f04f 0200 	mov.w	r2, #0
 8000bea:	645a      	str	r2, [r3, #68]	; 0x44
	re->di = 0;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	649a      	str	r2, [r3, #72]	; 0x48
	re->stepCount = 0;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	64da      	str	r2, [r3, #76]	; 0x4c
	re->rampUpStepCount = 0;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	63da      	str	r2, [r3, #60]	; 0x3c
	re->totalSteps = 0;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	635a      	str	r2, [r3, #52]	; 0x34
	re->stepPosition = 0;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
	printf("RestOK\r\n");
 8000c0a:	4806      	ldr	r0, [pc, #24]	; (8000c24 <AbsoluteReset+0x50>)
 8000c0c:	f006 f9ac 	bl	8006f68 <puts>
	end_flag=1;
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <AbsoluteReset+0x54>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000620 	.word	0x20000620
 8000c24:	08008048 	.word	0x08008048
 8000c28:	200006ed 	.word	0x200006ed

08000c2c <stepperHoming>:


void stepperHoming(){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	homing_flag |= (1 << 0);
 8000c30:	4b2e      	ldr	r3, [pc, #184]	; (8000cec <stepperHoming+0xc0>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b2c      	ldr	r3, [pc, #176]	; (8000cec <stepperHoming+0xc0>)
 8000c3c:	701a      	strb	r2, [r3, #0]
	//seeking
	steppers[0].minStepInterval = steppers[0].seeking_vel;	//ホームピンに反応するまでモータ回す
 8000c3e:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <stepperHoming+0xc4>)
 8000c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <stepperHoming+0xc4>)
 8000c46:	605a      	str	r2, [r3, #4]
	prepareMovement( -100000000);
 8000c48:	482a      	ldr	r0, [pc, #168]	; (8000cf4 <stepperHoming+0xc8>)
 8000c4a:	f7ff fdc1 	bl	80007d0 <prepareMovement>
	runAndWait();
 8000c4e:	f7ff ff9f 	bl	8000b90 <runAndWait>
	HAL_Delay(500);
 8000c52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c56:	f001 fb9f 	bl	8002398 <HAL_Delay>
	//pull-off

	homing_flag &= ~(1 << 0);								//homing_flagが反応したらpull_offだけモータ回す
 8000c5a:	4b24      	ldr	r3, [pc, #144]	; (8000cec <stepperHoming+0xc0>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	f023 0301 	bic.w	r3, r3, #1
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	4b21      	ldr	r3, [pc, #132]	; (8000cec <stepperHoming+0xc0>)
 8000c66:	701a      	strb	r2, [r3, #0]
	prepareMovement(steppers[0].pull_off);
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <stepperHoming+0xc4>)
 8000c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fdaf 	bl	80007d0 <prepareMovement>
	runAndWait();
 8000c72:	f7ff ff8d 	bl	8000b90 <runAndWait>
	HAL_Delay(500);
 8000c76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c7a:	f001 fb8d 	bl	8002398 <HAL_Delay>
	//homing

	homing_flag |= (1 << 0);								//ホームピンに反応するまでモータ回す
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <stepperHoming+0xc0>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <stepperHoming+0xc0>)
 8000c8a:	701a      	strb	r2, [r3, #0]
	steppers[0].minStepInterval = steppers[0].homing_vel;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <stepperHoming+0xc4>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <stepperHoming+0xc4>)
 8000c94:	605a      	str	r2, [r3, #4]
	prepareMovement( -100000000);
 8000c96:	4817      	ldr	r0, [pc, #92]	; (8000cf4 <stepperHoming+0xc8>)
 8000c98:	f7ff fd9a 	bl	80007d0 <prepareMovement>
	runAndWait();
 8000c9c:	f7ff ff78 	bl	8000b90 <runAndWait>
	HAL_Delay(500);
 8000ca0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca4:	f001 fb78 	bl	8002398 <HAL_Delay>
	//pull-off
	homing_flag &= ~(1 << 0);
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <stepperHoming+0xc0>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	f023 0301 	bic.w	r3, r3, #1
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <stepperHoming+0xc0>)
 8000cb4:	701a      	strb	r2, [r3, #0]
	prepareMovement(steppers[0].pull_off);
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <stepperHoming+0xc4>)
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fd88 	bl	80007d0 <prepareMovement>
	runAndWait();
 8000cc0:	f7ff ff66 	bl	8000b90 <runAndWait>
	HAL_Delay(500);
 8000cc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc8:	f001 fb66 	bl	8002398 <HAL_Delay>

	steppers[0].stepPosition = 0;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <stepperHoming+0xc4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
	steppers[0].homing = 1;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <stepperHoming+0xc4>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	741a      	strb	r2, [r3, #16]
	steppers[0].minStepInterval = 500;
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <stepperHoming+0xc4>)
 8000cda:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cde:	605a      	str	r2, [r3, #4]
	printf("homing:\r\n");
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <stepperHoming+0xcc>)
 8000ce2:	f006 f941 	bl	8006f68 <puts>

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000671 	.word	0x20000671
 8000cf0:	20000620 	.word	0x20000620
 8000cf4:	fa0a1f00 	.word	0xfa0a1f00
 8000cf8:	08008050 	.word	0x08008050

08000cfc <TMCsetup>:

void TMCsetup(){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
	int32_t mstep_value = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t toff_value = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
	int32_t microstep_value = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
	int32_t IRUN_value = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
	int32_t IHOLD_value = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
	int32_t IHOLDDELAY_value= 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
	int32_t stallgard_setup_value=0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
	int32_t TCOOLTHRS_value=0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
	int32_t SEMIN_value=0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
	int32_t SEMAX_value=0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]

	IRUN_value = 16;
 8000d2a:	2310      	movs	r3, #16
 8000d2c:	61bb      	str	r3, [r7, #24]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, IRUN_value);	//実行電流
 8000d2e:	2110      	movs	r1, #16
 8000d30:	48c0      	ldr	r0, [pc, #768]	; (8001034 <TMCsetup+0x338>)
 8000d32:	f005 fec6 	bl	8006ac2 <tmc2209_readInt>
 8000d36:	4603      	mov	r3, r0
 8000d38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8000d44:	4313      	orrs	r3, r2
 8000d46:	461a      	mov	r2, r3
 8000d48:	2110      	movs	r1, #16
 8000d4a:	48ba      	ldr	r0, [pc, #744]	; (8001034 <TMCsetup+0x338>)
 8000d4c:	f005 fe69 	bl	8006a22 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000d50:	f001 fb16 	bl	8002380 <HAL_GetTick>
 8000d54:	4603      	mov	r3, r0
 8000d56:	4619      	mov	r1, r3
 8000d58:	48b6      	ldr	r0, [pc, #728]	; (8001034 <TMCsetup+0x338>)
 8000d5a:	f005 ffe8 	bl	8006d2e <tmc2209_periodicJob>
	HAL_Delay(100);
 8000d5e:	2064      	movs	r0, #100	; 0x64
 8000d60:	f001 fb1a 	bl	8002398 <HAL_Delay>
	IHOLD_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 8000d64:	2110      	movs	r1, #16
 8000d66:	48b3      	ldr	r0, [pc, #716]	; (8001034 <TMCsetup+0x338>)
 8000d68:	f005 feab 	bl	8006ac2 <tmc2209_readInt>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	121b      	asrs	r3, r3, #8
 8000d70:	f003 031f 	and.w	r3, r3, #31
 8000d74:	617b      	str	r3, [r7, #20]
	printf("IRUN: %ld\r\n", IRUN_value);
 8000d76:	69b9      	ldr	r1, [r7, #24]
 8000d78:	48af      	ldr	r0, [pc, #700]	; (8001038 <TMCsetup+0x33c>)
 8000d7a:	f006 f86f 	bl	8006e5c <iprintf>

	IHOLD_value=3;																							//モーター待機時の電流の設定
 8000d7e:	2303      	movs	r3, #3
 8000d80:	617b      	str	r3, [r7, #20]
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, IHOLD_value);
 8000d82:	2110      	movs	r1, #16
 8000d84:	48ab      	ldr	r0, [pc, #684]	; (8001034 <TMCsetup+0x338>)
 8000d86:	f005 fe9c 	bl	8006ac2 <tmc2209_readInt>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	f023 021f 	bic.w	r2, r3, #31
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	f003 031f 	and.w	r3, r3, #31
 8000d96:	4313      	orrs	r3, r2
 8000d98:	461a      	mov	r2, r3
 8000d9a:	2110      	movs	r1, #16
 8000d9c:	48a5      	ldr	r0, [pc, #660]	; (8001034 <TMCsetup+0x338>)
 8000d9e:	f005 fe40 	bl	8006a22 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000da2:	f001 faed 	bl	8002380 <HAL_GetTick>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4619      	mov	r1, r3
 8000daa:	48a2      	ldr	r0, [pc, #648]	; (8001034 <TMCsetup+0x338>)
 8000dac:	f005 ffbf 	bl	8006d2e <tmc2209_periodicJob>
	HAL_Delay(100);
 8000db0:	2064      	movs	r0, #100	; 0x64
 8000db2:	f001 faf1 	bl	8002398 <HAL_Delay>
	IHOLD_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//保持電流
 8000db6:	2110      	movs	r1, #16
 8000db8:	489e      	ldr	r0, [pc, #632]	; (8001034 <TMCsetup+0x338>)
 8000dba:	f005 fe82 	bl	8006ac2 <tmc2209_readInt>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	f003 031f 	and.w	r3, r3, #31
 8000dc4:	617b      	str	r3, [r7, #20]
	printf("IHOLD: %ld\r\n", IHOLD_value);
 8000dc6:	6979      	ldr	r1, [r7, #20]
 8000dc8:	489c      	ldr	r0, [pc, #624]	; (800103c <TMCsetup+0x340>)
 8000dca:	f006 f847 	bl	8006e5c <iprintf>

	mstep_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK,TMC2209_MSTEP_REG_SELECT_SHIFT);	//uartでのmicrostepの有効化
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4898      	ldr	r0, [pc, #608]	; (8001034 <TMCsetup+0x338>)
 8000dd2:	f005 fe76 	bl	8006ac2 <tmc2209_readInt>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	11db      	asrs	r3, r3, #7
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
	printf("mstep_before : %ld\r\n", mstep_value);
 8000de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000de2:	4897      	ldr	r0, [pc, #604]	; (8001040 <TMCsetup+0x344>)
 8000de4:	f006 f83a 	bl	8006e5c <iprintf>
	mstep_value = 1;
 8000de8:	2301      	movs	r3, #1
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT,mstep_value);
 8000dec:	2100      	movs	r1, #0
 8000dee:	4891      	ldr	r0, [pc, #580]	; (8001034 <TMCsetup+0x338>)
 8000df0:	f005 fe67 	bl	8006ac2 <tmc2209_readInt>
 8000df4:	4603      	mov	r3, r0
 8000df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfc:	01db      	lsls	r3, r3, #7
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	4313      	orrs	r3, r2
 8000e02:	461a      	mov	r2, r3
 8000e04:	2100      	movs	r1, #0
 8000e06:	488b      	ldr	r0, [pc, #556]	; (8001034 <TMCsetup+0x338>)
 8000e08:	f005 fe0b 	bl	8006a22 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000e0c:	f001 fab8 	bl	8002380 <HAL_GetTick>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4619      	mov	r1, r3
 8000e14:	4887      	ldr	r0, [pc, #540]	; (8001034 <TMCsetup+0x338>)
 8000e16:	f005 ff8a 	bl	8006d2e <tmc2209_periodicJob>
	mstep_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4885      	ldr	r0, [pc, #532]	; (8001034 <TMCsetup+0x338>)
 8000e1e:	f005 fe50 	bl	8006ac2 <tmc2209_readInt>
 8000e22:	4603      	mov	r3, r0
 8000e24:	11db      	asrs	r3, r3, #7
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
	printf("mstep_after : %ld\r\n", mstep_value);
 8000e2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e2e:	4885      	ldr	r0, [pc, #532]	; (8001044 <TMCsetup+0x348>)
 8000e30:	f006 f814 	bl	8006e5c <iprintf>

	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);	//保持トルクの設定
 8000e34:	216c      	movs	r1, #108	; 0x6c
 8000e36:	487f      	ldr	r0, [pc, #508]	; (8001034 <TMCsetup+0x338>)
 8000e38:	f005 fe43 	bl	8006ac2 <tmc2209_readInt>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	623b      	str	r3, [r7, #32]
	printf("toff_before : %ld\r\n", toff_value);
 8000e44:	6a39      	ldr	r1, [r7, #32]
 8000e46:	4880      	ldr	r0, [pc, #512]	; (8001048 <TMCsetup+0x34c>)
 8000e48:	f006 f808 	bl	8006e5c <iprintf>
	toff_value = 4;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	623b      	str	r3, [r7, #32]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,toff_value);
 8000e50:	216c      	movs	r1, #108	; 0x6c
 8000e52:	4878      	ldr	r0, [pc, #480]	; (8001034 <TMCsetup+0x338>)
 8000e54:	f005 fe35 	bl	8006ac2 <tmc2209_readInt>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f023 020f 	bic.w	r2, r3, #15
 8000e5e:	6a3b      	ldr	r3, [r7, #32]
 8000e60:	f003 030f 	and.w	r3, r3, #15
 8000e64:	4313      	orrs	r3, r2
 8000e66:	461a      	mov	r2, r3
 8000e68:	216c      	movs	r1, #108	; 0x6c
 8000e6a:	4872      	ldr	r0, [pc, #456]	; (8001034 <TMCsetup+0x338>)
 8000e6c:	f005 fdd9 	bl	8006a22 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000e70:	f001 fa86 	bl	8002380 <HAL_GetTick>
 8000e74:	4603      	mov	r3, r0
 8000e76:	4619      	mov	r1, r3
 8000e78:	486e      	ldr	r0, [pc, #440]	; (8001034 <TMCsetup+0x338>)
 8000e7a:	f005 ff58 	bl	8006d2e <tmc2209_periodicJob>
	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 8000e7e:	216c      	movs	r1, #108	; 0x6c
 8000e80:	486c      	ldr	r0, [pc, #432]	; (8001034 <TMCsetup+0x338>)
 8000e82:	f005 fe1e 	bl	8006ac2 <tmc2209_readInt>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f003 030f 	and.w	r3, r3, #15
 8000e8c:	623b      	str	r3, [r7, #32]
	printf("toff_after : %ld\r\n", toff_value);
 8000e8e:	6a39      	ldr	r1, [r7, #32]
 8000e90:	486e      	ldr	r0, [pc, #440]	; (800104c <TMCsetup+0x350>)
 8000e92:	f005 ffe3 	bl	8006e5c <iprintf>

	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);	//microstepの設定
 8000e96:	216c      	movs	r1, #108	; 0x6c
 8000e98:	4866      	ldr	r0, [pc, #408]	; (8001034 <TMCsetup+0x338>)
 8000e9a:	f005 fe12 	bl	8006ac2 <tmc2209_readInt>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	161b      	asrs	r3, r3, #24
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eaa:	fa42 f303 	asr.w	r3, r2, r3
 8000eae:	61fb      	str	r3, [r7, #28]
	printf("microstep_before : %ld\r\n", microstep_value);
 8000eb0:	69f9      	ldr	r1, [r7, #28]
 8000eb2:	4867      	ldr	r0, [pc, #412]	; (8001050 <TMCsetup+0x354>)
 8000eb4:	f005 ffd2 	bl	8006e5c <iprintf>
	microstep_value = 4;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	61fb      	str	r3, [r7, #28]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT,microstep_value);
 8000ebc:	216c      	movs	r1, #108	; 0x6c
 8000ebe:	485d      	ldr	r0, [pc, #372]	; (8001034 <TMCsetup+0x338>)
 8000ec0:	f005 fdff 	bl	8006ac2 <tmc2209_readInt>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	061b      	lsls	r3, r3, #24
 8000ece:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	216c      	movs	r1, #108	; 0x6c
 8000ed8:	4856      	ldr	r0, [pc, #344]	; (8001034 <TMCsetup+0x338>)
 8000eda:	f005 fda2 	bl	8006a22 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000ede:	f001 fa4f 	bl	8002380 <HAL_GetTick>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4853      	ldr	r0, [pc, #332]	; (8001034 <TMCsetup+0x338>)
 8000ee8:	f005 ff21 	bl	8006d2e <tmc2209_periodicJob>
	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 8000eec:	216c      	movs	r1, #108	; 0x6c
 8000eee:	4851      	ldr	r0, [pc, #324]	; (8001034 <TMCsetup+0x338>)
 8000ef0:	f005 fde7 	bl	8006ac2 <tmc2209_readInt>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	161b      	asrs	r3, r3, #24
 8000ef8:	f003 030f 	and.w	r3, r3, #15
 8000efc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f00:	fa42 f303 	asr.w	r3, r2, r3
 8000f04:	61fb      	str	r3, [r7, #28]
	printf("microstep_after : %ld\r\n", microstep_value);
 8000f06:	69f9      	ldr	r1, [r7, #28]
 8000f08:	4852      	ldr	r0, [pc, #328]	; (8001054 <TMCsetup+0x358>)
 8000f0a:	f005 ffa7 	bl	8006e5c <iprintf>

	IHOLDDELAY_value=4;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	613b      	str	r3, [r7, #16]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT, IHOLDDELAY_value);
 8000f12:	2110      	movs	r1, #16
 8000f14:	4847      	ldr	r0, [pc, #284]	; (8001034 <TMCsetup+0x338>)
 8000f16:	f005 fdd4 	bl	8006ac2 <tmc2209_readInt>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	041b      	lsls	r3, r3, #16
 8000f24:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	2110      	movs	r1, #16
 8000f2e:	4841      	ldr	r0, [pc, #260]	; (8001034 <TMCsetup+0x338>)
 8000f30:	f005 fd77 	bl	8006a22 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000f34:	f001 fa24 	bl	8002380 <HAL_GetTick>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	483d      	ldr	r0, [pc, #244]	; (8001034 <TMCsetup+0x338>)
 8000f3e:	f005 fef6 	bl	8006d2e <tmc2209_periodicJob>
	IHOLDDELAY_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT);
 8000f42:	2110      	movs	r1, #16
 8000f44:	483b      	ldr	r0, [pc, #236]	; (8001034 <TMCsetup+0x338>)
 8000f46:	f005 fdbc 	bl	8006ac2 <tmc2209_readInt>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	141b      	asrs	r3, r3, #16
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	613b      	str	r3, [r7, #16]
	printf("IHOLDDELAY: %ld\r\n", IHOLDDELAY_value);
 8000f54:	6939      	ldr	r1, [r7, #16]
 8000f56:	4840      	ldr	r0, [pc, #256]	; (8001058 <TMCsetup+0x35c>)
 8000f58:	f005 ff80 	bl	8006e5c <iprintf>

	stallgard_setup_value=20;											//SG_RESULTと比較して、
 8000f5c:	2314      	movs	r3, #20
 8000f5e:	60fb      	str	r3, [r7, #12]
	tmc2209_writeInt(&TMC2209, TMC2209_SGTHRS, stallgard_setup_value);
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	2140      	movs	r1, #64	; 0x40
 8000f64:	4833      	ldr	r0, [pc, #204]	; (8001034 <TMCsetup+0x338>)
 8000f66:	f005 fd5c 	bl	8006a22 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000f6a:	f001 fa09 	bl	8002380 <HAL_GetTick>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4619      	mov	r1, r3
 8000f72:	4830      	ldr	r0, [pc, #192]	; (8001034 <TMCsetup+0x338>)
 8000f74:	f005 fedb 	bl	8006d2e <tmc2209_periodicJob>
	stallgard_setup_value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
 8000f78:	2140      	movs	r1, #64	; 0x40
 8000f7a:	482e      	ldr	r0, [pc, #184]	; (8001034 <TMCsetup+0x338>)
 8000f7c:	f005 fda1 	bl	8006ac2 <tmc2209_readInt>
 8000f80:	60f8      	str	r0, [r7, #12]
	printf("SGTHRS: %ld\r\n", stallgard_setup_value);
 8000f82:	68f9      	ldr	r1, [r7, #12]
 8000f84:	4835      	ldr	r0, [pc, #212]	; (800105c <TMCsetup+0x360>)
 8000f86:	f005 ff69 	bl	8006e5c <iprintf>

	TCOOLTHRS_value=1000;
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	60bb      	str	r3, [r7, #8]

	tmc2209_writeInt(&TMC2209, TMC2209_TCOOLTHRS, TCOOLTHRS_value);
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	2114      	movs	r1, #20
 8000f94:	4827      	ldr	r0, [pc, #156]	; (8001034 <TMCsetup+0x338>)
 8000f96:	f005 fd44 	bl	8006a22 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000f9a:	f001 f9f1 	bl	8002380 <HAL_GetTick>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4824      	ldr	r0, [pc, #144]	; (8001034 <TMCsetup+0x338>)
 8000fa4:	f005 fec3 	bl	8006d2e <tmc2209_periodicJob>
	printf("TCOOLTHRS: %ld\r\n", TCOOLTHRS_value);
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	482d      	ldr	r0, [pc, #180]	; (8001060 <TMCsetup+0x364>)
 8000fac:	f005 ff56 	bl	8006e5c <iprintf>

	SEMIN_value=5;
 8000fb0:	2305      	movs	r3, #5
 8000fb2:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT, SEMIN_value);
 8000fb4:	2142      	movs	r1, #66	; 0x42
 8000fb6:	481f      	ldr	r0, [pc, #124]	; (8001034 <TMCsetup+0x338>)
 8000fb8:	f005 fd83 	bl	8006ac2 <tmc2209_readInt>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	03db      	lsls	r3, r3, #15
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	461a      	mov	r2, r3
 8000fcc:	2142      	movs	r1, #66	; 0x42
 8000fce:	4819      	ldr	r0, [pc, #100]	; (8001034 <TMCsetup+0x338>)
 8000fd0:	f005 fd27 	bl	8006a22 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000fd4:	f001 f9d4 	bl	8002380 <HAL_GetTick>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4815      	ldr	r0, [pc, #84]	; (8001034 <TMCsetup+0x338>)
 8000fde:	f005 fea6 	bl	8006d2e <tmc2209_periodicJob>
	printf("SEMIN: %ld\r\n", SEMIN_value);
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	481f      	ldr	r0, [pc, #124]	; (8001064 <TMCsetup+0x368>)
 8000fe6:	f005 ff39 	bl	8006e5c <iprintf>

	SEMAX_value = 2;
 8000fea:	2302      	movs	r3, #2
 8000fec:	603b      	str	r3, [r7, #0]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT, SEMIN_value);
 8000fee:	2142      	movs	r1, #66	; 0x42
 8000ff0:	4810      	ldr	r0, [pc, #64]	; (8001034 <TMCsetup+0x338>)
 8000ff2:	f005 fd66 	bl	8006ac2 <tmc2209_readInt>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	03db      	lsls	r3, r3, #15
 8001000:	b29b      	uxth	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	461a      	mov	r2, r3
 8001006:	2142      	movs	r1, #66	; 0x42
 8001008:	480a      	ldr	r0, [pc, #40]	; (8001034 <TMCsetup+0x338>)
 800100a:	f005 fd0a 	bl	8006a22 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800100e:	f001 f9b7 	bl	8002380 <HAL_GetTick>
 8001012:	4603      	mov	r3, r0
 8001014:	4619      	mov	r1, r3
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <TMCsetup+0x338>)
 8001018:	f005 fe89 	bl	8006d2e <tmc2209_periodicJob>
	printf("SEMAX: %ld\r\n", SEMAX_value);
 800101c:	6839      	ldr	r1, [r7, #0]
 800101e:	4812      	ldr	r0, [pc, #72]	; (8001068 <TMCsetup+0x36c>)
 8001020:	f005 ff1c 	bl	8006e5c <iprintf>

	end_flag=1;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <TMCsetup+0x370>)
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]

}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	; 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000184 	.word	0x20000184
 8001038:	0800805c 	.word	0x0800805c
 800103c:	08008068 	.word	0x08008068
 8001040:	08008078 	.word	0x08008078
 8001044:	08008090 	.word	0x08008090
 8001048:	080080a4 	.word	0x080080a4
 800104c:	080080b8 	.word	0x080080b8
 8001050:	080080cc 	.word	0x080080cc
 8001054:	080080e8 	.word	0x080080e8
 8001058:	08008100 	.word	0x08008100
 800105c:	08008114 	.word	0x08008114
 8001060:	08008124 	.word	0x08008124
 8001064:	08008138 	.word	0x08008138
 8001068:	08008148 	.word	0x08008148
 800106c:	200006ed 	.word	0x200006ed

08001070 <RMDCommand>:

void RMDCommand(){
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
//	int i = 0;
	int count=0;
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
	TxHeader.StdId=0x141;
 800107a:	4b93      	ldr	r3, [pc, #588]	; (80012c8 <RMDCommand+0x258>)
 800107c:	f240 1241 	movw	r2, #321	; 0x141
 8001080:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 8001082:	4b91      	ldr	r3, [pc, #580]	; (80012c8 <RMDCommand+0x258>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 8001088:	4b8f      	ldr	r3, [pc, #572]	; (80012c8 <RMDCommand+0x258>)
 800108a:	2208      	movs	r2, #8
 800108c:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 800108e:	4b8e      	ldr	r3, [pc, #568]	; (80012c8 <RMDCommand+0x258>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001094:	4b8c      	ldr	r3, [pc, #560]	; (80012c8 <RMDCommand+0x258>)
 8001096:	2200      	movs	r2, #0
 8001098:	751a      	strb	r2, [r3, #20]
	TxData[1] = 0x00;
 800109a:	4b8c      	ldr	r3, [pc, #560]	; (80012cc <RMDCommand+0x25c>)
 800109c:	2200      	movs	r2, #0
 800109e:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0x00;
 80010a0:	4b8a      	ldr	r3, [pc, #552]	; (80012cc <RMDCommand+0x25c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0x00;
 80010a6:	4b89      	ldr	r3, [pc, #548]	; (80012cc <RMDCommand+0x25c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	70da      	strb	r2, [r3, #3]
	TxData[4] = 0x00;
 80010ac:	4b87      	ldr	r3, [pc, #540]	; (80012cc <RMDCommand+0x25c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	711a      	strb	r2, [r3, #4]
	TxData[5] = 0x00;
 80010b2:	4b86      	ldr	r3, [pc, #536]	; (80012cc <RMDCommand+0x25c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	715a      	strb	r2, [r3, #5]
	TxData[6] = 0x00;
 80010b8:	4b84      	ldr	r3, [pc, #528]	; (80012cc <RMDCommand+0x25c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	719a      	strb	r2, [r3, #6]
	TxData[7] = 0x00;
 80010be:	4b83      	ldr	r3, [pc, #524]	; (80012cc <RMDCommand+0x25c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	71da      	strb	r2, [r3, #7]
	switch(Writecom){
 80010c4:	4b82      	ldr	r3, [pc, #520]	; (80012d0 <RMDCommand+0x260>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2ba4      	cmp	r3, #164	; 0xa4
 80010ca:	d065      	beq.n	8001198 <RMDCommand+0x128>
 80010cc:	2ba4      	cmp	r3, #164	; 0xa4
 80010ce:	dc7e      	bgt.n	80011ce <RMDCommand+0x15e>
 80010d0:	2ba1      	cmp	r3, #161	; 0xa1
 80010d2:	d055      	beq.n	8001180 <RMDCommand+0x110>
 80010d4:	2ba1      	cmp	r3, #161	; 0xa1
 80010d6:	dc7a      	bgt.n	80011ce <RMDCommand+0x15e>
 80010d8:	2b34      	cmp	r3, #52	; 0x34
 80010da:	d03d      	beq.n	8001158 <RMDCommand+0xe8>
 80010dc:	2b34      	cmp	r3, #52	; 0x34
 80010de:	dc76      	bgt.n	80011ce <RMDCommand+0x15e>
 80010e0:	2b31      	cmp	r3, #49	; 0x31
 80010e2:	d002      	beq.n	80010ea <RMDCommand+0x7a>
 80010e4:	2b32      	cmp	r3, #50	; 0x32
 80010e6:	d01b      	beq.n	8001120 <RMDCommand+0xb0>
 80010e8:	e071      	b.n	80011ce <RMDCommand+0x15e>
		case 0x31:
			TxData[0] = 0x31;	//PI設定
 80010ea:	4b78      	ldr	r3, [pc, #480]	; (80012cc <RMDCommand+0x25c>)
 80010ec:	2231      	movs	r2, #49	; 0x31
 80010ee:	701a      	strb	r2, [r3, #0]
			TxData[2] = UART1_Data[2];	//anglePidKp
 80010f0:	4b78      	ldr	r3, [pc, #480]	; (80012d4 <RMDCommand+0x264>)
 80010f2:	789a      	ldrb	r2, [r3, #2]
 80010f4:	4b75      	ldr	r3, [pc, #468]	; (80012cc <RMDCommand+0x25c>)
 80010f6:	709a      	strb	r2, [r3, #2]
			TxData[3] = UART1_Data[3];	//anglePidKi
 80010f8:	4b76      	ldr	r3, [pc, #472]	; (80012d4 <RMDCommand+0x264>)
 80010fa:	78da      	ldrb	r2, [r3, #3]
 80010fc:	4b73      	ldr	r3, [pc, #460]	; (80012cc <RMDCommand+0x25c>)
 80010fe:	70da      	strb	r2, [r3, #3]
			TxData[4] = UART1_Data[4];	//speedPidKp
 8001100:	4b74      	ldr	r3, [pc, #464]	; (80012d4 <RMDCommand+0x264>)
 8001102:	791a      	ldrb	r2, [r3, #4]
 8001104:	4b71      	ldr	r3, [pc, #452]	; (80012cc <RMDCommand+0x25c>)
 8001106:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];	//speedPidKi
 8001108:	4b72      	ldr	r3, [pc, #456]	; (80012d4 <RMDCommand+0x264>)
 800110a:	795a      	ldrb	r2, [r3, #5]
 800110c:	4b6f      	ldr	r3, [pc, #444]	; (80012cc <RMDCommand+0x25c>)
 800110e:	715a      	strb	r2, [r3, #5]
			TxData[6] = UART1_Data[6];	//iqPidKp
 8001110:	4b70      	ldr	r3, [pc, #448]	; (80012d4 <RMDCommand+0x264>)
 8001112:	799a      	ldrb	r2, [r3, #6]
 8001114:	4b6d      	ldr	r3, [pc, #436]	; (80012cc <RMDCommand+0x25c>)
 8001116:	719a      	strb	r2, [r3, #6]
			TxData[7] = UART1_Data[7];	//iqPidKi
 8001118:	4b6e      	ldr	r3, [pc, #440]	; (80012d4 <RMDCommand+0x264>)
 800111a:	79da      	ldrb	r2, [r3, #7]
 800111c:	4b6b      	ldr	r3, [pc, #428]	; (80012cc <RMDCommand+0x25c>)
 800111e:	71da      	strb	r2, [r3, #7]
		case 0x32:
			TxData[0] = 0x32;	//PI設定
 8001120:	4b6a      	ldr	r3, [pc, #424]	; (80012cc <RMDCommand+0x25c>)
 8001122:	2232      	movs	r2, #50	; 0x32
 8001124:	701a      	strb	r2, [r3, #0]
			TxData[2] = UART1_Data[2];	//anglePidKp
 8001126:	4b6b      	ldr	r3, [pc, #428]	; (80012d4 <RMDCommand+0x264>)
 8001128:	789a      	ldrb	r2, [r3, #2]
 800112a:	4b68      	ldr	r3, [pc, #416]	; (80012cc <RMDCommand+0x25c>)
 800112c:	709a      	strb	r2, [r3, #2]
			TxData[3] = UART1_Data[3];	//anglePidKi
 800112e:	4b69      	ldr	r3, [pc, #420]	; (80012d4 <RMDCommand+0x264>)
 8001130:	78da      	ldrb	r2, [r3, #3]
 8001132:	4b66      	ldr	r3, [pc, #408]	; (80012cc <RMDCommand+0x25c>)
 8001134:	70da      	strb	r2, [r3, #3]
			TxData[4] = UART1_Data[4];	//speedPidKp
 8001136:	4b67      	ldr	r3, [pc, #412]	; (80012d4 <RMDCommand+0x264>)
 8001138:	791a      	ldrb	r2, [r3, #4]
 800113a:	4b64      	ldr	r3, [pc, #400]	; (80012cc <RMDCommand+0x25c>)
 800113c:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];	//speedPidKi
 800113e:	4b65      	ldr	r3, [pc, #404]	; (80012d4 <RMDCommand+0x264>)
 8001140:	795a      	ldrb	r2, [r3, #5]
 8001142:	4b62      	ldr	r3, [pc, #392]	; (80012cc <RMDCommand+0x25c>)
 8001144:	715a      	strb	r2, [r3, #5]
			TxData[6] = UART1_Data[6];	//iqPidKp
 8001146:	4b63      	ldr	r3, [pc, #396]	; (80012d4 <RMDCommand+0x264>)
 8001148:	799a      	ldrb	r2, [r3, #6]
 800114a:	4b60      	ldr	r3, [pc, #384]	; (80012cc <RMDCommand+0x25c>)
 800114c:	719a      	strb	r2, [r3, #6]
			TxData[7] = UART1_Data[7];	//iqPidKi
 800114e:	4b61      	ldr	r3, [pc, #388]	; (80012d4 <RMDCommand+0x264>)
 8001150:	79da      	ldrb	r2, [r3, #7]
 8001152:	4b5e      	ldr	r3, [pc, #376]	; (80012cc <RMDCommand+0x25c>)
 8001154:	71da      	strb	r2, [r3, #7]
			break;
 8001156:	e041      	b.n	80011dc <RMDCommand+0x16c>
		case 0x34:
			TxData[0] = 0x34;	//accelePI設定
 8001158:	4b5c      	ldr	r3, [pc, #368]	; (80012cc <RMDCommand+0x25c>)
 800115a:	2234      	movs	r2, #52	; 0x34
 800115c:	701a      	strb	r2, [r3, #0]
			TxData[4] = UART1_Data[4];	//speedI
 800115e:	4b5d      	ldr	r3, [pc, #372]	; (80012d4 <RMDCommand+0x264>)
 8001160:	791a      	ldrb	r2, [r3, #4]
 8001162:	4b5a      	ldr	r3, [pc, #360]	; (80012cc <RMDCommand+0x25c>)
 8001164:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];	//TorqueP
 8001166:	4b5b      	ldr	r3, [pc, #364]	; (80012d4 <RMDCommand+0x264>)
 8001168:	795a      	ldrb	r2, [r3, #5]
 800116a:	4b58      	ldr	r3, [pc, #352]	; (80012cc <RMDCommand+0x25c>)
 800116c:	715a      	strb	r2, [r3, #5]
			TxData[6] = UART1_Data[6];	//TorqueI
 800116e:	4b59      	ldr	r3, [pc, #356]	; (80012d4 <RMDCommand+0x264>)
 8001170:	799a      	ldrb	r2, [r3, #6]
 8001172:	4b56      	ldr	r3, [pc, #344]	; (80012cc <RMDCommand+0x25c>)
 8001174:	719a      	strb	r2, [r3, #6]
			TxData[7] = UART1_Data[7];	//PosI
 8001176:	4b57      	ldr	r3, [pc, #348]	; (80012d4 <RMDCommand+0x264>)
 8001178:	79da      	ldrb	r2, [r3, #7]
 800117a:	4b54      	ldr	r3, [pc, #336]	; (80012cc <RMDCommand+0x25c>)
 800117c:	71da      	strb	r2, [r3, #7]
			break;
 800117e:	e02d      	b.n	80011dc <RMDCommand+0x16c>
		case 0xA1:
			TxData[0] = 0xA1;	//Torque設定
 8001180:	4b52      	ldr	r3, [pc, #328]	; (80012cc <RMDCommand+0x25c>)
 8001182:	22a1      	movs	r2, #161	; 0xa1
 8001184:	701a      	strb	r2, [r3, #0]
			TxData[4] = UART1_Data[4];	//currentlow
 8001186:	4b53      	ldr	r3, [pc, #332]	; (80012d4 <RMDCommand+0x264>)
 8001188:	791a      	ldrb	r2, [r3, #4]
 800118a:	4b50      	ldr	r3, [pc, #320]	; (80012cc <RMDCommand+0x25c>)
 800118c:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];	//currenthigh
 800118e:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <RMDCommand+0x264>)
 8001190:	795a      	ldrb	r2, [r3, #5]
 8001192:	4b4e      	ldr	r3, [pc, #312]	; (80012cc <RMDCommand+0x25c>)
 8001194:	715a      	strb	r2, [r3, #5]
			break;
 8001196:	e021      	b.n	80011dc <RMDCommand+0x16c>
		case 0xA4:
			TxData[0] = 0xA4;
 8001198:	4b4c      	ldr	r3, [pc, #304]	; (80012cc <RMDCommand+0x25c>)
 800119a:	22a4      	movs	r2, #164	; 0xa4
 800119c:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x00;
 800119e:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <RMDCommand+0x25c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x2C;	//speed low
 80011a4:	4b49      	ldr	r3, [pc, #292]	; (80012cc <RMDCommand+0x25c>)
 80011a6:	222c      	movs	r2, #44	; 0x2c
 80011a8:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x01;	//speed high
 80011aa:	4b48      	ldr	r3, [pc, #288]	; (80012cc <RMDCommand+0x25c>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	70da      	strb	r2, [r3, #3]
			TxData[4] = UART1_Data[4];	//poslow
 80011b0:	4b48      	ldr	r3, [pc, #288]	; (80012d4 <RMDCommand+0x264>)
 80011b2:	791a      	ldrb	r2, [r3, #4]
 80011b4:	4b45      	ldr	r3, [pc, #276]	; (80012cc <RMDCommand+0x25c>)
 80011b6:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];
 80011b8:	4b46      	ldr	r3, [pc, #280]	; (80012d4 <RMDCommand+0x264>)
 80011ba:	795a      	ldrb	r2, [r3, #5]
 80011bc:	4b43      	ldr	r3, [pc, #268]	; (80012cc <RMDCommand+0x25c>)
 80011be:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 80011c0:	4b42      	ldr	r3, [pc, #264]	; (80012cc <RMDCommand+0x25c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;	//poshigh
 80011c6:	4b41      	ldr	r3, [pc, #260]	; (80012cc <RMDCommand+0x25c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	71da      	strb	r2, [r3, #7]
			break;
 80011cc:	e006      	b.n	80011dc <RMDCommand+0x16c>
		default:
			printf("No Data Writecom\r\n");
 80011ce:	4842      	ldr	r0, [pc, #264]	; (80012d8 <RMDCommand+0x268>)
 80011d0:	f005 feca 	bl	8006f68 <puts>
			end_flag=1;
 80011d4:	4b41      	ldr	r3, [pc, #260]	; (80012dc <RMDCommand+0x26c>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
			break;
 80011da:	bf00      	nop
		}
	Writecom=0x00;
 80011dc:	4b3c      	ldr	r3, [pc, #240]	; (80012d0 <RMDCommand+0x260>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
	switch(Readcom){
 80011e2:	4b3f      	ldr	r3, [pc, #252]	; (80012e0 <RMDCommand+0x270>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2ba1      	cmp	r3, #161	; 0xa1
 80011e8:	d01a      	beq.n	8001220 <RMDCommand+0x1b0>
 80011ea:	2ba1      	cmp	r3, #161	; 0xa1
 80011ec:	dc1f      	bgt.n	800122e <RMDCommand+0x1be>
 80011ee:	2b9c      	cmp	r3, #156	; 0x9c
 80011f0:	d012      	beq.n	8001218 <RMDCommand+0x1a8>
 80011f2:	2b9c      	cmp	r3, #156	; 0x9c
 80011f4:	dc1b      	bgt.n	800122e <RMDCommand+0x1be>
 80011f6:	2b90      	cmp	r3, #144	; 0x90
 80011f8:	d015      	beq.n	8001226 <RMDCommand+0x1b6>
 80011fa:	2b90      	cmp	r3, #144	; 0x90
 80011fc:	dc17      	bgt.n	800122e <RMDCommand+0x1be>
 80011fe:	2b30      	cmp	r3, #48	; 0x30
 8001200:	d002      	beq.n	8001208 <RMDCommand+0x198>
 8001202:	2b33      	cmp	r3, #51	; 0x33
 8001204:	d004      	beq.n	8001210 <RMDCommand+0x1a0>
 8001206:	e012      	b.n	800122e <RMDCommand+0x1be>
		case 0x30:
			TxData[0] = 0x30;
 8001208:	4b30      	ldr	r3, [pc, #192]	; (80012cc <RMDCommand+0x25c>)
 800120a:	2230      	movs	r2, #48	; 0x30
 800120c:	701a      	strb	r2, [r3, #0]
			break;
 800120e:	e015      	b.n	800123c <RMDCommand+0x1cc>
		case 0x33:
			TxData[0] = 0x33;
 8001210:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <RMDCommand+0x25c>)
 8001212:	2233      	movs	r2, #51	; 0x33
 8001214:	701a      	strb	r2, [r3, #0]
			break;
 8001216:	e011      	b.n	800123c <RMDCommand+0x1cc>
		case 0x9C:
			TxData[0] = 0x9C;
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <RMDCommand+0x25c>)
 800121a:	229c      	movs	r2, #156	; 0x9c
 800121c:	701a      	strb	r2, [r3, #0]
			break;
 800121e:	e00d      	b.n	800123c <RMDCommand+0x1cc>
		case 0xA1:
			TxData[0] = 0xA1;
 8001220:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <RMDCommand+0x25c>)
 8001222:	22a1      	movs	r2, #161	; 0xa1
 8001224:	701a      	strb	r2, [r3, #0]
		case 0x90:
			TxData[0] = 0x90;
 8001226:	4b29      	ldr	r3, [pc, #164]	; (80012cc <RMDCommand+0x25c>)
 8001228:	2290      	movs	r2, #144	; 0x90
 800122a:	701a      	strb	r2, [r3, #0]
			break;
 800122c:	e006      	b.n	800123c <RMDCommand+0x1cc>
		default:
			printf("No Data Readcom\r\n");
 800122e:	482d      	ldr	r0, [pc, #180]	; (80012e4 <RMDCommand+0x274>)
 8001230:	f005 fe9a 	bl	8006f68 <puts>
			end_flag=1;
 8001234:	4b29      	ldr	r3, [pc, #164]	; (80012dc <RMDCommand+0x26c>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
			break;
 800123a:	bf00      	nop
	}
	Readcom=0x00;
 800123c:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <RMDCommand+0x270>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) ){
 8001242:	4829      	ldr	r0, [pc, #164]	; (80012e8 <RMDCommand+0x278>)
 8001244:	f001 fc10 	bl	8002a68 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d02e      	beq.n	80012ac <RMDCommand+0x23c>
		HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 800124e:	4b27      	ldr	r3, [pc, #156]	; (80012ec <RMDCommand+0x27c>)
 8001250:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <RMDCommand+0x25c>)
 8001252:	491d      	ldr	r1, [pc, #116]	; (80012c8 <RMDCommand+0x258>)
 8001254:	4824      	ldr	r0, [pc, #144]	; (80012e8 <RMDCommand+0x278>)
 8001256:	f001 fb2c 	bl	80028b2 <HAL_CAN_AddTxMessage>
		HAL_Delay(1);
 800125a:	2001      	movs	r0, #1
 800125c:	f001 f89c 	bl	8002398 <HAL_Delay>
//		printf("Can Send\r\n");
		while(!nextcan_flag){
 8001260:	e01a      	b.n	8001298 <RMDCommand+0x228>
//			printf("Mailboxes: %d\r\n",HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
			HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 8001262:	4b22      	ldr	r3, [pc, #136]	; (80012ec <RMDCommand+0x27c>)
 8001264:	4a19      	ldr	r2, [pc, #100]	; (80012cc <RMDCommand+0x25c>)
 8001266:	4918      	ldr	r1, [pc, #96]	; (80012c8 <RMDCommand+0x258>)
 8001268:	481f      	ldr	r0, [pc, #124]	; (80012e8 <RMDCommand+0x278>)
 800126a:	f001 fb22 	bl	80028b2 <HAL_CAN_AddTxMessage>
			HAL_Delay(1);
 800126e:	2001      	movs	r0, #1
 8001270:	f001 f892 	bl	8002398 <HAL_Delay>
			count++;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3301      	adds	r3, #1
 8001278:	607b      	str	r3, [r7, #4]
			if(count==10){
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b0a      	cmp	r3, #10
 800127e:	d10b      	bne.n	8001298 <RMDCommand+0x228>
				nextcan_flag=1;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <RMDCommand+0x280>)
 8001282:	2201      	movs	r2, #1
 8001284:	701a      	strb	r2, [r3, #0]
				HAL_CAN_Stop (&hcan1);
 8001286:	4818      	ldr	r0, [pc, #96]	; (80012e8 <RMDCommand+0x278>)
 8001288:	f001 faca 	bl	8002820 <HAL_CAN_Stop>
				//HAL_CAN_AbortTxRequest(&hcan1,TxMailbox);
				HAL_CAN_Start(&hcan1);
 800128c:	4816      	ldr	r0, [pc, #88]	; (80012e8 <RMDCommand+0x278>)
 800128e:	f001 fa83 	bl	8002798 <HAL_CAN_Start>
				printf("CAN RESET\r\n");
 8001292:	4818      	ldr	r0, [pc, #96]	; (80012f4 <RMDCommand+0x284>)
 8001294:	f005 fe68 	bl	8006f68 <puts>
		while(!nextcan_flag){
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <RMDCommand+0x280>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0e0      	beq.n	8001262 <RMDCommand+0x1f2>
			}
		}
		nextcan_flag=0;
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <RMDCommand+0x280>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
		count=0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
	}else{
		printf("Mailbox_congestion\r\n");
		nextcan_flag=0;
		end_flag=1;
	}
}
 80012aa:	e008      	b.n	80012be <RMDCommand+0x24e>
		printf("Mailbox_congestion\r\n");
 80012ac:	4812      	ldr	r0, [pc, #72]	; (80012f8 <RMDCommand+0x288>)
 80012ae:	f005 fe5b 	bl	8006f68 <puts>
		nextcan_flag=0;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <RMDCommand+0x280>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
		end_flag=1;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <RMDCommand+0x26c>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000069c 	.word	0x2000069c
 80012cc:	200006d0 	.word	0x200006d0
 80012d0:	200006f0 	.word	0x200006f0
 80012d4:	200006e4 	.word	0x200006e4
 80012d8:	08008158 	.word	0x08008158
 80012dc:	200006ed 	.word	0x200006ed
 80012e0:	200006f4 	.word	0x200006f4
 80012e4:	0800816c 	.word	0x0800816c
 80012e8:	2000008c 	.word	0x2000008c
 80012ec:	200006e0 	.word	0x200006e0
 80012f0:	200006ee 	.word	0x200006ee
 80012f4:	08008180 	.word	0x08008180
 80012f8:	0800818c 	.word	0x0800818c

080012fc <SetUpRMD>:
void SetUpRMD(){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	UART1_Data[4] = 0x50;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <SetUpRMD+0x20>)
 8001302:	2250      	movs	r2, #80	; 0x50
 8001304:	711a      	strb	r2, [r3, #4]
	UART1_Data[5] = 0x46;
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <SetUpRMD+0x20>)
 8001308:	2246      	movs	r2, #70	; 0x46
 800130a:	715a      	strb	r2, [r3, #5]
	Writecom = 0xA4;
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SetUpRMD+0x24>)
 800130e:	22a4      	movs	r2, #164	; 0xa4
 8001310:	601a      	str	r2, [r3, #0]
	RMDCommand();
 8001312:	f7ff fead 	bl	8001070 <RMDCommand>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200006e4 	.word	0x200006e4
 8001320:	200006f0 	.word	0x200006f0

08001324 <RMDLeftTurn>:
void RMDLeftTurn(){
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	UART1_Data[4] = 0xE0;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <RMDLeftTurn+0x20>)
 800132a:	22e0      	movs	r2, #224	; 0xe0
 800132c:	711a      	strb	r2, [r3, #4]
	UART1_Data[5] = 0x2E;
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <RMDLeftTurn+0x20>)
 8001330:	222e      	movs	r2, #46	; 0x2e
 8001332:	715a      	strb	r2, [r3, #5]
	Writecom=0xA4;
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <RMDLeftTurn+0x24>)
 8001336:	22a4      	movs	r2, #164	; 0xa4
 8001338:	601a      	str	r2, [r3, #0]
	RMDCommand();
 800133a:	f7ff fe99 	bl	8001070 <RMDCommand>
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200006e4 	.word	0x200006e4
 8001348:	200006f0 	.word	0x200006f0

0800134c <RMDRightTurn>:
void RMDRightTurn(){
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	UART1_Data[4] = 0xC0;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <RMDRightTurn+0x20>)
 8001352:	22c0      	movs	r2, #192	; 0xc0
 8001354:	711a      	strb	r2, [r3, #4]
	UART1_Data[5] = 0x5D;
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <RMDRightTurn+0x20>)
 8001358:	225d      	movs	r2, #93	; 0x5d
 800135a:	715a      	strb	r2, [r3, #5]
	Writecom=0xA4;
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <RMDRightTurn+0x24>)
 800135e:	22a4      	movs	r2, #164	; 0xa4
 8001360:	601a      	str	r2, [r3, #0]
	RMDCommand();
 8001362:	f7ff fe85 	bl	8001070 <RMDCommand>
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200006e4 	.word	0x200006e4
 8001370:	200006f0 	.word	0x200006f0

08001374 <checkRMDdata>:
void checkRMDdata(){
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
	int RxBitshift[4];
	RxBitshift[0]=0;
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
	RxBitshift[1]=0;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
	RxBitshift[2]=0;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
	RxBitshift[3]=0;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
	Readcom=0x30;
 800138a:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <checkRMDdata+0x140>)
 800138c:	2230      	movs	r2, #48	; 0x30
 800138e:	601a      	str	r2, [r3, #0]
	RMDCommand();
 8001390:	f7ff fe6e 	bl	8001070 <RMDCommand>
	printf("0x30\r\n");
 8001394:	4848      	ldr	r0, [pc, #288]	; (80014b8 <checkRMDdata+0x144>)
 8001396:	f005 fde7 	bl	8006f68 <puts>
	printf("Position loop Kp :%d \r\n",RxData[2]);
 800139a:	4b48      	ldr	r3, [pc, #288]	; (80014bc <checkRMDdata+0x148>)
 800139c:	789b      	ldrb	r3, [r3, #2]
 800139e:	4619      	mov	r1, r3
 80013a0:	4847      	ldr	r0, [pc, #284]	; (80014c0 <checkRMDdata+0x14c>)
 80013a2:	f005 fd5b 	bl	8006e5c <iprintf>
	printf("Position loop Ki :%d \r\n",RxData[3]);
 80013a6:	4b45      	ldr	r3, [pc, #276]	; (80014bc <checkRMDdata+0x148>)
 80013a8:	78db      	ldrb	r3, [r3, #3]
 80013aa:	4619      	mov	r1, r3
 80013ac:	4845      	ldr	r0, [pc, #276]	; (80014c4 <checkRMDdata+0x150>)
 80013ae:	f005 fd55 	bl	8006e5c <iprintf>
	printf("Speed loop Kp :%d \r\n",RxData[4]);
 80013b2:	4b42      	ldr	r3, [pc, #264]	; (80014bc <checkRMDdata+0x148>)
 80013b4:	791b      	ldrb	r3, [r3, #4]
 80013b6:	4619      	mov	r1, r3
 80013b8:	4843      	ldr	r0, [pc, #268]	; (80014c8 <checkRMDdata+0x154>)
 80013ba:	f005 fd4f 	bl	8006e5c <iprintf>
	printf("Speed loop Ki :%d \r\n",RxData[5]);
 80013be:	4b3f      	ldr	r3, [pc, #252]	; (80014bc <checkRMDdata+0x148>)
 80013c0:	795b      	ldrb	r3, [r3, #5]
 80013c2:	4619      	mov	r1, r3
 80013c4:	4841      	ldr	r0, [pc, #260]	; (80014cc <checkRMDdata+0x158>)
 80013c6:	f005 fd49 	bl	8006e5c <iprintf>
	printf("Torque loop Kp :%d \r\n",RxData[6]);
 80013ca:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <checkRMDdata+0x148>)
 80013cc:	799b      	ldrb	r3, [r3, #6]
 80013ce:	4619      	mov	r1, r3
 80013d0:	483f      	ldr	r0, [pc, #252]	; (80014d0 <checkRMDdata+0x15c>)
 80013d2:	f005 fd43 	bl	8006e5c <iprintf>
	printf("Torque loop Ki :%d \r\n",RxData[7]);
 80013d6:	4b39      	ldr	r3, [pc, #228]	; (80014bc <checkRMDdata+0x148>)
 80013d8:	79db      	ldrb	r3, [r3, #7]
 80013da:	4619      	mov	r1, r3
 80013dc:	483d      	ldr	r0, [pc, #244]	; (80014d4 <checkRMDdata+0x160>)
 80013de:	f005 fd3d 	bl	8006e5c <iprintf>

	Readcom=0x33;
 80013e2:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <checkRMDdata+0x140>)
 80013e4:	2233      	movs	r2, #51	; 0x33
 80013e6:	601a      	str	r2, [r3, #0]
	RMDCommand();
 80013e8:	f7ff fe42 	bl	8001070 <RMDCommand>
	printf("0x33\r\n");
 80013ec:	483a      	ldr	r0, [pc, #232]	; (80014d8 <checkRMDdata+0x164>)
 80013ee:	f005 fdbb 	bl	8006f68 <puts>
	printf("Position loop P:%d \r\n",RxData[2]);
 80013f2:	4b32      	ldr	r3, [pc, #200]	; (80014bc <checkRMDdata+0x148>)
 80013f4:	789b      	ldrb	r3, [r3, #2]
 80013f6:	4619      	mov	r1, r3
 80013f8:	4838      	ldr	r0, [pc, #224]	; (80014dc <checkRMDdata+0x168>)
 80013fa:	f005 fd2f 	bl	8006e5c <iprintf>
	printf("Position loop I :%d \r\n",RxData[3]);
 80013fe:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <checkRMDdata+0x148>)
 8001400:	78db      	ldrb	r3, [r3, #3]
 8001402:	4619      	mov	r1, r3
 8001404:	4836      	ldr	r0, [pc, #216]	; (80014e0 <checkRMDdata+0x16c>)
 8001406:	f005 fd29 	bl	8006e5c <iprintf>
	printf("Speed loop P :%d \r\n",RxData[4]);
 800140a:	4b2c      	ldr	r3, [pc, #176]	; (80014bc <checkRMDdata+0x148>)
 800140c:	791b      	ldrb	r3, [r3, #4]
 800140e:	4619      	mov	r1, r3
 8001410:	4834      	ldr	r0, [pc, #208]	; (80014e4 <checkRMDdata+0x170>)
 8001412:	f005 fd23 	bl	8006e5c <iprintf>
	printf("Speed loop I :%d \r\n",RxData[5]);
 8001416:	4b29      	ldr	r3, [pc, #164]	; (80014bc <checkRMDdata+0x148>)
 8001418:	795b      	ldrb	r3, [r3, #5]
 800141a:	4619      	mov	r1, r3
 800141c:	4832      	ldr	r0, [pc, #200]	; (80014e8 <checkRMDdata+0x174>)
 800141e:	f005 fd1d 	bl	8006e5c <iprintf>
	printf("Torque loop P :%d \r\n",RxData[6]);
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <checkRMDdata+0x148>)
 8001424:	799b      	ldrb	r3, [r3, #6]
 8001426:	4619      	mov	r1, r3
 8001428:	4830      	ldr	r0, [pc, #192]	; (80014ec <checkRMDdata+0x178>)
 800142a:	f005 fd17 	bl	8006e5c <iprintf>
	printf("Torque loop I :%d \r\n",RxData[7]);
 800142e:	4b23      	ldr	r3, [pc, #140]	; (80014bc <checkRMDdata+0x148>)
 8001430:	79db      	ldrb	r3, [r3, #7]
 8001432:	4619      	mov	r1, r3
 8001434:	482e      	ldr	r0, [pc, #184]	; (80014f0 <checkRMDdata+0x17c>)
 8001436:	f005 fd11 	bl	8006e5c <iprintf>

	Readcom=0x9C;
 800143a:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <checkRMDdata+0x140>)
 800143c:	229c      	movs	r2, #156	; 0x9c
 800143e:	601a      	str	r2, [r3, #0]
	RMDCommand();
 8001440:	f7ff fe16 	bl	8001070 <RMDCommand>
	printf("0x9C\r\n");
 8001444:	482b      	ldr	r0, [pc, #172]	; (80014f4 <checkRMDdata+0x180>)
 8001446:	f005 fd8f 	bl	8006f68 <puts>
	RxBitshift[0]=RxData[2] & 0xFF;
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <checkRMDdata+0x148>)
 800144c:	789b      	ldrb	r3, [r3, #2]
 800144e:	603b      	str	r3, [r7, #0]
	RxBitshift[0]+=(RxData[3] & 0xFF) << 8;
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <checkRMDdata+0x148>)
 8001454:	78db      	ldrb	r3, [r3, #3]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	4413      	add	r3, r2
 800145a:	603b      	str	r3, [r7, #0]
	RxBitshift[1]=RxData[4] & 0xFF;
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <checkRMDdata+0x148>)
 800145e:	791b      	ldrb	r3, [r3, #4]
 8001460:	607b      	str	r3, [r7, #4]
	RxBitshift[1]+=(RxData[5] & 0xFF) << 8;
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <checkRMDdata+0x148>)
 8001466:	795b      	ldrb	r3, [r3, #5]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	4413      	add	r3, r2
 800146c:	607b      	str	r3, [r7, #4]
	RxBitshift[2]=RxData[6] & 0xFF;
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <checkRMDdata+0x148>)
 8001470:	799b      	ldrb	r3, [r3, #6]
 8001472:	60bb      	str	r3, [r7, #8]
	RxBitshift[2]+=(RxData[7] & 0xFF) << 8;
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <checkRMDdata+0x148>)
 8001478:	79db      	ldrb	r3, [r3, #7]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	4413      	add	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
	printf("Motor temperature:%d \r\n",RxData[1]);
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <checkRMDdata+0x148>)
 8001482:	785b      	ldrb	r3, [r3, #1]
 8001484:	4619      	mov	r1, r3
 8001486:	481c      	ldr	r0, [pc, #112]	; (80014f8 <checkRMDdata+0x184>)
 8001488:	f005 fce8 	bl	8006e5c <iprintf>
	printf("Torque current :%d \r\n",RxBitshift[0]);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	4619      	mov	r1, r3
 8001490:	481a      	ldr	r0, [pc, #104]	; (80014fc <checkRMDdata+0x188>)
 8001492:	f005 fce3 	bl	8006e5c <iprintf>
	printf("Speed :%d \r\n",RxBitshift[1]);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4619      	mov	r1, r3
 800149a:	4819      	ldr	r0, [pc, #100]	; (8001500 <checkRMDdata+0x18c>)
 800149c:	f005 fcde 	bl	8006e5c <iprintf>
	printf("Encoder position:%d \r\n",RxBitshift[2]);
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4817      	ldr	r0, [pc, #92]	; (8001504 <checkRMDdata+0x190>)
 80014a6:	f005 fcd9 	bl	8006e5c <iprintf>
}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200006f4 	.word	0x200006f4
 80014b8:	080081a0 	.word	0x080081a0
 80014bc:	200006d8 	.word	0x200006d8
 80014c0:	080081a8 	.word	0x080081a8
 80014c4:	080081c0 	.word	0x080081c0
 80014c8:	080081d8 	.word	0x080081d8
 80014cc:	080081f0 	.word	0x080081f0
 80014d0:	08008208 	.word	0x08008208
 80014d4:	08008220 	.word	0x08008220
 80014d8:	08008238 	.word	0x08008238
 80014dc:	08008240 	.word	0x08008240
 80014e0:	08008258 	.word	0x08008258
 80014e4:	08008270 	.word	0x08008270
 80014e8:	08008284 	.word	0x08008284
 80014ec:	08008298 	.word	0x08008298
 80014f0:	080082b0 	.word	0x080082b0
 80014f4:	080082c8 	.word	0x080082c8
 80014f8:	080082d0 	.word	0x080082d0
 80014fc:	080082e8 	.word	0x080082e8
 8001500:	08008300 	.word	0x08008300
 8001504:	08008310 	.word	0x08008310

08001508 <RMDPIDSetting>:
void RMDPIDSetting(){
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	UART1_Data[2] = 0x64;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <RMDPIDSetting+0x38>)
 800150e:	2264      	movs	r2, #100	; 0x64
 8001510:	709a      	strb	r2, [r3, #2]
	UART1_Data[3] = 0x64;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <RMDPIDSetting+0x38>)
 8001514:	2264      	movs	r2, #100	; 0x64
 8001516:	70da      	strb	r2, [r3, #3]
	UART1_Data[4] = 0x28;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <RMDPIDSetting+0x38>)
 800151a:	2228      	movs	r2, #40	; 0x28
 800151c:	711a      	strb	r2, [r3, #4]
	UART1_Data[5] = 0xE;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <RMDPIDSetting+0x38>)
 8001520:	220e      	movs	r2, #14
 8001522:	715a      	strb	r2, [r3, #5]
	UART1_Data[6] = 0x14;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <RMDPIDSetting+0x38>)
 8001526:	2214      	movs	r2, #20
 8001528:	719a      	strb	r2, [r3, #6]
	UART1_Data[7] = 0x14;
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <RMDPIDSetting+0x38>)
 800152c:	2214      	movs	r2, #20
 800152e:	71da      	strb	r2, [r3, #7]
	Writecom=0x31;
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <RMDPIDSetting+0x3c>)
 8001532:	2231      	movs	r2, #49	; 0x31
 8001534:	601a      	str	r2, [r3, #0]
	RMDCommand();
 8001536:	f7ff fd9b 	bl	8001070 <RMDCommand>
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200006e4 	.word	0x200006e4
 8001544:	200006f0 	.word	0x200006f0

08001548 <UART1_InIt>:

void UART1_InIt(){
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
	UART1_Data[0] = 0x00;
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <UART1_InIt+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
	UART1_Data[1] = 0x00;
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <UART1_InIt+0x40>)
 8001554:	2200      	movs	r2, #0
 8001556:	705a      	strb	r2, [r3, #1]
	UART1_Data[2] = 0x00;
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <UART1_InIt+0x40>)
 800155a:	2200      	movs	r2, #0
 800155c:	709a      	strb	r2, [r3, #2]
	UART1_Data[3] = 0x00;
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <UART1_InIt+0x40>)
 8001560:	2200      	movs	r2, #0
 8001562:	70da      	strb	r2, [r3, #3]
	UART1_Data[4] = 0x00;
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <UART1_InIt+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	711a      	strb	r2, [r3, #4]
	UART1_Data[5] = 0x00;
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <UART1_InIt+0x40>)
 800156c:	2200      	movs	r2, #0
 800156e:	715a      	strb	r2, [r3, #5]
	UART1_Data[6] = 0x00;
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <UART1_InIt+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	719a      	strb	r2, [r3, #6]
	UART1_Data[7] = 0x00;
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <UART1_InIt+0x40>)
 8001578:	2200      	movs	r2, #0
 800157a:	71da      	strb	r2, [r3, #7]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	200006e4 	.word	0x200006e4

0800158c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8001592:	4bc4      	ldr	r3, [pc, #784]	; (80018a4 <main+0x318>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f005 fcec 	bl	8006f78 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a0:	f000 fe88 	bl	80022b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a4:	f000 f9a0 	bl	80018e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a8:	f000 fb0a 	bl	8001bc0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015ac:	f000 fade 	bl	8001b6c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80015b0:	f000 fa06 	bl	80019c0 <MX_CAN1_Init>
  MX_TIM3_Init();
 80015b4:	f000 fa3c 	bl	8001a30 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80015b8:	f000 faae 	bl	8001b18 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TMC2209_INIT();
 80015bc:	f7ff f846 	bl	800064c <TMC2209_INIT>
  //rxbufを受信したらフラグを
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80015c0:	2100      	movs	r1, #0
 80015c2:	48b9      	ldr	r0, [pc, #740]	; (80018a8 <main+0x31c>)
 80015c4:	f002 fff4 	bl	80045b0 <HAL_TIM_OC_Start_IT>
  printf("Hello\r\n");
 80015c8:	48b8      	ldr	r0, [pc, #736]	; (80018ac <main+0x320>)
 80015ca:	f005 fccd 	bl	8006f68 <puts>
  steppers[0].dirFunc = Dir0;
 80015ce:	4bb8      	ldr	r3, [pc, #736]	; (80018b0 <main+0x324>)
 80015d0:	4ab8      	ldr	r2, [pc, #736]	; (80018b4 <main+0x328>)
 80015d2:	609a      	str	r2, [r3, #8]
  steppers[0].stepFunc = Step0;
 80015d4:	4bb6      	ldr	r3, [pc, #728]	; (80018b0 <main+0x324>)
 80015d6:	4ab8      	ldr	r2, [pc, #736]	; (80018b8 <main+0x32c>)
 80015d8:	60da      	str	r2, [r3, #12]
  steppers[0].acceleration = 1000;
 80015da:	4bb5      	ldr	r3, [pc, #724]	; (80018b0 <main+0x324>)
 80015dc:	4ab7      	ldr	r2, [pc, #732]	; (80018bc <main+0x330>)
 80015de:	601a      	str	r2, [r3, #0]
  steppers[0].minStepInterval = 100;
 80015e0:	4bb3      	ldr	r3, [pc, #716]	; (80018b0 <main+0x324>)
 80015e2:	2264      	movs	r2, #100	; 0x64
 80015e4:	605a      	str	r2, [r3, #4]
  steppers[0].homing = 0;
 80015e6:	4bb2      	ldr	r3, [pc, #712]	; (80018b0 <main+0x324>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	741a      	strb	r2, [r3, #16]
  steppers[0].dir_inv = 1;
 80015ec:	4bb0      	ldr	r3, [pc, #704]	; (80018b0 <main+0x324>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	621a      	str	r2, [r3, #32]
  steppers[0].seeking_vel = 100;
 80015f2:	4baf      	ldr	r3, [pc, #700]	; (80018b0 <main+0x324>)
 80015f4:	2264      	movs	r2, #100	; 0x64
 80015f6:	62da      	str	r2, [r3, #44]	; 0x2c
  steppers[0].homing_vel = 200;
 80015f8:	4bad      	ldr	r3, [pc, #692]	; (80018b0 <main+0x324>)
 80015fa:	22c8      	movs	r2, #200	; 0xc8
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
  steppers[0].pull_off = 500;
 80015fe:	4bac      	ldr	r3, [pc, #688]	; (80018b0 <main+0x324>)
 8001600:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
  steppers[0].stall_off=10000;
 8001606:	4baa      	ldr	r3, [pc, #680]	; (80018b0 <main+0x324>)
 8001608:	f242 7210 	movw	r2, #10000	; 0x2710
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
  get_uart_flag=0;
 800160e:	4bac      	ldr	r3, [pc, #688]	; (80018c0 <main+0x334>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]

sFilterConfig.FilterBank = 0;
 8001614:	4bab      	ldr	r3, [pc, #684]	; (80018c4 <main+0x338>)
 8001616:	2200      	movs	r2, #0
 8001618:	615a      	str	r2, [r3, #20]
sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800161a:	4baa      	ldr	r3, [pc, #680]	; (80018c4 <main+0x338>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001620:	4ba8      	ldr	r3, [pc, #672]	; (80018c4 <main+0x338>)
 8001622:	2201      	movs	r2, #1
 8001624:	61da      	str	r2, [r3, #28]
sFilterConfig.FilterIdHigh = 0x0000;
 8001626:	4ba7      	ldr	r3, [pc, #668]	; (80018c4 <main+0x338>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
sFilterConfig.FilterIdLow = 0x0000;
 800162c:	4ba5      	ldr	r3, [pc, #660]	; (80018c4 <main+0x338>)
 800162e:	2200      	movs	r2, #0
 8001630:	605a      	str	r2, [r3, #4]
sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001632:	4ba4      	ldr	r3, [pc, #656]	; (80018c4 <main+0x338>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
sFilterConfig.FilterMaskIdLow = 0x0000;
 8001638:	4ba2      	ldr	r3, [pc, #648]	; (80018c4 <main+0x338>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800163e:	4ba1      	ldr	r3, [pc, #644]	; (80018c4 <main+0x338>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
//	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
sFilterConfig.FilterActivation=ENABLE;
 8001644:	4b9f      	ldr	r3, [pc, #636]	; (80018c4 <main+0x338>)
 8001646:	2201      	movs	r2, #1
 8001648:	621a      	str	r2, [r3, #32]
sFilterConfig.SlaveStartFilterBank=14;
 800164a:	4b9e      	ldr	r3, [pc, #632]	; (80018c4 <main+0x338>)
 800164c:	220e      	movs	r2, #14
 800164e:	625a      	str	r2, [r3, #36]	; 0x24

if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 8001650:	499c      	ldr	r1, [pc, #624]	; (80018c4 <main+0x338>)
 8001652:	489d      	ldr	r0, [pc, #628]	; (80018c8 <main+0x33c>)
 8001654:	f000 ffc0 	bl	80025d8 <HAL_CAN_ConfigFilter>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <main+0xd6>
{
	Error_Handler();
 800165e:	f000 fbbd 	bl	8001ddc <Error_Handler>
}
if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 8001662:	4899      	ldr	r0, [pc, #612]	; (80018c8 <main+0x33c>)
 8001664:	f001 f898 	bl	8002798 <HAL_CAN_Start>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <main+0xe6>
{
	Error_Handler();
 800166e:	f000 fbb5 	bl	8001ddc <Error_Handler>
}

if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8001672:	2103      	movs	r1, #3
 8001674:	4894      	ldr	r0, [pc, #592]	; (80018c8 <main+0x33c>)
 8001676:	f001 fb3e 	bl	8002cf6 <HAL_CAN_ActivateNotification>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <main+0xf8>
{
	Error_Handler();
 8001680:	f000 fbac 	bl	8001ddc <Error_Handler>
}

char KeyCommand[1];
KeyCommand[0]=0;
 8001684:	2300      	movs	r3, #0
 8001686:	713b      	strb	r3, [r7, #4]
printf("RMD Start\r\n");
 8001688:	4890      	ldr	r0, [pc, #576]	; (80018cc <main+0x340>)
 800168a:	f005 fc6d 	bl	8006f68 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //受信割り込みの開始=6byte受け取ったら次の処理へ
		  get_uart_flag=0;
 800168e:	4b8c      	ldr	r3, [pc, #560]	; (80018c0 <main+0x334>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
//		  int i=0;
		  HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, 1);
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	2201      	movs	r2, #1
 8001698:	4619      	mov	r1, r3
 800169a:	488d      	ldr	r0, [pc, #564]	; (80018d0 <main+0x344>)
 800169c:	f004 f868 	bl	8005770 <HAL_UART_Receive_IT>
	//	  printf("Key %d\r\n",KeyChange);
		  HAL_UART_Transmit(&huart2, (uint8_t *)KeyCommand, 1,300);
 80016a0:	1d39      	adds	r1, r7, #4
 80016a2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80016a6:	2201      	movs	r2, #1
 80016a8:	4889      	ldr	r0, [pc, #548]	; (80018d0 <main+0x344>)
 80016aa:	f003 ff2d 	bl	8005508 <HAL_UART_Transmit>
		  //受信するまで待つ
		  while(!get_uart_flag){}
 80016ae:	bf00      	nop
 80016b0:	4b83      	ldr	r3, [pc, #524]	; (80018c0 <main+0x334>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0fb      	beq.n	80016b0 <main+0x124>
		  UART1_InIt();
 80016b8:	f7ff ff46 	bl	8001548 <UART1_InIt>
		  end_flag=0;
 80016bc:	4b85      	ldr	r3, [pc, #532]	; (80018d4 <main+0x348>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
	  	   //canデータ受信用のフラグを0に
	//	  printf("beforecase\r\n");
			  if(KeyCommand[0]!=0 ){
 80016c2:	793b      	ldrb	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0e2      	beq.n	800168e <main+0x102>
				  switch(KeyCommand[0]){
 80016c8:	793b      	ldrb	r3, [r7, #4]
 80016ca:	3b30      	subs	r3, #48	; 0x30
 80016cc:	2b43      	cmp	r3, #67	; 0x43
 80016ce:	f200 80d9 	bhi.w	8001884 <main+0x2f8>
 80016d2:	a201      	add	r2, pc, #4	; (adr r2, 80016d8 <main+0x14c>)
 80016d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d8:	080017e9 	.word	0x080017e9
 80016dc:	080017f3 	.word	0x080017f3
 80016e0:	080017fd 	.word	0x080017fd
 80016e4:	08001807 	.word	0x08001807
 80016e8:	08001885 	.word	0x08001885
 80016ec:	08001885 	.word	0x08001885
 80016f0:	08001885 	.word	0x08001885
 80016f4:	08001885 	.word	0x08001885
 80016f8:	08001885 	.word	0x08001885
 80016fc:	08001811 	.word	0x08001811
 8001700:	08001885 	.word	0x08001885
 8001704:	08001885 	.word	0x08001885
 8001708:	08001885 	.word	0x08001885
 800170c:	08001885 	.word	0x08001885
 8001710:	08001885 	.word	0x08001885
 8001714:	08001885 	.word	0x08001885
 8001718:	08001885 	.word	0x08001885
 800171c:	08001885 	.word	0x08001885
 8001720:	08001885 	.word	0x08001885
 8001724:	08001885 	.word	0x08001885
 8001728:	08001885 	.word	0x08001885
 800172c:	08001885 	.word	0x08001885
 8001730:	08001885 	.word	0x08001885
 8001734:	08001885 	.word	0x08001885
 8001738:	08001885 	.word	0x08001885
 800173c:	08001885 	.word	0x08001885
 8001740:	08001885 	.word	0x08001885
 8001744:	08001885 	.word	0x08001885
 8001748:	08001885 	.word	0x08001885
 800174c:	08001885 	.word	0x08001885
 8001750:	08001885 	.word	0x08001885
 8001754:	08001885 	.word	0x08001885
 8001758:	08001885 	.word	0x08001885
 800175c:	08001885 	.word	0x08001885
 8001760:	08001885 	.word	0x08001885
 8001764:	08001885 	.word	0x08001885
 8001768:	08001885 	.word	0x08001885
 800176c:	08001885 	.word	0x08001885
 8001770:	08001885 	.word	0x08001885
 8001774:	08001885 	.word	0x08001885
 8001778:	08001885 	.word	0x08001885
 800177c:	08001885 	.word	0x08001885
 8001780:	08001885 	.word	0x08001885
 8001784:	08001885 	.word	0x08001885
 8001788:	08001885 	.word	0x08001885
 800178c:	08001885 	.word	0x08001885
 8001790:	08001885 	.word	0x08001885
 8001794:	08001885 	.word	0x08001885
 8001798:	08001885 	.word	0x08001885
 800179c:	08001825 	.word	0x08001825
 80017a0:	08001885 	.word	0x08001885
 80017a4:	08001885 	.word	0x08001885
 80017a8:	08001849 	.word	0x08001849
 80017ac:	08001885 	.word	0x08001885
 80017b0:	08001885 	.word	0x08001885
 80017b4:	08001885 	.word	0x08001885
 80017b8:	0800186b 	.word	0x0800186b
 80017bc:	08001885 	.word	0x08001885
 80017c0:	08001885 	.word	0x08001885
 80017c4:	08001885 	.word	0x08001885
 80017c8:	08001885 	.word	0x08001885
 80017cc:	08001885 	.word	0x08001885
 80017d0:	08001885 	.word	0x08001885
 80017d4:	08001885 	.word	0x08001885
 80017d8:	08001885 	.word	0x08001885
 80017dc:	0800187d 	.word	0x0800187d
 80017e0:	08001885 	.word	0x08001885
 80017e4:	0800181b 	.word	0x0800181b
				  case '0':
					  SetUpRMD();
 80017e8:	f7ff fd88 	bl	80012fc <SetUpRMD>
					  KeyCommand[0]=0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	713b      	strb	r3, [r7, #4]
					  break;
 80017f0:	e051      	b.n	8001896 <main+0x30a>
				  case'1':
					  RMDLeftTurn();
 80017f2:	f7ff fd97 	bl	8001324 <RMDLeftTurn>
					  KeyCommand[0]=0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	713b      	strb	r3, [r7, #4]
					  break;
 80017fa:	e04c      	b.n	8001896 <main+0x30a>
				  case'2':
					  RMDRightTurn();
 80017fc:	f7ff fda6 	bl	800134c <RMDRightTurn>
					  KeyCommand[0]=0;
 8001800:	2300      	movs	r3, #0
 8001802:	713b      	strb	r3, [r7, #4]
					  break;
 8001804:	e047      	b.n	8001896 <main+0x30a>
				  case'3':
					  checkRMDdata();
 8001806:	f7ff fdb5 	bl	8001374 <checkRMDdata>
					  KeyCommand[0]=0;
 800180a:	2300      	movs	r3, #0
 800180c:	713b      	strb	r3, [r7, #4]
					  break;
 800180e:	e042      	b.n	8001896 <main+0x30a>
				  case'9':
					  RMDPIDSetting();
 8001810:	f7ff fe7a 	bl	8001508 <RMDPIDSetting>
					  KeyCommand[0]=0;
 8001814:	2300      	movs	r3, #0
 8001816:	713b      	strb	r3, [r7, #4]
					  break;
 8001818:	e03d      	b.n	8001896 <main+0x30a>
				  case 's':
					  TMCsetup();
 800181a:	f7ff fa6f 	bl	8000cfc <TMCsetup>
					  KeyCommand[0]=0;
 800181e:	2300      	movs	r3, #0
 8001820:	713b      	strb	r3, [r7, #4]
					  break;
 8001822:	e038      	b.n	8001896 <main+0x30a>
				  case 'a':
					  //HAL_UART_Transmit_IT(&huart2,(uint8_t *)front, sizeof(front));
					  printf("1:start\r\n");
 8001824:	482c      	ldr	r0, [pc, #176]	; (80018d8 <main+0x34c>)
 8001826:	f005 fb9f 	bl	8006f68 <puts>
					  prepareAbsoluteMovement(20000);
 800182a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800182e:	f7ff f819 	bl	8000864 <prepareAbsoluteMovement>
					  runAndWait();
 8001832:	f7ff f9ad 	bl	8000b90 <runAndWait>
					  HAL_Delay(100);
 8001836:	2064      	movs	r0, #100	; 0x64
 8001838:	f000 fdae 	bl	8002398 <HAL_Delay>
					  printf("1:end\r\n");
 800183c:	4827      	ldr	r0, [pc, #156]	; (80018dc <main+0x350>)
 800183e:	f005 fb93 	bl	8006f68 <puts>
					  KeyCommand[0]=0;
 8001842:	2300      	movs	r3, #0
 8001844:	713b      	strb	r3, [r7, #4]
					  break;
 8001846:	e026      	b.n	8001896 <main+0x30a>

				  case 'd':
					  printf("1:start\r\n");
 8001848:	4823      	ldr	r0, [pc, #140]	; (80018d8 <main+0x34c>)
 800184a:	f005 fb8d 	bl	8006f68 <puts>
					  prepareAbsoluteMovement(-5000);
 800184e:	4824      	ldr	r0, [pc, #144]	; (80018e0 <main+0x354>)
 8001850:	f7ff f808 	bl	8000864 <prepareAbsoluteMovement>
					  runAndWait();
 8001854:	f7ff f99c 	bl	8000b90 <runAndWait>
					  HAL_Delay(100);
 8001858:	2064      	movs	r0, #100	; 0x64
 800185a:	f000 fd9d 	bl	8002398 <HAL_Delay>
					  printf("1:end\r\n");
 800185e:	481f      	ldr	r0, [pc, #124]	; (80018dc <main+0x350>)
 8001860:	f005 fb82 	bl	8006f68 <puts>
					  KeyCommand[0]=0;
 8001864:	2300      	movs	r3, #0
 8001866:	713b      	strb	r3, [r7, #4]
					  break;
 8001868:	e015      	b.n	8001896 <main+0x30a>

				  case 'h':
					  stepperHoming();
 800186a:	f7ff f9df 	bl	8000c2c <stepperHoming>
					  runAndWait();
 800186e:	f7ff f98f 	bl	8000b90 <runAndWait>
					  HAL_Delay(100);
 8001872:	2064      	movs	r0, #100	; 0x64
 8001874:	f000 fd90 	bl	8002398 <HAL_Delay>
					  KeyCommand[0]=0;
 8001878:	2300      	movs	r3, #0
 800187a:	713b      	strb	r3, [r7, #4]

				  case 'q':
					  AbsoluteReset();
 800187c:	f7ff f9aa 	bl	8000bd4 <AbsoluteReset>
					  KeyCommand[0]=0;
 8001880:	2300      	movs	r3, #0
 8001882:	713b      	strb	r3, [r7, #4]
				  default:
					  printf("NoCommand\r\n");
 8001884:	4817      	ldr	r0, [pc, #92]	; (80018e4 <main+0x358>)
 8001886:	f005 fb6f 	bl	8006f68 <puts>
					  KeyCommand[0]=0;
 800188a:	2300      	movs	r3, #0
 800188c:	713b      	strb	r3, [r7, #4]
					  end_flag=1;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <main+0x348>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
					  break;
 8001894:	bf00      	nop
				  }
				  while(!end_flag){}
 8001896:	bf00      	nop
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <main+0x348>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0fb      	beq.n	8001898 <main+0x30c>
		  get_uart_flag=0;
 80018a0:	e6f5      	b.n	800168e <main+0x102>
 80018a2:	bf00      	nop
 80018a4:	2000000c 	.word	0x2000000c
 80018a8:	200000b4 	.word	0x200000b4
 80018ac:	08008328 	.word	0x08008328
 80018b0:	20000620 	.word	0x20000620
 80018b4:	08000749 	.word	0x08000749
 80018b8:	08000725 	.word	0x08000725
 80018bc:	447a0000 	.word	0x447a0000
 80018c0:	200006ec 	.word	0x200006ec
 80018c4:	20000674 	.word	0x20000674
 80018c8:	2000008c 	.word	0x2000008c
 80018cc:	08008330 	.word	0x08008330
 80018d0:	20000140 	.word	0x20000140
 80018d4:	200006ed 	.word	0x200006ed
 80018d8:	0800833c 	.word	0x0800833c
 80018dc:	08008348 	.word	0x08008348
 80018e0:	ffffec78 	.word	0xffffec78
 80018e4:	08008350 	.word	0x08008350

080018e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b094      	sub	sp, #80	; 0x50
 80018ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	2234      	movs	r2, #52	; 0x34
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f005 faa8 	bl	8006e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018fc:	f107 0308 	add.w	r3, r7, #8
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <SystemClock_Config+0xd0>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	4a28      	ldr	r2, [pc, #160]	; (80019b8 <SystemClock_Config+0xd0>)
 8001916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191a:	6413      	str	r3, [r2, #64]	; 0x40
 800191c:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <SystemClock_Config+0xd0>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001928:	2300      	movs	r3, #0
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <SystemClock_Config+0xd4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a22      	ldr	r2, [pc, #136]	; (80019bc <SystemClock_Config+0xd4>)
 8001932:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <SystemClock_Config+0xd4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001944:	2302      	movs	r3, #2
 8001946:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001948:	2301      	movs	r3, #1
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800194c:	2310      	movs	r3, #16
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001950:	2302      	movs	r3, #2
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001954:	2300      	movs	r3, #0
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001958:	2308      	movs	r3, #8
 800195a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 800195c:	23a0      	movs	r3, #160	; 0xa0
 800195e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001960:	2302      	movs	r3, #2
 8001962:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001964:	2302      	movs	r3, #2
 8001966:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001968:	2302      	movs	r3, #2
 800196a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	4618      	mov	r0, r3
 8001972:	f002 fad7 	bl	8003f24 <HAL_RCC_OscConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800197c:	f000 fa2e 	bl	8001ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001980:	230f      	movs	r3, #15
 8001982:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001984:	2302      	movs	r3, #2
 8001986:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800198c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001990:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001996:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	2105      	movs	r1, #5
 800199e:	4618      	mov	r0, r3
 80019a0:	f001 ff76 	bl	8003890 <HAL_RCC_ClockConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80019aa:	f000 fa17 	bl	8001ddc <Error_Handler>
  }
}
 80019ae:	bf00      	nop
 80019b0:	3750      	adds	r7, #80	; 0x50
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40007000 	.word	0x40007000

080019c0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <MX_CAN1_Init+0x68>)
 80019c6:	4a19      	ldr	r2, [pc, #100]	; (8001a2c <MX_CAN1_Init+0x6c>)
 80019c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80019ca:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <MX_CAN1_Init+0x68>)
 80019cc:	2204      	movs	r2, #4
 80019ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80019d0:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <MX_CAN1_Init+0x68>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <MX_CAN1_Init+0x68>)
 80019d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019dc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <MX_CAN1_Init+0x68>)
 80019e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019e4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <MX_CAN1_Init+0x68>)
 80019e8:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80019ec:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <MX_CAN1_Init+0x68>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <MX_CAN1_Init+0x68>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <MX_CAN1_Init+0x68>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <MX_CAN1_Init+0x68>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <MX_CAN1_Init+0x68>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <MX_CAN1_Init+0x68>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MX_CAN1_Init+0x68>)
 8001a14:	f000 fce4 	bl	80023e0 <HAL_CAN_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001a1e:	f000 f9dd 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000008c 	.word	0x2000008c
 8001a2c:	40006400 	.word	0x40006400

08001a30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08e      	sub	sp, #56	; 0x38
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a44:	f107 0320 	add.w	r3, r7, #32
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
 8001a5c:	615a      	str	r2, [r3, #20]
 8001a5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a60:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <MX_TIM3_Init+0xe0>)
 8001a62:	4a2c      	ldr	r2, [pc, #176]	; (8001b14 <MX_TIM3_Init+0xe4>)
 8001a64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 8001a66:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <MX_TIM3_Init+0xe0>)
 8001a68:	229f      	movs	r2, #159	; 0x9f
 8001a6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <MX_TIM3_Init+0xe0>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a72:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <MX_TIM3_Init+0xe0>)
 8001a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7a:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <MX_TIM3_Init+0xe0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a80:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <MX_TIM3_Init+0xe0>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a86:	4822      	ldr	r0, [pc, #136]	; (8001b10 <MX_TIM3_Init+0xe0>)
 8001a88:	f002 fcea 	bl	8004460 <HAL_TIM_Base_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a92:	f000 f9a3 	bl	8001ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	481b      	ldr	r0, [pc, #108]	; (8001b10 <MX_TIM3_Init+0xe0>)
 8001aa4:	f002 fffe 	bl	8004aa4 <HAL_TIM_ConfigClockSource>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001aae:	f000 f995 	bl	8001ddc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001ab2:	4817      	ldr	r0, [pc, #92]	; (8001b10 <MX_TIM3_Init+0xe0>)
 8001ab4:	f002 fd23 	bl	80044fe <HAL_TIM_OC_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001abe:	f000 f98d 	bl	8001ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aca:	f107 0320 	add.w	r3, r7, #32
 8001ace:	4619      	mov	r1, r3
 8001ad0:	480f      	ldr	r0, [pc, #60]	; (8001b10 <MX_TIM3_Init+0xe0>)
 8001ad2:	f003 fbe7 	bl	80052a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001adc:	f000 f97e 	bl	8001ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2200      	movs	r2, #0
 8001af4:	4619      	mov	r1, r3
 8001af6:	4806      	ldr	r0, [pc, #24]	; (8001b10 <MX_TIM3_Init+0xe0>)
 8001af8:	f002 ff78 	bl	80049ec <HAL_TIM_OC_ConfigChannel>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b02:	f000 f96b 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b06:	bf00      	nop
 8001b08:	3738      	adds	r7, #56	; 0x38
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200000b4 	.word	0x200000b4
 8001b14:	40000400 	.word	0x40000400

08001b18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <MX_USART1_UART_Init+0x48>)
 8001b1e:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_USART1_UART_Init+0x48>)
 8001b24:	4a10      	ldr	r2, [pc, #64]	; (8001b68 <MX_USART1_UART_Init+0x50>)
 8001b26:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <MX_USART1_UART_Init+0x48>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_USART1_UART_Init+0x48>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <MX_USART1_UART_Init+0x48>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_USART1_UART_Init+0x48>)
 8001b3c:	220c      	movs	r2, #12
 8001b3e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <MX_USART1_UART_Init+0x48>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_USART1_UART_Init+0x48>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <MX_USART1_UART_Init+0x48>)
 8001b4e:	f003 fc86 	bl	800545e <HAL_HalfDuplex_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001b58:	f000 f940 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200000fc 	.word	0x200000fc
 8001b64:	40011000 	.word	0x40011000
 8001b68:	0007a120 	.word	0x0007a120

08001b6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <MX_USART2_UART_Init+0x50>)
 8001b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b92:	220c      	movs	r2, #12
 8001b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	f003 fc0e 	bl	80053c4 <HAL_UART_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bae:	f000 f915 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000140 	.word	0x20000140
 8001bbc:	40004400 	.word	0x40004400

08001bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b4d      	ldr	r3, [pc, #308]	; (8001d10 <MX_GPIO_Init+0x150>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a4c      	ldr	r2, [pc, #304]	; (8001d10 <MX_GPIO_Init+0x150>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <MX_GPIO_Init+0x150>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b46      	ldr	r3, [pc, #280]	; (8001d10 <MX_GPIO_Init+0x150>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a45      	ldr	r2, [pc, #276]	; (8001d10 <MX_GPIO_Init+0x150>)
 8001bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b43      	ldr	r3, [pc, #268]	; (8001d10 <MX_GPIO_Init+0x150>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	4b3f      	ldr	r3, [pc, #252]	; (8001d10 <MX_GPIO_Init+0x150>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a3e      	ldr	r2, [pc, #248]	; (8001d10 <MX_GPIO_Init+0x150>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b3c      	ldr	r3, [pc, #240]	; (8001d10 <MX_GPIO_Init+0x150>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	4b38      	ldr	r3, [pc, #224]	; (8001d10 <MX_GPIO_Init+0x150>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a37      	ldr	r2, [pc, #220]	; (8001d10 <MX_GPIO_Init+0x150>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <MX_GPIO_Init+0x150>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2120      	movs	r1, #32
 8001c4a:	4832      	ldr	r0, [pc, #200]	; (8001d14 <MX_GPIO_Init+0x154>)
 8001c4c:	f001 fdee 	bl	800382c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001c50:	2200      	movs	r2, #0
 8001c52:	f44f 7144 	mov.w	r1, #784	; 0x310
 8001c56:	4830      	ldr	r0, [pc, #192]	; (8001d18 <MX_GPIO_Init+0x158>)
 8001c58:	f001 fde8 	bl	800382c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c62:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4619      	mov	r1, r3
 8001c72:	482a      	ldr	r0, [pc, #168]	; (8001d1c <MX_GPIO_Init+0x15c>)
 8001c74:	f001 fc2e 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c78:	2320      	movs	r3, #32
 8001c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4821      	ldr	r0, [pc, #132]	; (8001d14 <MX_GPIO_Init+0x154>)
 8001c90:	f001 fc20 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c94:	2310      	movs	r3, #16
 8001c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	481b      	ldr	r0, [pc, #108]	; (8001d18 <MX_GPIO_Init+0x158>)
 8001cac:	f001 fc12 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cb0:	23c0      	movs	r3, #192	; 0xc0
 8001cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001cb4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4814      	ldr	r0, [pc, #80]	; (8001d18 <MX_GPIO_Init+0x158>)
 8001cc6:	f001 fc05 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480d      	ldr	r0, [pc, #52]	; (8001d18 <MX_GPIO_Init+0x158>)
 8001ce4:	f001 fbf6 	bl	80034d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2101      	movs	r1, #1
 8001cec:	2017      	movs	r0, #23
 8001cee:	f001 fb28 	bl	8003342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cf2:	2017      	movs	r0, #23
 8001cf4:	f001 fb41 	bl	800337a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	2028      	movs	r0, #40	; 0x28
 8001cfe:	f001 fb20 	bl	8003342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d02:	2028      	movs	r0, #40	; 0x28
 8001d04:	f001 fb39 	bl	800337a <HAL_NVIC_EnableIRQ>

}
 8001d08:	bf00      	nop
 8001d0a:	3728      	adds	r7, #40	; 0x28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40020800 	.word	0x40020800

08001d20 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)	//printfに必要
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	230a      	movs	r3, #10
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	4803      	ldr	r0, [pc, #12]	; (8001d44 <_write+0x24>)
 8001d36:	f003 fbe7 	bl	8005508 <HAL_UART_Transmit>
  return len;
 8001d3a:	687b      	ldr	r3, [r7, #4]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000140 	.word	0x20000140

08001d48 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	get_uart_flag = 1;
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <HAL_UART_RxCpltCallback+0x1c>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
	printf("uart_timer\r\n");
 8001d56:	4804      	ldr	r0, [pc, #16]	; (8001d68 <HAL_UART_RxCpltCallback+0x20>)
 8001d58:	f005 f906 	bl	8006f68 <puts>

}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	200006ec 	.word	0x200006ec
 8001d68:	0800835c 	.word	0x0800835c

08001d6c <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
	  printf("TxCan\r\n");
 8001d74:	4804      	ldr	r0, [pc, #16]	; (8001d88 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8001d76:	f005 f8f7 	bl	8006f68 <puts>
	  nextcan_flag=1;
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	701a      	strb	r2, [r3, #0]

}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	08008368 	.word	0x08008368
 8001d8c:	200006ee 	.word	0x200006ee

08001d90 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	printf("RxCan\r\n");
 8001d98:	480a      	ldr	r0, [pc, #40]	; (8001dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001d9a:	f005 f8e5 	bl	8006f68 <puts>
	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0, &RxHeader,RxData);
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001da0:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001da2:	2100      	movs	r1, #0
 8001da4:	480a      	ldr	r0, [pc, #40]	; (8001dd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001da6:	f000 fe94 	bl	8002ad2 <HAL_CAN_GetRxMessage>
	HAL_UART_Transmit(&huart2,RxData,sizeof(RxData),100);//受け取ったデータを送信
 8001daa:	2364      	movs	r3, #100	; 0x64
 8001dac:	2208      	movs	r2, #8
 8001dae:	4906      	ldr	r1, [pc, #24]	; (8001dc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001db0:	4808      	ldr	r0, [pc, #32]	; (8001dd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001db2:	f003 fba9 	bl	8005508 <HAL_UART_Transmit>

	//printf("\r\n");
	end_flag=1;
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
//  if(flag >0){
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
//  }else{
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
//  }
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	08008370 	.word	0x08008370
 8001dc8:	200006d8 	.word	0x200006d8
 8001dcc:	200006b4 	.word	0x200006b4
 8001dd0:	2000008c 	.word	0x2000008c
 8001dd4:	20000140 	.word	0x20000140
 8001dd8:	200006ed 	.word	0x200006ed

08001ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de0:	b672      	cpsid	i
}
 8001de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <Error_Handler+0x8>
	...

08001de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_MspInit+0x4c>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	4a0f      	ldr	r2, [pc, #60]	; (8001e34 <HAL_MspInit+0x4c>)
 8001df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_MspInit+0x4c>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_MspInit+0x4c>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	4a08      	ldr	r2, [pc, #32]	; (8001e34 <HAL_MspInit+0x4c>)
 8001e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_MspInit+0x4c>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800

08001e38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a2a      	ldr	r2, [pc, #168]	; (8001f00 <HAL_CAN_MspInit+0xc8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d14d      	bne.n	8001ef6 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <HAL_CAN_MspInit+0xcc>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	4a28      	ldr	r2, [pc, #160]	; (8001f04 <HAL_CAN_MspInit+0xcc>)
 8001e64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e68:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6a:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <HAL_CAN_MspInit+0xcc>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <HAL_CAN_MspInit+0xcc>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a21      	ldr	r2, [pc, #132]	; (8001f04 <HAL_CAN_MspInit+0xcc>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <HAL_CAN_MspInit+0xcc>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ea4:	2309      	movs	r3, #9
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	4619      	mov	r1, r3
 8001eae:	4816      	ldr	r0, [pc, #88]	; (8001f08 <HAL_CAN_MspInit+0xd0>)
 8001eb0:	f001 fb10 	bl	80034d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ec6:	2309      	movs	r3, #9
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <HAL_CAN_MspInit+0xd0>)
 8001ed2:	f001 faff 	bl	80034d4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2013      	movs	r0, #19
 8001edc:	f001 fa31 	bl	8003342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001ee0:	2013      	movs	r0, #19
 8001ee2:	f001 fa4a 	bl	800337a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2014      	movs	r0, #20
 8001eec:	f001 fa29 	bl	8003342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001ef0:	2014      	movs	r0, #20
 8001ef2:	f001 fa42 	bl	800337a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001ef6:	bf00      	nop
 8001ef8:	3728      	adds	r7, #40	; 0x28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40006400 	.word	0x40006400
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020000 	.word	0x40020000

08001f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <HAL_TIM_Base_MspInit+0x48>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d115      	bne.n	8001f4a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_TIM_Base_MspInit+0x4c>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a0c      	ldr	r2, [pc, #48]	; (8001f58 <HAL_TIM_Base_MspInit+0x4c>)
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_TIM_Base_MspInit+0x4c>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	201d      	movs	r0, #29
 8001f40:	f001 f9ff 	bl	8003342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f44:	201d      	movs	r0, #29
 8001f46:	f001 fa18 	bl	800337a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40000400 	.word	0x40000400
 8001f58:	40023800 	.word	0x40023800

08001f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08c      	sub	sp, #48	; 0x30
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a36      	ldr	r2, [pc, #216]	; (8002054 <HAL_UART_MspInit+0xf8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d12d      	bne.n	8001fda <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	4b35      	ldr	r3, [pc, #212]	; (8002058 <HAL_UART_MspInit+0xfc>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	4a34      	ldr	r2, [pc, #208]	; (8002058 <HAL_UART_MspInit+0xfc>)
 8001f88:	f043 0310 	orr.w	r3, r3, #16
 8001f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8e:	4b32      	ldr	r3, [pc, #200]	; (8002058 <HAL_UART_MspInit+0xfc>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	61bb      	str	r3, [r7, #24]
 8001f98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	4b2e      	ldr	r3, [pc, #184]	; (8002058 <HAL_UART_MspInit+0xfc>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a2d      	ldr	r2, [pc, #180]	; (8002058 <HAL_UART_MspInit+0xfc>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <HAL_UART_MspInit+0xfc>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fbc:	2312      	movs	r3, #18
 8001fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fc8:	2307      	movs	r3, #7
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fcc:	f107 031c 	add.w	r3, r7, #28
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4822      	ldr	r0, [pc, #136]	; (800205c <HAL_UART_MspInit+0x100>)
 8001fd4:	f001 fa7e 	bl	80034d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fd8:	e038      	b.n	800204c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a20      	ldr	r2, [pc, #128]	; (8002060 <HAL_UART_MspInit+0x104>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d133      	bne.n	800204c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <HAL_UART_MspInit+0xfc>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	4a1a      	ldr	r2, [pc, #104]	; (8002058 <HAL_UART_MspInit+0xfc>)
 8001fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff4:	4b18      	ldr	r3, [pc, #96]	; (8002058 <HAL_UART_MspInit+0xfc>)
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <HAL_UART_MspInit+0xfc>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	4a13      	ldr	r2, [pc, #76]	; (8002058 <HAL_UART_MspInit+0xfc>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6313      	str	r3, [r2, #48]	; 0x30
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_UART_MspInit+0xfc>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800201c:	230c      	movs	r3, #12
 800201e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002028:	2303      	movs	r3, #3
 800202a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800202c:	2307      	movs	r3, #7
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 031c 	add.w	r3, r7, #28
 8002034:	4619      	mov	r1, r3
 8002036:	4809      	ldr	r0, [pc, #36]	; (800205c <HAL_UART_MspInit+0x100>)
 8002038:	f001 fa4c 	bl	80034d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800203c:	2200      	movs	r2, #0
 800203e:	2100      	movs	r1, #0
 8002040:	2026      	movs	r0, #38	; 0x26
 8002042:	f001 f97e 	bl	8003342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002046:	2026      	movs	r0, #38	; 0x26
 8002048:	f001 f997 	bl	800337a <HAL_NVIC_EnableIRQ>
}
 800204c:	bf00      	nop
 800204e:	3730      	adds	r7, #48	; 0x30
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40011000 	.word	0x40011000
 8002058:	40023800 	.word	0x40023800
 800205c:	40020000 	.word	0x40020000
 8002060:	40004400 	.word	0x40004400

08002064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002068:	e7fe      	b.n	8002068 <NMI_Handler+0x4>

0800206a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206e:	e7fe      	b.n	800206e <HardFault_Handler+0x4>

08002070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <MemManage_Handler+0x4>

08002076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207a:	e7fe      	b.n	800207a <BusFault_Handler+0x4>

0800207c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <UsageFault_Handler+0x4>

08002082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b0:	f000 f952 	bl	8002358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <CAN1_TX_IRQHandler+0x10>)
 80020be:	f000 fe40 	bl	8002d42 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	2000008c 	.word	0x2000008c

080020cc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <CAN1_RX0_IRQHandler+0x10>)
 80020d2:	f000 fe36 	bl	8002d42 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000008c 	.word	0x2000008c

080020e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80020e4:	2040      	movs	r0, #64	; 0x40
 80020e6:	f001 fbbb 	bl	8003860 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80020ea:	2080      	movs	r0, #128	; 0x80
 80020ec:	f001 fbb8 	bl	8003860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <TIM3_IRQHandler+0x10>)
 80020fa:	f002 fb6f 	bl	80047dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200000b4 	.word	0x200000b4

08002108 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800210c:	4802      	ldr	r0, [pc, #8]	; (8002118 <USART2_IRQHandler+0x10>)
 800210e:	f003 fb5f 	bl	80057d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000140 	.word	0x20000140

0800211c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002120:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002124:	f001 fb9c 	bl	8003860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}

0800212c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	e00a      	b.n	8002154 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800213e:	f3af 8000 	nop.w
 8002142:	4601      	mov	r1, r0
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	60ba      	str	r2, [r7, #8]
 800214a:	b2ca      	uxtb	r2, r1
 800214c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3301      	adds	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	dbf0      	blt.n	800213e <_read+0x12>
	}

return len;
 800215c:	687b      	ldr	r3, [r7, #4]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
	return -1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800218e:	605a      	str	r2, [r3, #4]
	return 0;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <_isatty>:

int _isatty(int file)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
	return 1;
 80021a6:	2301      	movs	r3, #1
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
	return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <_sbrk+0x5c>)
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <_sbrk+0x60>)
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <_sbrk+0x64>)
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <_sbrk+0x68>)
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d207      	bcs.n	8002210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002200:	f004 fdfa 	bl	8006df8 <__errno>
 8002204:	4603      	mov	r3, r0
 8002206:	220c      	movs	r2, #12
 8002208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800220e:	e009      	b.n	8002224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <_sbrk+0x64>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <_sbrk+0x64>)
 8002220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002222:	68fb      	ldr	r3, [r7, #12]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20020000 	.word	0x20020000
 8002230:	00000400 	.word	0x00000400
 8002234:	200006fc 	.word	0x200006fc
 8002238:	20000918 	.word	0x20000918

0800223c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <SystemInit+0x20>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <SystemInit+0x20>)
 8002248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800224c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002298 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002264:	480d      	ldr	r0, [pc, #52]	; (800229c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002266:	490e      	ldr	r1, [pc, #56]	; (80022a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002268:	4a0e      	ldr	r2, [pc, #56]	; (80022a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800226c:	e002      	b.n	8002274 <LoopCopyDataInit>

0800226e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002272:	3304      	adds	r3, #4

08002274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002278:	d3f9      	bcc.n	800226e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227a:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800227c:	4c0b      	ldr	r4, [pc, #44]	; (80022ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002280:	e001      	b.n	8002286 <LoopFillZerobss>

08002282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002284:	3204      	adds	r2, #4

08002286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002288:	d3fb      	bcc.n	8002282 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800228a:	f7ff ffd7 	bl	800223c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800228e:	f004 fdb9 	bl	8006e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002292:	f7ff f97b 	bl	800158c <main>
  bx  lr    
 8002296:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002298:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800229c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80022a4:	080086b8 	.word	0x080086b8
  ldr r2, =_sbss
 80022a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80022ac:	20000918 	.word	0x20000918

080022b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022b0:	e7fe      	b.n	80022b0 <ADC_IRQHandler>
	...

080022b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022b8:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <HAL_Init+0x40>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0d      	ldr	r2, [pc, #52]	; (80022f4 <HAL_Init+0x40>)
 80022be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_Init+0x40>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <HAL_Init+0x40>)
 80022ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d0:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <HAL_Init+0x40>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <HAL_Init+0x40>)
 80022d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022dc:	2003      	movs	r0, #3
 80022de:	f001 f825 	bl	800332c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022e2:	2000      	movs	r0, #0
 80022e4:	f000 f808 	bl	80022f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e8:	f7ff fd7e 	bl	8001de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023c00 	.word	0x40023c00

080022f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_InitTick+0x54>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <HAL_InitTick+0x58>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	4619      	mov	r1, r3
 800230a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800230e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002312:	fbb2 f3f3 	udiv	r3, r2, r3
 8002316:	4618      	mov	r0, r3
 8002318:	f001 f83d 	bl	8003396 <HAL_SYSTICK_Config>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e00e      	b.n	8002344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b0f      	cmp	r3, #15
 800232a:	d80a      	bhi.n	8002342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800232c:	2200      	movs	r2, #0
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002334:	f001 f805 	bl	8003342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002338:	4a06      	ldr	r2, [pc, #24]	; (8002354 <HAL_InitTick+0x5c>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	e000      	b.n	8002344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000000 	.word	0x20000000
 8002350:	20000008 	.word	0x20000008
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_IncTick+0x20>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_IncTick+0x24>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4413      	add	r3, r2
 8002368:	4a04      	ldr	r2, [pc, #16]	; (800237c <HAL_IncTick+0x24>)
 800236a:	6013      	str	r3, [r2, #0]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000008 	.word	0x20000008
 800237c:	20000700 	.word	0x20000700

08002380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return uwTick;
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <HAL_GetTick+0x14>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000700 	.word	0x20000700

08002398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a0:	f7ff ffee 	bl	8002380 <HAL_GetTick>
 80023a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023b0:	d005      	beq.n	80023be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_Delay+0x44>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4413      	add	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023be:	bf00      	nop
 80023c0:	f7ff ffde 	bl	8002380 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d8f7      	bhi.n	80023c0 <HAL_Delay+0x28>
  {
  }
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000008 	.word	0x20000008

080023e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e0ed      	b.n	80025ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff fd1a 	bl	8001e38 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002414:	f7ff ffb4 	bl	8002380 <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800241a:	e012      	b.n	8002442 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800241c:	f7ff ffb0 	bl	8002380 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b0a      	cmp	r3, #10
 8002428:	d90b      	bls.n	8002442 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2205      	movs	r2, #5
 800243a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e0c5      	b.n	80025ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0e5      	beq.n	800241c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0202 	bic.w	r2, r2, #2
 800245e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002460:	f7ff ff8e 	bl	8002380 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002466:	e012      	b.n	800248e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002468:	f7ff ff8a 	bl	8002380 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b0a      	cmp	r3, #10
 8002474:	d90b      	bls.n	800248e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2205      	movs	r2, #5
 8002486:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e09f      	b.n	80025ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1e5      	bne.n	8002468 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7e1b      	ldrb	r3, [r3, #24]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d108      	bne.n	80024b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	e007      	b.n	80024c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	7e5b      	ldrb	r3, [r3, #25]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d108      	bne.n	80024e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e007      	b.n	80024f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	7e9b      	ldrb	r3, [r3, #26]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d108      	bne.n	800250a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0220 	orr.w	r2, r2, #32
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	e007      	b.n	800251a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0220 	bic.w	r2, r2, #32
 8002518:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7edb      	ldrb	r3, [r3, #27]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d108      	bne.n	8002534 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0210 	bic.w	r2, r2, #16
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	e007      	b.n	8002544 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0210 	orr.w	r2, r2, #16
 8002542:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	7f1b      	ldrb	r3, [r3, #28]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d108      	bne.n	800255e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0208 	orr.w	r2, r2, #8
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e007      	b.n	800256e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0208 	bic.w	r2, r2, #8
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	7f5b      	ldrb	r3, [r3, #29]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d108      	bne.n	8002588 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0204 	orr.w	r2, r2, #4
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e007      	b.n	8002598 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0204 	bic.w	r2, r2, #4
 8002596:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	ea42 0103 	orr.w	r1, r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	1e5a      	subs	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d003      	beq.n	80025fe <HAL_CAN_ConfigFilter+0x26>
 80025f6:	7cfb      	ldrb	r3, [r7, #19]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	f040 80be 	bne.w	800277a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80025fe:	4b65      	ldr	r3, [pc, #404]	; (8002794 <HAL_CAN_ConfigFilter+0x1bc>)
 8002600:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002618:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	431a      	orrs	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	2201      	movs	r2, #1
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	43db      	mvns	r3, r3
 8002650:	401a      	ands	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d123      	bne.n	80026a8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	43db      	mvns	r3, r3
 800266a:	401a      	ands	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002682:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	3248      	adds	r2, #72	; 0x48
 8002688:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800269c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800269e:	6979      	ldr	r1, [r7, #20]
 80026a0:	3348      	adds	r3, #72	; 0x48
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	440b      	add	r3, r1
 80026a6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d122      	bne.n	80026f6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	3248      	adds	r2, #72	; 0x48
 80026d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026ec:	6979      	ldr	r1, [r7, #20]
 80026ee:	3348      	adds	r3, #72	; 0x48
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	43db      	mvns	r3, r3
 8002708:	401a      	ands	r2, r3
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002710:	e007      	b.n	8002722 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	431a      	orrs	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	43db      	mvns	r3, r3
 8002734:	401a      	ands	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800273c:	e007      	b.n	800274e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	431a      	orrs	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d107      	bne.n	8002766 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	431a      	orrs	r2, r3
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800276c:	f023 0201 	bic.w	r2, r3, #1
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	e006      	b.n	8002788 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
  }
}
 8002788:	4618      	mov	r0, r3
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40006400 	.word	0x40006400

08002798 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d12e      	bne.n	800280a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0201 	bic.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027c4:	f7ff fddc 	bl	8002380 <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027ca:	e012      	b.n	80027f2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027cc:	f7ff fdd8 	bl	8002380 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b0a      	cmp	r3, #10
 80027d8:	d90b      	bls.n	80027f2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2205      	movs	r2, #5
 80027ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e012      	b.n	8002818 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1e5      	bne.n	80027cc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	e006      	b.n	8002818 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
  }
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d133      	bne.n	800289c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002844:	f7ff fd9c 	bl	8002380 <HAL_GetTick>
 8002848:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800284a:	e012      	b.n	8002872 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800284c:	f7ff fd98 	bl	8002380 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b0a      	cmp	r3, #10
 8002858:	d90b      	bls.n	8002872 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2205      	movs	r2, #5
 800286a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e01b      	b.n	80028aa <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0e5      	beq.n	800284c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0202 	bic.w	r2, r2, #2
 800288e:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e006      	b.n	80028aa <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
  }
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b089      	sub	sp, #36	; 0x24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80028d0:	7ffb      	ldrb	r3, [r7, #31]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d003      	beq.n	80028de <HAL_CAN_AddTxMessage+0x2c>
 80028d6:	7ffb      	ldrb	r3, [r7, #31]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	f040 80b8 	bne.w	8002a4e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10a      	bne.n	80028fe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d105      	bne.n	80028fe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80a0 	beq.w	8002a3e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	0e1b      	lsrs	r3, r3, #24
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d907      	bls.n	800291e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e09e      	b.n	8002a5c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800291e:	2201      	movs	r2, #1
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	409a      	lsls	r2, r3
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10d      	bne.n	800294c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800293a:	68f9      	ldr	r1, [r7, #12]
 800293c:	6809      	ldr	r1, [r1, #0]
 800293e:	431a      	orrs	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	3318      	adds	r3, #24
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	440b      	add	r3, r1
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e00f      	b.n	800296c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002956:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800295c:	68f9      	ldr	r1, [r7, #12]
 800295e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002960:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3318      	adds	r3, #24
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	440b      	add	r3, r1
 800296a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6819      	ldr	r1, [r3, #0]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3318      	adds	r3, #24
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	440b      	add	r3, r1
 800297c:	3304      	adds	r3, #4
 800297e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	7d1b      	ldrb	r3, [r3, #20]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d111      	bne.n	80029ac <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	3318      	adds	r3, #24
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	4413      	add	r3, r2
 8002994:	3304      	adds	r3, #4
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	6811      	ldr	r1, [r2, #0]
 800299c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	3318      	adds	r3, #24
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	440b      	add	r3, r1
 80029a8:	3304      	adds	r3, #4
 80029aa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3307      	adds	r3, #7
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	061a      	lsls	r2, r3, #24
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3306      	adds	r3, #6
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	041b      	lsls	r3, r3, #16
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3305      	adds	r3, #5
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	4313      	orrs	r3, r2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	3204      	adds	r2, #4
 80029cc:	7812      	ldrb	r2, [r2, #0]
 80029ce:	4610      	mov	r0, r2
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	6811      	ldr	r1, [r2, #0]
 80029d4:	ea43 0200 	orr.w	r2, r3, r0
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	440b      	add	r3, r1
 80029de:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80029e2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3303      	adds	r3, #3
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	061a      	lsls	r2, r3, #24
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3302      	adds	r3, #2
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	041b      	lsls	r3, r3, #16
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3301      	adds	r3, #1
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	4313      	orrs	r3, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	7812      	ldrb	r2, [r2, #0]
 8002a04:	4610      	mov	r0, r2
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	6811      	ldr	r1, [r2, #0]
 8002a0a:	ea43 0200 	orr.w	r2, r3, r0
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	440b      	add	r3, r1
 8002a14:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002a18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3318      	adds	r3, #24
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	4413      	add	r3, r2
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	6811      	ldr	r1, [r2, #0]
 8002a2c:	f043 0201 	orr.w	r2, r3, #1
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	3318      	adds	r3, #24
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	440b      	add	r3, r1
 8002a38:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e00e      	b.n	8002a5c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e006      	b.n	8002a5c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
  }
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3724      	adds	r7, #36	; 0x24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a7a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a7c:	7afb      	ldrb	r3, [r7, #11]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d002      	beq.n	8002a88 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002a82:	7afb      	ldrb	r3, [r7, #11]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d11d      	bne.n	8002ac4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3301      	adds	r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b087      	sub	sp, #28
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ae6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d003      	beq.n	8002af6 <HAL_CAN_GetRxMessage+0x24>
 8002aee:	7dfb      	ldrb	r3, [r7, #23]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	f040 80f3 	bne.w	8002cdc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10e      	bne.n	8002b1a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e0e7      	b.n	8002cea <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d107      	bne.n	8002b38 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0d8      	b.n	8002cea <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	331b      	adds	r3, #27
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	4413      	add	r3, r2
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0204 	and.w	r2, r3, #4
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10c      	bne.n	8002b70 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	331b      	adds	r3, #27
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	4413      	add	r3, r2
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	0d5b      	lsrs	r3, r3, #21
 8002b66:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	e00b      	b.n	8002b88 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	331b      	adds	r3, #27
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	4413      	add	r3, r2
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	08db      	lsrs	r3, r3, #3
 8002b80:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	331b      	adds	r3, #27
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	4413      	add	r3, r2
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0202 	and.w	r2, r3, #2
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	331b      	adds	r3, #27
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	4413      	add	r3, r2
 8002baa:	3304      	adds	r3, #4
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 020f 	and.w	r2, r3, #15
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	331b      	adds	r3, #27
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	331b      	adds	r3, #27
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	4413      	add	r3, r2
 8002bda:	3304      	adds	r3, #4
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	0c1b      	lsrs	r3, r3, #16
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0a1a      	lsrs	r2, r3, #8
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	3301      	adds	r3, #1
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	0c1a      	lsrs	r2, r3, #16
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	3302      	adds	r3, #2
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	0e1a      	lsrs	r2, r3, #24
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	3303      	adds	r3, #3
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	0a1a      	lsrs	r2, r3, #8
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	3305      	adds	r3, #5
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	0c1a      	lsrs	r2, r3, #16
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	3306      	adds	r3, #6
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	0e1a      	lsrs	r2, r3, #24
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	3307      	adds	r3, #7
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d108      	bne.n	8002cc8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0220 	orr.w	r2, r2, #32
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	e007      	b.n	8002cd8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0220 	orr.w	r2, r2, #32
 8002cd6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e006      	b.n	8002cea <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
  }
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	371c      	adds	r7, #28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d06:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d002      	beq.n	8002d14 <HAL_CAN_ActivateNotification+0x1e>
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d109      	bne.n	8002d28 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6959      	ldr	r1, [r3, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	e006      	b.n	8002d36 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
  }
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b08a      	sub	sp, #40	; 0x28
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d07c      	beq.n	8002e82 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d023      	beq.n	8002dda <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2201      	movs	r2, #1
 8002d98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7fe ffe1 	bl	8001d6c <HAL_CAN_TxMailbox0CompleteCallback>
 8002daa:	e016      	b.n	8002dda <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d004      	beq.n	8002dc0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dbe:	e00c      	b.n	8002dda <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd2:	e002      	b.n	8002dda <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f97f 	bl	80030d8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d024      	beq.n	8002e2e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f959 	bl	80030b0 <HAL_CAN_TxMailbox1CompleteCallback>
 8002dfe:	e016      	b.n	8002e2e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d004      	beq.n	8002e14 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
 8002e12:	e00c      	b.n	8002e2e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d004      	beq.n	8002e28 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
 8002e26:	e002      	b.n	8002e2e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f95f 	bl	80030ec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d024      	beq.n	8002e82 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f939 	bl	80030c4 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e52:	e016      	b.n	8002e82 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d004      	beq.n	8002e68 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
 8002e66:	e00c      	b.n	8002e82 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d004      	beq.n	8002e7c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7a:	e002      	b.n	8002e82 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f93f 	bl	8003100 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00c      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2210      	movs	r2, #16
 8002ea4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00b      	beq.n	8002ec8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2208      	movs	r2, #8
 8002ec0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f926 	bl	8003114 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7fe ff55 	bl	8001d90 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00c      	beq.n	8002f0a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d007      	beq.n	8002f0a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2210      	movs	r2, #16
 8002f08:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00b      	beq.n	8002f2c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d006      	beq.n	8002f2c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2208      	movs	r2, #8
 8002f24:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f908 	bl	800313c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d009      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f8ef 	bl	8003128 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00b      	beq.n	8002f6c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d006      	beq.n	8002f6c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2210      	movs	r2, #16
 8002f64:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f8f2 	bl	8003150 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00b      	beq.n	8002f8e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d006      	beq.n	8002f8e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2208      	movs	r2, #8
 8002f86:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f8eb 	bl	8003164 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d07b      	beq.n	8003090 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d072      	beq.n	8003088 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	f043 0302 	orr.w	r3, r3, #2
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	f043 0304 	orr.w	r3, r3, #4
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d043      	beq.n	8003088 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003006:	2b00      	cmp	r3, #0
 8003008:	d03e      	beq.n	8003088 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003010:	2b60      	cmp	r3, #96	; 0x60
 8003012:	d02b      	beq.n	800306c <HAL_CAN_IRQHandler+0x32a>
 8003014:	2b60      	cmp	r3, #96	; 0x60
 8003016:	d82e      	bhi.n	8003076 <HAL_CAN_IRQHandler+0x334>
 8003018:	2b50      	cmp	r3, #80	; 0x50
 800301a:	d022      	beq.n	8003062 <HAL_CAN_IRQHandler+0x320>
 800301c:	2b50      	cmp	r3, #80	; 0x50
 800301e:	d82a      	bhi.n	8003076 <HAL_CAN_IRQHandler+0x334>
 8003020:	2b40      	cmp	r3, #64	; 0x40
 8003022:	d019      	beq.n	8003058 <HAL_CAN_IRQHandler+0x316>
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d826      	bhi.n	8003076 <HAL_CAN_IRQHandler+0x334>
 8003028:	2b30      	cmp	r3, #48	; 0x30
 800302a:	d010      	beq.n	800304e <HAL_CAN_IRQHandler+0x30c>
 800302c:	2b30      	cmp	r3, #48	; 0x30
 800302e:	d822      	bhi.n	8003076 <HAL_CAN_IRQHandler+0x334>
 8003030:	2b10      	cmp	r3, #16
 8003032:	d002      	beq.n	800303a <HAL_CAN_IRQHandler+0x2f8>
 8003034:	2b20      	cmp	r3, #32
 8003036:	d005      	beq.n	8003044 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003038:	e01d      	b.n	8003076 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	f043 0308 	orr.w	r3, r3, #8
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003042:	e019      	b.n	8003078 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	f043 0310 	orr.w	r3, r3, #16
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800304c:	e014      	b.n	8003078 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	f043 0320 	orr.w	r3, r3, #32
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003056:	e00f      	b.n	8003078 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003060:	e00a      	b.n	8003078 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800306a:	e005      	b.n	8003078 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003074:	e000      	b.n	8003078 <HAL_CAN_IRQHandler+0x336>
            break;
 8003076:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003086:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2204      	movs	r2, #4
 800308e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	2b00      	cmp	r3, #0
 8003094:	d008      	beq.n	80030a8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f868 	bl	8003178 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80030a8:	bf00      	nop
 80030aa:	3728      	adds	r7, #40	; 0x28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800319c:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <__NVIC_SetPriorityGrouping+0x44>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031a8:	4013      	ands	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031be:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <__NVIC_SetPriorityGrouping+0x44>)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	60d3      	str	r3, [r2, #12]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d8:	4b04      	ldr	r3, [pc, #16]	; (80031ec <__NVIC_GetPriorityGrouping+0x18>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	0a1b      	lsrs	r3, r3, #8
 80031de:	f003 0307 	and.w	r3, r3, #7
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	db0b      	blt.n	800321a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	f003 021f 	and.w	r2, r3, #31
 8003208:	4907      	ldr	r1, [pc, #28]	; (8003228 <__NVIC_EnableIRQ+0x38>)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	2001      	movs	r0, #1
 8003212:	fa00 f202 	lsl.w	r2, r0, r2
 8003216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	e000e100 	.word	0xe000e100

0800322c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	6039      	str	r1, [r7, #0]
 8003236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323c:	2b00      	cmp	r3, #0
 800323e:	db0a      	blt.n	8003256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	b2da      	uxtb	r2, r3
 8003244:	490c      	ldr	r1, [pc, #48]	; (8003278 <__NVIC_SetPriority+0x4c>)
 8003246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324a:	0112      	lsls	r2, r2, #4
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	440b      	add	r3, r1
 8003250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003254:	e00a      	b.n	800326c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	4908      	ldr	r1, [pc, #32]	; (800327c <__NVIC_SetPriority+0x50>)
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	3b04      	subs	r3, #4
 8003264:	0112      	lsls	r2, r2, #4
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	440b      	add	r3, r1
 800326a:	761a      	strb	r2, [r3, #24]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000e100 	.word	0xe000e100
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003280:	b480      	push	{r7}
 8003282:	b089      	sub	sp, #36	; 0x24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f1c3 0307 	rsb	r3, r3, #7
 800329a:	2b04      	cmp	r3, #4
 800329c:	bf28      	it	cs
 800329e:	2304      	movcs	r3, #4
 80032a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3304      	adds	r3, #4
 80032a6:	2b06      	cmp	r3, #6
 80032a8:	d902      	bls.n	80032b0 <NVIC_EncodePriority+0x30>
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3b03      	subs	r3, #3
 80032ae:	e000      	b.n	80032b2 <NVIC_EncodePriority+0x32>
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	401a      	ands	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	fa01 f303 	lsl.w	r3, r1, r3
 80032d2:	43d9      	mvns	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	4313      	orrs	r3, r2
         );
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3724      	adds	r7, #36	; 0x24
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032f8:	d301      	bcc.n	80032fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032fa:	2301      	movs	r3, #1
 80032fc:	e00f      	b.n	800331e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032fe:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <SysTick_Config+0x40>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3b01      	subs	r3, #1
 8003304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003306:	210f      	movs	r1, #15
 8003308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800330c:	f7ff ff8e 	bl	800322c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <SysTick_Config+0x40>)
 8003312:	2200      	movs	r2, #0
 8003314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003316:	4b04      	ldr	r3, [pc, #16]	; (8003328 <SysTick_Config+0x40>)
 8003318:	2207      	movs	r2, #7
 800331a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	e000e010 	.word	0xe000e010

0800332c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff ff29 	bl	800318c <__NVIC_SetPriorityGrouping>
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003342:	b580      	push	{r7, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	4603      	mov	r3, r0
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003354:	f7ff ff3e 	bl	80031d4 <__NVIC_GetPriorityGrouping>
 8003358:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	6978      	ldr	r0, [r7, #20]
 8003360:	f7ff ff8e 	bl	8003280 <NVIC_EncodePriority>
 8003364:	4602      	mov	r2, r0
 8003366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336a:	4611      	mov	r1, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ff5d 	bl	800322c <__NVIC_SetPriority>
}
 8003372:	bf00      	nop
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	4603      	mov	r3, r0
 8003382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff31 	bl	80031f0 <__NVIC_EnableIRQ>
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ffa2 	bl	80032e8 <SysTick_Config>
 80033a4:	4603      	mov	r3, r0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033bc:	f7fe ffe0 	bl	8002380 <HAL_GetTick>
 80033c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d008      	beq.n	80033e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2280      	movs	r2, #128	; 0x80
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e052      	b.n	8003486 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0216 	bic.w	r2, r2, #22
 80033ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d103      	bne.n	8003410 <HAL_DMA_Abort+0x62>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0208 	bic.w	r2, r2, #8
 800341e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003430:	e013      	b.n	800345a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003432:	f7fe ffa5 	bl	8002380 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b05      	cmp	r3, #5
 800343e:	d90c      	bls.n	800345a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2203      	movs	r2, #3
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e015      	b.n	8003486 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e4      	bne.n	8003432 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346c:	223f      	movs	r2, #63	; 0x3f
 800346e:	409a      	lsls	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d004      	beq.n	80034ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2280      	movs	r2, #128	; 0x80
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e00c      	b.n	80034c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2205      	movs	r2, #5
 80034b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0201 	bic.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b089      	sub	sp, #36	; 0x24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	e165      	b.n	80037bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034f0:	2201      	movs	r2, #1
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	429a      	cmp	r2, r3
 800350a:	f040 8154 	bne.w	80037b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b01      	cmp	r3, #1
 8003518:	d005      	beq.n	8003526 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003522:	2b02      	cmp	r3, #2
 8003524:	d130      	bne.n	8003588 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	2203      	movs	r2, #3
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4313      	orrs	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800355c:	2201      	movs	r2, #1
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f003 0201 	and.w	r2, r3, #1
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b03      	cmp	r3, #3
 8003592:	d017      	beq.n	80035c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	2203      	movs	r2, #3
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d123      	bne.n	8003618 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	08da      	lsrs	r2, r3, #3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3208      	adds	r2, #8
 80035d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	220f      	movs	r2, #15
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	08da      	lsrs	r2, r3, #3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3208      	adds	r2, #8
 8003612:	69b9      	ldr	r1, [r7, #24]
 8003614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	2203      	movs	r2, #3
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 0203 	and.w	r2, r3, #3
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80ae 	beq.w	80037b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	4b5d      	ldr	r3, [pc, #372]	; (80037d4 <HAL_GPIO_Init+0x300>)
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	4a5c      	ldr	r2, [pc, #368]	; (80037d4 <HAL_GPIO_Init+0x300>)
 8003664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003668:	6453      	str	r3, [r2, #68]	; 0x44
 800366a:	4b5a      	ldr	r3, [pc, #360]	; (80037d4 <HAL_GPIO_Init+0x300>)
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003676:	4a58      	ldr	r2, [pc, #352]	; (80037d8 <HAL_GPIO_Init+0x304>)
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	089b      	lsrs	r3, r3, #2
 800367c:	3302      	adds	r3, #2
 800367e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	220f      	movs	r2, #15
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4013      	ands	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a4f      	ldr	r2, [pc, #316]	; (80037dc <HAL_GPIO_Init+0x308>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d025      	beq.n	80036ee <HAL_GPIO_Init+0x21a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a4e      	ldr	r2, [pc, #312]	; (80037e0 <HAL_GPIO_Init+0x30c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01f      	beq.n	80036ea <HAL_GPIO_Init+0x216>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a4d      	ldr	r2, [pc, #308]	; (80037e4 <HAL_GPIO_Init+0x310>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d019      	beq.n	80036e6 <HAL_GPIO_Init+0x212>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a4c      	ldr	r2, [pc, #304]	; (80037e8 <HAL_GPIO_Init+0x314>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d013      	beq.n	80036e2 <HAL_GPIO_Init+0x20e>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a4b      	ldr	r2, [pc, #300]	; (80037ec <HAL_GPIO_Init+0x318>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00d      	beq.n	80036de <HAL_GPIO_Init+0x20a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a4a      	ldr	r2, [pc, #296]	; (80037f0 <HAL_GPIO_Init+0x31c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d007      	beq.n	80036da <HAL_GPIO_Init+0x206>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a49      	ldr	r2, [pc, #292]	; (80037f4 <HAL_GPIO_Init+0x320>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_GPIO_Init+0x202>
 80036d2:	2306      	movs	r3, #6
 80036d4:	e00c      	b.n	80036f0 <HAL_GPIO_Init+0x21c>
 80036d6:	2307      	movs	r3, #7
 80036d8:	e00a      	b.n	80036f0 <HAL_GPIO_Init+0x21c>
 80036da:	2305      	movs	r3, #5
 80036dc:	e008      	b.n	80036f0 <HAL_GPIO_Init+0x21c>
 80036de:	2304      	movs	r3, #4
 80036e0:	e006      	b.n	80036f0 <HAL_GPIO_Init+0x21c>
 80036e2:	2303      	movs	r3, #3
 80036e4:	e004      	b.n	80036f0 <HAL_GPIO_Init+0x21c>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e002      	b.n	80036f0 <HAL_GPIO_Init+0x21c>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_GPIO_Init+0x21c>
 80036ee:	2300      	movs	r3, #0
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	f002 0203 	and.w	r2, r2, #3
 80036f6:	0092      	lsls	r2, r2, #2
 80036f8:	4093      	lsls	r3, r2
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003700:	4935      	ldr	r1, [pc, #212]	; (80037d8 <HAL_GPIO_Init+0x304>)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	3302      	adds	r3, #2
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800370e:	4b3a      	ldr	r3, [pc, #232]	; (80037f8 <HAL_GPIO_Init+0x324>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	43db      	mvns	r3, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4013      	ands	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003732:	4a31      	ldr	r2, [pc, #196]	; (80037f8 <HAL_GPIO_Init+0x324>)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003738:	4b2f      	ldr	r3, [pc, #188]	; (80037f8 <HAL_GPIO_Init+0x324>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800375c:	4a26      	ldr	r2, [pc, #152]	; (80037f8 <HAL_GPIO_Init+0x324>)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003762:	4b25      	ldr	r3, [pc, #148]	; (80037f8 <HAL_GPIO_Init+0x324>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003786:	4a1c      	ldr	r2, [pc, #112]	; (80037f8 <HAL_GPIO_Init+0x324>)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800378c:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <HAL_GPIO_Init+0x324>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037b0:	4a11      	ldr	r2, [pc, #68]	; (80037f8 <HAL_GPIO_Init+0x324>)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	3301      	adds	r3, #1
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b0f      	cmp	r3, #15
 80037c0:	f67f ae96 	bls.w	80034f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	3724      	adds	r7, #36	; 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40013800 	.word	0x40013800
 80037dc:	40020000 	.word	0x40020000
 80037e0:	40020400 	.word	0x40020400
 80037e4:	40020800 	.word	0x40020800
 80037e8:	40020c00 	.word	0x40020c00
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40021400 	.word	0x40021400
 80037f4:	40021800 	.word	0x40021800
 80037f8:	40013c00 	.word	0x40013c00

080037fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	887b      	ldrh	r3, [r7, #2]
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
 8003818:	e001      	b.n	800381e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800381e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	807b      	strh	r3, [r7, #2]
 8003838:	4613      	mov	r3, r2
 800383a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800383c:	787b      	ldrb	r3, [r7, #1]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003842:	887a      	ldrh	r2, [r7, #2]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003848:	e003      	b.n	8003852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800384a:	887b      	ldrh	r3, [r7, #2]
 800384c:	041a      	lsls	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	619a      	str	r2, [r3, #24]
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800386a:	4b08      	ldr	r3, [pc, #32]	; (800388c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d006      	beq.n	8003884 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003876:	4a05      	ldr	r2, [pc, #20]	; (800388c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fc ff0a 	bl	8000698 <HAL_GPIO_EXTI_Callback>
  }
}
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40013c00 	.word	0x40013c00

08003890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0cc      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038a4:	4b68      	ldr	r3, [pc, #416]	; (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d90c      	bls.n	80038cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b2:	4b65      	ldr	r3, [pc, #404]	; (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ba:	4b63      	ldr	r3, [pc, #396]	; (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0b8      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d020      	beq.n	800391a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038e4:	4b59      	ldr	r3, [pc, #356]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	4a58      	ldr	r2, [pc, #352]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038fc:	4b53      	ldr	r3, [pc, #332]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4a52      	ldr	r2, [pc, #328]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003908:	4b50      	ldr	r3, [pc, #320]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	494d      	ldr	r1, [pc, #308]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d044      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d107      	bne.n	800393e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392e:	4b47      	ldr	r3, [pc, #284]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d119      	bne.n	800396e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e07f      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d003      	beq.n	800394e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800394a:	2b03      	cmp	r3, #3
 800394c:	d107      	bne.n	800395e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394e:	4b3f      	ldr	r3, [pc, #252]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e06f      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395e:	4b3b      	ldr	r3, [pc, #236]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e067      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800396e:	4b37      	ldr	r3, [pc, #220]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f023 0203 	bic.w	r2, r3, #3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	4934      	ldr	r1, [pc, #208]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	4313      	orrs	r3, r2
 800397e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003980:	f7fe fcfe 	bl	8002380 <HAL_GetTick>
 8003984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003986:	e00a      	b.n	800399e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003988:	f7fe fcfa 	bl	8002380 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	; 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e04f      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399e:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 020c 	and.w	r2, r3, #12
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d1eb      	bne.n	8003988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039b0:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d20c      	bcs.n	80039d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039be:	4b22      	ldr	r3, [pc, #136]	; (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c6:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e032      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039e4:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4916      	ldr	r1, [pc, #88]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a02:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	490e      	ldr	r1, [pc, #56]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a16:	f000 f855 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	490a      	ldr	r1, [pc, #40]	; (8003a50 <HAL_RCC_ClockConfig+0x1c0>)
 8003a28:	5ccb      	ldrb	r3, [r1, r3]
 8003a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2e:	4a09      	ldr	r2, [pc, #36]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a32:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe fc5e 	bl	80022f8 <HAL_InitTick>

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40023c00 	.word	0x40023c00
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	08008578 	.word	0x08008578
 8003a54:	20000000 	.word	0x20000000
 8003a58:	20000004 	.word	0x20000004

08003a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a60:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a62:	681b      	ldr	r3, [r3, #0]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	20000000 	.word	0x20000000

08003a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a78:	f7ff fff0 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	0a9b      	lsrs	r3, r3, #10
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	4903      	ldr	r1, [pc, #12]	; (8003a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40023800 	.word	0x40023800
 8003a98:	08008588 	.word	0x08008588

08003a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aa0:	f7ff ffdc 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	0b5b      	lsrs	r3, r3, #13
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	4903      	ldr	r1, [pc, #12]	; (8003ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ab2:	5ccb      	ldrb	r3, [r1, r3]
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	08008588 	.word	0x08008588

08003ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac8:	b0ae      	sub	sp, #184	; 0xb8
 8003aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aea:	4bcb      	ldr	r3, [pc, #812]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b0c      	cmp	r3, #12
 8003af4:	f200 8206 	bhi.w	8003f04 <HAL_RCC_GetSysClockFreq+0x440>
 8003af8:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afe:	bf00      	nop
 8003b00:	08003b35 	.word	0x08003b35
 8003b04:	08003f05 	.word	0x08003f05
 8003b08:	08003f05 	.word	0x08003f05
 8003b0c:	08003f05 	.word	0x08003f05
 8003b10:	08003b3d 	.word	0x08003b3d
 8003b14:	08003f05 	.word	0x08003f05
 8003b18:	08003f05 	.word	0x08003f05
 8003b1c:	08003f05 	.word	0x08003f05
 8003b20:	08003b45 	.word	0x08003b45
 8003b24:	08003f05 	.word	0x08003f05
 8003b28:	08003f05 	.word	0x08003f05
 8003b2c:	08003f05 	.word	0x08003f05
 8003b30:	08003d35 	.word	0x08003d35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b34:	4bb9      	ldr	r3, [pc, #740]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x358>)
 8003b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003b3a:	e1e7      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b3c:	4bb8      	ldr	r3, [pc, #736]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b42:	e1e3      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b44:	4bb4      	ldr	r3, [pc, #720]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b50:	4bb1      	ldr	r3, [pc, #708]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d071      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b5c:	4bae      	ldr	r3, [pc, #696]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	099b      	lsrs	r3, r3, #6
 8003b62:	2200      	movs	r2, #0
 8003b64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b68:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b82:	4622      	mov	r2, r4
 8003b84:	462b      	mov	r3, r5
 8003b86:	f04f 0000 	mov.w	r0, #0
 8003b8a:	f04f 0100 	mov.w	r1, #0
 8003b8e:	0159      	lsls	r1, r3, #5
 8003b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b94:	0150      	lsls	r0, r2, #5
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	1a51      	subs	r1, r2, r1
 8003b9e:	6439      	str	r1, [r7, #64]	; 0x40
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ba6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003bb4:	4649      	mov	r1, r9
 8003bb6:	018b      	lsls	r3, r1, #6
 8003bb8:	4641      	mov	r1, r8
 8003bba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bbe:	4641      	mov	r1, r8
 8003bc0:	018a      	lsls	r2, r1, #6
 8003bc2:	4641      	mov	r1, r8
 8003bc4:	1a51      	subs	r1, r2, r1
 8003bc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bc8:	4649      	mov	r1, r9
 8003bca:	eb63 0301 	sbc.w	r3, r3, r1
 8003bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003bdc:	4649      	mov	r1, r9
 8003bde:	00cb      	lsls	r3, r1, #3
 8003be0:	4641      	mov	r1, r8
 8003be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003be6:	4641      	mov	r1, r8
 8003be8:	00ca      	lsls	r2, r1, #3
 8003bea:	4610      	mov	r0, r2
 8003bec:	4619      	mov	r1, r3
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4622      	mov	r2, r4
 8003bf2:	189b      	adds	r3, r3, r2
 8003bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8003bf6:	462b      	mov	r3, r5
 8003bf8:	460a      	mov	r2, r1
 8003bfa:	eb42 0303 	adc.w	r3, r2, r3
 8003bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	024b      	lsls	r3, r1, #9
 8003c10:	4621      	mov	r1, r4
 8003c12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c16:	4621      	mov	r1, r4
 8003c18:	024a      	lsls	r2, r1, #9
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003c30:	f7fc fb3e 	bl	80002b0 <__aeabi_uldivmod>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4613      	mov	r3, r2
 8003c3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c3e:	e067      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c40:	4b75      	ldr	r3, [pc, #468]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	099b      	lsrs	r3, r3, #6
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c4c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c58:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c5e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003c62:	4622      	mov	r2, r4
 8003c64:	462b      	mov	r3, r5
 8003c66:	f04f 0000 	mov.w	r0, #0
 8003c6a:	f04f 0100 	mov.w	r1, #0
 8003c6e:	0159      	lsls	r1, r3, #5
 8003c70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c74:	0150      	lsls	r0, r2, #5
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	1a51      	subs	r1, r2, r1
 8003c7e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c80:	4629      	mov	r1, r5
 8003c82:	eb63 0301 	sbc.w	r3, r3, r1
 8003c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003c94:	4649      	mov	r1, r9
 8003c96:	018b      	lsls	r3, r1, #6
 8003c98:	4641      	mov	r1, r8
 8003c9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c9e:	4641      	mov	r1, r8
 8003ca0:	018a      	lsls	r2, r1, #6
 8003ca2:	4641      	mov	r1, r8
 8003ca4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ca8:	4649      	mov	r1, r9
 8003caa:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cc2:	4692      	mov	sl, r2
 8003cc4:	469b      	mov	fp, r3
 8003cc6:	4623      	mov	r3, r4
 8003cc8:	eb1a 0303 	adds.w	r3, sl, r3
 8003ccc:	623b      	str	r3, [r7, #32]
 8003cce:	462b      	mov	r3, r5
 8003cd0:	eb4b 0303 	adc.w	r3, fp, r3
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	028b      	lsls	r3, r1, #10
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cec:	4621      	mov	r1, r4
 8003cee:	028a      	lsls	r2, r1, #10
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8003cfc:	677a      	str	r2, [r7, #116]	; 0x74
 8003cfe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003d02:	f7fc fad5 	bl	80002b0 <__aeabi_uldivmod>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d10:	4b41      	ldr	r3, [pc, #260]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	0c1b      	lsrs	r3, r3, #16
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003d22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d32:	e0eb      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d34:	4b38      	ldr	r3, [pc, #224]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d40:	4b35      	ldr	r3, [pc, #212]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d06b      	beq.n	8003e24 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d4c:	4b32      	ldr	r3, [pc, #200]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	099b      	lsrs	r3, r3, #6
 8003d52:	2200      	movs	r2, #0
 8003d54:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d60:	2300      	movs	r3, #0
 8003d62:	667b      	str	r3, [r7, #100]	; 0x64
 8003d64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003d68:	4622      	mov	r2, r4
 8003d6a:	462b      	mov	r3, r5
 8003d6c:	f04f 0000 	mov.w	r0, #0
 8003d70:	f04f 0100 	mov.w	r1, #0
 8003d74:	0159      	lsls	r1, r3, #5
 8003d76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d7a:	0150      	lsls	r0, r2, #5
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4621      	mov	r1, r4
 8003d82:	1a51      	subs	r1, r2, r1
 8003d84:	61b9      	str	r1, [r7, #24]
 8003d86:	4629      	mov	r1, r5
 8003d88:	eb63 0301 	sbc.w	r3, r3, r1
 8003d8c:	61fb      	str	r3, [r7, #28]
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003d9a:	4659      	mov	r1, fp
 8003d9c:	018b      	lsls	r3, r1, #6
 8003d9e:	4651      	mov	r1, sl
 8003da0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003da4:	4651      	mov	r1, sl
 8003da6:	018a      	lsls	r2, r1, #6
 8003da8:	4651      	mov	r1, sl
 8003daa:	ebb2 0801 	subs.w	r8, r2, r1
 8003dae:	4659      	mov	r1, fp
 8003db0:	eb63 0901 	sbc.w	r9, r3, r1
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dc0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dc4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dc8:	4690      	mov	r8, r2
 8003dca:	4699      	mov	r9, r3
 8003dcc:	4623      	mov	r3, r4
 8003dce:	eb18 0303 	adds.w	r3, r8, r3
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	462b      	mov	r3, r5
 8003dd6:	eb49 0303 	adc.w	r3, r9, r3
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003de8:	4629      	mov	r1, r5
 8003dea:	024b      	lsls	r3, r1, #9
 8003dec:	4621      	mov	r1, r4
 8003dee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003df2:	4621      	mov	r1, r4
 8003df4:	024a      	lsls	r2, r1, #9
 8003df6:	4610      	mov	r0, r2
 8003df8:	4619      	mov	r1, r3
 8003dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dfe:	2200      	movs	r2, #0
 8003e00:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e02:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e08:	f7fc fa52 	bl	80002b0 <__aeabi_uldivmod>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4613      	mov	r3, r2
 8003e12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e16:	e065      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x420>
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	00f42400 	.word	0x00f42400
 8003e20:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e24:	4b3d      	ldr	r3, [pc, #244]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x458>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	099b      	lsrs	r3, r3, #6
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	4611      	mov	r1, r2
 8003e30:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e34:	653b      	str	r3, [r7, #80]	; 0x50
 8003e36:	2300      	movs	r3, #0
 8003e38:	657b      	str	r3, [r7, #84]	; 0x54
 8003e3a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003e3e:	4642      	mov	r2, r8
 8003e40:	464b      	mov	r3, r9
 8003e42:	f04f 0000 	mov.w	r0, #0
 8003e46:	f04f 0100 	mov.w	r1, #0
 8003e4a:	0159      	lsls	r1, r3, #5
 8003e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e50:	0150      	lsls	r0, r2, #5
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4641      	mov	r1, r8
 8003e58:	1a51      	subs	r1, r2, r1
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	4649      	mov	r1, r9
 8003e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003e70:	4659      	mov	r1, fp
 8003e72:	018b      	lsls	r3, r1, #6
 8003e74:	4651      	mov	r1, sl
 8003e76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e7a:	4651      	mov	r1, sl
 8003e7c:	018a      	lsls	r2, r1, #6
 8003e7e:	4651      	mov	r1, sl
 8003e80:	1a54      	subs	r4, r2, r1
 8003e82:	4659      	mov	r1, fp
 8003e84:	eb63 0501 	sbc.w	r5, r3, r1
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	00eb      	lsls	r3, r5, #3
 8003e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e96:	00e2      	lsls	r2, r4, #3
 8003e98:	4614      	mov	r4, r2
 8003e9a:	461d      	mov	r5, r3
 8003e9c:	4643      	mov	r3, r8
 8003e9e:	18e3      	adds	r3, r4, r3
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	464b      	mov	r3, r9
 8003ea4:	eb45 0303 	adc.w	r3, r5, r3
 8003ea8:	607b      	str	r3, [r7, #4]
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eb6:	4629      	mov	r1, r5
 8003eb8:	028b      	lsls	r3, r1, #10
 8003eba:	4621      	mov	r1, r4
 8003ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	028a      	lsls	r2, r1, #10
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ecc:	2200      	movs	r2, #0
 8003ece:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ed0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003ed2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ed6:	f7fc f9eb 	bl	80002b0 <__aeabi_uldivmod>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4613      	mov	r3, r2
 8003ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ee4:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x458>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	0f1b      	lsrs	r3, r3, #28
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003ef2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ef6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f02:	e003      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	37b8      	adds	r7, #184	; 0xb8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	00f42400 	.word	0x00f42400

08003f24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e28d      	b.n	8004452 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 8083 	beq.w	800404a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f44:	4b94      	ldr	r3, [pc, #592]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 030c 	and.w	r3, r3, #12
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d019      	beq.n	8003f84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f50:	4b91      	ldr	r3, [pc, #580]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d106      	bne.n	8003f6a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f5c:	4b8e      	ldr	r3, [pc, #568]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f68:	d00c      	beq.n	8003f84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f6a:	4b8b      	ldr	r3, [pc, #556]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f72:	2b0c      	cmp	r3, #12
 8003f74:	d112      	bne.n	8003f9c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f76:	4b88      	ldr	r3, [pc, #544]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f82:	d10b      	bne.n	8003f9c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f84:	4b84      	ldr	r3, [pc, #528]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d05b      	beq.n	8004048 <HAL_RCC_OscConfig+0x124>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d157      	bne.n	8004048 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e25a      	b.n	8004452 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa4:	d106      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x90>
 8003fa6:	4b7c      	ldr	r3, [pc, #496]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a7b      	ldr	r2, [pc, #492]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	e01d      	b.n	8003ff0 <HAL_RCC_OscConfig+0xcc>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_RCC_OscConfig+0xb4>
 8003fbe:	4b76      	ldr	r3, [pc, #472]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a75      	ldr	r2, [pc, #468]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8003fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	4b73      	ldr	r3, [pc, #460]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a72      	ldr	r2, [pc, #456]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e00b      	b.n	8003ff0 <HAL_RCC_OscConfig+0xcc>
 8003fd8:	4b6f      	ldr	r3, [pc, #444]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a6e      	ldr	r2, [pc, #440]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8003fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	4b6c      	ldr	r3, [pc, #432]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a6b      	ldr	r2, [pc, #428]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8003fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d013      	beq.n	8004020 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fe f9c2 	bl	8002380 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004000:	f7fe f9be 	bl	8002380 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b64      	cmp	r3, #100	; 0x64
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e21f      	b.n	8004452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004012:	4b61      	ldr	r3, [pc, #388]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0xdc>
 800401e:	e014      	b.n	800404a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7fe f9ae 	bl	8002380 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004028:	f7fe f9aa 	bl	8002380 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	; 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e20b      	b.n	8004452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403a:	4b57      	ldr	r3, [pc, #348]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x104>
 8004046:	e000      	b.n	800404a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d06f      	beq.n	8004136 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004056:	4b50      	ldr	r3, [pc, #320]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
 800405e:	2b00      	cmp	r3, #0
 8004060:	d017      	beq.n	8004092 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004062:	4b4d      	ldr	r3, [pc, #308]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800406a:	2b08      	cmp	r3, #8
 800406c:	d105      	bne.n	800407a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800406e:	4b4a      	ldr	r3, [pc, #296]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00b      	beq.n	8004092 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800407a:	4b47      	ldr	r3, [pc, #284]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004082:	2b0c      	cmp	r3, #12
 8004084:	d11c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004086:	4b44      	ldr	r3, [pc, #272]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d116      	bne.n	80040c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004092:	4b41      	ldr	r3, [pc, #260]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_RCC_OscConfig+0x186>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d001      	beq.n	80040aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e1d3      	b.n	8004452 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040aa:	4b3b      	ldr	r3, [pc, #236]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4937      	ldr	r1, [pc, #220]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040be:	e03a      	b.n	8004136 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d020      	beq.n	800410a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c8:	4b34      	ldr	r3, [pc, #208]	; (800419c <HAL_RCC_OscConfig+0x278>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ce:	f7fe f957 	bl	8002380 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d6:	f7fe f953 	bl	8002380 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e1b4      	b.n	8004452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e8:	4b2b      	ldr	r3, [pc, #172]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f4:	4b28      	ldr	r3, [pc, #160]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4925      	ldr	r1, [pc, #148]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 8004104:	4313      	orrs	r3, r2
 8004106:	600b      	str	r3, [r1, #0]
 8004108:	e015      	b.n	8004136 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800410a:	4b24      	ldr	r3, [pc, #144]	; (800419c <HAL_RCC_OscConfig+0x278>)
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fe f936 	bl	8002380 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004118:	f7fe f932 	bl	8002380 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e193      	b.n	8004452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412a:	4b1b      	ldr	r3, [pc, #108]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d036      	beq.n	80041b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d016      	beq.n	8004178 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800414a:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <HAL_RCC_OscConfig+0x27c>)
 800414c:	2201      	movs	r2, #1
 800414e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004150:	f7fe f916 	bl	8002380 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004158:	f7fe f912 	bl	8002380 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e173      	b.n	8004452 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <HAL_RCC_OscConfig+0x274>)
 800416c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0x234>
 8004176:	e01b      	b.n	80041b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004178:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <HAL_RCC_OscConfig+0x27c>)
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417e:	f7fe f8ff 	bl	8002380 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004184:	e00e      	b.n	80041a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004186:	f7fe f8fb 	bl	8002380 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d907      	bls.n	80041a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e15c      	b.n	8004452 <HAL_RCC_OscConfig+0x52e>
 8004198:	40023800 	.word	0x40023800
 800419c:	42470000 	.word	0x42470000
 80041a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a4:	4b8a      	ldr	r3, [pc, #552]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 80041a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1ea      	bne.n	8004186 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 8097 	beq.w	80042ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041be:	2300      	movs	r3, #0
 80041c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c2:	4b83      	ldr	r3, [pc, #524]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10f      	bne.n	80041ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ce:	2300      	movs	r3, #0
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	4b7f      	ldr	r3, [pc, #508]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	4a7e      	ldr	r2, [pc, #504]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 80041d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041dc:	6413      	str	r3, [r2, #64]	; 0x40
 80041de:	4b7c      	ldr	r3, [pc, #496]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e6:	60bb      	str	r3, [r7, #8]
 80041e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ea:	2301      	movs	r3, #1
 80041ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ee:	4b79      	ldr	r3, [pc, #484]	; (80043d4 <HAL_RCC_OscConfig+0x4b0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d118      	bne.n	800422c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041fa:	4b76      	ldr	r3, [pc, #472]	; (80043d4 <HAL_RCC_OscConfig+0x4b0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a75      	ldr	r2, [pc, #468]	; (80043d4 <HAL_RCC_OscConfig+0x4b0>)
 8004200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004206:	f7fe f8bb 	bl	8002380 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420e:	f7fe f8b7 	bl	8002380 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e118      	b.n	8004452 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004220:	4b6c      	ldr	r3, [pc, #432]	; (80043d4 <HAL_RCC_OscConfig+0x4b0>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d106      	bne.n	8004242 <HAL_RCC_OscConfig+0x31e>
 8004234:	4b66      	ldr	r3, [pc, #408]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004238:	4a65      	ldr	r2, [pc, #404]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	6713      	str	r3, [r2, #112]	; 0x70
 8004240:	e01c      	b.n	800427c <HAL_RCC_OscConfig+0x358>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b05      	cmp	r3, #5
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0x340>
 800424a:	4b61      	ldr	r3, [pc, #388]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	4a60      	ldr	r2, [pc, #384]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 8004250:	f043 0304 	orr.w	r3, r3, #4
 8004254:	6713      	str	r3, [r2, #112]	; 0x70
 8004256:	4b5e      	ldr	r3, [pc, #376]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	4a5d      	ldr	r2, [pc, #372]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	6713      	str	r3, [r2, #112]	; 0x70
 8004262:	e00b      	b.n	800427c <HAL_RCC_OscConfig+0x358>
 8004264:	4b5a      	ldr	r3, [pc, #360]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	4a59      	ldr	r2, [pc, #356]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 800426a:	f023 0301 	bic.w	r3, r3, #1
 800426e:	6713      	str	r3, [r2, #112]	; 0x70
 8004270:	4b57      	ldr	r3, [pc, #348]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	4a56      	ldr	r2, [pc, #344]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 8004276:	f023 0304 	bic.w	r3, r3, #4
 800427a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d015      	beq.n	80042b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004284:	f7fe f87c 	bl	8002380 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428a:	e00a      	b.n	80042a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800428c:	f7fe f878 	bl	8002380 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f241 3288 	movw	r2, #5000	; 0x1388
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e0d7      	b.n	8004452 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a2:	4b4b      	ldr	r3, [pc, #300]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0ee      	beq.n	800428c <HAL_RCC_OscConfig+0x368>
 80042ae:	e014      	b.n	80042da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b0:	f7fe f866 	bl	8002380 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b6:	e00a      	b.n	80042ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b8:	f7fe f862 	bl	8002380 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e0c1      	b.n	8004452 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ce:	4b40      	ldr	r3, [pc, #256]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1ee      	bne.n	80042b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042da:	7dfb      	ldrb	r3, [r7, #23]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d105      	bne.n	80042ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e0:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	4a3a      	ldr	r2, [pc, #232]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 80042e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80ad 	beq.w	8004450 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042f6:	4b36      	ldr	r3, [pc, #216]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	2b08      	cmp	r3, #8
 8004300:	d060      	beq.n	80043c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d145      	bne.n	8004396 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430a:	4b33      	ldr	r3, [pc, #204]	; (80043d8 <HAL_RCC_OscConfig+0x4b4>)
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fe f836 	bl	8002380 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004318:	f7fe f832 	bl	8002380 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e093      	b.n	8004452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432a:	4b29      	ldr	r3, [pc, #164]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69da      	ldr	r2, [r3, #28]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	019b      	lsls	r3, r3, #6
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	085b      	lsrs	r3, r3, #1
 800434e:	3b01      	subs	r3, #1
 8004350:	041b      	lsls	r3, r3, #16
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	061b      	lsls	r3, r3, #24
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	071b      	lsls	r3, r3, #28
 8004362:	491b      	ldr	r1, [pc, #108]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 8004364:	4313      	orrs	r3, r2
 8004366:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004368:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <HAL_RCC_OscConfig+0x4b4>)
 800436a:	2201      	movs	r2, #1
 800436c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436e:	f7fe f807 	bl	8002380 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004376:	f7fe f803 	bl	8002380 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e064      	b.n	8004452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004388:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0f0      	beq.n	8004376 <HAL_RCC_OscConfig+0x452>
 8004394:	e05c      	b.n	8004450 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004396:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <HAL_RCC_OscConfig+0x4b4>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fd fff0 	bl	8002380 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a4:	f7fd ffec 	bl	8002380 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e04d      	b.n	8004452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b6:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <HAL_RCC_OscConfig+0x4ac>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x480>
 80043c2:	e045      	b.n	8004450 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d107      	bne.n	80043dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e040      	b.n	8004452 <HAL_RCC_OscConfig+0x52e>
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40007000 	.word	0x40007000
 80043d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043dc:	4b1f      	ldr	r3, [pc, #124]	; (800445c <HAL_RCC_OscConfig+0x538>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d030      	beq.n	800444c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d129      	bne.n	800444c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004402:	429a      	cmp	r2, r3
 8004404:	d122      	bne.n	800444c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800440c:	4013      	ands	r3, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004412:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004414:	4293      	cmp	r3, r2
 8004416:	d119      	bne.n	800444c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	085b      	lsrs	r3, r3, #1
 8004424:	3b01      	subs	r3, #1
 8004426:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004428:	429a      	cmp	r2, r3
 800442a:	d10f      	bne.n	800444c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004438:	429a      	cmp	r2, r3
 800443a:	d107      	bne.n	800444c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d001      	beq.n	8004450 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40023800 	.word	0x40023800

08004460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e041      	b.n	80044f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fd fd40 	bl	8001f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3304      	adds	r3, #4
 800449c:	4619      	mov	r1, r3
 800449e:	4610      	mov	r0, r2
 80044a0:	f000 fbf0 	bl	8004c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e041      	b.n	8004594 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d106      	bne.n	800452a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f839 	bl	800459c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2202      	movs	r2, #2
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3304      	adds	r3, #4
 800453a:	4619      	mov	r1, r3
 800453c:	4610      	mov	r0, r2
 800453e:	f000 fba1 	bl	8004c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d109      	bne.n	80045d8 <HAL_TIM_OC_Start_IT+0x28>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	e022      	b.n	800461e <HAL_TIM_OC_Start_IT+0x6e>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d109      	bne.n	80045f2 <HAL_TIM_OC_Start_IT+0x42>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	bf14      	ite	ne
 80045ea:	2301      	movne	r3, #1
 80045ec:	2300      	moveq	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	e015      	b.n	800461e <HAL_TIM_OC_Start_IT+0x6e>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d109      	bne.n	800460c <HAL_TIM_OC_Start_IT+0x5c>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	bf14      	ite	ne
 8004604:	2301      	movne	r3, #1
 8004606:	2300      	moveq	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e008      	b.n	800461e <HAL_TIM_OC_Start_IT+0x6e>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b01      	cmp	r3, #1
 8004616:	bf14      	ite	ne
 8004618:	2301      	movne	r3, #1
 800461a:	2300      	moveq	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e0c7      	b.n	80047b6 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d104      	bne.n	8004636 <HAL_TIM_OC_Start_IT+0x86>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004634:	e013      	b.n	800465e <HAL_TIM_OC_Start_IT+0xae>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b04      	cmp	r3, #4
 800463a:	d104      	bne.n	8004646 <HAL_TIM_OC_Start_IT+0x96>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004644:	e00b      	b.n	800465e <HAL_TIM_OC_Start_IT+0xae>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b08      	cmp	r3, #8
 800464a:	d104      	bne.n	8004656 <HAL_TIM_OC_Start_IT+0xa6>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004654:	e003      	b.n	800465e <HAL_TIM_OC_Start_IT+0xae>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2202      	movs	r2, #2
 800465a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b0c      	cmp	r3, #12
 8004662:	d841      	bhi.n	80046e8 <HAL_TIM_OC_Start_IT+0x138>
 8004664:	a201      	add	r2, pc, #4	; (adr r2, 800466c <HAL_TIM_OC_Start_IT+0xbc>)
 8004666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466a:	bf00      	nop
 800466c:	080046a1 	.word	0x080046a1
 8004670:	080046e9 	.word	0x080046e9
 8004674:	080046e9 	.word	0x080046e9
 8004678:	080046e9 	.word	0x080046e9
 800467c:	080046b3 	.word	0x080046b3
 8004680:	080046e9 	.word	0x080046e9
 8004684:	080046e9 	.word	0x080046e9
 8004688:	080046e9 	.word	0x080046e9
 800468c:	080046c5 	.word	0x080046c5
 8004690:	080046e9 	.word	0x080046e9
 8004694:	080046e9 	.word	0x080046e9
 8004698:	080046e9 	.word	0x080046e9
 800469c:	080046d7 	.word	0x080046d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0202 	orr.w	r2, r2, #2
 80046ae:	60da      	str	r2, [r3, #12]
      break;
 80046b0:	e01d      	b.n	80046ee <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0204 	orr.w	r2, r2, #4
 80046c0:	60da      	str	r2, [r3, #12]
      break;
 80046c2:	e014      	b.n	80046ee <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0208 	orr.w	r2, r2, #8
 80046d2:	60da      	str	r2, [r3, #12]
      break;
 80046d4:	e00b      	b.n	80046ee <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f042 0210 	orr.w	r2, r2, #16
 80046e4:	60da      	str	r2, [r3, #12]
      break;
 80046e6:	e002      	b.n	80046ee <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	73fb      	strb	r3, [r7, #15]
      break;
 80046ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d15f      	bne.n	80047b4 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2201      	movs	r2, #1
 80046fa:	6839      	ldr	r1, [r7, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fdab 	bl	8005258 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a2e      	ldr	r2, [pc, #184]	; (80047c0 <HAL_TIM_OC_Start_IT+0x210>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <HAL_TIM_OC_Start_IT+0x166>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a2c      	ldr	r2, [pc, #176]	; (80047c4 <HAL_TIM_OC_Start_IT+0x214>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <HAL_TIM_OC_Start_IT+0x16a>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <HAL_TIM_OC_Start_IT+0x16c>
 800471a:	2300      	movs	r3, #0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d007      	beq.n	8004730 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800472e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a22      	ldr	r2, [pc, #136]	; (80047c0 <HAL_TIM_OC_Start_IT+0x210>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d022      	beq.n	8004780 <HAL_TIM_OC_Start_IT+0x1d0>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004742:	d01d      	beq.n	8004780 <HAL_TIM_OC_Start_IT+0x1d0>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1f      	ldr	r2, [pc, #124]	; (80047c8 <HAL_TIM_OC_Start_IT+0x218>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d018      	beq.n	8004780 <HAL_TIM_OC_Start_IT+0x1d0>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1e      	ldr	r2, [pc, #120]	; (80047cc <HAL_TIM_OC_Start_IT+0x21c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d013      	beq.n	8004780 <HAL_TIM_OC_Start_IT+0x1d0>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1c      	ldr	r2, [pc, #112]	; (80047d0 <HAL_TIM_OC_Start_IT+0x220>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00e      	beq.n	8004780 <HAL_TIM_OC_Start_IT+0x1d0>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a17      	ldr	r2, [pc, #92]	; (80047c4 <HAL_TIM_OC_Start_IT+0x214>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d009      	beq.n	8004780 <HAL_TIM_OC_Start_IT+0x1d0>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a18      	ldr	r2, [pc, #96]	; (80047d4 <HAL_TIM_OC_Start_IT+0x224>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d004      	beq.n	8004780 <HAL_TIM_OC_Start_IT+0x1d0>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a17      	ldr	r2, [pc, #92]	; (80047d8 <HAL_TIM_OC_Start_IT+0x228>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d111      	bne.n	80047a4 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b06      	cmp	r3, #6
 8004790:	d010      	beq.n	80047b4 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f042 0201 	orr.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a2:	e007      	b.n	80047b4 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40010000 	.word	0x40010000
 80047c4:	40010400 	.word	0x40010400
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40000800 	.word	0x40000800
 80047d0:	40000c00 	.word	0x40000c00
 80047d4:	40014000 	.word	0x40014000
 80047d8:	40001800 	.word	0x40001800

080047dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d122      	bne.n	8004838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d11b      	bne.n	8004838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0202 	mvn.w	r2, #2
 8004808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa11 	bl	8004c46 <HAL_TIM_IC_CaptureCallback>
 8004824:	e005      	b.n	8004832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fc f8b2 	bl	8000990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fa14 	bl	8004c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b04      	cmp	r3, #4
 8004844:	d122      	bne.n	800488c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b04      	cmp	r3, #4
 8004852:	d11b      	bne.n	800488c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0204 	mvn.w	r2, #4
 800485c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2202      	movs	r2, #2
 8004862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f9e7 	bl	8004c46 <HAL_TIM_IC_CaptureCallback>
 8004878:	e005      	b.n	8004886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fc f888 	bl	8000990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f9ea 	bl	8004c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b08      	cmp	r3, #8
 8004898:	d122      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d11b      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f06f 0208 	mvn.w	r2, #8
 80048b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2204      	movs	r2, #4
 80048b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f9bd 	bl	8004c46 <HAL_TIM_IC_CaptureCallback>
 80048cc:	e005      	b.n	80048da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fc f85e 	bl	8000990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f9c0 	bl	8004c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d122      	bne.n	8004934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b10      	cmp	r3, #16
 80048fa:	d11b      	bne.n	8004934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f06f 0210 	mvn.w	r2, #16
 8004904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2208      	movs	r2, #8
 800490a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f993 	bl	8004c46 <HAL_TIM_IC_CaptureCallback>
 8004920:	e005      	b.n	800492e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fc f834 	bl	8000990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f996 	bl	8004c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b01      	cmp	r3, #1
 8004940:	d10e      	bne.n	8004960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b01      	cmp	r3, #1
 800494e:	d107      	bne.n	8004960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0201 	mvn.w	r2, #1
 8004958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f969 	bl	8004c32 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	2b80      	cmp	r3, #128	; 0x80
 800496c:	d10e      	bne.n	800498c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004978:	2b80      	cmp	r3, #128	; 0x80
 800497a:	d107      	bne.n	800498c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fd12 	bl	80053b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b40      	cmp	r3, #64	; 0x40
 8004998:	d10e      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a4:	2b40      	cmp	r3, #64	; 0x40
 80049a6:	d107      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f95b 	bl	8004c6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d10e      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	d107      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0220 	mvn.w	r2, #32
 80049dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fcdc 	bl	800539c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e048      	b.n	8004a9c <HAL_TIM_OC_ConfigChannel+0xb0>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b0c      	cmp	r3, #12
 8004a16:	d839      	bhi.n	8004a8c <HAL_TIM_OC_ConfigChannel+0xa0>
 8004a18:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1e:	bf00      	nop
 8004a20:	08004a55 	.word	0x08004a55
 8004a24:	08004a8d 	.word	0x08004a8d
 8004a28:	08004a8d 	.word	0x08004a8d
 8004a2c:	08004a8d 	.word	0x08004a8d
 8004a30:	08004a63 	.word	0x08004a63
 8004a34:	08004a8d 	.word	0x08004a8d
 8004a38:	08004a8d 	.word	0x08004a8d
 8004a3c:	08004a8d 	.word	0x08004a8d
 8004a40:	08004a71 	.word	0x08004a71
 8004a44:	08004a8d 	.word	0x08004a8d
 8004a48:	08004a8d 	.word	0x08004a8d
 8004a4c:	08004a8d 	.word	0x08004a8d
 8004a50:	08004a7f 	.word	0x08004a7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 f9b2 	bl	8004dc4 <TIM_OC1_SetConfig>
      break;
 8004a60:	e017      	b.n	8004a92 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68b9      	ldr	r1, [r7, #8]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fa1b 	bl	8004ea4 <TIM_OC2_SetConfig>
      break;
 8004a6e:	e010      	b.n	8004a92 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fa8a 	bl	8004f90 <TIM_OC3_SetConfig>
      break;
 8004a7c:	e009      	b.n	8004a92 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 faf7 	bl	8005078 <TIM_OC4_SetConfig>
      break;
 8004a8a:	e002      	b.n	8004a92 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e0b4      	b.n	8004c2a <HAL_TIM_ConfigClockSource+0x186>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af8:	d03e      	beq.n	8004b78 <HAL_TIM_ConfigClockSource+0xd4>
 8004afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afe:	f200 8087 	bhi.w	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b06:	f000 8086 	beq.w	8004c16 <HAL_TIM_ConfigClockSource+0x172>
 8004b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0e:	d87f      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b70      	cmp	r3, #112	; 0x70
 8004b12:	d01a      	beq.n	8004b4a <HAL_TIM_ConfigClockSource+0xa6>
 8004b14:	2b70      	cmp	r3, #112	; 0x70
 8004b16:	d87b      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b18:	2b60      	cmp	r3, #96	; 0x60
 8004b1a:	d050      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0x11a>
 8004b1c:	2b60      	cmp	r3, #96	; 0x60
 8004b1e:	d877      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b20:	2b50      	cmp	r3, #80	; 0x50
 8004b22:	d03c      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0xfa>
 8004b24:	2b50      	cmp	r3, #80	; 0x50
 8004b26:	d873      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	d058      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0x13a>
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d86f      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b30:	2b30      	cmp	r3, #48	; 0x30
 8004b32:	d064      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b34:	2b30      	cmp	r3, #48	; 0x30
 8004b36:	d86b      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d060      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d867      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d05c      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d05a      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b48:	e062      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	6899      	ldr	r1, [r3, #8]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f000 fb5d 	bl	8005218 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	609a      	str	r2, [r3, #8]
      break;
 8004b76:	e04f      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	6899      	ldr	r1, [r3, #8]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f000 fb46 	bl	8005218 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b9a:	609a      	str	r2, [r3, #8]
      break;
 8004b9c:	e03c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6818      	ldr	r0, [r3, #0]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	6859      	ldr	r1, [r3, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	461a      	mov	r2, r3
 8004bac:	f000 faba 	bl	8005124 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2150      	movs	r1, #80	; 0x50
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fb13 	bl	80051e2 <TIM_ITRx_SetConfig>
      break;
 8004bbc:	e02c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6859      	ldr	r1, [r3, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f000 fad9 	bl	8005182 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2160      	movs	r1, #96	; 0x60
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fb03 	bl	80051e2 <TIM_ITRx_SetConfig>
      break;
 8004bdc:	e01c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6859      	ldr	r1, [r3, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	461a      	mov	r2, r3
 8004bec:	f000 fa9a 	bl	8005124 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2140      	movs	r1, #64	; 0x40
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 faf3 	bl	80051e2 <TIM_ITRx_SetConfig>
      break;
 8004bfc:	e00c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f000 faea 	bl	80051e2 <TIM_ITRx_SetConfig>
      break;
 8004c0e:	e003      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
      break;
 8004c14:	e000      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a40      	ldr	r2, [pc, #256]	; (8004d98 <TIM_Base_SetConfig+0x114>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <TIM_Base_SetConfig+0x40>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca2:	d00f      	beq.n	8004cc4 <TIM_Base_SetConfig+0x40>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a3d      	ldr	r2, [pc, #244]	; (8004d9c <TIM_Base_SetConfig+0x118>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00b      	beq.n	8004cc4 <TIM_Base_SetConfig+0x40>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a3c      	ldr	r2, [pc, #240]	; (8004da0 <TIM_Base_SetConfig+0x11c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d007      	beq.n	8004cc4 <TIM_Base_SetConfig+0x40>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a3b      	ldr	r2, [pc, #236]	; (8004da4 <TIM_Base_SetConfig+0x120>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <TIM_Base_SetConfig+0x40>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a3a      	ldr	r2, [pc, #232]	; (8004da8 <TIM_Base_SetConfig+0x124>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d108      	bne.n	8004cd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a2f      	ldr	r2, [pc, #188]	; (8004d98 <TIM_Base_SetConfig+0x114>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d02b      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce4:	d027      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a2c      	ldr	r2, [pc, #176]	; (8004d9c <TIM_Base_SetConfig+0x118>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d023      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2b      	ldr	r2, [pc, #172]	; (8004da0 <TIM_Base_SetConfig+0x11c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d01f      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a2a      	ldr	r2, [pc, #168]	; (8004da4 <TIM_Base_SetConfig+0x120>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d01b      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a29      	ldr	r2, [pc, #164]	; (8004da8 <TIM_Base_SetConfig+0x124>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d017      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a28      	ldr	r2, [pc, #160]	; (8004dac <TIM_Base_SetConfig+0x128>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a27      	ldr	r2, [pc, #156]	; (8004db0 <TIM_Base_SetConfig+0x12c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00f      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a26      	ldr	r2, [pc, #152]	; (8004db4 <TIM_Base_SetConfig+0x130>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00b      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a25      	ldr	r2, [pc, #148]	; (8004db8 <TIM_Base_SetConfig+0x134>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d007      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a24      	ldr	r2, [pc, #144]	; (8004dbc <TIM_Base_SetConfig+0x138>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d003      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a23      	ldr	r2, [pc, #140]	; (8004dc0 <TIM_Base_SetConfig+0x13c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d108      	bne.n	8004d48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a0a      	ldr	r2, [pc, #40]	; (8004d98 <TIM_Base_SetConfig+0x114>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d003      	beq.n	8004d7c <TIM_Base_SetConfig+0xf8>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a0c      	ldr	r2, [pc, #48]	; (8004da8 <TIM_Base_SetConfig+0x124>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d103      	bne.n	8004d84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	615a      	str	r2, [r3, #20]
}
 8004d8a:	bf00      	nop
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40010000 	.word	0x40010000
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	40000800 	.word	0x40000800
 8004da4:	40000c00 	.word	0x40000c00
 8004da8:	40010400 	.word	0x40010400
 8004dac:	40014000 	.word	0x40014000
 8004db0:	40014400 	.word	0x40014400
 8004db4:	40014800 	.word	0x40014800
 8004db8:	40001800 	.word	0x40001800
 8004dbc:	40001c00 	.word	0x40001c00
 8004dc0:	40002000 	.word	0x40002000

08004dc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f023 0201 	bic.w	r2, r3, #1
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0303 	bic.w	r3, r3, #3
 8004dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f023 0302 	bic.w	r3, r3, #2
 8004e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a20      	ldr	r2, [pc, #128]	; (8004e9c <TIM_OC1_SetConfig+0xd8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d003      	beq.n	8004e28 <TIM_OC1_SetConfig+0x64>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a1f      	ldr	r2, [pc, #124]	; (8004ea0 <TIM_OC1_SetConfig+0xdc>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d10c      	bne.n	8004e42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f023 0308 	bic.w	r3, r3, #8
 8004e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f023 0304 	bic.w	r3, r3, #4
 8004e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a15      	ldr	r2, [pc, #84]	; (8004e9c <TIM_OC1_SetConfig+0xd8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d003      	beq.n	8004e52 <TIM_OC1_SetConfig+0x8e>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a14      	ldr	r2, [pc, #80]	; (8004ea0 <TIM_OC1_SetConfig+0xdc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d111      	bne.n	8004e76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	621a      	str	r2, [r3, #32]
}
 8004e90:	bf00      	nop
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	40010000 	.word	0x40010000
 8004ea0:	40010400 	.word	0x40010400

08004ea4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	f023 0210 	bic.w	r2, r3, #16
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	021b      	lsls	r3, r3, #8
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f023 0320 	bic.w	r3, r3, #32
 8004eee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a22      	ldr	r2, [pc, #136]	; (8004f88 <TIM_OC2_SetConfig+0xe4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d003      	beq.n	8004f0c <TIM_OC2_SetConfig+0x68>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a21      	ldr	r2, [pc, #132]	; (8004f8c <TIM_OC2_SetConfig+0xe8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d10d      	bne.n	8004f28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a17      	ldr	r2, [pc, #92]	; (8004f88 <TIM_OC2_SetConfig+0xe4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d003      	beq.n	8004f38 <TIM_OC2_SetConfig+0x94>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a16      	ldr	r2, [pc, #88]	; (8004f8c <TIM_OC2_SetConfig+0xe8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d113      	bne.n	8004f60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40010000 	.word	0x40010000
 8004f8c:	40010400 	.word	0x40010400

08004f90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0303 	bic.w	r3, r3, #3
 8004fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a21      	ldr	r2, [pc, #132]	; (8005070 <TIM_OC3_SetConfig+0xe0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d003      	beq.n	8004ff6 <TIM_OC3_SetConfig+0x66>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a20      	ldr	r2, [pc, #128]	; (8005074 <TIM_OC3_SetConfig+0xe4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d10d      	bne.n	8005012 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a16      	ldr	r2, [pc, #88]	; (8005070 <TIM_OC3_SetConfig+0xe0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <TIM_OC3_SetConfig+0x92>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a15      	ldr	r2, [pc, #84]	; (8005074 <TIM_OC3_SetConfig+0xe4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d113      	bne.n	800504a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	621a      	str	r2, [r3, #32]
}
 8005064:	bf00      	nop
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	40010000 	.word	0x40010000
 8005074:	40010400 	.word	0x40010400

08005078 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	021b      	lsls	r3, r3, #8
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	031b      	lsls	r3, r3, #12
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a12      	ldr	r2, [pc, #72]	; (800511c <TIM_OC4_SetConfig+0xa4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d003      	beq.n	80050e0 <TIM_OC4_SetConfig+0x68>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a11      	ldr	r2, [pc, #68]	; (8005120 <TIM_OC4_SetConfig+0xa8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d109      	bne.n	80050f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	019b      	lsls	r3, r3, #6
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	621a      	str	r2, [r3, #32]
}
 800510e:	bf00      	nop
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40010000 	.word	0x40010000
 8005120:	40010400 	.word	0x40010400

08005124 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	f023 0201 	bic.w	r2, r3, #1
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800514e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f023 030a 	bic.w	r3, r3, #10
 8005160:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	621a      	str	r2, [r3, #32]
}
 8005176:	bf00      	nop
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005182:	b480      	push	{r7}
 8005184:	b087      	sub	sp, #28
 8005186:	af00      	add	r7, sp, #0
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f023 0210 	bic.w	r2, r3, #16
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	031b      	lsls	r3, r3, #12
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	621a      	str	r2, [r3, #32]
}
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b085      	sub	sp, #20
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	f043 0307 	orr.w	r3, r3, #7
 8005204:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	609a      	str	r2, [r3, #8]
}
 800520c:	bf00      	nop
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005232:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	021a      	lsls	r2, r3, #8
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	431a      	orrs	r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4313      	orrs	r3, r2
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	609a      	str	r2, [r3, #8]
}
 800524c:	bf00      	nop
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 031f 	and.w	r3, r3, #31
 800526a:	2201      	movs	r2, #1
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a1a      	ldr	r2, [r3, #32]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	43db      	mvns	r3, r3
 800527a:	401a      	ands	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a1a      	ldr	r2, [r3, #32]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f003 031f 	and.w	r3, r3, #31
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	fa01 f303 	lsl.w	r3, r1, r3
 8005290:	431a      	orrs	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	621a      	str	r2, [r3, #32]
}
 8005296:	bf00      	nop
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
	...

080052a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e05a      	b.n	8005372 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a21      	ldr	r2, [pc, #132]	; (8005380 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d022      	beq.n	8005346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005308:	d01d      	beq.n	8005346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a1d      	ldr	r2, [pc, #116]	; (8005384 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d018      	beq.n	8005346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1b      	ldr	r2, [pc, #108]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d013      	beq.n	8005346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1a      	ldr	r2, [pc, #104]	; (800538c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d00e      	beq.n	8005346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a18      	ldr	r2, [pc, #96]	; (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d009      	beq.n	8005346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a17      	ldr	r2, [pc, #92]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d004      	beq.n	8005346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a15      	ldr	r2, [pc, #84]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d10c      	bne.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800534c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	4313      	orrs	r3, r2
 8005356:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40010000 	.word	0x40010000
 8005384:	40000400 	.word	0x40000400
 8005388:	40000800 	.word	0x40000800
 800538c:	40000c00 	.word	0x40000c00
 8005390:	40010400 	.word	0x40010400
 8005394:	40014000 	.word	0x40014000
 8005398:	40001800 	.word	0x40001800

0800539c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e03f      	b.n	8005456 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d106      	bne.n	80053f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fc fdb6 	bl	8001f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2224      	movs	r2, #36	; 0x24
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005406:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 ff3d 	bl	8006288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800541c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695a      	ldr	r2, [r3, #20]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800542c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800543c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e047      	b.n	8005500 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d106      	bne.n	800548a <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7fc fd69 	bl	8001f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2224      	movs	r2, #36	; 0x24
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054a0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fef0 	bl	8006288 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695a      	ldr	r2, [r3, #20]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80054c6:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695a      	ldr	r2, [r3, #20]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0208 	orr.w	r2, r2, #8
 80054d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08a      	sub	sp, #40	; 0x28
 800550c:	af02      	add	r7, sp, #8
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	603b      	str	r3, [r7, #0]
 8005514:	4613      	mov	r3, r2
 8005516:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b20      	cmp	r3, #32
 8005526:	d17c      	bne.n	8005622 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <HAL_UART_Transmit+0x2c>
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e075      	b.n	8005624 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_UART_Transmit+0x3e>
 8005542:	2302      	movs	r3, #2
 8005544:	e06e      	b.n	8005624 <HAL_UART_Transmit+0x11c>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2221      	movs	r2, #33	; 0x21
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800555c:	f7fc ff10 	bl	8002380 <HAL_GetTick>
 8005560:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	88fa      	ldrh	r2, [r7, #6]
 8005566:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	88fa      	ldrh	r2, [r7, #6]
 800556c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005576:	d108      	bne.n	800558a <HAL_UART_Transmit+0x82>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d104      	bne.n	800558a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005580:	2300      	movs	r3, #0
 8005582:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	e003      	b.n	8005592 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800558e:	2300      	movs	r3, #0
 8005590:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800559a:	e02a      	b.n	80055f2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2200      	movs	r2, #0
 80055a4:	2180      	movs	r1, #128	; 0x80
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 fc28 	bl	8005dfc <UART_WaitOnFlagUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e036      	b.n	8005624 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10b      	bne.n	80055d4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ca:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	3302      	adds	r3, #2
 80055d0:	61bb      	str	r3, [r7, #24]
 80055d2:	e007      	b.n	80055e4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	781a      	ldrb	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	3301      	adds	r3, #1
 80055e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	3b01      	subs	r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1cf      	bne.n	800559c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2200      	movs	r2, #0
 8005604:	2140      	movs	r1, #64	; 0x40
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 fbf8 	bl	8005dfc <UART_WaitOnFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e006      	b.n	8005624 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	e000      	b.n	8005624 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005622:	2302      	movs	r3, #2
  }
}
 8005624:	4618      	mov	r0, r3
 8005626:	3720      	adds	r7, #32
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08a      	sub	sp, #40	; 0x28
 8005630:	af02      	add	r7, sp, #8
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	4613      	mov	r3, r2
 800563a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b20      	cmp	r3, #32
 800564a:	f040 808c 	bne.w	8005766 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <HAL_UART_Receive+0x2e>
 8005654:	88fb      	ldrh	r3, [r7, #6]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e084      	b.n	8005768 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_UART_Receive+0x40>
 8005668:	2302      	movs	r3, #2
 800566a:	e07d      	b.n	8005768 <HAL_UART_Receive+0x13c>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2222      	movs	r2, #34	; 0x22
 800567e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005688:	f7fc fe7a 	bl	8002380 <HAL_GetTick>
 800568c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	88fa      	ldrh	r2, [r7, #6]
 8005692:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	88fa      	ldrh	r2, [r7, #6]
 8005698:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a2:	d108      	bne.n	80056b6 <HAL_UART_Receive+0x8a>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d104      	bne.n	80056b6 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	61bb      	str	r3, [r7, #24]
 80056b4:	e003      	b.n	80056be <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80056c6:	e043      	b.n	8005750 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2200      	movs	r2, #0
 80056d0:	2120      	movs	r1, #32
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 fb92 	bl	8005dfc <UART_WaitOnFlagUntilTimeout>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e042      	b.n	8005768 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10c      	bne.n	8005702 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	3302      	adds	r3, #2
 80056fe:	61bb      	str	r3, [r7, #24]
 8005700:	e01f      	b.n	8005742 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570a:	d007      	beq.n	800571c <HAL_UART_Receive+0xf0>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <HAL_UART_Receive+0xfe>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d106      	bne.n	800572a <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	b2da      	uxtb	r2, r3
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	701a      	strb	r2, [r3, #0]
 8005728:	e008      	b.n	800573c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005736:	b2da      	uxtb	r2, r3
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	3301      	adds	r3, #1
 8005740:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1b6      	bne.n	80056c8 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	e000      	b.n	8005768 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005766:	2302      	movs	r3, #2
  }
}
 8005768:	4618      	mov	r0, r3
 800576a:	3720      	adds	r7, #32
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	4613      	mov	r3, r2
 800577c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b20      	cmp	r3, #32
 8005788:	d11d      	bne.n	80057c6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <HAL_UART_Receive_IT+0x26>
 8005790:	88fb      	ldrh	r3, [r7, #6]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e016      	b.n	80057c8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_UART_Receive_IT+0x38>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e00f      	b.n	80057c8 <HAL_UART_Receive_IT+0x58>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80057b6:	88fb      	ldrh	r3, [r7, #6]
 80057b8:	461a      	mov	r2, r3
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fb8b 	bl	8005ed8 <UART_Start_Receive_IT>
 80057c2:	4603      	mov	r3, r0
 80057c4:	e000      	b.n	80057c8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80057c6:	2302      	movs	r3, #2
  }
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b0ba      	sub	sp, #232	; 0xe8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800580e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10f      	bne.n	8005836 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b00      	cmp	r3, #0
 8005820:	d009      	beq.n	8005836 <HAL_UART_IRQHandler+0x66>
 8005822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fc6f 	bl	8006112 <UART_Receive_IT>
      return;
 8005834:	e256      	b.n	8005ce4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005836:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 80de 	beq.w	80059fc <HAL_UART_IRQHandler+0x22c>
 8005840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d106      	bne.n	800585a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800584c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005850:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 80d1 	beq.w	80059fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800585a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00b      	beq.n	800587e <HAL_UART_IRQHandler+0xae>
 8005866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800586a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586e:	2b00      	cmp	r3, #0
 8005870:	d005      	beq.n	800587e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f043 0201 	orr.w	r2, r3, #1
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800587e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00b      	beq.n	80058a2 <HAL_UART_IRQHandler+0xd2>
 800588a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d005      	beq.n	80058a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	f043 0202 	orr.w	r2, r3, #2
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00b      	beq.n	80058c6 <HAL_UART_IRQHandler+0xf6>
 80058ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d005      	beq.n	80058c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	f043 0204 	orr.w	r2, r3, #4
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d011      	beq.n	80058f6 <HAL_UART_IRQHandler+0x126>
 80058d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d105      	bne.n	80058ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	f043 0208 	orr.w	r2, r3, #8
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 81ed 	beq.w	8005cda <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005904:	f003 0320 	and.w	r3, r3, #32
 8005908:	2b00      	cmp	r3, #0
 800590a:	d008      	beq.n	800591e <HAL_UART_IRQHandler+0x14e>
 800590c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fbfa 	bl	8006112 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005928:	2b40      	cmp	r3, #64	; 0x40
 800592a:	bf0c      	ite	eq
 800592c:	2301      	moveq	r3, #1
 800592e:	2300      	movne	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	2b00      	cmp	r3, #0
 8005940:	d103      	bne.n	800594a <HAL_UART_IRQHandler+0x17a>
 8005942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005946:	2b00      	cmp	r3, #0
 8005948:	d04f      	beq.n	80059ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fb02 	bl	8005f54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595a:	2b40      	cmp	r3, #64	; 0x40
 800595c:	d141      	bne.n	80059e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3314      	adds	r3, #20
 8005964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005974:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800597c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3314      	adds	r3, #20
 8005986:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800598a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800598e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005992:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005996:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800599a:	e841 2300 	strex	r3, r2, [r1]
 800599e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1d9      	bne.n	800595e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d013      	beq.n	80059da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	4a7d      	ldr	r2, [pc, #500]	; (8005bac <HAL_UART_IRQHandler+0x3dc>)
 80059b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fd fd65 	bl	800348e <HAL_DMA_Abort_IT>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d016      	beq.n	80059f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059d4:	4610      	mov	r0, r2
 80059d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d8:	e00e      	b.n	80059f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f990 	bl	8005d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e0:	e00a      	b.n	80059f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f98c 	bl	8005d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e8:	e006      	b.n	80059f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f988 	bl	8005d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80059f6:	e170      	b.n	8005cda <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f8:	bf00      	nop
    return;
 80059fa:	e16e      	b.n	8005cda <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	f040 814a 	bne.w	8005c9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a0a:	f003 0310 	and.w	r3, r3, #16
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 8143 	beq.w	8005c9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 813c 	beq.w	8005c9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a22:	2300      	movs	r3, #0
 8005a24:	60bb      	str	r3, [r7, #8]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	60bb      	str	r3, [r7, #8]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	60bb      	str	r3, [r7, #8]
 8005a36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	f040 80b4 	bne.w	8005bb0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 8140 	beq.w	8005cde <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a66:	429a      	cmp	r2, r3
 8005a68:	f080 8139 	bcs.w	8005cde <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a7e:	f000 8088 	beq.w	8005b92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	330c      	adds	r3, #12
 8005a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	330c      	adds	r3, #12
 8005aaa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005aae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005aba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005abe:	e841 2300 	strex	r3, r2, [r1]
 8005ac2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1d9      	bne.n	8005a82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3314      	adds	r3, #20
 8005ad4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ae0:	f023 0301 	bic.w	r3, r3, #1
 8005ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3314      	adds	r3, #20
 8005aee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005af2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005af6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005afa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e1      	bne.n	8005ace <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3314      	adds	r3, #20
 8005b10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b14:	e853 3f00 	ldrex	r3, [r3]
 8005b18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3314      	adds	r3, #20
 8005b2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e3      	bne.n	8005b0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	330c      	adds	r3, #12
 8005b56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5a:	e853 3f00 	ldrex	r3, [r3]
 8005b5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b62:	f023 0310 	bic.w	r3, r3, #16
 8005b66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	330c      	adds	r3, #12
 8005b70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005b74:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e3      	bne.n	8005b50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fd fc0e 	bl	80033ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f8b6 	bl	8005d14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ba8:	e099      	b.n	8005cde <HAL_UART_IRQHandler+0x50e>
 8005baa:	bf00      	nop
 8005bac:	0800601b 	.word	0x0800601b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 808b 	beq.w	8005ce2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005bcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 8086 	beq.w	8005ce2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	330c      	adds	r3, #12
 8005bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005bfa:	647a      	str	r2, [r7, #68]	; 0x44
 8005bfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1e3      	bne.n	8005bd6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3314      	adds	r3, #20
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	f023 0301 	bic.w	r3, r3, #1
 8005c24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3314      	adds	r3, #20
 8005c2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c32:	633a      	str	r2, [r7, #48]	; 0x30
 8005c34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e3      	bne.n	8005c0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	330c      	adds	r3, #12
 8005c5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0310 	bic.w	r3, r3, #16
 8005c6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	330c      	adds	r3, #12
 8005c74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005c78:	61fa      	str	r2, [r7, #28]
 8005c7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	69b9      	ldr	r1, [r7, #24]
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	617b      	str	r3, [r7, #20]
   return(result);
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e3      	bne.n	8005c54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f83e 	bl	8005d14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c98:	e023      	b.n	8005ce2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d009      	beq.n	8005cba <HAL_UART_IRQHandler+0x4ea>
 8005ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f9c5 	bl	8006042 <UART_Transmit_IT>
    return;
 8005cb8:	e014      	b.n	8005ce4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00e      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x514>
 8005cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d008      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fa05 	bl	80060e2 <UART_EndTransmit_IT>
    return;
 8005cd8:	e004      	b.n	8005ce4 <HAL_UART_IRQHandler+0x514>
    return;
 8005cda:	bf00      	nop
 8005cdc:	e002      	b.n	8005ce4 <HAL_UART_IRQHandler+0x514>
      return;
 8005cde:	bf00      	nop
 8005ce0:	e000      	b.n	8005ce4 <HAL_UART_IRQHandler+0x514>
      return;
 8005ce2:	bf00      	nop
  }
}
 8005ce4:	37e8      	adds	r7, #232	; 0xe8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop

08005cec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e020      	b.n	8005d88 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2224      	movs	r2, #36	; 0x24
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f023 030c 	bic.w	r3, r3, #12
 8005d64:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f043 0308 	orr.w	r3, r3, #8
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <HAL_HalfDuplex_EnableReceiver+0x1a>
 8005daa:	2302      	movs	r3, #2
 8005dac:	e020      	b.n	8005df0 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2224      	movs	r2, #36	; 0x24
 8005dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f023 030c 	bic.w	r3, r3, #12
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f043 0304 	orr.w	r3, r3, #4
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b090      	sub	sp, #64	; 0x40
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	603b      	str	r3, [r7, #0]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e0c:	e050      	b.n	8005eb0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e14:	d04c      	beq.n	8005eb0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d007      	beq.n	8005e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e1c:	f7fc fab0 	bl	8002380 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d241      	bcs.n	8005eb0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	330c      	adds	r3, #12
 8005e32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	e853 3f00 	ldrex	r3, [r3]
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	330c      	adds	r3, #12
 8005e4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e4c:	637a      	str	r2, [r7, #52]	; 0x34
 8005e4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e54:	e841 2300 	strex	r3, r2, [r1]
 8005e58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e5      	bne.n	8005e2c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3314      	adds	r3, #20
 8005e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f023 0301 	bic.w	r3, r3, #1
 8005e76:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3314      	adds	r3, #20
 8005e7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e80:	623a      	str	r2, [r7, #32]
 8005e82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	69f9      	ldr	r1, [r7, #28]
 8005e86:	6a3a      	ldr	r2, [r7, #32]
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e5      	bne.n	8005e60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e00f      	b.n	8005ed0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	bf0c      	ite	eq
 8005ec0:	2301      	moveq	r3, #1
 8005ec2:	2300      	movne	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	79fb      	ldrb	r3, [r7, #7]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d09f      	beq.n	8005e0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3740      	adds	r7, #64	; 0x40
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	88fa      	ldrh	r2, [r7, #6]
 8005ef0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	88fa      	ldrh	r2, [r7, #6]
 8005ef6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2222      	movs	r2, #34	; 0x22
 8005f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d007      	beq.n	8005f26 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f24:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	695a      	ldr	r2, [r3, #20]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f042 0201 	orr.w	r2, r2, #1
 8005f34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f042 0220 	orr.w	r2, r2, #32
 8005f44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b095      	sub	sp, #84	; 0x54
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	330c      	adds	r3, #12
 8005f62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f66:	e853 3f00 	ldrex	r3, [r3]
 8005f6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f7c:	643a      	str	r2, [r7, #64]	; 0x40
 8005f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f84:	e841 2300 	strex	r3, r2, [r1]
 8005f88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e5      	bne.n	8005f5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3314      	adds	r3, #20
 8005f96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	f023 0301 	bic.w	r3, r3, #1
 8005fa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3314      	adds	r3, #20
 8005fae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e5      	bne.n	8005f90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d119      	bne.n	8006000 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	330c      	adds	r3, #12
 8005fd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f023 0310 	bic.w	r3, r3, #16
 8005fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	330c      	adds	r3, #12
 8005fea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fec:	61ba      	str	r2, [r7, #24]
 8005fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff0:	6979      	ldr	r1, [r7, #20]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	e841 2300 	strex	r3, r2, [r1]
 8005ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1e5      	bne.n	8005fcc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800600e:	bf00      	nop
 8006010:	3754      	adds	r7, #84	; 0x54
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006026:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f7ff fe63 	bl	8005d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800603a:	bf00      	nop
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b21      	cmp	r3, #33	; 0x21
 8006054:	d13e      	bne.n	80060d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800605e:	d114      	bne.n	800608a <UART_Transmit_IT+0x48>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d110      	bne.n	800608a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800607c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	1c9a      	adds	r2, r3, #2
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	621a      	str	r2, [r3, #32]
 8006088:	e008      	b.n	800609c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	1c59      	adds	r1, r3, #1
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	6211      	str	r1, [r2, #32]
 8006094:	781a      	ldrb	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	3b01      	subs	r3, #1
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	4619      	mov	r1, r3
 80060aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10f      	bne.n	80060d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060d0:	2300      	movs	r3, #0
 80060d2:	e000      	b.n	80060d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060d4:	2302      	movs	r3, #2
  }
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b082      	sub	sp, #8
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2220      	movs	r2, #32
 80060fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff fdf2 	bl	8005cec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b08c      	sub	sp, #48	; 0x30
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b22      	cmp	r3, #34	; 0x22
 8006124:	f040 80ab 	bne.w	800627e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006130:	d117      	bne.n	8006162 <UART_Receive_IT+0x50>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d113      	bne.n	8006162 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800613a:	2300      	movs	r3, #0
 800613c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006142:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	b29b      	uxth	r3, r3
 800614c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006150:	b29a      	uxth	r2, r3
 8006152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006154:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	1c9a      	adds	r2, r3, #2
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	629a      	str	r2, [r3, #40]	; 0x28
 8006160:	e026      	b.n	80061b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006168:	2300      	movs	r3, #0
 800616a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006174:	d007      	beq.n	8006186 <UART_Receive_IT+0x74>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <UART_Receive_IT+0x82>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d106      	bne.n	8006194 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	b2da      	uxtb	r2, r3
 800618e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	e008      	b.n	80061a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	4619      	mov	r1, r3
 80061be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d15a      	bne.n	800627a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 0220 	bic.w	r2, r2, #32
 80061d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695a      	ldr	r2, [r3, #20]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0201 	bic.w	r2, r2, #1
 80061f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006200:	2b01      	cmp	r3, #1
 8006202:	d135      	bne.n	8006270 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	330c      	adds	r3, #12
 8006210:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	613b      	str	r3, [r7, #16]
   return(result);
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f023 0310 	bic.w	r3, r3, #16
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	330c      	adds	r3, #12
 8006228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622a:	623a      	str	r2, [r7, #32]
 800622c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	69f9      	ldr	r1, [r7, #28]
 8006230:	6a3a      	ldr	r2, [r7, #32]
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	61bb      	str	r3, [r7, #24]
   return(result);
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e5      	bne.n	800620a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0310 	and.w	r3, r3, #16
 8006248:	2b10      	cmp	r3, #16
 800624a:	d10a      	bne.n	8006262 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800624c:	2300      	movs	r3, #0
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7ff fd53 	bl	8005d14 <HAL_UARTEx_RxEventCallback>
 800626e:	e002      	b.n	8006276 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7fb fd69 	bl	8001d48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	e002      	b.n	8006280 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	e000      	b.n	8006280 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800627e:	2302      	movs	r3, #2
  }
}
 8006280:	4618      	mov	r0, r3
 8006282:	3730      	adds	r7, #48	; 0x30
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800628c:	b0c0      	sub	sp, #256	; 0x100
 800628e:	af00      	add	r7, sp, #0
 8006290:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a4:	68d9      	ldr	r1, [r3, #12]
 80062a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	ea40 0301 	orr.w	r3, r0, r1
 80062b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	431a      	orrs	r2, r3
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	431a      	orrs	r2, r3
 80062c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062e0:	f021 010c 	bic.w	r1, r1, #12
 80062e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062ee:	430b      	orrs	r3, r1
 80062f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006302:	6999      	ldr	r1, [r3, #24]
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	ea40 0301 	orr.w	r3, r0, r1
 800630e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	4b8f      	ldr	r3, [pc, #572]	; (8006554 <UART_SetConfig+0x2cc>)
 8006318:	429a      	cmp	r2, r3
 800631a:	d005      	beq.n	8006328 <UART_SetConfig+0xa0>
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	4b8d      	ldr	r3, [pc, #564]	; (8006558 <UART_SetConfig+0x2d0>)
 8006324:	429a      	cmp	r2, r3
 8006326:	d104      	bne.n	8006332 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006328:	f7fd fbb8 	bl	8003a9c <HAL_RCC_GetPCLK2Freq>
 800632c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006330:	e003      	b.n	800633a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006332:	f7fd fb9f 	bl	8003a74 <HAL_RCC_GetPCLK1Freq>
 8006336:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800633a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006344:	f040 810c 	bne.w	8006560 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800634c:	2200      	movs	r2, #0
 800634e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006352:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006356:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800635a:	4622      	mov	r2, r4
 800635c:	462b      	mov	r3, r5
 800635e:	1891      	adds	r1, r2, r2
 8006360:	65b9      	str	r1, [r7, #88]	; 0x58
 8006362:	415b      	adcs	r3, r3
 8006364:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006366:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800636a:	4621      	mov	r1, r4
 800636c:	eb12 0801 	adds.w	r8, r2, r1
 8006370:	4629      	mov	r1, r5
 8006372:	eb43 0901 	adc.w	r9, r3, r1
 8006376:	f04f 0200 	mov.w	r2, #0
 800637a:	f04f 0300 	mov.w	r3, #0
 800637e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006382:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006386:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800638a:	4690      	mov	r8, r2
 800638c:	4699      	mov	r9, r3
 800638e:	4623      	mov	r3, r4
 8006390:	eb18 0303 	adds.w	r3, r8, r3
 8006394:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006398:	462b      	mov	r3, r5
 800639a:	eb49 0303 	adc.w	r3, r9, r3
 800639e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063b6:	460b      	mov	r3, r1
 80063b8:	18db      	adds	r3, r3, r3
 80063ba:	653b      	str	r3, [r7, #80]	; 0x50
 80063bc:	4613      	mov	r3, r2
 80063be:	eb42 0303 	adc.w	r3, r2, r3
 80063c2:	657b      	str	r3, [r7, #84]	; 0x54
 80063c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063cc:	f7f9 ff70 	bl	80002b0 <__aeabi_uldivmod>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4b61      	ldr	r3, [pc, #388]	; (800655c <UART_SetConfig+0x2d4>)
 80063d6:	fba3 2302 	umull	r2, r3, r3, r2
 80063da:	095b      	lsrs	r3, r3, #5
 80063dc:	011c      	lsls	r4, r3, #4
 80063de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063f0:	4642      	mov	r2, r8
 80063f2:	464b      	mov	r3, r9
 80063f4:	1891      	adds	r1, r2, r2
 80063f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80063f8:	415b      	adcs	r3, r3
 80063fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006400:	4641      	mov	r1, r8
 8006402:	eb12 0a01 	adds.w	sl, r2, r1
 8006406:	4649      	mov	r1, r9
 8006408:	eb43 0b01 	adc.w	fp, r3, r1
 800640c:	f04f 0200 	mov.w	r2, #0
 8006410:	f04f 0300 	mov.w	r3, #0
 8006414:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006418:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800641c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006420:	4692      	mov	sl, r2
 8006422:	469b      	mov	fp, r3
 8006424:	4643      	mov	r3, r8
 8006426:	eb1a 0303 	adds.w	r3, sl, r3
 800642a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800642e:	464b      	mov	r3, r9
 8006430:	eb4b 0303 	adc.w	r3, fp, r3
 8006434:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006444:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006448:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800644c:	460b      	mov	r3, r1
 800644e:	18db      	adds	r3, r3, r3
 8006450:	643b      	str	r3, [r7, #64]	; 0x40
 8006452:	4613      	mov	r3, r2
 8006454:	eb42 0303 	adc.w	r3, r2, r3
 8006458:	647b      	str	r3, [r7, #68]	; 0x44
 800645a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800645e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006462:	f7f9 ff25 	bl	80002b0 <__aeabi_uldivmod>
 8006466:	4602      	mov	r2, r0
 8006468:	460b      	mov	r3, r1
 800646a:	4611      	mov	r1, r2
 800646c:	4b3b      	ldr	r3, [pc, #236]	; (800655c <UART_SetConfig+0x2d4>)
 800646e:	fba3 2301 	umull	r2, r3, r3, r1
 8006472:	095b      	lsrs	r3, r3, #5
 8006474:	2264      	movs	r2, #100	; 0x64
 8006476:	fb02 f303 	mul.w	r3, r2, r3
 800647a:	1acb      	subs	r3, r1, r3
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006482:	4b36      	ldr	r3, [pc, #216]	; (800655c <UART_SetConfig+0x2d4>)
 8006484:	fba3 2302 	umull	r2, r3, r3, r2
 8006488:	095b      	lsrs	r3, r3, #5
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006490:	441c      	add	r4, r3
 8006492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006496:	2200      	movs	r2, #0
 8006498:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800649c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064a4:	4642      	mov	r2, r8
 80064a6:	464b      	mov	r3, r9
 80064a8:	1891      	adds	r1, r2, r2
 80064aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80064ac:	415b      	adcs	r3, r3
 80064ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064b4:	4641      	mov	r1, r8
 80064b6:	1851      	adds	r1, r2, r1
 80064b8:	6339      	str	r1, [r7, #48]	; 0x30
 80064ba:	4649      	mov	r1, r9
 80064bc:	414b      	adcs	r3, r1
 80064be:	637b      	str	r3, [r7, #52]	; 0x34
 80064c0:	f04f 0200 	mov.w	r2, #0
 80064c4:	f04f 0300 	mov.w	r3, #0
 80064c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064cc:	4659      	mov	r1, fp
 80064ce:	00cb      	lsls	r3, r1, #3
 80064d0:	4651      	mov	r1, sl
 80064d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064d6:	4651      	mov	r1, sl
 80064d8:	00ca      	lsls	r2, r1, #3
 80064da:	4610      	mov	r0, r2
 80064dc:	4619      	mov	r1, r3
 80064de:	4603      	mov	r3, r0
 80064e0:	4642      	mov	r2, r8
 80064e2:	189b      	adds	r3, r3, r2
 80064e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064e8:	464b      	mov	r3, r9
 80064ea:	460a      	mov	r2, r1
 80064ec:	eb42 0303 	adc.w	r3, r2, r3
 80064f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006500:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006504:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006508:	460b      	mov	r3, r1
 800650a:	18db      	adds	r3, r3, r3
 800650c:	62bb      	str	r3, [r7, #40]	; 0x28
 800650e:	4613      	mov	r3, r2
 8006510:	eb42 0303 	adc.w	r3, r2, r3
 8006514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006516:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800651a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800651e:	f7f9 fec7 	bl	80002b0 <__aeabi_uldivmod>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4b0d      	ldr	r3, [pc, #52]	; (800655c <UART_SetConfig+0x2d4>)
 8006528:	fba3 1302 	umull	r1, r3, r3, r2
 800652c:	095b      	lsrs	r3, r3, #5
 800652e:	2164      	movs	r1, #100	; 0x64
 8006530:	fb01 f303 	mul.w	r3, r1, r3
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	3332      	adds	r3, #50	; 0x32
 800653a:	4a08      	ldr	r2, [pc, #32]	; (800655c <UART_SetConfig+0x2d4>)
 800653c:	fba2 2303 	umull	r2, r3, r2, r3
 8006540:	095b      	lsrs	r3, r3, #5
 8006542:	f003 0207 	and.w	r2, r3, #7
 8006546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4422      	add	r2, r4
 800654e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006550:	e105      	b.n	800675e <UART_SetConfig+0x4d6>
 8006552:	bf00      	nop
 8006554:	40011000 	.word	0x40011000
 8006558:	40011400 	.word	0x40011400
 800655c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006564:	2200      	movs	r2, #0
 8006566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800656a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800656e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006572:	4642      	mov	r2, r8
 8006574:	464b      	mov	r3, r9
 8006576:	1891      	adds	r1, r2, r2
 8006578:	6239      	str	r1, [r7, #32]
 800657a:	415b      	adcs	r3, r3
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
 800657e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006582:	4641      	mov	r1, r8
 8006584:	1854      	adds	r4, r2, r1
 8006586:	4649      	mov	r1, r9
 8006588:	eb43 0501 	adc.w	r5, r3, r1
 800658c:	f04f 0200 	mov.w	r2, #0
 8006590:	f04f 0300 	mov.w	r3, #0
 8006594:	00eb      	lsls	r3, r5, #3
 8006596:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800659a:	00e2      	lsls	r2, r4, #3
 800659c:	4614      	mov	r4, r2
 800659e:	461d      	mov	r5, r3
 80065a0:	4643      	mov	r3, r8
 80065a2:	18e3      	adds	r3, r4, r3
 80065a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065a8:	464b      	mov	r3, r9
 80065aa:	eb45 0303 	adc.w	r3, r5, r3
 80065ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	f04f 0300 	mov.w	r3, #0
 80065ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065ce:	4629      	mov	r1, r5
 80065d0:	008b      	lsls	r3, r1, #2
 80065d2:	4621      	mov	r1, r4
 80065d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065d8:	4621      	mov	r1, r4
 80065da:	008a      	lsls	r2, r1, #2
 80065dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065e0:	f7f9 fe66 	bl	80002b0 <__aeabi_uldivmod>
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4b60      	ldr	r3, [pc, #384]	; (800676c <UART_SetConfig+0x4e4>)
 80065ea:	fba3 2302 	umull	r2, r3, r3, r2
 80065ee:	095b      	lsrs	r3, r3, #5
 80065f0:	011c      	lsls	r4, r3, #4
 80065f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006600:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006604:	4642      	mov	r2, r8
 8006606:	464b      	mov	r3, r9
 8006608:	1891      	adds	r1, r2, r2
 800660a:	61b9      	str	r1, [r7, #24]
 800660c:	415b      	adcs	r3, r3
 800660e:	61fb      	str	r3, [r7, #28]
 8006610:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006614:	4641      	mov	r1, r8
 8006616:	1851      	adds	r1, r2, r1
 8006618:	6139      	str	r1, [r7, #16]
 800661a:	4649      	mov	r1, r9
 800661c:	414b      	adcs	r3, r1
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	f04f 0200 	mov.w	r2, #0
 8006624:	f04f 0300 	mov.w	r3, #0
 8006628:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800662c:	4659      	mov	r1, fp
 800662e:	00cb      	lsls	r3, r1, #3
 8006630:	4651      	mov	r1, sl
 8006632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006636:	4651      	mov	r1, sl
 8006638:	00ca      	lsls	r2, r1, #3
 800663a:	4610      	mov	r0, r2
 800663c:	4619      	mov	r1, r3
 800663e:	4603      	mov	r3, r0
 8006640:	4642      	mov	r2, r8
 8006642:	189b      	adds	r3, r3, r2
 8006644:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006648:	464b      	mov	r3, r9
 800664a:	460a      	mov	r2, r1
 800664c:	eb42 0303 	adc.w	r3, r2, r3
 8006650:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	67bb      	str	r3, [r7, #120]	; 0x78
 800665e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006660:	f04f 0200 	mov.w	r2, #0
 8006664:	f04f 0300 	mov.w	r3, #0
 8006668:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800666c:	4649      	mov	r1, r9
 800666e:	008b      	lsls	r3, r1, #2
 8006670:	4641      	mov	r1, r8
 8006672:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006676:	4641      	mov	r1, r8
 8006678:	008a      	lsls	r2, r1, #2
 800667a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800667e:	f7f9 fe17 	bl	80002b0 <__aeabi_uldivmod>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4b39      	ldr	r3, [pc, #228]	; (800676c <UART_SetConfig+0x4e4>)
 8006688:	fba3 1302 	umull	r1, r3, r3, r2
 800668c:	095b      	lsrs	r3, r3, #5
 800668e:	2164      	movs	r1, #100	; 0x64
 8006690:	fb01 f303 	mul.w	r3, r1, r3
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	3332      	adds	r3, #50	; 0x32
 800669a:	4a34      	ldr	r2, [pc, #208]	; (800676c <UART_SetConfig+0x4e4>)
 800669c:	fba2 2303 	umull	r2, r3, r2, r3
 80066a0:	095b      	lsrs	r3, r3, #5
 80066a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066a6:	441c      	add	r4, r3
 80066a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066ac:	2200      	movs	r2, #0
 80066ae:	673b      	str	r3, [r7, #112]	; 0x70
 80066b0:	677a      	str	r2, [r7, #116]	; 0x74
 80066b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066b6:	4642      	mov	r2, r8
 80066b8:	464b      	mov	r3, r9
 80066ba:	1891      	adds	r1, r2, r2
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	415b      	adcs	r3, r3
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066c6:	4641      	mov	r1, r8
 80066c8:	1851      	adds	r1, r2, r1
 80066ca:	6039      	str	r1, [r7, #0]
 80066cc:	4649      	mov	r1, r9
 80066ce:	414b      	adcs	r3, r1
 80066d0:	607b      	str	r3, [r7, #4]
 80066d2:	f04f 0200 	mov.w	r2, #0
 80066d6:	f04f 0300 	mov.w	r3, #0
 80066da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066de:	4659      	mov	r1, fp
 80066e0:	00cb      	lsls	r3, r1, #3
 80066e2:	4651      	mov	r1, sl
 80066e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066e8:	4651      	mov	r1, sl
 80066ea:	00ca      	lsls	r2, r1, #3
 80066ec:	4610      	mov	r0, r2
 80066ee:	4619      	mov	r1, r3
 80066f0:	4603      	mov	r3, r0
 80066f2:	4642      	mov	r2, r8
 80066f4:	189b      	adds	r3, r3, r2
 80066f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80066f8:	464b      	mov	r3, r9
 80066fa:	460a      	mov	r2, r1
 80066fc:	eb42 0303 	adc.w	r3, r2, r3
 8006700:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	663b      	str	r3, [r7, #96]	; 0x60
 800670c:	667a      	str	r2, [r7, #100]	; 0x64
 800670e:	f04f 0200 	mov.w	r2, #0
 8006712:	f04f 0300 	mov.w	r3, #0
 8006716:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800671a:	4649      	mov	r1, r9
 800671c:	008b      	lsls	r3, r1, #2
 800671e:	4641      	mov	r1, r8
 8006720:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006724:	4641      	mov	r1, r8
 8006726:	008a      	lsls	r2, r1, #2
 8006728:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800672c:	f7f9 fdc0 	bl	80002b0 <__aeabi_uldivmod>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4b0d      	ldr	r3, [pc, #52]	; (800676c <UART_SetConfig+0x4e4>)
 8006736:	fba3 1302 	umull	r1, r3, r3, r2
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	2164      	movs	r1, #100	; 0x64
 800673e:	fb01 f303 	mul.w	r3, r1, r3
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	011b      	lsls	r3, r3, #4
 8006746:	3332      	adds	r3, #50	; 0x32
 8006748:	4a08      	ldr	r2, [pc, #32]	; (800676c <UART_SetConfig+0x4e4>)
 800674a:	fba2 2303 	umull	r2, r3, r2, r3
 800674e:	095b      	lsrs	r3, r3, #5
 8006750:	f003 020f 	and.w	r2, r3, #15
 8006754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4422      	add	r2, r4
 800675c:	609a      	str	r2, [r3, #8]
}
 800675e:	bf00      	nop
 8006760:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006764:	46bd      	mov	sp, r7
 8006766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800676a:	bf00      	nop
 800676c:	51eb851f 	.word	0x51eb851f

08006770 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	4603      	mov	r3, r0
 8006778:	71fb      	strb	r3, [r7, #7]
 800677a:	460b      	mov	r3, r1
 800677c:	71bb      	strb	r3, [r7, #6]
 800677e:	4613      	mov	r3, r2
 8006780:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8006782:	797b      	ldrb	r3, [r7, #5]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d901      	bls.n	800678c <tmc_fillCRC8Table+0x1c>
		return 0;
 8006788:	2300      	movs	r3, #0
 800678a:	e09e      	b.n	80068ca <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 800678c:	797a      	ldrb	r2, [r7, #5]
 800678e:	4951      	ldr	r1, [pc, #324]	; (80068d4 <tmc_fillCRC8Table+0x164>)
 8006790:	4613      	mov	r3, r2
 8006792:	01db      	lsls	r3, r3, #7
 8006794:	4413      	add	r3, r2
 8006796:	005b      	lsls	r3, r3, #1
 8006798:	440b      	add	r3, r1
 800679a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800679e:	79fa      	ldrb	r2, [r7, #7]
 80067a0:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 80067a2:	797a      	ldrb	r2, [r7, #5]
 80067a4:	494b      	ldr	r1, [pc, #300]	; (80068d4 <tmc_fillCRC8Table+0x164>)
 80067a6:	4613      	mov	r3, r2
 80067a8:	01db      	lsls	r3, r3, #7
 80067aa:	4413      	add	r3, r2
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	440b      	add	r3, r1
 80067b0:	f203 1301 	addw	r3, r3, #257	; 0x101
 80067b4:	79ba      	ldrb	r2, [r7, #6]
 80067b6:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 80067b8:	797a      	ldrb	r2, [r7, #5]
 80067ba:	4613      	mov	r3, r2
 80067bc:	01db      	lsls	r3, r3, #7
 80067be:	4413      	add	r3, r2
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	4a44      	ldr	r2, [pc, #272]	; (80068d4 <tmc_fillCRC8Table+0x164>)
 80067c4:	4413      	add	r3, r2
 80067c6:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ce:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 80067d0:	4b41      	ldr	r3, [pc, #260]	; (80068d8 <tmc_fillCRC8Table+0x168>)
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	e074      	b.n	80068c0 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 80067d6:	79bb      	ldrb	r3, [r7, #6]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d004      	beq.n	80067e6 <tmc_fillCRC8Table+0x76>
 80067dc:	6978      	ldr	r0, [r7, #20]
 80067de:	f000 f8f7 	bl	80069d0 <flipBitsInBytes>
 80067e2:	4603      	mov	r3, r0
 80067e4:	e000      	b.n	80067e8 <tmc_fillCRC8Table+0x78>
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 80067ea:	2300      	movs	r3, #0
 80067ec:	613b      	str	r3, [r7, #16]
 80067ee:	e035      	b.n	800685c <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	0fdb      	lsrs	r3, r3, #31
 80067f4:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	005b      	lsls	r3, r3, #1
 80067fa:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <tmc_fillCRC8Table+0x9a>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	e000      	b.n	800680c <tmc_fillCRC8Table+0x9c>
 800680a:	2300      	movs	r3, #0
 800680c:	69fa      	ldr	r2, [r7, #28]
 800680e:	4053      	eors	r3, r2
 8006810:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <tmc_fillCRC8Table+0xb2>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	021b      	lsls	r3, r3, #8
 8006820:	e000      	b.n	8006824 <tmc_fillCRC8Table+0xb4>
 8006822:	2300      	movs	r3, #0
 8006824:	69fa      	ldr	r2, [r7, #28]
 8006826:	4053      	eors	r3, r2
 8006828:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <tmc_fillCRC8Table+0xca>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	041b      	lsls	r3, r3, #16
 8006838:	e000      	b.n	800683c <tmc_fillCRC8Table+0xcc>
 800683a:	2300      	movs	r3, #0
 800683c:	69fa      	ldr	r2, [r7, #28]
 800683e:	4053      	eors	r3, r2
 8006840:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 8006842:	7afb      	ldrb	r3, [r7, #11]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <tmc_fillCRC8Table+0xde>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	061b      	lsls	r3, r3, #24
 800684c:	e000      	b.n	8006850 <tmc_fillCRC8Table+0xe0>
 800684e:	2300      	movs	r3, #0
 8006850:	69fa      	ldr	r2, [r7, #28]
 8006852:	4053      	eors	r3, r2
 8006854:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	3301      	adds	r3, #1
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	2b07      	cmp	r3, #7
 8006860:	ddc6      	ble.n	80067f0 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 8006862:	79bb      	ldrb	r3, [r7, #6]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <tmc_fillCRC8Table+0x102>
 8006868:	69f8      	ldr	r0, [r7, #28]
 800686a:	f000 f8b1 	bl	80069d0 <flipBitsInBytes>
 800686e:	4603      	mov	r3, r0
 8006870:	e000      	b.n	8006874 <tmc_fillCRC8Table+0x104>
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	61ba      	str	r2, [r7, #24]
 800687c:	69fa      	ldr	r2, [r7, #28]
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	0a1b      	lsrs	r3, r3, #8
 8006886:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	61ba      	str	r2, [r7, #24]
 800688e:	69fa      	ldr	r2, [r7, #28]
 8006890:	b2d2      	uxtb	r2, r2
 8006892:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	0a1b      	lsrs	r3, r3, #8
 8006898:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	61ba      	str	r2, [r7, #24]
 80068a0:	69fa      	ldr	r2, [r7, #28]
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	0a1b      	lsrs	r3, r3, #8
 80068aa:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	61ba      	str	r2, [r7, #24]
 80068b2:	69fa      	ldr	r2, [r7, #28]
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	4a06      	ldr	r2, [pc, #24]	; (80068dc <tmc_fillCRC8Table+0x16c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d186      	bne.n	80067d6 <tmc_fillCRC8Table+0x66>
	}

	return 1;
 80068c8:	2301      	movs	r3, #1
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3720      	adds	r7, #32
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000704 	.word	0x20000704
 80068d8:	03020100 	.word	0x03020100
 80068dc:	04030200 	.word	0x04030200

080068e0 <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	4613      	mov	r3, r2
 80068ec:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 80068ee:	2300      	movs	r3, #0
 80068f0:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 80068f2:	79fb      	ldrb	r3, [r7, #7]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d901      	bls.n	80068fc <tmc_CRC8+0x1c>
		return 0;
 80068f8:	2300      	movs	r3, #0
 80068fa:	e02c      	b.n	8006956 <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 80068fc:	79fa      	ldrb	r2, [r7, #7]
 80068fe:	4613      	mov	r3, r2
 8006900:	01db      	lsls	r3, r3, #7
 8006902:	4413      	add	r3, r2
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	4a16      	ldr	r2, [pc, #88]	; (8006960 <tmc_CRC8+0x80>)
 8006908:	4413      	add	r3, r2
 800690a:	613b      	str	r3, [r7, #16]

	while(bytes--)
 800690c:	e00b      	b.n	8006926 <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	60fa      	str	r2, [r7, #12]
 8006914:	781a      	ldrb	r2, [r3, #0]
 8006916:	7dfb      	ldrb	r3, [r7, #23]
 8006918:	4053      	eors	r3, r2
 800691a:	b2db      	uxtb	r3, r3
 800691c:	461a      	mov	r2, r3
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	4413      	add	r3, r2
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	1e5a      	subs	r2, r3, #1
 800692a:	60ba      	str	r2, [r7, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1ee      	bne.n	800690e <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 8006930:	79fa      	ldrb	r2, [r7, #7]
 8006932:	490b      	ldr	r1, [pc, #44]	; (8006960 <tmc_CRC8+0x80>)
 8006934:	4613      	mov	r3, r2
 8006936:	01db      	lsls	r3, r3, #7
 8006938:	4413      	add	r3, r2
 800693a:	005b      	lsls	r3, r3, #1
 800693c:	440b      	add	r3, r1
 800693e:	f203 1301 	addw	r3, r3, #257	; 0x101
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d005      	beq.n	8006954 <tmc_CRC8+0x74>
 8006948:	7dfb      	ldrb	r3, [r7, #23]
 800694a:	4618      	mov	r0, r3
 800694c:	f000 f80a 	bl	8006964 <flipByte>
 8006950:	4603      	mov	r3, r0
 8006952:	e000      	b.n	8006956 <tmc_CRC8+0x76>
 8006954:	7dfb      	ldrb	r3, [r7, #23]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20000704 	.word	0x20000704

08006964 <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	4603      	mov	r3, r0
 800696c:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 800696e:	79fb      	ldrb	r3, [r7, #7]
 8006970:	085b      	lsrs	r3, r3, #1
 8006972:	b2db      	uxtb	r3, r3
 8006974:	b25b      	sxtb	r3, r3
 8006976:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800697a:	b25a      	sxtb	r2, r3
 800697c:	79fb      	ldrb	r3, [r7, #7]
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	b25b      	sxtb	r3, r3
 8006982:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8006986:	b25b      	sxtb	r3, r3
 8006988:	4313      	orrs	r3, r2
 800698a:	b25b      	sxtb	r3, r3
 800698c:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 800698e:	79fb      	ldrb	r3, [r7, #7]
 8006990:	089b      	lsrs	r3, r3, #2
 8006992:	b2db      	uxtb	r3, r3
 8006994:	b25b      	sxtb	r3, r3
 8006996:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800699a:	b25a      	sxtb	r2, r3
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	b25b      	sxtb	r3, r3
 80069a2:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 80069a6:	b25b      	sxtb	r3, r3
 80069a8:	4313      	orrs	r3, r2
 80069aa:	b25b      	sxtb	r3, r3
 80069ac:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 80069ae:	79fb      	ldrb	r3, [r7, #7]
 80069b0:	091b      	lsrs	r3, r3, #4
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	b25a      	sxtb	r2, r3
 80069b6:	79fb      	ldrb	r3, [r7, #7]
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	b25b      	sxtb	r3, r3
 80069bc:	4313      	orrs	r3, r2
 80069be:	b25b      	sxtb	r3, r3
 80069c0:	71fb      	strb	r3, [r7, #7]

	return value;
 80069c2:	79fb      	ldrb	r3, [r7, #7]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	085b      	lsrs	r3, r3, #1
 80069dc:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 80069e8:	4313      	orrs	r3, r2
 80069ea:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	089b      	lsrs	r3, r3, #2
 80069f0:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 80069fc:	4313      	orrs	r3, r2
 80069fe:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	091b      	lsrs	r3, r3, #4
 8006a04:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8006a10:	4313      	orrs	r3, r2
 8006a12:	607b      	str	r3, [r7, #4]

	return value;
 8006a14:	687b      	ldr	r3, [r7, #4]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b086      	sub	sp, #24
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	607a      	str	r2, [r7, #4]
 8006a2e:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 8006a30:	2305      	movs	r3, #5
 8006a32:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8006a3a:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 8006a3c:	7afb      	ldrb	r3, [r7, #11]
 8006a3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	0e1b      	lsrs	r3, r3, #24
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	141b      	asrs	r3, r3, #16
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	121b      	asrs	r3, r3, #8
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 8006a64:	f107 0310 	add.w	r3, r7, #16
 8006a68:	2107      	movs	r1, #7
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7f9 fdca 	bl	8000604 <tmc2209_CRC8>
 8006a70:	4603      	mov	r3, r0
 8006a72:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8006a7c:	f107 0110 	add.w	r1, r7, #16
 8006a80:	2300      	movs	r3, #0
 8006a82:	2208      	movs	r2, #8
 8006a84:	f7f9 fd96 	bl	80005b4 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 8006a88:	7afb      	ldrb	r3, [r7, #11]
 8006a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a8e:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	7afb      	ldrb	r3, [r7, #11]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 8006a9e:	7afb      	ldrb	r3, [r7, #11]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 8006aa8:	7afb      	ldrb	r3, [r7, #11]
 8006aaa:	f042 0208 	orr.w	r2, r2, #8
 8006aae:	b2d1      	uxtb	r1, r2
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	460a      	mov	r2, r1
 8006ab6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8006aba:	bf00      	nop
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 8006ac2:	b590      	push	{r4, r7, lr}
 8006ac4:	b085      	sub	sp, #20
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	460b      	mov	r3, r1
 8006acc:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60bb      	str	r3, [r7, #8]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 8006ad6:	78fb      	ldrb	r3, [r7, #3]
 8006ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006adc:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 8006ade:	78fb      	ldrb	r3, [r7, #3]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d106      	bne.n	8006afe <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	e03f      	b.n	8006b7e <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 8006afe:	2305      	movs	r3, #5
 8006b00:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8006b08:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 8006b0a:	78fb      	ldrb	r3, [r7, #3]
 8006b0c:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 8006b0e:	f107 0308 	add.w	r3, r7, #8
 8006b12:	2103      	movs	r1, #3
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7f9 fd75 	bl	8000604 <tmc2209_CRC8>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8006b26:	f107 0108 	add.w	r1, r7, #8
 8006b2a:	2308      	movs	r3, #8
 8006b2c:	2204      	movs	r2, #4
 8006b2e:	f7f9 fd41 	bl	80005b4 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 8006b32:	7a3b      	ldrb	r3, [r7, #8]
 8006b34:	2b05      	cmp	r3, #5
 8006b36:	d001      	beq.n	8006b3c <tmc2209_readInt+0x7a>
		return 0;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	e020      	b.n	8006b7e <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 8006b3c:	7a7b      	ldrb	r3, [r7, #9]
 8006b3e:	2bff      	cmp	r3, #255	; 0xff
 8006b40:	d001      	beq.n	8006b46 <tmc2209_readInt+0x84>
		return 0;
 8006b42:	2300      	movs	r3, #0
 8006b44:	e01b      	b.n	8006b7e <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 8006b46:	7abb      	ldrb	r3, [r7, #10]
 8006b48:	78fa      	ldrb	r2, [r7, #3]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d001      	beq.n	8006b52 <tmc2209_readInt+0x90>
		return 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	e015      	b.n	8006b7e <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 8006b52:	7bfc      	ldrb	r4, [r7, #15]
 8006b54:	f107 0308 	add.w	r3, r7, #8
 8006b58:	2107      	movs	r1, #7
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7f9 fd52 	bl	8000604 <tmc2209_CRC8>
 8006b60:	4603      	mov	r3, r0
 8006b62:	429c      	cmp	r4, r3
 8006b64:	d001      	beq.n	8006b6a <tmc2209_readInt+0xa8>
		return 0;
 8006b66:	2300      	movs	r3, #0
 8006b68:	e009      	b.n	8006b7e <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 8006b6a:	7afb      	ldrb	r3, [r7, #11]
 8006b6c:	061a      	lsls	r2, r3, #24
 8006b6e:	7b3b      	ldrb	r3, [r7, #12]
 8006b70:	041b      	lsls	r3, r3, #16
 8006b72:	4313      	orrs	r3, r2
 8006b74:	7b7a      	ldrb	r2, [r7, #13]
 8006b76:	0212      	lsls	r2, r2, #8
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	7bba      	ldrb	r2, [r7, #14]
 8006b7c:	4313      	orrs	r3, r2
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd90      	pop	{r4, r7, pc}
	...

08006b88 <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b087      	sub	sp, #28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	607b      	str	r3, [r7, #4]
 8006b92:	460b      	mov	r3, r1
 8006b94:	72fb      	strb	r3, [r7, #11]
 8006b96:	4613      	mov	r3, r2
 8006b98:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	7aba      	ldrb	r2, [r7, #10]
 8006b9e:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	7afa      	ldrb	r2, [r7, #11]
 8006bb8:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8006bcc:	2300      	movs	r3, #0
 8006bce:	617b      	str	r3, [r7, #20]
 8006bd0:	e017      	b.n	8006c02 <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 8006bd2:	4a11      	ldr	r2, [pc, #68]	; (8006c18 <tmc2209_init+0x90>)
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	7819      	ldrb	r1, [r3, #0]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006be4:	460a      	mov	r2, r1
 8006be6:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	6a3a      	ldr	r2, [r7, #32]
 8006bee:	4413      	add	r3, r2
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	68f9      	ldr	r1, [r7, #12]
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	440b      	add	r3, r1
 8006bfa:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	617b      	str	r3, [r7, #20]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2b7f      	cmp	r3, #127	; 0x7f
 8006c06:	d9e4      	bls.n	8006bd2 <tmc2209_init+0x4a>
	}
}
 8006c08:	bf00      	nop
 8006c0a:	bf00      	nop
 8006c0c:	371c      	adds	r7, #28
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	08008590 	.word	0x08008590

08006c1c <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d131      	bne.n	8006c9a <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8006c3e:	e005      	b.n	8006c4c <writeConfiguration+0x30>
		{
			(*ptr)++;
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	3301      	adds	r3, #1
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	b25b      	sxtb	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	db3b      	blt.n	8006cce <writeConfiguration+0xb2>
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0e9      	beq.n	8006c40 <writeConfiguration+0x24>
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	461a      	mov	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4413      	add	r3, r2
 8006c76:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d025      	beq.n	8006cce <writeConfiguration+0xb2>
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006c90:	f003 0308 	and.w	r3, r3, #8
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d0d3      	beq.n	8006c40 <writeConfiguration+0x24>
 8006c98:	e019      	b.n	8006cce <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8006ca0:	e005      	b.n	8006cae <writeConfiguration+0x92>
		{
			(*ptr)++;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	b25b      	sxtb	r3, r3
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	db0a      	blt.n	8006cce <writeConfiguration+0xb2>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006cc6:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d1e9      	bne.n	8006ca2 <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	b25b      	sxtb	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	db12      	blt.n	8006cfe <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	7819      	ldrb	r1, [r3, #0]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff fe99 	bl	8006a22 <tmc2209_writeInt>
		(*ptr)++;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 8006cfc:	e013      	b.n	8006d26 <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d009      	beq.n	8006d1e <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	6812      	ldr	r2, [r2, #0]
 8006d16:	7812      	ldrb	r2, [r2, #0]
 8006d18:	4611      	mov	r1, r2
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
}
 8006d26:	bf00      	nop
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b082      	sub	sp, #8
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff ff6a 	bl	8006c1c <writeConfiguration>
		return;
 8006d48:	bf00      	nop
	}
}
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <tmc2209_reset+0x16>
		return false;
 8006d62:	2300      	movs	r3, #0
 8006d64:	e028      	b.n	8006db8 <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8006d66:	2300      	movs	r3, #0
 8006d68:	60fb      	str	r3, [r7, #12]
 8006d6a:	e019      	b.n	8006da0 <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4413      	add	r3, r2
 8006d72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	f023 0308 	bic.w	r3, r3, #8
 8006d7c:	b2d9      	uxtb	r1, r3
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006d88:	460a      	mov	r2, r1
 8006d8a:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	2200      	movs	r2, #0
 8006d98:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b7f      	cmp	r3, #127	; 0x7f
 8006da4:	d9e2      	bls.n	8006d6c <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2201      	movs	r2, #1
 8006dac:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2200      	movs	r2, #0
 8006db4:	705a      	strb	r2, [r3, #1]

	return true;
 8006db6:	2301      	movs	r3, #1
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <tmc2209_restore+0x16>
		return false;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e008      	b.n	8006dec <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2202      	movs	r2, #2
 8006de0:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2200      	movs	r2, #0
 8006de8:	705a      	strb	r2, [r3, #1]

	return true;
 8006dea:	2301      	movs	r3, #1
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <__errno>:
 8006df8:	4b01      	ldr	r3, [pc, #4]	; (8006e00 <__errno+0x8>)
 8006dfa:	6818      	ldr	r0, [r3, #0]
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	2000000c 	.word	0x2000000c

08006e04 <__libc_init_array>:
 8006e04:	b570      	push	{r4, r5, r6, lr}
 8006e06:	4d0d      	ldr	r5, [pc, #52]	; (8006e3c <__libc_init_array+0x38>)
 8006e08:	4c0d      	ldr	r4, [pc, #52]	; (8006e40 <__libc_init_array+0x3c>)
 8006e0a:	1b64      	subs	r4, r4, r5
 8006e0c:	10a4      	asrs	r4, r4, #2
 8006e0e:	2600      	movs	r6, #0
 8006e10:	42a6      	cmp	r6, r4
 8006e12:	d109      	bne.n	8006e28 <__libc_init_array+0x24>
 8006e14:	4d0b      	ldr	r5, [pc, #44]	; (8006e44 <__libc_init_array+0x40>)
 8006e16:	4c0c      	ldr	r4, [pc, #48]	; (8006e48 <__libc_init_array+0x44>)
 8006e18:	f001 f8fa 	bl	8008010 <_init>
 8006e1c:	1b64      	subs	r4, r4, r5
 8006e1e:	10a4      	asrs	r4, r4, #2
 8006e20:	2600      	movs	r6, #0
 8006e22:	42a6      	cmp	r6, r4
 8006e24:	d105      	bne.n	8006e32 <__libc_init_array+0x2e>
 8006e26:	bd70      	pop	{r4, r5, r6, pc}
 8006e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e2c:	4798      	blx	r3
 8006e2e:	3601      	adds	r6, #1
 8006e30:	e7ee      	b.n	8006e10 <__libc_init_array+0xc>
 8006e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e36:	4798      	blx	r3
 8006e38:	3601      	adds	r6, #1
 8006e3a:	e7f2      	b.n	8006e22 <__libc_init_array+0x1e>
 8006e3c:	080086b0 	.word	0x080086b0
 8006e40:	080086b0 	.word	0x080086b0
 8006e44:	080086b0 	.word	0x080086b0
 8006e48:	080086b4 	.word	0x080086b4

08006e4c <memset>:
 8006e4c:	4402      	add	r2, r0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d100      	bne.n	8006e56 <memset+0xa>
 8006e54:	4770      	bx	lr
 8006e56:	f803 1b01 	strb.w	r1, [r3], #1
 8006e5a:	e7f9      	b.n	8006e50 <memset+0x4>

08006e5c <iprintf>:
 8006e5c:	b40f      	push	{r0, r1, r2, r3}
 8006e5e:	4b0a      	ldr	r3, [pc, #40]	; (8006e88 <iprintf+0x2c>)
 8006e60:	b513      	push	{r0, r1, r4, lr}
 8006e62:	681c      	ldr	r4, [r3, #0]
 8006e64:	b124      	cbz	r4, 8006e70 <iprintf+0x14>
 8006e66:	69a3      	ldr	r3, [r4, #24]
 8006e68:	b913      	cbnz	r3, 8006e70 <iprintf+0x14>
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 fb2c 	bl	80074c8 <__sinit>
 8006e70:	ab05      	add	r3, sp, #20
 8006e72:	9a04      	ldr	r2, [sp, #16]
 8006e74:	68a1      	ldr	r1, [r4, #8]
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f000 fd3d 	bl	80078f8 <_vfiprintf_r>
 8006e7e:	b002      	add	sp, #8
 8006e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e84:	b004      	add	sp, #16
 8006e86:	4770      	bx	lr
 8006e88:	2000000c 	.word	0x2000000c

08006e8c <_puts_r>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	460e      	mov	r6, r1
 8006e90:	4605      	mov	r5, r0
 8006e92:	b118      	cbz	r0, 8006e9c <_puts_r+0x10>
 8006e94:	6983      	ldr	r3, [r0, #24]
 8006e96:	b90b      	cbnz	r3, 8006e9c <_puts_r+0x10>
 8006e98:	f000 fb16 	bl	80074c8 <__sinit>
 8006e9c:	69ab      	ldr	r3, [r5, #24]
 8006e9e:	68ac      	ldr	r4, [r5, #8]
 8006ea0:	b913      	cbnz	r3, 8006ea8 <_puts_r+0x1c>
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	f000 fb10 	bl	80074c8 <__sinit>
 8006ea8:	4b2c      	ldr	r3, [pc, #176]	; (8006f5c <_puts_r+0xd0>)
 8006eaa:	429c      	cmp	r4, r3
 8006eac:	d120      	bne.n	8006ef0 <_puts_r+0x64>
 8006eae:	686c      	ldr	r4, [r5, #4]
 8006eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eb2:	07db      	lsls	r3, r3, #31
 8006eb4:	d405      	bmi.n	8006ec2 <_puts_r+0x36>
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	0598      	lsls	r0, r3, #22
 8006eba:	d402      	bmi.n	8006ec2 <_puts_r+0x36>
 8006ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ebe:	f000 fba1 	bl	8007604 <__retarget_lock_acquire_recursive>
 8006ec2:	89a3      	ldrh	r3, [r4, #12]
 8006ec4:	0719      	lsls	r1, r3, #28
 8006ec6:	d51d      	bpl.n	8006f04 <_puts_r+0x78>
 8006ec8:	6923      	ldr	r3, [r4, #16]
 8006eca:	b1db      	cbz	r3, 8006f04 <_puts_r+0x78>
 8006ecc:	3e01      	subs	r6, #1
 8006ece:	68a3      	ldr	r3, [r4, #8]
 8006ed0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	60a3      	str	r3, [r4, #8]
 8006ed8:	bb39      	cbnz	r1, 8006f2a <_puts_r+0x9e>
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	da38      	bge.n	8006f50 <_puts_r+0xc4>
 8006ede:	4622      	mov	r2, r4
 8006ee0:	210a      	movs	r1, #10
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f000 f916 	bl	8007114 <__swbuf_r>
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d011      	beq.n	8006f10 <_puts_r+0x84>
 8006eec:	250a      	movs	r5, #10
 8006eee:	e011      	b.n	8006f14 <_puts_r+0x88>
 8006ef0:	4b1b      	ldr	r3, [pc, #108]	; (8006f60 <_puts_r+0xd4>)
 8006ef2:	429c      	cmp	r4, r3
 8006ef4:	d101      	bne.n	8006efa <_puts_r+0x6e>
 8006ef6:	68ac      	ldr	r4, [r5, #8]
 8006ef8:	e7da      	b.n	8006eb0 <_puts_r+0x24>
 8006efa:	4b1a      	ldr	r3, [pc, #104]	; (8006f64 <_puts_r+0xd8>)
 8006efc:	429c      	cmp	r4, r3
 8006efe:	bf08      	it	eq
 8006f00:	68ec      	ldreq	r4, [r5, #12]
 8006f02:	e7d5      	b.n	8006eb0 <_puts_r+0x24>
 8006f04:	4621      	mov	r1, r4
 8006f06:	4628      	mov	r0, r5
 8006f08:	f000 f956 	bl	80071b8 <__swsetup_r>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d0dd      	beq.n	8006ecc <_puts_r+0x40>
 8006f10:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006f14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f16:	07da      	lsls	r2, r3, #31
 8006f18:	d405      	bmi.n	8006f26 <_puts_r+0x9a>
 8006f1a:	89a3      	ldrh	r3, [r4, #12]
 8006f1c:	059b      	lsls	r3, r3, #22
 8006f1e:	d402      	bmi.n	8006f26 <_puts_r+0x9a>
 8006f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f22:	f000 fb70 	bl	8007606 <__retarget_lock_release_recursive>
 8006f26:	4628      	mov	r0, r5
 8006f28:	bd70      	pop	{r4, r5, r6, pc}
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	da04      	bge.n	8006f38 <_puts_r+0xac>
 8006f2e:	69a2      	ldr	r2, [r4, #24]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	dc06      	bgt.n	8006f42 <_puts_r+0xb6>
 8006f34:	290a      	cmp	r1, #10
 8006f36:	d004      	beq.n	8006f42 <_puts_r+0xb6>
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	6022      	str	r2, [r4, #0]
 8006f3e:	7019      	strb	r1, [r3, #0]
 8006f40:	e7c5      	b.n	8006ece <_puts_r+0x42>
 8006f42:	4622      	mov	r2, r4
 8006f44:	4628      	mov	r0, r5
 8006f46:	f000 f8e5 	bl	8007114 <__swbuf_r>
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	d1bf      	bne.n	8006ece <_puts_r+0x42>
 8006f4e:	e7df      	b.n	8006f10 <_puts_r+0x84>
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	250a      	movs	r5, #10
 8006f54:	1c5a      	adds	r2, r3, #1
 8006f56:	6022      	str	r2, [r4, #0]
 8006f58:	701d      	strb	r5, [r3, #0]
 8006f5a:	e7db      	b.n	8006f14 <_puts_r+0x88>
 8006f5c:	08008634 	.word	0x08008634
 8006f60:	08008654 	.word	0x08008654
 8006f64:	08008614 	.word	0x08008614

08006f68 <puts>:
 8006f68:	4b02      	ldr	r3, [pc, #8]	; (8006f74 <puts+0xc>)
 8006f6a:	4601      	mov	r1, r0
 8006f6c:	6818      	ldr	r0, [r3, #0]
 8006f6e:	f7ff bf8d 	b.w	8006e8c <_puts_r>
 8006f72:	bf00      	nop
 8006f74:	2000000c 	.word	0x2000000c

08006f78 <setbuf>:
 8006f78:	2900      	cmp	r1, #0
 8006f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f7e:	bf0c      	ite	eq
 8006f80:	2202      	moveq	r2, #2
 8006f82:	2200      	movne	r2, #0
 8006f84:	f000 b800 	b.w	8006f88 <setvbuf>

08006f88 <setvbuf>:
 8006f88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f8c:	461d      	mov	r5, r3
 8006f8e:	4b5d      	ldr	r3, [pc, #372]	; (8007104 <setvbuf+0x17c>)
 8006f90:	681f      	ldr	r7, [r3, #0]
 8006f92:	4604      	mov	r4, r0
 8006f94:	460e      	mov	r6, r1
 8006f96:	4690      	mov	r8, r2
 8006f98:	b127      	cbz	r7, 8006fa4 <setvbuf+0x1c>
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	b913      	cbnz	r3, 8006fa4 <setvbuf+0x1c>
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	f000 fa92 	bl	80074c8 <__sinit>
 8006fa4:	4b58      	ldr	r3, [pc, #352]	; (8007108 <setvbuf+0x180>)
 8006fa6:	429c      	cmp	r4, r3
 8006fa8:	d167      	bne.n	800707a <setvbuf+0xf2>
 8006faa:	687c      	ldr	r4, [r7, #4]
 8006fac:	f1b8 0f02 	cmp.w	r8, #2
 8006fb0:	d006      	beq.n	8006fc0 <setvbuf+0x38>
 8006fb2:	f1b8 0f01 	cmp.w	r8, #1
 8006fb6:	f200 809f 	bhi.w	80070f8 <setvbuf+0x170>
 8006fba:	2d00      	cmp	r5, #0
 8006fbc:	f2c0 809c 	blt.w	80070f8 <setvbuf+0x170>
 8006fc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fc2:	07db      	lsls	r3, r3, #31
 8006fc4:	d405      	bmi.n	8006fd2 <setvbuf+0x4a>
 8006fc6:	89a3      	ldrh	r3, [r4, #12]
 8006fc8:	0598      	lsls	r0, r3, #22
 8006fca:	d402      	bmi.n	8006fd2 <setvbuf+0x4a>
 8006fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fce:	f000 fb19 	bl	8007604 <__retarget_lock_acquire_recursive>
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	4638      	mov	r0, r7
 8006fd6:	f000 f9e3 	bl	80073a0 <_fflush_r>
 8006fda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fdc:	b141      	cbz	r1, 8006ff0 <setvbuf+0x68>
 8006fde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fe2:	4299      	cmp	r1, r3
 8006fe4:	d002      	beq.n	8006fec <setvbuf+0x64>
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	f000 fb7c 	bl	80076e4 <_free_r>
 8006fec:	2300      	movs	r3, #0
 8006fee:	6363      	str	r3, [r4, #52]	; 0x34
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	61a3      	str	r3, [r4, #24]
 8006ff4:	6063      	str	r3, [r4, #4]
 8006ff6:	89a3      	ldrh	r3, [r4, #12]
 8006ff8:	0619      	lsls	r1, r3, #24
 8006ffa:	d503      	bpl.n	8007004 <setvbuf+0x7c>
 8006ffc:	6921      	ldr	r1, [r4, #16]
 8006ffe:	4638      	mov	r0, r7
 8007000:	f000 fb70 	bl	80076e4 <_free_r>
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800700a:	f023 0303 	bic.w	r3, r3, #3
 800700e:	f1b8 0f02 	cmp.w	r8, #2
 8007012:	81a3      	strh	r3, [r4, #12]
 8007014:	d06c      	beq.n	80070f0 <setvbuf+0x168>
 8007016:	ab01      	add	r3, sp, #4
 8007018:	466a      	mov	r2, sp
 800701a:	4621      	mov	r1, r4
 800701c:	4638      	mov	r0, r7
 800701e:	f000 faf3 	bl	8007608 <__swhatbuf_r>
 8007022:	89a3      	ldrh	r3, [r4, #12]
 8007024:	4318      	orrs	r0, r3
 8007026:	81a0      	strh	r0, [r4, #12]
 8007028:	2d00      	cmp	r5, #0
 800702a:	d130      	bne.n	800708e <setvbuf+0x106>
 800702c:	9d00      	ldr	r5, [sp, #0]
 800702e:	4628      	mov	r0, r5
 8007030:	f000 fb50 	bl	80076d4 <malloc>
 8007034:	4606      	mov	r6, r0
 8007036:	2800      	cmp	r0, #0
 8007038:	d155      	bne.n	80070e6 <setvbuf+0x15e>
 800703a:	f8dd 9000 	ldr.w	r9, [sp]
 800703e:	45a9      	cmp	r9, r5
 8007040:	d14a      	bne.n	80070d8 <setvbuf+0x150>
 8007042:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007046:	2200      	movs	r2, #0
 8007048:	60a2      	str	r2, [r4, #8]
 800704a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800704e:	6022      	str	r2, [r4, #0]
 8007050:	6122      	str	r2, [r4, #16]
 8007052:	2201      	movs	r2, #1
 8007054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007058:	6162      	str	r2, [r4, #20]
 800705a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800705c:	f043 0302 	orr.w	r3, r3, #2
 8007060:	07d2      	lsls	r2, r2, #31
 8007062:	81a3      	strh	r3, [r4, #12]
 8007064:	d405      	bmi.n	8007072 <setvbuf+0xea>
 8007066:	f413 7f00 	tst.w	r3, #512	; 0x200
 800706a:	d102      	bne.n	8007072 <setvbuf+0xea>
 800706c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800706e:	f000 faca 	bl	8007606 <__retarget_lock_release_recursive>
 8007072:	4628      	mov	r0, r5
 8007074:	b003      	add	sp, #12
 8007076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800707a:	4b24      	ldr	r3, [pc, #144]	; (800710c <setvbuf+0x184>)
 800707c:	429c      	cmp	r4, r3
 800707e:	d101      	bne.n	8007084 <setvbuf+0xfc>
 8007080:	68bc      	ldr	r4, [r7, #8]
 8007082:	e793      	b.n	8006fac <setvbuf+0x24>
 8007084:	4b22      	ldr	r3, [pc, #136]	; (8007110 <setvbuf+0x188>)
 8007086:	429c      	cmp	r4, r3
 8007088:	bf08      	it	eq
 800708a:	68fc      	ldreq	r4, [r7, #12]
 800708c:	e78e      	b.n	8006fac <setvbuf+0x24>
 800708e:	2e00      	cmp	r6, #0
 8007090:	d0cd      	beq.n	800702e <setvbuf+0xa6>
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	b913      	cbnz	r3, 800709c <setvbuf+0x114>
 8007096:	4638      	mov	r0, r7
 8007098:	f000 fa16 	bl	80074c8 <__sinit>
 800709c:	f1b8 0f01 	cmp.w	r8, #1
 80070a0:	bf08      	it	eq
 80070a2:	89a3      	ldrheq	r3, [r4, #12]
 80070a4:	6026      	str	r6, [r4, #0]
 80070a6:	bf04      	itt	eq
 80070a8:	f043 0301 	orreq.w	r3, r3, #1
 80070ac:	81a3      	strheq	r3, [r4, #12]
 80070ae:	89a2      	ldrh	r2, [r4, #12]
 80070b0:	f012 0308 	ands.w	r3, r2, #8
 80070b4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80070b8:	d01c      	beq.n	80070f4 <setvbuf+0x16c>
 80070ba:	07d3      	lsls	r3, r2, #31
 80070bc:	bf41      	itttt	mi
 80070be:	2300      	movmi	r3, #0
 80070c0:	426d      	negmi	r5, r5
 80070c2:	60a3      	strmi	r3, [r4, #8]
 80070c4:	61a5      	strmi	r5, [r4, #24]
 80070c6:	bf58      	it	pl
 80070c8:	60a5      	strpl	r5, [r4, #8]
 80070ca:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80070cc:	f015 0501 	ands.w	r5, r5, #1
 80070d0:	d115      	bne.n	80070fe <setvbuf+0x176>
 80070d2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80070d6:	e7c8      	b.n	800706a <setvbuf+0xe2>
 80070d8:	4648      	mov	r0, r9
 80070da:	f000 fafb 	bl	80076d4 <malloc>
 80070de:	4606      	mov	r6, r0
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d0ae      	beq.n	8007042 <setvbuf+0xba>
 80070e4:	464d      	mov	r5, r9
 80070e6:	89a3      	ldrh	r3, [r4, #12]
 80070e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ec:	81a3      	strh	r3, [r4, #12]
 80070ee:	e7d0      	b.n	8007092 <setvbuf+0x10a>
 80070f0:	2500      	movs	r5, #0
 80070f2:	e7a8      	b.n	8007046 <setvbuf+0xbe>
 80070f4:	60a3      	str	r3, [r4, #8]
 80070f6:	e7e8      	b.n	80070ca <setvbuf+0x142>
 80070f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80070fc:	e7b9      	b.n	8007072 <setvbuf+0xea>
 80070fe:	2500      	movs	r5, #0
 8007100:	e7b7      	b.n	8007072 <setvbuf+0xea>
 8007102:	bf00      	nop
 8007104:	2000000c 	.word	0x2000000c
 8007108:	08008634 	.word	0x08008634
 800710c:	08008654 	.word	0x08008654
 8007110:	08008614 	.word	0x08008614

08007114 <__swbuf_r>:
 8007114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007116:	460e      	mov	r6, r1
 8007118:	4614      	mov	r4, r2
 800711a:	4605      	mov	r5, r0
 800711c:	b118      	cbz	r0, 8007126 <__swbuf_r+0x12>
 800711e:	6983      	ldr	r3, [r0, #24]
 8007120:	b90b      	cbnz	r3, 8007126 <__swbuf_r+0x12>
 8007122:	f000 f9d1 	bl	80074c8 <__sinit>
 8007126:	4b21      	ldr	r3, [pc, #132]	; (80071ac <__swbuf_r+0x98>)
 8007128:	429c      	cmp	r4, r3
 800712a:	d12b      	bne.n	8007184 <__swbuf_r+0x70>
 800712c:	686c      	ldr	r4, [r5, #4]
 800712e:	69a3      	ldr	r3, [r4, #24]
 8007130:	60a3      	str	r3, [r4, #8]
 8007132:	89a3      	ldrh	r3, [r4, #12]
 8007134:	071a      	lsls	r2, r3, #28
 8007136:	d52f      	bpl.n	8007198 <__swbuf_r+0x84>
 8007138:	6923      	ldr	r3, [r4, #16]
 800713a:	b36b      	cbz	r3, 8007198 <__swbuf_r+0x84>
 800713c:	6923      	ldr	r3, [r4, #16]
 800713e:	6820      	ldr	r0, [r4, #0]
 8007140:	1ac0      	subs	r0, r0, r3
 8007142:	6963      	ldr	r3, [r4, #20]
 8007144:	b2f6      	uxtb	r6, r6
 8007146:	4283      	cmp	r3, r0
 8007148:	4637      	mov	r7, r6
 800714a:	dc04      	bgt.n	8007156 <__swbuf_r+0x42>
 800714c:	4621      	mov	r1, r4
 800714e:	4628      	mov	r0, r5
 8007150:	f000 f926 	bl	80073a0 <_fflush_r>
 8007154:	bb30      	cbnz	r0, 80071a4 <__swbuf_r+0x90>
 8007156:	68a3      	ldr	r3, [r4, #8]
 8007158:	3b01      	subs	r3, #1
 800715a:	60a3      	str	r3, [r4, #8]
 800715c:	6823      	ldr	r3, [r4, #0]
 800715e:	1c5a      	adds	r2, r3, #1
 8007160:	6022      	str	r2, [r4, #0]
 8007162:	701e      	strb	r6, [r3, #0]
 8007164:	6963      	ldr	r3, [r4, #20]
 8007166:	3001      	adds	r0, #1
 8007168:	4283      	cmp	r3, r0
 800716a:	d004      	beq.n	8007176 <__swbuf_r+0x62>
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	07db      	lsls	r3, r3, #31
 8007170:	d506      	bpl.n	8007180 <__swbuf_r+0x6c>
 8007172:	2e0a      	cmp	r6, #10
 8007174:	d104      	bne.n	8007180 <__swbuf_r+0x6c>
 8007176:	4621      	mov	r1, r4
 8007178:	4628      	mov	r0, r5
 800717a:	f000 f911 	bl	80073a0 <_fflush_r>
 800717e:	b988      	cbnz	r0, 80071a4 <__swbuf_r+0x90>
 8007180:	4638      	mov	r0, r7
 8007182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007184:	4b0a      	ldr	r3, [pc, #40]	; (80071b0 <__swbuf_r+0x9c>)
 8007186:	429c      	cmp	r4, r3
 8007188:	d101      	bne.n	800718e <__swbuf_r+0x7a>
 800718a:	68ac      	ldr	r4, [r5, #8]
 800718c:	e7cf      	b.n	800712e <__swbuf_r+0x1a>
 800718e:	4b09      	ldr	r3, [pc, #36]	; (80071b4 <__swbuf_r+0xa0>)
 8007190:	429c      	cmp	r4, r3
 8007192:	bf08      	it	eq
 8007194:	68ec      	ldreq	r4, [r5, #12]
 8007196:	e7ca      	b.n	800712e <__swbuf_r+0x1a>
 8007198:	4621      	mov	r1, r4
 800719a:	4628      	mov	r0, r5
 800719c:	f000 f80c 	bl	80071b8 <__swsetup_r>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d0cb      	beq.n	800713c <__swbuf_r+0x28>
 80071a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80071a8:	e7ea      	b.n	8007180 <__swbuf_r+0x6c>
 80071aa:	bf00      	nop
 80071ac:	08008634 	.word	0x08008634
 80071b0:	08008654 	.word	0x08008654
 80071b4:	08008614 	.word	0x08008614

080071b8 <__swsetup_r>:
 80071b8:	4b32      	ldr	r3, [pc, #200]	; (8007284 <__swsetup_r+0xcc>)
 80071ba:	b570      	push	{r4, r5, r6, lr}
 80071bc:	681d      	ldr	r5, [r3, #0]
 80071be:	4606      	mov	r6, r0
 80071c0:	460c      	mov	r4, r1
 80071c2:	b125      	cbz	r5, 80071ce <__swsetup_r+0x16>
 80071c4:	69ab      	ldr	r3, [r5, #24]
 80071c6:	b913      	cbnz	r3, 80071ce <__swsetup_r+0x16>
 80071c8:	4628      	mov	r0, r5
 80071ca:	f000 f97d 	bl	80074c8 <__sinit>
 80071ce:	4b2e      	ldr	r3, [pc, #184]	; (8007288 <__swsetup_r+0xd0>)
 80071d0:	429c      	cmp	r4, r3
 80071d2:	d10f      	bne.n	80071f4 <__swsetup_r+0x3c>
 80071d4:	686c      	ldr	r4, [r5, #4]
 80071d6:	89a3      	ldrh	r3, [r4, #12]
 80071d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071dc:	0719      	lsls	r1, r3, #28
 80071de:	d42c      	bmi.n	800723a <__swsetup_r+0x82>
 80071e0:	06dd      	lsls	r5, r3, #27
 80071e2:	d411      	bmi.n	8007208 <__swsetup_r+0x50>
 80071e4:	2309      	movs	r3, #9
 80071e6:	6033      	str	r3, [r6, #0]
 80071e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071ec:	81a3      	strh	r3, [r4, #12]
 80071ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071f2:	e03e      	b.n	8007272 <__swsetup_r+0xba>
 80071f4:	4b25      	ldr	r3, [pc, #148]	; (800728c <__swsetup_r+0xd4>)
 80071f6:	429c      	cmp	r4, r3
 80071f8:	d101      	bne.n	80071fe <__swsetup_r+0x46>
 80071fa:	68ac      	ldr	r4, [r5, #8]
 80071fc:	e7eb      	b.n	80071d6 <__swsetup_r+0x1e>
 80071fe:	4b24      	ldr	r3, [pc, #144]	; (8007290 <__swsetup_r+0xd8>)
 8007200:	429c      	cmp	r4, r3
 8007202:	bf08      	it	eq
 8007204:	68ec      	ldreq	r4, [r5, #12]
 8007206:	e7e6      	b.n	80071d6 <__swsetup_r+0x1e>
 8007208:	0758      	lsls	r0, r3, #29
 800720a:	d512      	bpl.n	8007232 <__swsetup_r+0x7a>
 800720c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800720e:	b141      	cbz	r1, 8007222 <__swsetup_r+0x6a>
 8007210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007214:	4299      	cmp	r1, r3
 8007216:	d002      	beq.n	800721e <__swsetup_r+0x66>
 8007218:	4630      	mov	r0, r6
 800721a:	f000 fa63 	bl	80076e4 <_free_r>
 800721e:	2300      	movs	r3, #0
 8007220:	6363      	str	r3, [r4, #52]	; 0x34
 8007222:	89a3      	ldrh	r3, [r4, #12]
 8007224:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007228:	81a3      	strh	r3, [r4, #12]
 800722a:	2300      	movs	r3, #0
 800722c:	6063      	str	r3, [r4, #4]
 800722e:	6923      	ldr	r3, [r4, #16]
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	89a3      	ldrh	r3, [r4, #12]
 8007234:	f043 0308 	orr.w	r3, r3, #8
 8007238:	81a3      	strh	r3, [r4, #12]
 800723a:	6923      	ldr	r3, [r4, #16]
 800723c:	b94b      	cbnz	r3, 8007252 <__swsetup_r+0x9a>
 800723e:	89a3      	ldrh	r3, [r4, #12]
 8007240:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007248:	d003      	beq.n	8007252 <__swsetup_r+0x9a>
 800724a:	4621      	mov	r1, r4
 800724c:	4630      	mov	r0, r6
 800724e:	f000 fa01 	bl	8007654 <__smakebuf_r>
 8007252:	89a0      	ldrh	r0, [r4, #12]
 8007254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007258:	f010 0301 	ands.w	r3, r0, #1
 800725c:	d00a      	beq.n	8007274 <__swsetup_r+0xbc>
 800725e:	2300      	movs	r3, #0
 8007260:	60a3      	str	r3, [r4, #8]
 8007262:	6963      	ldr	r3, [r4, #20]
 8007264:	425b      	negs	r3, r3
 8007266:	61a3      	str	r3, [r4, #24]
 8007268:	6923      	ldr	r3, [r4, #16]
 800726a:	b943      	cbnz	r3, 800727e <__swsetup_r+0xc6>
 800726c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007270:	d1ba      	bne.n	80071e8 <__swsetup_r+0x30>
 8007272:	bd70      	pop	{r4, r5, r6, pc}
 8007274:	0781      	lsls	r1, r0, #30
 8007276:	bf58      	it	pl
 8007278:	6963      	ldrpl	r3, [r4, #20]
 800727a:	60a3      	str	r3, [r4, #8]
 800727c:	e7f4      	b.n	8007268 <__swsetup_r+0xb0>
 800727e:	2000      	movs	r0, #0
 8007280:	e7f7      	b.n	8007272 <__swsetup_r+0xba>
 8007282:	bf00      	nop
 8007284:	2000000c 	.word	0x2000000c
 8007288:	08008634 	.word	0x08008634
 800728c:	08008654 	.word	0x08008654
 8007290:	08008614 	.word	0x08008614

08007294 <__sflush_r>:
 8007294:	898a      	ldrh	r2, [r1, #12]
 8007296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800729a:	4605      	mov	r5, r0
 800729c:	0710      	lsls	r0, r2, #28
 800729e:	460c      	mov	r4, r1
 80072a0:	d458      	bmi.n	8007354 <__sflush_r+0xc0>
 80072a2:	684b      	ldr	r3, [r1, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	dc05      	bgt.n	80072b4 <__sflush_r+0x20>
 80072a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	dc02      	bgt.n	80072b4 <__sflush_r+0x20>
 80072ae:	2000      	movs	r0, #0
 80072b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072b6:	2e00      	cmp	r6, #0
 80072b8:	d0f9      	beq.n	80072ae <__sflush_r+0x1a>
 80072ba:	2300      	movs	r3, #0
 80072bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072c0:	682f      	ldr	r7, [r5, #0]
 80072c2:	602b      	str	r3, [r5, #0]
 80072c4:	d032      	beq.n	800732c <__sflush_r+0x98>
 80072c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072c8:	89a3      	ldrh	r3, [r4, #12]
 80072ca:	075a      	lsls	r2, r3, #29
 80072cc:	d505      	bpl.n	80072da <__sflush_r+0x46>
 80072ce:	6863      	ldr	r3, [r4, #4]
 80072d0:	1ac0      	subs	r0, r0, r3
 80072d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072d4:	b10b      	cbz	r3, 80072da <__sflush_r+0x46>
 80072d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072d8:	1ac0      	subs	r0, r0, r3
 80072da:	2300      	movs	r3, #0
 80072dc:	4602      	mov	r2, r0
 80072de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072e0:	6a21      	ldr	r1, [r4, #32]
 80072e2:	4628      	mov	r0, r5
 80072e4:	47b0      	blx	r6
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	89a3      	ldrh	r3, [r4, #12]
 80072ea:	d106      	bne.n	80072fa <__sflush_r+0x66>
 80072ec:	6829      	ldr	r1, [r5, #0]
 80072ee:	291d      	cmp	r1, #29
 80072f0:	d82c      	bhi.n	800734c <__sflush_r+0xb8>
 80072f2:	4a2a      	ldr	r2, [pc, #168]	; (800739c <__sflush_r+0x108>)
 80072f4:	40ca      	lsrs	r2, r1
 80072f6:	07d6      	lsls	r6, r2, #31
 80072f8:	d528      	bpl.n	800734c <__sflush_r+0xb8>
 80072fa:	2200      	movs	r2, #0
 80072fc:	6062      	str	r2, [r4, #4]
 80072fe:	04d9      	lsls	r1, r3, #19
 8007300:	6922      	ldr	r2, [r4, #16]
 8007302:	6022      	str	r2, [r4, #0]
 8007304:	d504      	bpl.n	8007310 <__sflush_r+0x7c>
 8007306:	1c42      	adds	r2, r0, #1
 8007308:	d101      	bne.n	800730e <__sflush_r+0x7a>
 800730a:	682b      	ldr	r3, [r5, #0]
 800730c:	b903      	cbnz	r3, 8007310 <__sflush_r+0x7c>
 800730e:	6560      	str	r0, [r4, #84]	; 0x54
 8007310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007312:	602f      	str	r7, [r5, #0]
 8007314:	2900      	cmp	r1, #0
 8007316:	d0ca      	beq.n	80072ae <__sflush_r+0x1a>
 8007318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800731c:	4299      	cmp	r1, r3
 800731e:	d002      	beq.n	8007326 <__sflush_r+0x92>
 8007320:	4628      	mov	r0, r5
 8007322:	f000 f9df 	bl	80076e4 <_free_r>
 8007326:	2000      	movs	r0, #0
 8007328:	6360      	str	r0, [r4, #52]	; 0x34
 800732a:	e7c1      	b.n	80072b0 <__sflush_r+0x1c>
 800732c:	6a21      	ldr	r1, [r4, #32]
 800732e:	2301      	movs	r3, #1
 8007330:	4628      	mov	r0, r5
 8007332:	47b0      	blx	r6
 8007334:	1c41      	adds	r1, r0, #1
 8007336:	d1c7      	bne.n	80072c8 <__sflush_r+0x34>
 8007338:	682b      	ldr	r3, [r5, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0c4      	beq.n	80072c8 <__sflush_r+0x34>
 800733e:	2b1d      	cmp	r3, #29
 8007340:	d001      	beq.n	8007346 <__sflush_r+0xb2>
 8007342:	2b16      	cmp	r3, #22
 8007344:	d101      	bne.n	800734a <__sflush_r+0xb6>
 8007346:	602f      	str	r7, [r5, #0]
 8007348:	e7b1      	b.n	80072ae <__sflush_r+0x1a>
 800734a:	89a3      	ldrh	r3, [r4, #12]
 800734c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007350:	81a3      	strh	r3, [r4, #12]
 8007352:	e7ad      	b.n	80072b0 <__sflush_r+0x1c>
 8007354:	690f      	ldr	r7, [r1, #16]
 8007356:	2f00      	cmp	r7, #0
 8007358:	d0a9      	beq.n	80072ae <__sflush_r+0x1a>
 800735a:	0793      	lsls	r3, r2, #30
 800735c:	680e      	ldr	r6, [r1, #0]
 800735e:	bf08      	it	eq
 8007360:	694b      	ldreq	r3, [r1, #20]
 8007362:	600f      	str	r7, [r1, #0]
 8007364:	bf18      	it	ne
 8007366:	2300      	movne	r3, #0
 8007368:	eba6 0807 	sub.w	r8, r6, r7
 800736c:	608b      	str	r3, [r1, #8]
 800736e:	f1b8 0f00 	cmp.w	r8, #0
 8007372:	dd9c      	ble.n	80072ae <__sflush_r+0x1a>
 8007374:	6a21      	ldr	r1, [r4, #32]
 8007376:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007378:	4643      	mov	r3, r8
 800737a:	463a      	mov	r2, r7
 800737c:	4628      	mov	r0, r5
 800737e:	47b0      	blx	r6
 8007380:	2800      	cmp	r0, #0
 8007382:	dc06      	bgt.n	8007392 <__sflush_r+0xfe>
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800738a:	81a3      	strh	r3, [r4, #12]
 800738c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007390:	e78e      	b.n	80072b0 <__sflush_r+0x1c>
 8007392:	4407      	add	r7, r0
 8007394:	eba8 0800 	sub.w	r8, r8, r0
 8007398:	e7e9      	b.n	800736e <__sflush_r+0xda>
 800739a:	bf00      	nop
 800739c:	20400001 	.word	0x20400001

080073a0 <_fflush_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	690b      	ldr	r3, [r1, #16]
 80073a4:	4605      	mov	r5, r0
 80073a6:	460c      	mov	r4, r1
 80073a8:	b913      	cbnz	r3, 80073b0 <_fflush_r+0x10>
 80073aa:	2500      	movs	r5, #0
 80073ac:	4628      	mov	r0, r5
 80073ae:	bd38      	pop	{r3, r4, r5, pc}
 80073b0:	b118      	cbz	r0, 80073ba <_fflush_r+0x1a>
 80073b2:	6983      	ldr	r3, [r0, #24]
 80073b4:	b90b      	cbnz	r3, 80073ba <_fflush_r+0x1a>
 80073b6:	f000 f887 	bl	80074c8 <__sinit>
 80073ba:	4b14      	ldr	r3, [pc, #80]	; (800740c <_fflush_r+0x6c>)
 80073bc:	429c      	cmp	r4, r3
 80073be:	d11b      	bne.n	80073f8 <_fflush_r+0x58>
 80073c0:	686c      	ldr	r4, [r5, #4]
 80073c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0ef      	beq.n	80073aa <_fflush_r+0xa>
 80073ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073cc:	07d0      	lsls	r0, r2, #31
 80073ce:	d404      	bmi.n	80073da <_fflush_r+0x3a>
 80073d0:	0599      	lsls	r1, r3, #22
 80073d2:	d402      	bmi.n	80073da <_fflush_r+0x3a>
 80073d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073d6:	f000 f915 	bl	8007604 <__retarget_lock_acquire_recursive>
 80073da:	4628      	mov	r0, r5
 80073dc:	4621      	mov	r1, r4
 80073de:	f7ff ff59 	bl	8007294 <__sflush_r>
 80073e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073e4:	07da      	lsls	r2, r3, #31
 80073e6:	4605      	mov	r5, r0
 80073e8:	d4e0      	bmi.n	80073ac <_fflush_r+0xc>
 80073ea:	89a3      	ldrh	r3, [r4, #12]
 80073ec:	059b      	lsls	r3, r3, #22
 80073ee:	d4dd      	bmi.n	80073ac <_fflush_r+0xc>
 80073f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073f2:	f000 f908 	bl	8007606 <__retarget_lock_release_recursive>
 80073f6:	e7d9      	b.n	80073ac <_fflush_r+0xc>
 80073f8:	4b05      	ldr	r3, [pc, #20]	; (8007410 <_fflush_r+0x70>)
 80073fa:	429c      	cmp	r4, r3
 80073fc:	d101      	bne.n	8007402 <_fflush_r+0x62>
 80073fe:	68ac      	ldr	r4, [r5, #8]
 8007400:	e7df      	b.n	80073c2 <_fflush_r+0x22>
 8007402:	4b04      	ldr	r3, [pc, #16]	; (8007414 <_fflush_r+0x74>)
 8007404:	429c      	cmp	r4, r3
 8007406:	bf08      	it	eq
 8007408:	68ec      	ldreq	r4, [r5, #12]
 800740a:	e7da      	b.n	80073c2 <_fflush_r+0x22>
 800740c:	08008634 	.word	0x08008634
 8007410:	08008654 	.word	0x08008654
 8007414:	08008614 	.word	0x08008614

08007418 <std>:
 8007418:	2300      	movs	r3, #0
 800741a:	b510      	push	{r4, lr}
 800741c:	4604      	mov	r4, r0
 800741e:	e9c0 3300 	strd	r3, r3, [r0]
 8007422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007426:	6083      	str	r3, [r0, #8]
 8007428:	8181      	strh	r1, [r0, #12]
 800742a:	6643      	str	r3, [r0, #100]	; 0x64
 800742c:	81c2      	strh	r2, [r0, #14]
 800742e:	6183      	str	r3, [r0, #24]
 8007430:	4619      	mov	r1, r3
 8007432:	2208      	movs	r2, #8
 8007434:	305c      	adds	r0, #92	; 0x5c
 8007436:	f7ff fd09 	bl	8006e4c <memset>
 800743a:	4b05      	ldr	r3, [pc, #20]	; (8007450 <std+0x38>)
 800743c:	6263      	str	r3, [r4, #36]	; 0x24
 800743e:	4b05      	ldr	r3, [pc, #20]	; (8007454 <std+0x3c>)
 8007440:	62a3      	str	r3, [r4, #40]	; 0x28
 8007442:	4b05      	ldr	r3, [pc, #20]	; (8007458 <std+0x40>)
 8007444:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007446:	4b05      	ldr	r3, [pc, #20]	; (800745c <std+0x44>)
 8007448:	6224      	str	r4, [r4, #32]
 800744a:	6323      	str	r3, [r4, #48]	; 0x30
 800744c:	bd10      	pop	{r4, pc}
 800744e:	bf00      	nop
 8007450:	08007ea1 	.word	0x08007ea1
 8007454:	08007ec3 	.word	0x08007ec3
 8007458:	08007efb 	.word	0x08007efb
 800745c:	08007f1f 	.word	0x08007f1f

08007460 <_cleanup_r>:
 8007460:	4901      	ldr	r1, [pc, #4]	; (8007468 <_cleanup_r+0x8>)
 8007462:	f000 b8af 	b.w	80075c4 <_fwalk_reent>
 8007466:	bf00      	nop
 8007468:	080073a1 	.word	0x080073a1

0800746c <__sfmoreglue>:
 800746c:	b570      	push	{r4, r5, r6, lr}
 800746e:	2268      	movs	r2, #104	; 0x68
 8007470:	1e4d      	subs	r5, r1, #1
 8007472:	4355      	muls	r5, r2
 8007474:	460e      	mov	r6, r1
 8007476:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800747a:	f000 f99f 	bl	80077bc <_malloc_r>
 800747e:	4604      	mov	r4, r0
 8007480:	b140      	cbz	r0, 8007494 <__sfmoreglue+0x28>
 8007482:	2100      	movs	r1, #0
 8007484:	e9c0 1600 	strd	r1, r6, [r0]
 8007488:	300c      	adds	r0, #12
 800748a:	60a0      	str	r0, [r4, #8]
 800748c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007490:	f7ff fcdc 	bl	8006e4c <memset>
 8007494:	4620      	mov	r0, r4
 8007496:	bd70      	pop	{r4, r5, r6, pc}

08007498 <__sfp_lock_acquire>:
 8007498:	4801      	ldr	r0, [pc, #4]	; (80074a0 <__sfp_lock_acquire+0x8>)
 800749a:	f000 b8b3 	b.w	8007604 <__retarget_lock_acquire_recursive>
 800749e:	bf00      	nop
 80074a0:	20000909 	.word	0x20000909

080074a4 <__sfp_lock_release>:
 80074a4:	4801      	ldr	r0, [pc, #4]	; (80074ac <__sfp_lock_release+0x8>)
 80074a6:	f000 b8ae 	b.w	8007606 <__retarget_lock_release_recursive>
 80074aa:	bf00      	nop
 80074ac:	20000909 	.word	0x20000909

080074b0 <__sinit_lock_acquire>:
 80074b0:	4801      	ldr	r0, [pc, #4]	; (80074b8 <__sinit_lock_acquire+0x8>)
 80074b2:	f000 b8a7 	b.w	8007604 <__retarget_lock_acquire_recursive>
 80074b6:	bf00      	nop
 80074b8:	2000090a 	.word	0x2000090a

080074bc <__sinit_lock_release>:
 80074bc:	4801      	ldr	r0, [pc, #4]	; (80074c4 <__sinit_lock_release+0x8>)
 80074be:	f000 b8a2 	b.w	8007606 <__retarget_lock_release_recursive>
 80074c2:	bf00      	nop
 80074c4:	2000090a 	.word	0x2000090a

080074c8 <__sinit>:
 80074c8:	b510      	push	{r4, lr}
 80074ca:	4604      	mov	r4, r0
 80074cc:	f7ff fff0 	bl	80074b0 <__sinit_lock_acquire>
 80074d0:	69a3      	ldr	r3, [r4, #24]
 80074d2:	b11b      	cbz	r3, 80074dc <__sinit+0x14>
 80074d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074d8:	f7ff bff0 	b.w	80074bc <__sinit_lock_release>
 80074dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80074e0:	6523      	str	r3, [r4, #80]	; 0x50
 80074e2:	4b13      	ldr	r3, [pc, #76]	; (8007530 <__sinit+0x68>)
 80074e4:	4a13      	ldr	r2, [pc, #76]	; (8007534 <__sinit+0x6c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80074ea:	42a3      	cmp	r3, r4
 80074ec:	bf04      	itt	eq
 80074ee:	2301      	moveq	r3, #1
 80074f0:	61a3      	streq	r3, [r4, #24]
 80074f2:	4620      	mov	r0, r4
 80074f4:	f000 f820 	bl	8007538 <__sfp>
 80074f8:	6060      	str	r0, [r4, #4]
 80074fa:	4620      	mov	r0, r4
 80074fc:	f000 f81c 	bl	8007538 <__sfp>
 8007500:	60a0      	str	r0, [r4, #8]
 8007502:	4620      	mov	r0, r4
 8007504:	f000 f818 	bl	8007538 <__sfp>
 8007508:	2200      	movs	r2, #0
 800750a:	60e0      	str	r0, [r4, #12]
 800750c:	2104      	movs	r1, #4
 800750e:	6860      	ldr	r0, [r4, #4]
 8007510:	f7ff ff82 	bl	8007418 <std>
 8007514:	68a0      	ldr	r0, [r4, #8]
 8007516:	2201      	movs	r2, #1
 8007518:	2109      	movs	r1, #9
 800751a:	f7ff ff7d 	bl	8007418 <std>
 800751e:	68e0      	ldr	r0, [r4, #12]
 8007520:	2202      	movs	r2, #2
 8007522:	2112      	movs	r1, #18
 8007524:	f7ff ff78 	bl	8007418 <std>
 8007528:	2301      	movs	r3, #1
 800752a:	61a3      	str	r3, [r4, #24]
 800752c:	e7d2      	b.n	80074d4 <__sinit+0xc>
 800752e:	bf00      	nop
 8007530:	08008610 	.word	0x08008610
 8007534:	08007461 	.word	0x08007461

08007538 <__sfp>:
 8007538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753a:	4607      	mov	r7, r0
 800753c:	f7ff ffac 	bl	8007498 <__sfp_lock_acquire>
 8007540:	4b1e      	ldr	r3, [pc, #120]	; (80075bc <__sfp+0x84>)
 8007542:	681e      	ldr	r6, [r3, #0]
 8007544:	69b3      	ldr	r3, [r6, #24]
 8007546:	b913      	cbnz	r3, 800754e <__sfp+0x16>
 8007548:	4630      	mov	r0, r6
 800754a:	f7ff ffbd 	bl	80074c8 <__sinit>
 800754e:	3648      	adds	r6, #72	; 0x48
 8007550:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007554:	3b01      	subs	r3, #1
 8007556:	d503      	bpl.n	8007560 <__sfp+0x28>
 8007558:	6833      	ldr	r3, [r6, #0]
 800755a:	b30b      	cbz	r3, 80075a0 <__sfp+0x68>
 800755c:	6836      	ldr	r6, [r6, #0]
 800755e:	e7f7      	b.n	8007550 <__sfp+0x18>
 8007560:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007564:	b9d5      	cbnz	r5, 800759c <__sfp+0x64>
 8007566:	4b16      	ldr	r3, [pc, #88]	; (80075c0 <__sfp+0x88>)
 8007568:	60e3      	str	r3, [r4, #12]
 800756a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800756e:	6665      	str	r5, [r4, #100]	; 0x64
 8007570:	f000 f847 	bl	8007602 <__retarget_lock_init_recursive>
 8007574:	f7ff ff96 	bl	80074a4 <__sfp_lock_release>
 8007578:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800757c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007580:	6025      	str	r5, [r4, #0]
 8007582:	61a5      	str	r5, [r4, #24]
 8007584:	2208      	movs	r2, #8
 8007586:	4629      	mov	r1, r5
 8007588:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800758c:	f7ff fc5e 	bl	8006e4c <memset>
 8007590:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007594:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007598:	4620      	mov	r0, r4
 800759a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800759c:	3468      	adds	r4, #104	; 0x68
 800759e:	e7d9      	b.n	8007554 <__sfp+0x1c>
 80075a0:	2104      	movs	r1, #4
 80075a2:	4638      	mov	r0, r7
 80075a4:	f7ff ff62 	bl	800746c <__sfmoreglue>
 80075a8:	4604      	mov	r4, r0
 80075aa:	6030      	str	r0, [r6, #0]
 80075ac:	2800      	cmp	r0, #0
 80075ae:	d1d5      	bne.n	800755c <__sfp+0x24>
 80075b0:	f7ff ff78 	bl	80074a4 <__sfp_lock_release>
 80075b4:	230c      	movs	r3, #12
 80075b6:	603b      	str	r3, [r7, #0]
 80075b8:	e7ee      	b.n	8007598 <__sfp+0x60>
 80075ba:	bf00      	nop
 80075bc:	08008610 	.word	0x08008610
 80075c0:	ffff0001 	.word	0xffff0001

080075c4 <_fwalk_reent>:
 80075c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075c8:	4606      	mov	r6, r0
 80075ca:	4688      	mov	r8, r1
 80075cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80075d0:	2700      	movs	r7, #0
 80075d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075d6:	f1b9 0901 	subs.w	r9, r9, #1
 80075da:	d505      	bpl.n	80075e8 <_fwalk_reent+0x24>
 80075dc:	6824      	ldr	r4, [r4, #0]
 80075de:	2c00      	cmp	r4, #0
 80075e0:	d1f7      	bne.n	80075d2 <_fwalk_reent+0xe>
 80075e2:	4638      	mov	r0, r7
 80075e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075e8:	89ab      	ldrh	r3, [r5, #12]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d907      	bls.n	80075fe <_fwalk_reent+0x3a>
 80075ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075f2:	3301      	adds	r3, #1
 80075f4:	d003      	beq.n	80075fe <_fwalk_reent+0x3a>
 80075f6:	4629      	mov	r1, r5
 80075f8:	4630      	mov	r0, r6
 80075fa:	47c0      	blx	r8
 80075fc:	4307      	orrs	r7, r0
 80075fe:	3568      	adds	r5, #104	; 0x68
 8007600:	e7e9      	b.n	80075d6 <_fwalk_reent+0x12>

08007602 <__retarget_lock_init_recursive>:
 8007602:	4770      	bx	lr

08007604 <__retarget_lock_acquire_recursive>:
 8007604:	4770      	bx	lr

08007606 <__retarget_lock_release_recursive>:
 8007606:	4770      	bx	lr

08007608 <__swhatbuf_r>:
 8007608:	b570      	push	{r4, r5, r6, lr}
 800760a:	460e      	mov	r6, r1
 800760c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007610:	2900      	cmp	r1, #0
 8007612:	b096      	sub	sp, #88	; 0x58
 8007614:	4614      	mov	r4, r2
 8007616:	461d      	mov	r5, r3
 8007618:	da08      	bge.n	800762c <__swhatbuf_r+0x24>
 800761a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	602a      	str	r2, [r5, #0]
 8007622:	061a      	lsls	r2, r3, #24
 8007624:	d410      	bmi.n	8007648 <__swhatbuf_r+0x40>
 8007626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800762a:	e00e      	b.n	800764a <__swhatbuf_r+0x42>
 800762c:	466a      	mov	r2, sp
 800762e:	f000 fc9d 	bl	8007f6c <_fstat_r>
 8007632:	2800      	cmp	r0, #0
 8007634:	dbf1      	blt.n	800761a <__swhatbuf_r+0x12>
 8007636:	9a01      	ldr	r2, [sp, #4]
 8007638:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800763c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007640:	425a      	negs	r2, r3
 8007642:	415a      	adcs	r2, r3
 8007644:	602a      	str	r2, [r5, #0]
 8007646:	e7ee      	b.n	8007626 <__swhatbuf_r+0x1e>
 8007648:	2340      	movs	r3, #64	; 0x40
 800764a:	2000      	movs	r0, #0
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	b016      	add	sp, #88	; 0x58
 8007650:	bd70      	pop	{r4, r5, r6, pc}
	...

08007654 <__smakebuf_r>:
 8007654:	898b      	ldrh	r3, [r1, #12]
 8007656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007658:	079d      	lsls	r5, r3, #30
 800765a:	4606      	mov	r6, r0
 800765c:	460c      	mov	r4, r1
 800765e:	d507      	bpl.n	8007670 <__smakebuf_r+0x1c>
 8007660:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	6123      	str	r3, [r4, #16]
 8007668:	2301      	movs	r3, #1
 800766a:	6163      	str	r3, [r4, #20]
 800766c:	b002      	add	sp, #8
 800766e:	bd70      	pop	{r4, r5, r6, pc}
 8007670:	ab01      	add	r3, sp, #4
 8007672:	466a      	mov	r2, sp
 8007674:	f7ff ffc8 	bl	8007608 <__swhatbuf_r>
 8007678:	9900      	ldr	r1, [sp, #0]
 800767a:	4605      	mov	r5, r0
 800767c:	4630      	mov	r0, r6
 800767e:	f000 f89d 	bl	80077bc <_malloc_r>
 8007682:	b948      	cbnz	r0, 8007698 <__smakebuf_r+0x44>
 8007684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007688:	059a      	lsls	r2, r3, #22
 800768a:	d4ef      	bmi.n	800766c <__smakebuf_r+0x18>
 800768c:	f023 0303 	bic.w	r3, r3, #3
 8007690:	f043 0302 	orr.w	r3, r3, #2
 8007694:	81a3      	strh	r3, [r4, #12]
 8007696:	e7e3      	b.n	8007660 <__smakebuf_r+0xc>
 8007698:	4b0d      	ldr	r3, [pc, #52]	; (80076d0 <__smakebuf_r+0x7c>)
 800769a:	62b3      	str	r3, [r6, #40]	; 0x28
 800769c:	89a3      	ldrh	r3, [r4, #12]
 800769e:	6020      	str	r0, [r4, #0]
 80076a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a4:	81a3      	strh	r3, [r4, #12]
 80076a6:	9b00      	ldr	r3, [sp, #0]
 80076a8:	6163      	str	r3, [r4, #20]
 80076aa:	9b01      	ldr	r3, [sp, #4]
 80076ac:	6120      	str	r0, [r4, #16]
 80076ae:	b15b      	cbz	r3, 80076c8 <__smakebuf_r+0x74>
 80076b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076b4:	4630      	mov	r0, r6
 80076b6:	f000 fc6b 	bl	8007f90 <_isatty_r>
 80076ba:	b128      	cbz	r0, 80076c8 <__smakebuf_r+0x74>
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	f023 0303 	bic.w	r3, r3, #3
 80076c2:	f043 0301 	orr.w	r3, r3, #1
 80076c6:	81a3      	strh	r3, [r4, #12]
 80076c8:	89a0      	ldrh	r0, [r4, #12]
 80076ca:	4305      	orrs	r5, r0
 80076cc:	81a5      	strh	r5, [r4, #12]
 80076ce:	e7cd      	b.n	800766c <__smakebuf_r+0x18>
 80076d0:	08007461 	.word	0x08007461

080076d4 <malloc>:
 80076d4:	4b02      	ldr	r3, [pc, #8]	; (80076e0 <malloc+0xc>)
 80076d6:	4601      	mov	r1, r0
 80076d8:	6818      	ldr	r0, [r3, #0]
 80076da:	f000 b86f 	b.w	80077bc <_malloc_r>
 80076de:	bf00      	nop
 80076e0:	2000000c 	.word	0x2000000c

080076e4 <_free_r>:
 80076e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076e6:	2900      	cmp	r1, #0
 80076e8:	d044      	beq.n	8007774 <_free_r+0x90>
 80076ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ee:	9001      	str	r0, [sp, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f1a1 0404 	sub.w	r4, r1, #4
 80076f6:	bfb8      	it	lt
 80076f8:	18e4      	addlt	r4, r4, r3
 80076fa:	f000 fc6b 	bl	8007fd4 <__malloc_lock>
 80076fe:	4a1e      	ldr	r2, [pc, #120]	; (8007778 <_free_r+0x94>)
 8007700:	9801      	ldr	r0, [sp, #4]
 8007702:	6813      	ldr	r3, [r2, #0]
 8007704:	b933      	cbnz	r3, 8007714 <_free_r+0x30>
 8007706:	6063      	str	r3, [r4, #4]
 8007708:	6014      	str	r4, [r2, #0]
 800770a:	b003      	add	sp, #12
 800770c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007710:	f000 bc66 	b.w	8007fe0 <__malloc_unlock>
 8007714:	42a3      	cmp	r3, r4
 8007716:	d908      	bls.n	800772a <_free_r+0x46>
 8007718:	6825      	ldr	r5, [r4, #0]
 800771a:	1961      	adds	r1, r4, r5
 800771c:	428b      	cmp	r3, r1
 800771e:	bf01      	itttt	eq
 8007720:	6819      	ldreq	r1, [r3, #0]
 8007722:	685b      	ldreq	r3, [r3, #4]
 8007724:	1949      	addeq	r1, r1, r5
 8007726:	6021      	streq	r1, [r4, #0]
 8007728:	e7ed      	b.n	8007706 <_free_r+0x22>
 800772a:	461a      	mov	r2, r3
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	b10b      	cbz	r3, 8007734 <_free_r+0x50>
 8007730:	42a3      	cmp	r3, r4
 8007732:	d9fa      	bls.n	800772a <_free_r+0x46>
 8007734:	6811      	ldr	r1, [r2, #0]
 8007736:	1855      	adds	r5, r2, r1
 8007738:	42a5      	cmp	r5, r4
 800773a:	d10b      	bne.n	8007754 <_free_r+0x70>
 800773c:	6824      	ldr	r4, [r4, #0]
 800773e:	4421      	add	r1, r4
 8007740:	1854      	adds	r4, r2, r1
 8007742:	42a3      	cmp	r3, r4
 8007744:	6011      	str	r1, [r2, #0]
 8007746:	d1e0      	bne.n	800770a <_free_r+0x26>
 8007748:	681c      	ldr	r4, [r3, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	6053      	str	r3, [r2, #4]
 800774e:	4421      	add	r1, r4
 8007750:	6011      	str	r1, [r2, #0]
 8007752:	e7da      	b.n	800770a <_free_r+0x26>
 8007754:	d902      	bls.n	800775c <_free_r+0x78>
 8007756:	230c      	movs	r3, #12
 8007758:	6003      	str	r3, [r0, #0]
 800775a:	e7d6      	b.n	800770a <_free_r+0x26>
 800775c:	6825      	ldr	r5, [r4, #0]
 800775e:	1961      	adds	r1, r4, r5
 8007760:	428b      	cmp	r3, r1
 8007762:	bf04      	itt	eq
 8007764:	6819      	ldreq	r1, [r3, #0]
 8007766:	685b      	ldreq	r3, [r3, #4]
 8007768:	6063      	str	r3, [r4, #4]
 800776a:	bf04      	itt	eq
 800776c:	1949      	addeq	r1, r1, r5
 800776e:	6021      	streq	r1, [r4, #0]
 8007770:	6054      	str	r4, [r2, #4]
 8007772:	e7ca      	b.n	800770a <_free_r+0x26>
 8007774:	b003      	add	sp, #12
 8007776:	bd30      	pop	{r4, r5, pc}
 8007778:	2000090c 	.word	0x2000090c

0800777c <sbrk_aligned>:
 800777c:	b570      	push	{r4, r5, r6, lr}
 800777e:	4e0e      	ldr	r6, [pc, #56]	; (80077b8 <sbrk_aligned+0x3c>)
 8007780:	460c      	mov	r4, r1
 8007782:	6831      	ldr	r1, [r6, #0]
 8007784:	4605      	mov	r5, r0
 8007786:	b911      	cbnz	r1, 800778e <sbrk_aligned+0x12>
 8007788:	f000 fb7a 	bl	8007e80 <_sbrk_r>
 800778c:	6030      	str	r0, [r6, #0]
 800778e:	4621      	mov	r1, r4
 8007790:	4628      	mov	r0, r5
 8007792:	f000 fb75 	bl	8007e80 <_sbrk_r>
 8007796:	1c43      	adds	r3, r0, #1
 8007798:	d00a      	beq.n	80077b0 <sbrk_aligned+0x34>
 800779a:	1cc4      	adds	r4, r0, #3
 800779c:	f024 0403 	bic.w	r4, r4, #3
 80077a0:	42a0      	cmp	r0, r4
 80077a2:	d007      	beq.n	80077b4 <sbrk_aligned+0x38>
 80077a4:	1a21      	subs	r1, r4, r0
 80077a6:	4628      	mov	r0, r5
 80077a8:	f000 fb6a 	bl	8007e80 <_sbrk_r>
 80077ac:	3001      	adds	r0, #1
 80077ae:	d101      	bne.n	80077b4 <sbrk_aligned+0x38>
 80077b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80077b4:	4620      	mov	r0, r4
 80077b6:	bd70      	pop	{r4, r5, r6, pc}
 80077b8:	20000910 	.word	0x20000910

080077bc <_malloc_r>:
 80077bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c0:	1ccd      	adds	r5, r1, #3
 80077c2:	f025 0503 	bic.w	r5, r5, #3
 80077c6:	3508      	adds	r5, #8
 80077c8:	2d0c      	cmp	r5, #12
 80077ca:	bf38      	it	cc
 80077cc:	250c      	movcc	r5, #12
 80077ce:	2d00      	cmp	r5, #0
 80077d0:	4607      	mov	r7, r0
 80077d2:	db01      	blt.n	80077d8 <_malloc_r+0x1c>
 80077d4:	42a9      	cmp	r1, r5
 80077d6:	d905      	bls.n	80077e4 <_malloc_r+0x28>
 80077d8:	230c      	movs	r3, #12
 80077da:	603b      	str	r3, [r7, #0]
 80077dc:	2600      	movs	r6, #0
 80077de:	4630      	mov	r0, r6
 80077e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077e4:	4e2e      	ldr	r6, [pc, #184]	; (80078a0 <_malloc_r+0xe4>)
 80077e6:	f000 fbf5 	bl	8007fd4 <__malloc_lock>
 80077ea:	6833      	ldr	r3, [r6, #0]
 80077ec:	461c      	mov	r4, r3
 80077ee:	bb34      	cbnz	r4, 800783e <_malloc_r+0x82>
 80077f0:	4629      	mov	r1, r5
 80077f2:	4638      	mov	r0, r7
 80077f4:	f7ff ffc2 	bl	800777c <sbrk_aligned>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	4604      	mov	r4, r0
 80077fc:	d14d      	bne.n	800789a <_malloc_r+0xde>
 80077fe:	6834      	ldr	r4, [r6, #0]
 8007800:	4626      	mov	r6, r4
 8007802:	2e00      	cmp	r6, #0
 8007804:	d140      	bne.n	8007888 <_malloc_r+0xcc>
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	4631      	mov	r1, r6
 800780a:	4638      	mov	r0, r7
 800780c:	eb04 0803 	add.w	r8, r4, r3
 8007810:	f000 fb36 	bl	8007e80 <_sbrk_r>
 8007814:	4580      	cmp	r8, r0
 8007816:	d13a      	bne.n	800788e <_malloc_r+0xd2>
 8007818:	6821      	ldr	r1, [r4, #0]
 800781a:	3503      	adds	r5, #3
 800781c:	1a6d      	subs	r5, r5, r1
 800781e:	f025 0503 	bic.w	r5, r5, #3
 8007822:	3508      	adds	r5, #8
 8007824:	2d0c      	cmp	r5, #12
 8007826:	bf38      	it	cc
 8007828:	250c      	movcc	r5, #12
 800782a:	4629      	mov	r1, r5
 800782c:	4638      	mov	r0, r7
 800782e:	f7ff ffa5 	bl	800777c <sbrk_aligned>
 8007832:	3001      	adds	r0, #1
 8007834:	d02b      	beq.n	800788e <_malloc_r+0xd2>
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	442b      	add	r3, r5
 800783a:	6023      	str	r3, [r4, #0]
 800783c:	e00e      	b.n	800785c <_malloc_r+0xa0>
 800783e:	6822      	ldr	r2, [r4, #0]
 8007840:	1b52      	subs	r2, r2, r5
 8007842:	d41e      	bmi.n	8007882 <_malloc_r+0xc6>
 8007844:	2a0b      	cmp	r2, #11
 8007846:	d916      	bls.n	8007876 <_malloc_r+0xba>
 8007848:	1961      	adds	r1, r4, r5
 800784a:	42a3      	cmp	r3, r4
 800784c:	6025      	str	r5, [r4, #0]
 800784e:	bf18      	it	ne
 8007850:	6059      	strne	r1, [r3, #4]
 8007852:	6863      	ldr	r3, [r4, #4]
 8007854:	bf08      	it	eq
 8007856:	6031      	streq	r1, [r6, #0]
 8007858:	5162      	str	r2, [r4, r5]
 800785a:	604b      	str	r3, [r1, #4]
 800785c:	4638      	mov	r0, r7
 800785e:	f104 060b 	add.w	r6, r4, #11
 8007862:	f000 fbbd 	bl	8007fe0 <__malloc_unlock>
 8007866:	f026 0607 	bic.w	r6, r6, #7
 800786a:	1d23      	adds	r3, r4, #4
 800786c:	1af2      	subs	r2, r6, r3
 800786e:	d0b6      	beq.n	80077de <_malloc_r+0x22>
 8007870:	1b9b      	subs	r3, r3, r6
 8007872:	50a3      	str	r3, [r4, r2]
 8007874:	e7b3      	b.n	80077de <_malloc_r+0x22>
 8007876:	6862      	ldr	r2, [r4, #4]
 8007878:	42a3      	cmp	r3, r4
 800787a:	bf0c      	ite	eq
 800787c:	6032      	streq	r2, [r6, #0]
 800787e:	605a      	strne	r2, [r3, #4]
 8007880:	e7ec      	b.n	800785c <_malloc_r+0xa0>
 8007882:	4623      	mov	r3, r4
 8007884:	6864      	ldr	r4, [r4, #4]
 8007886:	e7b2      	b.n	80077ee <_malloc_r+0x32>
 8007888:	4634      	mov	r4, r6
 800788a:	6876      	ldr	r6, [r6, #4]
 800788c:	e7b9      	b.n	8007802 <_malloc_r+0x46>
 800788e:	230c      	movs	r3, #12
 8007890:	603b      	str	r3, [r7, #0]
 8007892:	4638      	mov	r0, r7
 8007894:	f000 fba4 	bl	8007fe0 <__malloc_unlock>
 8007898:	e7a1      	b.n	80077de <_malloc_r+0x22>
 800789a:	6025      	str	r5, [r4, #0]
 800789c:	e7de      	b.n	800785c <_malloc_r+0xa0>
 800789e:	bf00      	nop
 80078a0:	2000090c 	.word	0x2000090c

080078a4 <__sfputc_r>:
 80078a4:	6893      	ldr	r3, [r2, #8]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	b410      	push	{r4}
 80078ac:	6093      	str	r3, [r2, #8]
 80078ae:	da08      	bge.n	80078c2 <__sfputc_r+0x1e>
 80078b0:	6994      	ldr	r4, [r2, #24]
 80078b2:	42a3      	cmp	r3, r4
 80078b4:	db01      	blt.n	80078ba <__sfputc_r+0x16>
 80078b6:	290a      	cmp	r1, #10
 80078b8:	d103      	bne.n	80078c2 <__sfputc_r+0x1e>
 80078ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078be:	f7ff bc29 	b.w	8007114 <__swbuf_r>
 80078c2:	6813      	ldr	r3, [r2, #0]
 80078c4:	1c58      	adds	r0, r3, #1
 80078c6:	6010      	str	r0, [r2, #0]
 80078c8:	7019      	strb	r1, [r3, #0]
 80078ca:	4608      	mov	r0, r1
 80078cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <__sfputs_r>:
 80078d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d4:	4606      	mov	r6, r0
 80078d6:	460f      	mov	r7, r1
 80078d8:	4614      	mov	r4, r2
 80078da:	18d5      	adds	r5, r2, r3
 80078dc:	42ac      	cmp	r4, r5
 80078de:	d101      	bne.n	80078e4 <__sfputs_r+0x12>
 80078e0:	2000      	movs	r0, #0
 80078e2:	e007      	b.n	80078f4 <__sfputs_r+0x22>
 80078e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e8:	463a      	mov	r2, r7
 80078ea:	4630      	mov	r0, r6
 80078ec:	f7ff ffda 	bl	80078a4 <__sfputc_r>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d1f3      	bne.n	80078dc <__sfputs_r+0xa>
 80078f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078f8 <_vfiprintf_r>:
 80078f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fc:	460d      	mov	r5, r1
 80078fe:	b09d      	sub	sp, #116	; 0x74
 8007900:	4614      	mov	r4, r2
 8007902:	4698      	mov	r8, r3
 8007904:	4606      	mov	r6, r0
 8007906:	b118      	cbz	r0, 8007910 <_vfiprintf_r+0x18>
 8007908:	6983      	ldr	r3, [r0, #24]
 800790a:	b90b      	cbnz	r3, 8007910 <_vfiprintf_r+0x18>
 800790c:	f7ff fddc 	bl	80074c8 <__sinit>
 8007910:	4b89      	ldr	r3, [pc, #548]	; (8007b38 <_vfiprintf_r+0x240>)
 8007912:	429d      	cmp	r5, r3
 8007914:	d11b      	bne.n	800794e <_vfiprintf_r+0x56>
 8007916:	6875      	ldr	r5, [r6, #4]
 8007918:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800791a:	07d9      	lsls	r1, r3, #31
 800791c:	d405      	bmi.n	800792a <_vfiprintf_r+0x32>
 800791e:	89ab      	ldrh	r3, [r5, #12]
 8007920:	059a      	lsls	r2, r3, #22
 8007922:	d402      	bmi.n	800792a <_vfiprintf_r+0x32>
 8007924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007926:	f7ff fe6d 	bl	8007604 <__retarget_lock_acquire_recursive>
 800792a:	89ab      	ldrh	r3, [r5, #12]
 800792c:	071b      	lsls	r3, r3, #28
 800792e:	d501      	bpl.n	8007934 <_vfiprintf_r+0x3c>
 8007930:	692b      	ldr	r3, [r5, #16]
 8007932:	b9eb      	cbnz	r3, 8007970 <_vfiprintf_r+0x78>
 8007934:	4629      	mov	r1, r5
 8007936:	4630      	mov	r0, r6
 8007938:	f7ff fc3e 	bl	80071b8 <__swsetup_r>
 800793c:	b1c0      	cbz	r0, 8007970 <_vfiprintf_r+0x78>
 800793e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007940:	07dc      	lsls	r4, r3, #31
 8007942:	d50e      	bpl.n	8007962 <_vfiprintf_r+0x6a>
 8007944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007948:	b01d      	add	sp, #116	; 0x74
 800794a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794e:	4b7b      	ldr	r3, [pc, #492]	; (8007b3c <_vfiprintf_r+0x244>)
 8007950:	429d      	cmp	r5, r3
 8007952:	d101      	bne.n	8007958 <_vfiprintf_r+0x60>
 8007954:	68b5      	ldr	r5, [r6, #8]
 8007956:	e7df      	b.n	8007918 <_vfiprintf_r+0x20>
 8007958:	4b79      	ldr	r3, [pc, #484]	; (8007b40 <_vfiprintf_r+0x248>)
 800795a:	429d      	cmp	r5, r3
 800795c:	bf08      	it	eq
 800795e:	68f5      	ldreq	r5, [r6, #12]
 8007960:	e7da      	b.n	8007918 <_vfiprintf_r+0x20>
 8007962:	89ab      	ldrh	r3, [r5, #12]
 8007964:	0598      	lsls	r0, r3, #22
 8007966:	d4ed      	bmi.n	8007944 <_vfiprintf_r+0x4c>
 8007968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800796a:	f7ff fe4c 	bl	8007606 <__retarget_lock_release_recursive>
 800796e:	e7e9      	b.n	8007944 <_vfiprintf_r+0x4c>
 8007970:	2300      	movs	r3, #0
 8007972:	9309      	str	r3, [sp, #36]	; 0x24
 8007974:	2320      	movs	r3, #32
 8007976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800797a:	f8cd 800c 	str.w	r8, [sp, #12]
 800797e:	2330      	movs	r3, #48	; 0x30
 8007980:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007b44 <_vfiprintf_r+0x24c>
 8007984:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007988:	f04f 0901 	mov.w	r9, #1
 800798c:	4623      	mov	r3, r4
 800798e:	469a      	mov	sl, r3
 8007990:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007994:	b10a      	cbz	r2, 800799a <_vfiprintf_r+0xa2>
 8007996:	2a25      	cmp	r2, #37	; 0x25
 8007998:	d1f9      	bne.n	800798e <_vfiprintf_r+0x96>
 800799a:	ebba 0b04 	subs.w	fp, sl, r4
 800799e:	d00b      	beq.n	80079b8 <_vfiprintf_r+0xc0>
 80079a0:	465b      	mov	r3, fp
 80079a2:	4622      	mov	r2, r4
 80079a4:	4629      	mov	r1, r5
 80079a6:	4630      	mov	r0, r6
 80079a8:	f7ff ff93 	bl	80078d2 <__sfputs_r>
 80079ac:	3001      	adds	r0, #1
 80079ae:	f000 80aa 	beq.w	8007b06 <_vfiprintf_r+0x20e>
 80079b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079b4:	445a      	add	r2, fp
 80079b6:	9209      	str	r2, [sp, #36]	; 0x24
 80079b8:	f89a 3000 	ldrb.w	r3, [sl]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 80a2 	beq.w	8007b06 <_vfiprintf_r+0x20e>
 80079c2:	2300      	movs	r3, #0
 80079c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079cc:	f10a 0a01 	add.w	sl, sl, #1
 80079d0:	9304      	str	r3, [sp, #16]
 80079d2:	9307      	str	r3, [sp, #28]
 80079d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079d8:	931a      	str	r3, [sp, #104]	; 0x68
 80079da:	4654      	mov	r4, sl
 80079dc:	2205      	movs	r2, #5
 80079de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e2:	4858      	ldr	r0, [pc, #352]	; (8007b44 <_vfiprintf_r+0x24c>)
 80079e4:	f7f8 fc14 	bl	8000210 <memchr>
 80079e8:	9a04      	ldr	r2, [sp, #16]
 80079ea:	b9d8      	cbnz	r0, 8007a24 <_vfiprintf_r+0x12c>
 80079ec:	06d1      	lsls	r1, r2, #27
 80079ee:	bf44      	itt	mi
 80079f0:	2320      	movmi	r3, #32
 80079f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079f6:	0713      	lsls	r3, r2, #28
 80079f8:	bf44      	itt	mi
 80079fa:	232b      	movmi	r3, #43	; 0x2b
 80079fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a00:	f89a 3000 	ldrb.w	r3, [sl]
 8007a04:	2b2a      	cmp	r3, #42	; 0x2a
 8007a06:	d015      	beq.n	8007a34 <_vfiprintf_r+0x13c>
 8007a08:	9a07      	ldr	r2, [sp, #28]
 8007a0a:	4654      	mov	r4, sl
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	f04f 0c0a 	mov.w	ip, #10
 8007a12:	4621      	mov	r1, r4
 8007a14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a18:	3b30      	subs	r3, #48	; 0x30
 8007a1a:	2b09      	cmp	r3, #9
 8007a1c:	d94e      	bls.n	8007abc <_vfiprintf_r+0x1c4>
 8007a1e:	b1b0      	cbz	r0, 8007a4e <_vfiprintf_r+0x156>
 8007a20:	9207      	str	r2, [sp, #28]
 8007a22:	e014      	b.n	8007a4e <_vfiprintf_r+0x156>
 8007a24:	eba0 0308 	sub.w	r3, r0, r8
 8007a28:	fa09 f303 	lsl.w	r3, r9, r3
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	9304      	str	r3, [sp, #16]
 8007a30:	46a2      	mov	sl, r4
 8007a32:	e7d2      	b.n	80079da <_vfiprintf_r+0xe2>
 8007a34:	9b03      	ldr	r3, [sp, #12]
 8007a36:	1d19      	adds	r1, r3, #4
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	9103      	str	r1, [sp, #12]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	bfbb      	ittet	lt
 8007a40:	425b      	neglt	r3, r3
 8007a42:	f042 0202 	orrlt.w	r2, r2, #2
 8007a46:	9307      	strge	r3, [sp, #28]
 8007a48:	9307      	strlt	r3, [sp, #28]
 8007a4a:	bfb8      	it	lt
 8007a4c:	9204      	strlt	r2, [sp, #16]
 8007a4e:	7823      	ldrb	r3, [r4, #0]
 8007a50:	2b2e      	cmp	r3, #46	; 0x2e
 8007a52:	d10c      	bne.n	8007a6e <_vfiprintf_r+0x176>
 8007a54:	7863      	ldrb	r3, [r4, #1]
 8007a56:	2b2a      	cmp	r3, #42	; 0x2a
 8007a58:	d135      	bne.n	8007ac6 <_vfiprintf_r+0x1ce>
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	1d1a      	adds	r2, r3, #4
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	9203      	str	r2, [sp, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	bfb8      	it	lt
 8007a66:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007a6a:	3402      	adds	r4, #2
 8007a6c:	9305      	str	r3, [sp, #20]
 8007a6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b54 <_vfiprintf_r+0x25c>
 8007a72:	7821      	ldrb	r1, [r4, #0]
 8007a74:	2203      	movs	r2, #3
 8007a76:	4650      	mov	r0, sl
 8007a78:	f7f8 fbca 	bl	8000210 <memchr>
 8007a7c:	b140      	cbz	r0, 8007a90 <_vfiprintf_r+0x198>
 8007a7e:	2340      	movs	r3, #64	; 0x40
 8007a80:	eba0 000a 	sub.w	r0, r0, sl
 8007a84:	fa03 f000 	lsl.w	r0, r3, r0
 8007a88:	9b04      	ldr	r3, [sp, #16]
 8007a8a:	4303      	orrs	r3, r0
 8007a8c:	3401      	adds	r4, #1
 8007a8e:	9304      	str	r3, [sp, #16]
 8007a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a94:	482c      	ldr	r0, [pc, #176]	; (8007b48 <_vfiprintf_r+0x250>)
 8007a96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a9a:	2206      	movs	r2, #6
 8007a9c:	f7f8 fbb8 	bl	8000210 <memchr>
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	d03f      	beq.n	8007b24 <_vfiprintf_r+0x22c>
 8007aa4:	4b29      	ldr	r3, [pc, #164]	; (8007b4c <_vfiprintf_r+0x254>)
 8007aa6:	bb1b      	cbnz	r3, 8007af0 <_vfiprintf_r+0x1f8>
 8007aa8:	9b03      	ldr	r3, [sp, #12]
 8007aaa:	3307      	adds	r3, #7
 8007aac:	f023 0307 	bic.w	r3, r3, #7
 8007ab0:	3308      	adds	r3, #8
 8007ab2:	9303      	str	r3, [sp, #12]
 8007ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab6:	443b      	add	r3, r7
 8007ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8007aba:	e767      	b.n	800798c <_vfiprintf_r+0x94>
 8007abc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	2001      	movs	r0, #1
 8007ac4:	e7a5      	b.n	8007a12 <_vfiprintf_r+0x11a>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	3401      	adds	r4, #1
 8007aca:	9305      	str	r3, [sp, #20]
 8007acc:	4619      	mov	r1, r3
 8007ace:	f04f 0c0a 	mov.w	ip, #10
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ad8:	3a30      	subs	r2, #48	; 0x30
 8007ada:	2a09      	cmp	r2, #9
 8007adc:	d903      	bls.n	8007ae6 <_vfiprintf_r+0x1ee>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d0c5      	beq.n	8007a6e <_vfiprintf_r+0x176>
 8007ae2:	9105      	str	r1, [sp, #20]
 8007ae4:	e7c3      	b.n	8007a6e <_vfiprintf_r+0x176>
 8007ae6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007aea:	4604      	mov	r4, r0
 8007aec:	2301      	movs	r3, #1
 8007aee:	e7f0      	b.n	8007ad2 <_vfiprintf_r+0x1da>
 8007af0:	ab03      	add	r3, sp, #12
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	462a      	mov	r2, r5
 8007af6:	4b16      	ldr	r3, [pc, #88]	; (8007b50 <_vfiprintf_r+0x258>)
 8007af8:	a904      	add	r1, sp, #16
 8007afa:	4630      	mov	r0, r6
 8007afc:	f3af 8000 	nop.w
 8007b00:	4607      	mov	r7, r0
 8007b02:	1c78      	adds	r0, r7, #1
 8007b04:	d1d6      	bne.n	8007ab4 <_vfiprintf_r+0x1bc>
 8007b06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b08:	07d9      	lsls	r1, r3, #31
 8007b0a:	d405      	bmi.n	8007b18 <_vfiprintf_r+0x220>
 8007b0c:	89ab      	ldrh	r3, [r5, #12]
 8007b0e:	059a      	lsls	r2, r3, #22
 8007b10:	d402      	bmi.n	8007b18 <_vfiprintf_r+0x220>
 8007b12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b14:	f7ff fd77 	bl	8007606 <__retarget_lock_release_recursive>
 8007b18:	89ab      	ldrh	r3, [r5, #12]
 8007b1a:	065b      	lsls	r3, r3, #25
 8007b1c:	f53f af12 	bmi.w	8007944 <_vfiprintf_r+0x4c>
 8007b20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b22:	e711      	b.n	8007948 <_vfiprintf_r+0x50>
 8007b24:	ab03      	add	r3, sp, #12
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	462a      	mov	r2, r5
 8007b2a:	4b09      	ldr	r3, [pc, #36]	; (8007b50 <_vfiprintf_r+0x258>)
 8007b2c:	a904      	add	r1, sp, #16
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f000 f880 	bl	8007c34 <_printf_i>
 8007b34:	e7e4      	b.n	8007b00 <_vfiprintf_r+0x208>
 8007b36:	bf00      	nop
 8007b38:	08008634 	.word	0x08008634
 8007b3c:	08008654 	.word	0x08008654
 8007b40:	08008614 	.word	0x08008614
 8007b44:	08008674 	.word	0x08008674
 8007b48:	0800867e 	.word	0x0800867e
 8007b4c:	00000000 	.word	0x00000000
 8007b50:	080078d3 	.word	0x080078d3
 8007b54:	0800867a 	.word	0x0800867a

08007b58 <_printf_common>:
 8007b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b5c:	4616      	mov	r6, r2
 8007b5e:	4699      	mov	r9, r3
 8007b60:	688a      	ldr	r2, [r1, #8]
 8007b62:	690b      	ldr	r3, [r1, #16]
 8007b64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	bfb8      	it	lt
 8007b6c:	4613      	movlt	r3, r2
 8007b6e:	6033      	str	r3, [r6, #0]
 8007b70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b74:	4607      	mov	r7, r0
 8007b76:	460c      	mov	r4, r1
 8007b78:	b10a      	cbz	r2, 8007b7e <_printf_common+0x26>
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	6033      	str	r3, [r6, #0]
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	0699      	lsls	r1, r3, #26
 8007b82:	bf42      	ittt	mi
 8007b84:	6833      	ldrmi	r3, [r6, #0]
 8007b86:	3302      	addmi	r3, #2
 8007b88:	6033      	strmi	r3, [r6, #0]
 8007b8a:	6825      	ldr	r5, [r4, #0]
 8007b8c:	f015 0506 	ands.w	r5, r5, #6
 8007b90:	d106      	bne.n	8007ba0 <_printf_common+0x48>
 8007b92:	f104 0a19 	add.w	sl, r4, #25
 8007b96:	68e3      	ldr	r3, [r4, #12]
 8007b98:	6832      	ldr	r2, [r6, #0]
 8007b9a:	1a9b      	subs	r3, r3, r2
 8007b9c:	42ab      	cmp	r3, r5
 8007b9e:	dc26      	bgt.n	8007bee <_printf_common+0x96>
 8007ba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ba4:	1e13      	subs	r3, r2, #0
 8007ba6:	6822      	ldr	r2, [r4, #0]
 8007ba8:	bf18      	it	ne
 8007baa:	2301      	movne	r3, #1
 8007bac:	0692      	lsls	r2, r2, #26
 8007bae:	d42b      	bmi.n	8007c08 <_printf_common+0xb0>
 8007bb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	47c0      	blx	r8
 8007bba:	3001      	adds	r0, #1
 8007bbc:	d01e      	beq.n	8007bfc <_printf_common+0xa4>
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	68e5      	ldr	r5, [r4, #12]
 8007bc2:	6832      	ldr	r2, [r6, #0]
 8007bc4:	f003 0306 	and.w	r3, r3, #6
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	bf08      	it	eq
 8007bcc:	1aad      	subeq	r5, r5, r2
 8007bce:	68a3      	ldr	r3, [r4, #8]
 8007bd0:	6922      	ldr	r2, [r4, #16]
 8007bd2:	bf0c      	ite	eq
 8007bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bd8:	2500      	movne	r5, #0
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	bfc4      	itt	gt
 8007bde:	1a9b      	subgt	r3, r3, r2
 8007be0:	18ed      	addgt	r5, r5, r3
 8007be2:	2600      	movs	r6, #0
 8007be4:	341a      	adds	r4, #26
 8007be6:	42b5      	cmp	r5, r6
 8007be8:	d11a      	bne.n	8007c20 <_printf_common+0xc8>
 8007bea:	2000      	movs	r0, #0
 8007bec:	e008      	b.n	8007c00 <_printf_common+0xa8>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	4652      	mov	r2, sl
 8007bf2:	4649      	mov	r1, r9
 8007bf4:	4638      	mov	r0, r7
 8007bf6:	47c0      	blx	r8
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d103      	bne.n	8007c04 <_printf_common+0xac>
 8007bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c04:	3501      	adds	r5, #1
 8007c06:	e7c6      	b.n	8007b96 <_printf_common+0x3e>
 8007c08:	18e1      	adds	r1, r4, r3
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	2030      	movs	r0, #48	; 0x30
 8007c0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c12:	4422      	add	r2, r4
 8007c14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c1c:	3302      	adds	r3, #2
 8007c1e:	e7c7      	b.n	8007bb0 <_printf_common+0x58>
 8007c20:	2301      	movs	r3, #1
 8007c22:	4622      	mov	r2, r4
 8007c24:	4649      	mov	r1, r9
 8007c26:	4638      	mov	r0, r7
 8007c28:	47c0      	blx	r8
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	d0e6      	beq.n	8007bfc <_printf_common+0xa4>
 8007c2e:	3601      	adds	r6, #1
 8007c30:	e7d9      	b.n	8007be6 <_printf_common+0x8e>
	...

08007c34 <_printf_i>:
 8007c34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	7e0f      	ldrb	r7, [r1, #24]
 8007c3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c3c:	2f78      	cmp	r7, #120	; 0x78
 8007c3e:	4691      	mov	r9, r2
 8007c40:	4680      	mov	r8, r0
 8007c42:	460c      	mov	r4, r1
 8007c44:	469a      	mov	sl, r3
 8007c46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c4a:	d807      	bhi.n	8007c5c <_printf_i+0x28>
 8007c4c:	2f62      	cmp	r7, #98	; 0x62
 8007c4e:	d80a      	bhi.n	8007c66 <_printf_i+0x32>
 8007c50:	2f00      	cmp	r7, #0
 8007c52:	f000 80d8 	beq.w	8007e06 <_printf_i+0x1d2>
 8007c56:	2f58      	cmp	r7, #88	; 0x58
 8007c58:	f000 80a3 	beq.w	8007da2 <_printf_i+0x16e>
 8007c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c64:	e03a      	b.n	8007cdc <_printf_i+0xa8>
 8007c66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c6a:	2b15      	cmp	r3, #21
 8007c6c:	d8f6      	bhi.n	8007c5c <_printf_i+0x28>
 8007c6e:	a101      	add	r1, pc, #4	; (adr r1, 8007c74 <_printf_i+0x40>)
 8007c70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c74:	08007ccd 	.word	0x08007ccd
 8007c78:	08007ce1 	.word	0x08007ce1
 8007c7c:	08007c5d 	.word	0x08007c5d
 8007c80:	08007c5d 	.word	0x08007c5d
 8007c84:	08007c5d 	.word	0x08007c5d
 8007c88:	08007c5d 	.word	0x08007c5d
 8007c8c:	08007ce1 	.word	0x08007ce1
 8007c90:	08007c5d 	.word	0x08007c5d
 8007c94:	08007c5d 	.word	0x08007c5d
 8007c98:	08007c5d 	.word	0x08007c5d
 8007c9c:	08007c5d 	.word	0x08007c5d
 8007ca0:	08007ded 	.word	0x08007ded
 8007ca4:	08007d11 	.word	0x08007d11
 8007ca8:	08007dcf 	.word	0x08007dcf
 8007cac:	08007c5d 	.word	0x08007c5d
 8007cb0:	08007c5d 	.word	0x08007c5d
 8007cb4:	08007e0f 	.word	0x08007e0f
 8007cb8:	08007c5d 	.word	0x08007c5d
 8007cbc:	08007d11 	.word	0x08007d11
 8007cc0:	08007c5d 	.word	0x08007c5d
 8007cc4:	08007c5d 	.word	0x08007c5d
 8007cc8:	08007dd7 	.word	0x08007dd7
 8007ccc:	682b      	ldr	r3, [r5, #0]
 8007cce:	1d1a      	adds	r2, r3, #4
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	602a      	str	r2, [r5, #0]
 8007cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e0a3      	b.n	8007e28 <_printf_i+0x1f4>
 8007ce0:	6820      	ldr	r0, [r4, #0]
 8007ce2:	6829      	ldr	r1, [r5, #0]
 8007ce4:	0606      	lsls	r6, r0, #24
 8007ce6:	f101 0304 	add.w	r3, r1, #4
 8007cea:	d50a      	bpl.n	8007d02 <_printf_i+0xce>
 8007cec:	680e      	ldr	r6, [r1, #0]
 8007cee:	602b      	str	r3, [r5, #0]
 8007cf0:	2e00      	cmp	r6, #0
 8007cf2:	da03      	bge.n	8007cfc <_printf_i+0xc8>
 8007cf4:	232d      	movs	r3, #45	; 0x2d
 8007cf6:	4276      	negs	r6, r6
 8007cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cfc:	485e      	ldr	r0, [pc, #376]	; (8007e78 <_printf_i+0x244>)
 8007cfe:	230a      	movs	r3, #10
 8007d00:	e019      	b.n	8007d36 <_printf_i+0x102>
 8007d02:	680e      	ldr	r6, [r1, #0]
 8007d04:	602b      	str	r3, [r5, #0]
 8007d06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d0a:	bf18      	it	ne
 8007d0c:	b236      	sxthne	r6, r6
 8007d0e:	e7ef      	b.n	8007cf0 <_printf_i+0xbc>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	6820      	ldr	r0, [r4, #0]
 8007d14:	1d19      	adds	r1, r3, #4
 8007d16:	6029      	str	r1, [r5, #0]
 8007d18:	0601      	lsls	r1, r0, #24
 8007d1a:	d501      	bpl.n	8007d20 <_printf_i+0xec>
 8007d1c:	681e      	ldr	r6, [r3, #0]
 8007d1e:	e002      	b.n	8007d26 <_printf_i+0xf2>
 8007d20:	0646      	lsls	r6, r0, #25
 8007d22:	d5fb      	bpl.n	8007d1c <_printf_i+0xe8>
 8007d24:	881e      	ldrh	r6, [r3, #0]
 8007d26:	4854      	ldr	r0, [pc, #336]	; (8007e78 <_printf_i+0x244>)
 8007d28:	2f6f      	cmp	r7, #111	; 0x6f
 8007d2a:	bf0c      	ite	eq
 8007d2c:	2308      	moveq	r3, #8
 8007d2e:	230a      	movne	r3, #10
 8007d30:	2100      	movs	r1, #0
 8007d32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d36:	6865      	ldr	r5, [r4, #4]
 8007d38:	60a5      	str	r5, [r4, #8]
 8007d3a:	2d00      	cmp	r5, #0
 8007d3c:	bfa2      	ittt	ge
 8007d3e:	6821      	ldrge	r1, [r4, #0]
 8007d40:	f021 0104 	bicge.w	r1, r1, #4
 8007d44:	6021      	strge	r1, [r4, #0]
 8007d46:	b90e      	cbnz	r6, 8007d4c <_printf_i+0x118>
 8007d48:	2d00      	cmp	r5, #0
 8007d4a:	d04d      	beq.n	8007de8 <_printf_i+0x1b4>
 8007d4c:	4615      	mov	r5, r2
 8007d4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d52:	fb03 6711 	mls	r7, r3, r1, r6
 8007d56:	5dc7      	ldrb	r7, [r0, r7]
 8007d58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d5c:	4637      	mov	r7, r6
 8007d5e:	42bb      	cmp	r3, r7
 8007d60:	460e      	mov	r6, r1
 8007d62:	d9f4      	bls.n	8007d4e <_printf_i+0x11a>
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d10b      	bne.n	8007d80 <_printf_i+0x14c>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	07de      	lsls	r6, r3, #31
 8007d6c:	d508      	bpl.n	8007d80 <_printf_i+0x14c>
 8007d6e:	6923      	ldr	r3, [r4, #16]
 8007d70:	6861      	ldr	r1, [r4, #4]
 8007d72:	4299      	cmp	r1, r3
 8007d74:	bfde      	ittt	le
 8007d76:	2330      	movle	r3, #48	; 0x30
 8007d78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007d80:	1b52      	subs	r2, r2, r5
 8007d82:	6122      	str	r2, [r4, #16]
 8007d84:	f8cd a000 	str.w	sl, [sp]
 8007d88:	464b      	mov	r3, r9
 8007d8a:	aa03      	add	r2, sp, #12
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	4640      	mov	r0, r8
 8007d90:	f7ff fee2 	bl	8007b58 <_printf_common>
 8007d94:	3001      	adds	r0, #1
 8007d96:	d14c      	bne.n	8007e32 <_printf_i+0x1fe>
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d9c:	b004      	add	sp, #16
 8007d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da2:	4835      	ldr	r0, [pc, #212]	; (8007e78 <_printf_i+0x244>)
 8007da4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007da8:	6829      	ldr	r1, [r5, #0]
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	f851 6b04 	ldr.w	r6, [r1], #4
 8007db0:	6029      	str	r1, [r5, #0]
 8007db2:	061d      	lsls	r5, r3, #24
 8007db4:	d514      	bpl.n	8007de0 <_printf_i+0x1ac>
 8007db6:	07df      	lsls	r7, r3, #31
 8007db8:	bf44      	itt	mi
 8007dba:	f043 0320 	orrmi.w	r3, r3, #32
 8007dbe:	6023      	strmi	r3, [r4, #0]
 8007dc0:	b91e      	cbnz	r6, 8007dca <_printf_i+0x196>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	f023 0320 	bic.w	r3, r3, #32
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	2310      	movs	r3, #16
 8007dcc:	e7b0      	b.n	8007d30 <_printf_i+0xfc>
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	f043 0320 	orr.w	r3, r3, #32
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	2378      	movs	r3, #120	; 0x78
 8007dd8:	4828      	ldr	r0, [pc, #160]	; (8007e7c <_printf_i+0x248>)
 8007dda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dde:	e7e3      	b.n	8007da8 <_printf_i+0x174>
 8007de0:	0659      	lsls	r1, r3, #25
 8007de2:	bf48      	it	mi
 8007de4:	b2b6      	uxthmi	r6, r6
 8007de6:	e7e6      	b.n	8007db6 <_printf_i+0x182>
 8007de8:	4615      	mov	r5, r2
 8007dea:	e7bb      	b.n	8007d64 <_printf_i+0x130>
 8007dec:	682b      	ldr	r3, [r5, #0]
 8007dee:	6826      	ldr	r6, [r4, #0]
 8007df0:	6961      	ldr	r1, [r4, #20]
 8007df2:	1d18      	adds	r0, r3, #4
 8007df4:	6028      	str	r0, [r5, #0]
 8007df6:	0635      	lsls	r5, r6, #24
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	d501      	bpl.n	8007e00 <_printf_i+0x1cc>
 8007dfc:	6019      	str	r1, [r3, #0]
 8007dfe:	e002      	b.n	8007e06 <_printf_i+0x1d2>
 8007e00:	0670      	lsls	r0, r6, #25
 8007e02:	d5fb      	bpl.n	8007dfc <_printf_i+0x1c8>
 8007e04:	8019      	strh	r1, [r3, #0]
 8007e06:	2300      	movs	r3, #0
 8007e08:	6123      	str	r3, [r4, #16]
 8007e0a:	4615      	mov	r5, r2
 8007e0c:	e7ba      	b.n	8007d84 <_printf_i+0x150>
 8007e0e:	682b      	ldr	r3, [r5, #0]
 8007e10:	1d1a      	adds	r2, r3, #4
 8007e12:	602a      	str	r2, [r5, #0]
 8007e14:	681d      	ldr	r5, [r3, #0]
 8007e16:	6862      	ldr	r2, [r4, #4]
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	f7f8 f9f8 	bl	8000210 <memchr>
 8007e20:	b108      	cbz	r0, 8007e26 <_printf_i+0x1f2>
 8007e22:	1b40      	subs	r0, r0, r5
 8007e24:	6060      	str	r0, [r4, #4]
 8007e26:	6863      	ldr	r3, [r4, #4]
 8007e28:	6123      	str	r3, [r4, #16]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e30:	e7a8      	b.n	8007d84 <_printf_i+0x150>
 8007e32:	6923      	ldr	r3, [r4, #16]
 8007e34:	462a      	mov	r2, r5
 8007e36:	4649      	mov	r1, r9
 8007e38:	4640      	mov	r0, r8
 8007e3a:	47d0      	blx	sl
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	d0ab      	beq.n	8007d98 <_printf_i+0x164>
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	079b      	lsls	r3, r3, #30
 8007e44:	d413      	bmi.n	8007e6e <_printf_i+0x23a>
 8007e46:	68e0      	ldr	r0, [r4, #12]
 8007e48:	9b03      	ldr	r3, [sp, #12]
 8007e4a:	4298      	cmp	r0, r3
 8007e4c:	bfb8      	it	lt
 8007e4e:	4618      	movlt	r0, r3
 8007e50:	e7a4      	b.n	8007d9c <_printf_i+0x168>
 8007e52:	2301      	movs	r3, #1
 8007e54:	4632      	mov	r2, r6
 8007e56:	4649      	mov	r1, r9
 8007e58:	4640      	mov	r0, r8
 8007e5a:	47d0      	blx	sl
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d09b      	beq.n	8007d98 <_printf_i+0x164>
 8007e60:	3501      	adds	r5, #1
 8007e62:	68e3      	ldr	r3, [r4, #12]
 8007e64:	9903      	ldr	r1, [sp, #12]
 8007e66:	1a5b      	subs	r3, r3, r1
 8007e68:	42ab      	cmp	r3, r5
 8007e6a:	dcf2      	bgt.n	8007e52 <_printf_i+0x21e>
 8007e6c:	e7eb      	b.n	8007e46 <_printf_i+0x212>
 8007e6e:	2500      	movs	r5, #0
 8007e70:	f104 0619 	add.w	r6, r4, #25
 8007e74:	e7f5      	b.n	8007e62 <_printf_i+0x22e>
 8007e76:	bf00      	nop
 8007e78:	08008685 	.word	0x08008685
 8007e7c:	08008696 	.word	0x08008696

08007e80 <_sbrk_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	4d06      	ldr	r5, [pc, #24]	; (8007e9c <_sbrk_r+0x1c>)
 8007e84:	2300      	movs	r3, #0
 8007e86:	4604      	mov	r4, r0
 8007e88:	4608      	mov	r0, r1
 8007e8a:	602b      	str	r3, [r5, #0]
 8007e8c:	f7fa f9a0 	bl	80021d0 <_sbrk>
 8007e90:	1c43      	adds	r3, r0, #1
 8007e92:	d102      	bne.n	8007e9a <_sbrk_r+0x1a>
 8007e94:	682b      	ldr	r3, [r5, #0]
 8007e96:	b103      	cbz	r3, 8007e9a <_sbrk_r+0x1a>
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	bd38      	pop	{r3, r4, r5, pc}
 8007e9c:	20000914 	.word	0x20000914

08007ea0 <__sread>:
 8007ea0:	b510      	push	{r4, lr}
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea8:	f000 f8a0 	bl	8007fec <_read_r>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	bfab      	itete	ge
 8007eb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007eb2:	89a3      	ldrhlt	r3, [r4, #12]
 8007eb4:	181b      	addge	r3, r3, r0
 8007eb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007eba:	bfac      	ite	ge
 8007ebc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ebe:	81a3      	strhlt	r3, [r4, #12]
 8007ec0:	bd10      	pop	{r4, pc}

08007ec2 <__swrite>:
 8007ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec6:	461f      	mov	r7, r3
 8007ec8:	898b      	ldrh	r3, [r1, #12]
 8007eca:	05db      	lsls	r3, r3, #23
 8007ecc:	4605      	mov	r5, r0
 8007ece:	460c      	mov	r4, r1
 8007ed0:	4616      	mov	r6, r2
 8007ed2:	d505      	bpl.n	8007ee0 <__swrite+0x1e>
 8007ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed8:	2302      	movs	r3, #2
 8007eda:	2200      	movs	r2, #0
 8007edc:	f000 f868 	bl	8007fb0 <_lseek_r>
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ee6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007eea:	81a3      	strh	r3, [r4, #12]
 8007eec:	4632      	mov	r2, r6
 8007eee:	463b      	mov	r3, r7
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef6:	f000 b817 	b.w	8007f28 <_write_r>

08007efa <__sseek>:
 8007efa:	b510      	push	{r4, lr}
 8007efc:	460c      	mov	r4, r1
 8007efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f02:	f000 f855 	bl	8007fb0 <_lseek_r>
 8007f06:	1c43      	adds	r3, r0, #1
 8007f08:	89a3      	ldrh	r3, [r4, #12]
 8007f0a:	bf15      	itete	ne
 8007f0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f16:	81a3      	strheq	r3, [r4, #12]
 8007f18:	bf18      	it	ne
 8007f1a:	81a3      	strhne	r3, [r4, #12]
 8007f1c:	bd10      	pop	{r4, pc}

08007f1e <__sclose>:
 8007f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f22:	f000 b813 	b.w	8007f4c <_close_r>
	...

08007f28 <_write_r>:
 8007f28:	b538      	push	{r3, r4, r5, lr}
 8007f2a:	4d07      	ldr	r5, [pc, #28]	; (8007f48 <_write_r+0x20>)
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	4608      	mov	r0, r1
 8007f30:	4611      	mov	r1, r2
 8007f32:	2200      	movs	r2, #0
 8007f34:	602a      	str	r2, [r5, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	f7f9 fef2 	bl	8001d20 <_write>
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	d102      	bne.n	8007f46 <_write_r+0x1e>
 8007f40:	682b      	ldr	r3, [r5, #0]
 8007f42:	b103      	cbz	r3, 8007f46 <_write_r+0x1e>
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	bd38      	pop	{r3, r4, r5, pc}
 8007f48:	20000914 	.word	0x20000914

08007f4c <_close_r>:
 8007f4c:	b538      	push	{r3, r4, r5, lr}
 8007f4e:	4d06      	ldr	r5, [pc, #24]	; (8007f68 <_close_r+0x1c>)
 8007f50:	2300      	movs	r3, #0
 8007f52:	4604      	mov	r4, r0
 8007f54:	4608      	mov	r0, r1
 8007f56:	602b      	str	r3, [r5, #0]
 8007f58:	f7fa f905 	bl	8002166 <_close>
 8007f5c:	1c43      	adds	r3, r0, #1
 8007f5e:	d102      	bne.n	8007f66 <_close_r+0x1a>
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	b103      	cbz	r3, 8007f66 <_close_r+0x1a>
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	bd38      	pop	{r3, r4, r5, pc}
 8007f68:	20000914 	.word	0x20000914

08007f6c <_fstat_r>:
 8007f6c:	b538      	push	{r3, r4, r5, lr}
 8007f6e:	4d07      	ldr	r5, [pc, #28]	; (8007f8c <_fstat_r+0x20>)
 8007f70:	2300      	movs	r3, #0
 8007f72:	4604      	mov	r4, r0
 8007f74:	4608      	mov	r0, r1
 8007f76:	4611      	mov	r1, r2
 8007f78:	602b      	str	r3, [r5, #0]
 8007f7a:	f7fa f900 	bl	800217e <_fstat>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	d102      	bne.n	8007f88 <_fstat_r+0x1c>
 8007f82:	682b      	ldr	r3, [r5, #0]
 8007f84:	b103      	cbz	r3, 8007f88 <_fstat_r+0x1c>
 8007f86:	6023      	str	r3, [r4, #0]
 8007f88:	bd38      	pop	{r3, r4, r5, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20000914 	.word	0x20000914

08007f90 <_isatty_r>:
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	4d06      	ldr	r5, [pc, #24]	; (8007fac <_isatty_r+0x1c>)
 8007f94:	2300      	movs	r3, #0
 8007f96:	4604      	mov	r4, r0
 8007f98:	4608      	mov	r0, r1
 8007f9a:	602b      	str	r3, [r5, #0]
 8007f9c:	f7fa f8ff 	bl	800219e <_isatty>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d102      	bne.n	8007faa <_isatty_r+0x1a>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b103      	cbz	r3, 8007faa <_isatty_r+0x1a>
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	20000914 	.word	0x20000914

08007fb0 <_lseek_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	4d07      	ldr	r5, [pc, #28]	; (8007fd0 <_lseek_r+0x20>)
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	4608      	mov	r0, r1
 8007fb8:	4611      	mov	r1, r2
 8007fba:	2200      	movs	r2, #0
 8007fbc:	602a      	str	r2, [r5, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	f7fa f8f8 	bl	80021b4 <_lseek>
 8007fc4:	1c43      	adds	r3, r0, #1
 8007fc6:	d102      	bne.n	8007fce <_lseek_r+0x1e>
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	b103      	cbz	r3, 8007fce <_lseek_r+0x1e>
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	bd38      	pop	{r3, r4, r5, pc}
 8007fd0:	20000914 	.word	0x20000914

08007fd4 <__malloc_lock>:
 8007fd4:	4801      	ldr	r0, [pc, #4]	; (8007fdc <__malloc_lock+0x8>)
 8007fd6:	f7ff bb15 	b.w	8007604 <__retarget_lock_acquire_recursive>
 8007fda:	bf00      	nop
 8007fdc:	20000908 	.word	0x20000908

08007fe0 <__malloc_unlock>:
 8007fe0:	4801      	ldr	r0, [pc, #4]	; (8007fe8 <__malloc_unlock+0x8>)
 8007fe2:	f7ff bb10 	b.w	8007606 <__retarget_lock_release_recursive>
 8007fe6:	bf00      	nop
 8007fe8:	20000908 	.word	0x20000908

08007fec <_read_r>:
 8007fec:	b538      	push	{r3, r4, r5, lr}
 8007fee:	4d07      	ldr	r5, [pc, #28]	; (800800c <_read_r+0x20>)
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	4608      	mov	r0, r1
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	602a      	str	r2, [r5, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f7fa f896 	bl	800212c <_read>
 8008000:	1c43      	adds	r3, r0, #1
 8008002:	d102      	bne.n	800800a <_read_r+0x1e>
 8008004:	682b      	ldr	r3, [r5, #0]
 8008006:	b103      	cbz	r3, 800800a <_read_r+0x1e>
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	bd38      	pop	{r3, r4, r5, pc}
 800800c:	20000914 	.word	0x20000914

08008010 <_init>:
 8008010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008012:	bf00      	nop
 8008014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008016:	bc08      	pop	{r3}
 8008018:	469e      	mov	lr, r3
 800801a:	4770      	bx	lr

0800801c <_fini>:
 800801c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801e:	bf00      	nop
 8008020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008022:	bc08      	pop	{r3}
 8008024:	469e      	mov	lr, r3
 8008026:	4770      	bx	lr
