
STMF446_CAN_UART_RMDSETUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005434  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08005604  08005604  00015604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b8  080058b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080058b8  080058b8  000158b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058c0  080058c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058c0  080058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058c4  080058c4  000158c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080058c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000070  08005938  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08005938  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd63  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d50  00000000  00000000  0002be03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002db58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002e4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ff7  00000000  00000000  0002ed80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be65  00000000  00000000  00031d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc53a  00000000  00000000  0003dbdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a116  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e0c  00000000  00000000  0010a168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080055ec 	.word	0x080055ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080055ec 	.word	0x080055ec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <RMDCommand>:
/* USER CODE BEGIN 0 */
uint8_t uart_data;
char tx_data[]="get_data\r\n";
int flag = 1;

void RMDCommand(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
//	int i = 0;
	int count=0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
	TxHeader.StdId=0x141;
 80005be:	4b93      	ldr	r3, [pc, #588]	; (800080c <RMDCommand+0x258>)
 80005c0:	f240 1241 	movw	r2, #321	; 0x141
 80005c4:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 80005c6:	4b91      	ldr	r3, [pc, #580]	; (800080c <RMDCommand+0x258>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 80005cc:	4b8f      	ldr	r3, [pc, #572]	; (800080c <RMDCommand+0x258>)
 80005ce:	2208      	movs	r2, #8
 80005d0:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 80005d2:	4b8e      	ldr	r3, [pc, #568]	; (800080c <RMDCommand+0x258>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80005d8:	4b8c      	ldr	r3, [pc, #560]	; (800080c <RMDCommand+0x258>)
 80005da:	2200      	movs	r2, #0
 80005dc:	751a      	strb	r2, [r3, #20]
	TxData[1] = 0x00;
 80005de:	4b8c      	ldr	r3, [pc, #560]	; (8000810 <RMDCommand+0x25c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0x00;
 80005e4:	4b8a      	ldr	r3, [pc, #552]	; (8000810 <RMDCommand+0x25c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0x00;
 80005ea:	4b89      	ldr	r3, [pc, #548]	; (8000810 <RMDCommand+0x25c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	70da      	strb	r2, [r3, #3]
	TxData[4] = 0x00;
 80005f0:	4b87      	ldr	r3, [pc, #540]	; (8000810 <RMDCommand+0x25c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	711a      	strb	r2, [r3, #4]
	TxData[5] = 0x00;
 80005f6:	4b86      	ldr	r3, [pc, #536]	; (8000810 <RMDCommand+0x25c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	715a      	strb	r2, [r3, #5]
	TxData[6] = 0x00;
 80005fc:	4b84      	ldr	r3, [pc, #528]	; (8000810 <RMDCommand+0x25c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	719a      	strb	r2, [r3, #6]
	TxData[7] = 0x00;
 8000602:	4b83      	ldr	r3, [pc, #524]	; (8000810 <RMDCommand+0x25c>)
 8000604:	2200      	movs	r2, #0
 8000606:	71da      	strb	r2, [r3, #7]
	switch(Writecom){
 8000608:	4b82      	ldr	r3, [pc, #520]	; (8000814 <RMDCommand+0x260>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2ba4      	cmp	r3, #164	; 0xa4
 800060e:	d065      	beq.n	80006dc <RMDCommand+0x128>
 8000610:	2ba4      	cmp	r3, #164	; 0xa4
 8000612:	dc7e      	bgt.n	8000712 <RMDCommand+0x15e>
 8000614:	2ba1      	cmp	r3, #161	; 0xa1
 8000616:	d055      	beq.n	80006c4 <RMDCommand+0x110>
 8000618:	2ba1      	cmp	r3, #161	; 0xa1
 800061a:	dc7a      	bgt.n	8000712 <RMDCommand+0x15e>
 800061c:	2b34      	cmp	r3, #52	; 0x34
 800061e:	d03d      	beq.n	800069c <RMDCommand+0xe8>
 8000620:	2b34      	cmp	r3, #52	; 0x34
 8000622:	dc76      	bgt.n	8000712 <RMDCommand+0x15e>
 8000624:	2b31      	cmp	r3, #49	; 0x31
 8000626:	d002      	beq.n	800062e <RMDCommand+0x7a>
 8000628:	2b32      	cmp	r3, #50	; 0x32
 800062a:	d01b      	beq.n	8000664 <RMDCommand+0xb0>
 800062c:	e071      	b.n	8000712 <RMDCommand+0x15e>
		case 0x31:
			TxData[0] = 0x31;	//PI設定
 800062e:	4b78      	ldr	r3, [pc, #480]	; (8000810 <RMDCommand+0x25c>)
 8000630:	2231      	movs	r2, #49	; 0x31
 8000632:	701a      	strb	r2, [r3, #0]
			TxData[2] = UART1_Data[2];	//anglePidKp
 8000634:	4b78      	ldr	r3, [pc, #480]	; (8000818 <RMDCommand+0x264>)
 8000636:	789a      	ldrb	r2, [r3, #2]
 8000638:	4b75      	ldr	r3, [pc, #468]	; (8000810 <RMDCommand+0x25c>)
 800063a:	709a      	strb	r2, [r3, #2]
			TxData[3] = UART1_Data[3];	//anglePidKi
 800063c:	4b76      	ldr	r3, [pc, #472]	; (8000818 <RMDCommand+0x264>)
 800063e:	78da      	ldrb	r2, [r3, #3]
 8000640:	4b73      	ldr	r3, [pc, #460]	; (8000810 <RMDCommand+0x25c>)
 8000642:	70da      	strb	r2, [r3, #3]
			TxData[4] = UART1_Data[4];	//speedPidKp
 8000644:	4b74      	ldr	r3, [pc, #464]	; (8000818 <RMDCommand+0x264>)
 8000646:	791a      	ldrb	r2, [r3, #4]
 8000648:	4b71      	ldr	r3, [pc, #452]	; (8000810 <RMDCommand+0x25c>)
 800064a:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];	//speedPidKi
 800064c:	4b72      	ldr	r3, [pc, #456]	; (8000818 <RMDCommand+0x264>)
 800064e:	795a      	ldrb	r2, [r3, #5]
 8000650:	4b6f      	ldr	r3, [pc, #444]	; (8000810 <RMDCommand+0x25c>)
 8000652:	715a      	strb	r2, [r3, #5]
			TxData[6] = UART1_Data[6];	//iqPidKp
 8000654:	4b70      	ldr	r3, [pc, #448]	; (8000818 <RMDCommand+0x264>)
 8000656:	799a      	ldrb	r2, [r3, #6]
 8000658:	4b6d      	ldr	r3, [pc, #436]	; (8000810 <RMDCommand+0x25c>)
 800065a:	719a      	strb	r2, [r3, #6]
			TxData[7] = UART1_Data[7];	//iqPidKi
 800065c:	4b6e      	ldr	r3, [pc, #440]	; (8000818 <RMDCommand+0x264>)
 800065e:	79da      	ldrb	r2, [r3, #7]
 8000660:	4b6b      	ldr	r3, [pc, #428]	; (8000810 <RMDCommand+0x25c>)
 8000662:	71da      	strb	r2, [r3, #7]
		case 0x32:
			TxData[0] = 0x32;	//PI設定
 8000664:	4b6a      	ldr	r3, [pc, #424]	; (8000810 <RMDCommand+0x25c>)
 8000666:	2232      	movs	r2, #50	; 0x32
 8000668:	701a      	strb	r2, [r3, #0]
			TxData[2] = UART1_Data[2];	//anglePidKp
 800066a:	4b6b      	ldr	r3, [pc, #428]	; (8000818 <RMDCommand+0x264>)
 800066c:	789a      	ldrb	r2, [r3, #2]
 800066e:	4b68      	ldr	r3, [pc, #416]	; (8000810 <RMDCommand+0x25c>)
 8000670:	709a      	strb	r2, [r3, #2]
			TxData[3] = UART1_Data[3];	//anglePidKi
 8000672:	4b69      	ldr	r3, [pc, #420]	; (8000818 <RMDCommand+0x264>)
 8000674:	78da      	ldrb	r2, [r3, #3]
 8000676:	4b66      	ldr	r3, [pc, #408]	; (8000810 <RMDCommand+0x25c>)
 8000678:	70da      	strb	r2, [r3, #3]
			TxData[4] = UART1_Data[4];	//speedPidKp
 800067a:	4b67      	ldr	r3, [pc, #412]	; (8000818 <RMDCommand+0x264>)
 800067c:	791a      	ldrb	r2, [r3, #4]
 800067e:	4b64      	ldr	r3, [pc, #400]	; (8000810 <RMDCommand+0x25c>)
 8000680:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];	//speedPidKi
 8000682:	4b65      	ldr	r3, [pc, #404]	; (8000818 <RMDCommand+0x264>)
 8000684:	795a      	ldrb	r2, [r3, #5]
 8000686:	4b62      	ldr	r3, [pc, #392]	; (8000810 <RMDCommand+0x25c>)
 8000688:	715a      	strb	r2, [r3, #5]
			TxData[6] = UART1_Data[6];	//iqPidKp
 800068a:	4b63      	ldr	r3, [pc, #396]	; (8000818 <RMDCommand+0x264>)
 800068c:	799a      	ldrb	r2, [r3, #6]
 800068e:	4b60      	ldr	r3, [pc, #384]	; (8000810 <RMDCommand+0x25c>)
 8000690:	719a      	strb	r2, [r3, #6]
			TxData[7] = UART1_Data[7];	//iqPidKi
 8000692:	4b61      	ldr	r3, [pc, #388]	; (8000818 <RMDCommand+0x264>)
 8000694:	79da      	ldrb	r2, [r3, #7]
 8000696:	4b5e      	ldr	r3, [pc, #376]	; (8000810 <RMDCommand+0x25c>)
 8000698:	71da      	strb	r2, [r3, #7]
			break;
 800069a:	e041      	b.n	8000720 <RMDCommand+0x16c>
		case 0x34:
			TxData[0] = 0x34;	//accelePI設定
 800069c:	4b5c      	ldr	r3, [pc, #368]	; (8000810 <RMDCommand+0x25c>)
 800069e:	2234      	movs	r2, #52	; 0x34
 80006a0:	701a      	strb	r2, [r3, #0]
			TxData[4] = UART1_Data[4];	//speedI
 80006a2:	4b5d      	ldr	r3, [pc, #372]	; (8000818 <RMDCommand+0x264>)
 80006a4:	791a      	ldrb	r2, [r3, #4]
 80006a6:	4b5a      	ldr	r3, [pc, #360]	; (8000810 <RMDCommand+0x25c>)
 80006a8:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];	//TorqueP
 80006aa:	4b5b      	ldr	r3, [pc, #364]	; (8000818 <RMDCommand+0x264>)
 80006ac:	795a      	ldrb	r2, [r3, #5]
 80006ae:	4b58      	ldr	r3, [pc, #352]	; (8000810 <RMDCommand+0x25c>)
 80006b0:	715a      	strb	r2, [r3, #5]
			TxData[6] = UART1_Data[6];	//TorqueI
 80006b2:	4b59      	ldr	r3, [pc, #356]	; (8000818 <RMDCommand+0x264>)
 80006b4:	799a      	ldrb	r2, [r3, #6]
 80006b6:	4b56      	ldr	r3, [pc, #344]	; (8000810 <RMDCommand+0x25c>)
 80006b8:	719a      	strb	r2, [r3, #6]
			TxData[7] = UART1_Data[7];	//PosI
 80006ba:	4b57      	ldr	r3, [pc, #348]	; (8000818 <RMDCommand+0x264>)
 80006bc:	79da      	ldrb	r2, [r3, #7]
 80006be:	4b54      	ldr	r3, [pc, #336]	; (8000810 <RMDCommand+0x25c>)
 80006c0:	71da      	strb	r2, [r3, #7]
			break;
 80006c2:	e02d      	b.n	8000720 <RMDCommand+0x16c>
		case 0xA1:
			TxData[0] = 0xA1;	//Torque設定
 80006c4:	4b52      	ldr	r3, [pc, #328]	; (8000810 <RMDCommand+0x25c>)
 80006c6:	22a1      	movs	r2, #161	; 0xa1
 80006c8:	701a      	strb	r2, [r3, #0]
			TxData[4] = UART1_Data[4];	//currentlow
 80006ca:	4b53      	ldr	r3, [pc, #332]	; (8000818 <RMDCommand+0x264>)
 80006cc:	791a      	ldrb	r2, [r3, #4]
 80006ce:	4b50      	ldr	r3, [pc, #320]	; (8000810 <RMDCommand+0x25c>)
 80006d0:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];	//currenthigh
 80006d2:	4b51      	ldr	r3, [pc, #324]	; (8000818 <RMDCommand+0x264>)
 80006d4:	795a      	ldrb	r2, [r3, #5]
 80006d6:	4b4e      	ldr	r3, [pc, #312]	; (8000810 <RMDCommand+0x25c>)
 80006d8:	715a      	strb	r2, [r3, #5]
			break;
 80006da:	e021      	b.n	8000720 <RMDCommand+0x16c>
		case 0xA4:
			TxData[0] = 0xA4;
 80006dc:	4b4c      	ldr	r3, [pc, #304]	; (8000810 <RMDCommand+0x25c>)
 80006de:	22a4      	movs	r2, #164	; 0xa4
 80006e0:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x00;
 80006e2:	4b4b      	ldr	r3, [pc, #300]	; (8000810 <RMDCommand+0x25c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x2C;	//speed low
 80006e8:	4b49      	ldr	r3, [pc, #292]	; (8000810 <RMDCommand+0x25c>)
 80006ea:	222c      	movs	r2, #44	; 0x2c
 80006ec:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x01;	//speed high
 80006ee:	4b48      	ldr	r3, [pc, #288]	; (8000810 <RMDCommand+0x25c>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	70da      	strb	r2, [r3, #3]
			TxData[4] = UART1_Data[4];	//poslow
 80006f4:	4b48      	ldr	r3, [pc, #288]	; (8000818 <RMDCommand+0x264>)
 80006f6:	791a      	ldrb	r2, [r3, #4]
 80006f8:	4b45      	ldr	r3, [pc, #276]	; (8000810 <RMDCommand+0x25c>)
 80006fa:	711a      	strb	r2, [r3, #4]
			TxData[5] = UART1_Data[5];
 80006fc:	4b46      	ldr	r3, [pc, #280]	; (8000818 <RMDCommand+0x264>)
 80006fe:	795a      	ldrb	r2, [r3, #5]
 8000700:	4b43      	ldr	r3, [pc, #268]	; (8000810 <RMDCommand+0x25c>)
 8000702:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8000704:	4b42      	ldr	r3, [pc, #264]	; (8000810 <RMDCommand+0x25c>)
 8000706:	2200      	movs	r2, #0
 8000708:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;	//poshigh
 800070a:	4b41      	ldr	r3, [pc, #260]	; (8000810 <RMDCommand+0x25c>)
 800070c:	2200      	movs	r2, #0
 800070e:	71da      	strb	r2, [r3, #7]
			break;
 8000710:	e006      	b.n	8000720 <RMDCommand+0x16c>
		default:
			printf("No Data Writecom\r\n");
 8000712:	4842      	ldr	r0, [pc, #264]	; (800081c <RMDCommand+0x268>)
 8000714:	f003 ffec 	bl	80046f0 <puts>
			get_can_flag=1;
 8000718:	4b41      	ldr	r3, [pc, #260]	; (8000820 <RMDCommand+0x26c>)
 800071a:	2201      	movs	r2, #1
 800071c:	701a      	strb	r2, [r3, #0]
			break;
 800071e:	bf00      	nop
		}
	Writecom=0x00;
 8000720:	4b3c      	ldr	r3, [pc, #240]	; (8000814 <RMDCommand+0x260>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
	switch(Readcom){
 8000726:	4b3f      	ldr	r3, [pc, #252]	; (8000824 <RMDCommand+0x270>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2ba1      	cmp	r3, #161	; 0xa1
 800072c:	d01a      	beq.n	8000764 <RMDCommand+0x1b0>
 800072e:	2ba1      	cmp	r3, #161	; 0xa1
 8000730:	dc1f      	bgt.n	8000772 <RMDCommand+0x1be>
 8000732:	2b9c      	cmp	r3, #156	; 0x9c
 8000734:	d012      	beq.n	800075c <RMDCommand+0x1a8>
 8000736:	2b9c      	cmp	r3, #156	; 0x9c
 8000738:	dc1b      	bgt.n	8000772 <RMDCommand+0x1be>
 800073a:	2b90      	cmp	r3, #144	; 0x90
 800073c:	d015      	beq.n	800076a <RMDCommand+0x1b6>
 800073e:	2b90      	cmp	r3, #144	; 0x90
 8000740:	dc17      	bgt.n	8000772 <RMDCommand+0x1be>
 8000742:	2b30      	cmp	r3, #48	; 0x30
 8000744:	d002      	beq.n	800074c <RMDCommand+0x198>
 8000746:	2b33      	cmp	r3, #51	; 0x33
 8000748:	d004      	beq.n	8000754 <RMDCommand+0x1a0>
 800074a:	e012      	b.n	8000772 <RMDCommand+0x1be>
		case 0x30:
			TxData[0] = 0x30;
 800074c:	4b30      	ldr	r3, [pc, #192]	; (8000810 <RMDCommand+0x25c>)
 800074e:	2230      	movs	r2, #48	; 0x30
 8000750:	701a      	strb	r2, [r3, #0]
			break;
 8000752:	e015      	b.n	8000780 <RMDCommand+0x1cc>
		case 0x33:
			TxData[0] = 0x33;
 8000754:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <RMDCommand+0x25c>)
 8000756:	2233      	movs	r2, #51	; 0x33
 8000758:	701a      	strb	r2, [r3, #0]
			break;
 800075a:	e011      	b.n	8000780 <RMDCommand+0x1cc>
		case 0x9C:
			TxData[0] = 0x9C;
 800075c:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <RMDCommand+0x25c>)
 800075e:	229c      	movs	r2, #156	; 0x9c
 8000760:	701a      	strb	r2, [r3, #0]
			break;
 8000762:	e00d      	b.n	8000780 <RMDCommand+0x1cc>
		case 0xA1:
			TxData[0] = 0xA1;
 8000764:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <RMDCommand+0x25c>)
 8000766:	22a1      	movs	r2, #161	; 0xa1
 8000768:	701a      	strb	r2, [r3, #0]
		case 0x90:
			TxData[0] = 0x90;
 800076a:	4b29      	ldr	r3, [pc, #164]	; (8000810 <RMDCommand+0x25c>)
 800076c:	2290      	movs	r2, #144	; 0x90
 800076e:	701a      	strb	r2, [r3, #0]
			break;
 8000770:	e006      	b.n	8000780 <RMDCommand+0x1cc>
		default:
			printf("No Data Readcom\r\n");
 8000772:	482d      	ldr	r0, [pc, #180]	; (8000828 <RMDCommand+0x274>)
 8000774:	f003 ffbc 	bl	80046f0 <puts>
			get_can_flag=1;
 8000778:	4b29      	ldr	r3, [pc, #164]	; (8000820 <RMDCommand+0x26c>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
			break;
 800077e:	bf00      	nop
	}
	Readcom=0x00;
 8000780:	4b28      	ldr	r3, [pc, #160]	; (8000824 <RMDCommand+0x270>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) ){
 8000786:	4829      	ldr	r0, [pc, #164]	; (800082c <RMDCommand+0x278>)
 8000788:	f001 f9b6 	bl	8001af8 <HAL_CAN_GetTxMailboxesFreeLevel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d02e      	beq.n	80007f0 <RMDCommand+0x23c>
		HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 8000792:	4b27      	ldr	r3, [pc, #156]	; (8000830 <RMDCommand+0x27c>)
 8000794:	4a1e      	ldr	r2, [pc, #120]	; (8000810 <RMDCommand+0x25c>)
 8000796:	491d      	ldr	r1, [pc, #116]	; (800080c <RMDCommand+0x258>)
 8000798:	4824      	ldr	r0, [pc, #144]	; (800082c <RMDCommand+0x278>)
 800079a:	f001 f8d2 	bl	8001942 <HAL_CAN_AddTxMessage>
		HAL_Delay(1);
 800079e:	2001      	movs	r0, #1
 80007a0:	f000 fe42 	bl	8001428 <HAL_Delay>
//		printf("Can Send\r\n");
		while(!nextcan_flag){
 80007a4:	e01a      	b.n	80007dc <RMDCommand+0x228>
//			printf("Mailboxes: %d\r\n",HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
			HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 80007a6:	4b22      	ldr	r3, [pc, #136]	; (8000830 <RMDCommand+0x27c>)
 80007a8:	4a19      	ldr	r2, [pc, #100]	; (8000810 <RMDCommand+0x25c>)
 80007aa:	4918      	ldr	r1, [pc, #96]	; (800080c <RMDCommand+0x258>)
 80007ac:	481f      	ldr	r0, [pc, #124]	; (800082c <RMDCommand+0x278>)
 80007ae:	f001 f8c8 	bl	8001942 <HAL_CAN_AddTxMessage>
			HAL_Delay(1);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f000 fe38 	bl	8001428 <HAL_Delay>
			count++;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3301      	adds	r3, #1
 80007bc:	607b      	str	r3, [r7, #4]
			if(count==10){
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b0a      	cmp	r3, #10
 80007c2:	d10b      	bne.n	80007dc <RMDCommand+0x228>
				nextcan_flag=1;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <RMDCommand+0x280>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	701a      	strb	r2, [r3, #0]
				HAL_CAN_Stop (&hcan1);
 80007ca:	4818      	ldr	r0, [pc, #96]	; (800082c <RMDCommand+0x278>)
 80007cc:	f001 f870 	bl	80018b0 <HAL_CAN_Stop>
				//HAL_CAN_AbortTxRequest(&hcan1,TxMailbox);
				HAL_CAN_Start(&hcan1);
 80007d0:	4816      	ldr	r0, [pc, #88]	; (800082c <RMDCommand+0x278>)
 80007d2:	f001 f829 	bl	8001828 <HAL_CAN_Start>
				printf("CAN RESET\r\n");
 80007d6:	4818      	ldr	r0, [pc, #96]	; (8000838 <RMDCommand+0x284>)
 80007d8:	f003 ff8a 	bl	80046f0 <puts>
		while(!nextcan_flag){
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <RMDCommand+0x280>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0e0      	beq.n	80007a6 <RMDCommand+0x1f2>
			}
		}
		nextcan_flag=0;
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <RMDCommand+0x280>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
		count=0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
	}
//	printf("Command : 0x%x\r\n",TxData[0]);
//	for(i=0;i < 8;i++){
//		printf("0x%d\r\n",TxData[i]);
//	}
}
 80007ee:	e008      	b.n	8000802 <RMDCommand+0x24e>
		printf("Mailbox_congestion\r\n");
 80007f0:	4812      	ldr	r0, [pc, #72]	; (800083c <RMDCommand+0x288>)
 80007f2:	f003 ff7d 	bl	80046f0 <puts>
		nextcan_flag=0;
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <RMDCommand+0x280>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
		get_can_flag=1;
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <RMDCommand+0x26c>)
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000120 	.word	0x20000120
 8000810:	20000154 	.word	0x20000154
 8000814:	20000174 	.word	0x20000174
 8000818:	20000168 	.word	0x20000168
 800081c:	08005604 	.word	0x08005604
 8000820:	20000171 	.word	0x20000171
 8000824:	20000178 	.word	0x20000178
 8000828:	08005618 	.word	0x08005618
 800082c:	2000008c 	.word	0x2000008c
 8000830:	20000164 	.word	0x20000164
 8000834:	20000172 	.word	0x20000172
 8000838:	0800562c 	.word	0x0800562c
 800083c:	08005638 	.word	0x08005638

08000840 <UART1_InIt>:

void UART1_InIt(){
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
	UART1_Data[0] = 0x00;
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <UART1_InIt+0x40>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
	UART1_Data[1] = 0x00;
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <UART1_InIt+0x40>)
 800084c:	2200      	movs	r2, #0
 800084e:	705a      	strb	r2, [r3, #1]
	UART1_Data[2] = 0x00;
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <UART1_InIt+0x40>)
 8000852:	2200      	movs	r2, #0
 8000854:	709a      	strb	r2, [r3, #2]
	UART1_Data[3] = 0x00;
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <UART1_InIt+0x40>)
 8000858:	2200      	movs	r2, #0
 800085a:	70da      	strb	r2, [r3, #3]
	UART1_Data[4] = 0x00;
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <UART1_InIt+0x40>)
 800085e:	2200      	movs	r2, #0
 8000860:	711a      	strb	r2, [r3, #4]
	UART1_Data[5] = 0x00;
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <UART1_InIt+0x40>)
 8000864:	2200      	movs	r2, #0
 8000866:	715a      	strb	r2, [r3, #5]
	UART1_Data[6] = 0x00;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <UART1_InIt+0x40>)
 800086a:	2200      	movs	r2, #0
 800086c:	719a      	strb	r2, [r3, #6]
	UART1_Data[7] = 0x00;
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <UART1_InIt+0x40>)
 8000870:	2200      	movs	r2, #0
 8000872:	71da      	strb	r2, [r3, #7]
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000168 	.word	0x20000168

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088a:	f000 fd5b 	bl	8001344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088e:	f000 f9b5 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000892:	f000 fa81 	bl	8000d98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000896:	f000 fa55 	bl	8000d44 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800089a:	f000 fa1b 	bl	8000cd4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

sFilterConfig.FilterBank = 0;
 800089e:	4bb0      	ldr	r3, [pc, #704]	; (8000b60 <main+0x2dc>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80008a4:	4bae      	ldr	r3, [pc, #696]	; (8000b60 <main+0x2dc>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80008aa:	4bad      	ldr	r3, [pc, #692]	; (8000b60 <main+0x2dc>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	61da      	str	r2, [r3, #28]
sFilterConfig.FilterIdHigh = 0x0000;
 80008b0:	4bab      	ldr	r3, [pc, #684]	; (8000b60 <main+0x2dc>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
sFilterConfig.FilterIdLow = 0x0000;
 80008b6:	4baa      	ldr	r3, [pc, #680]	; (8000b60 <main+0x2dc>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
sFilterConfig.FilterMaskIdHigh = 0x0000;
 80008bc:	4ba8      	ldr	r3, [pc, #672]	; (8000b60 <main+0x2dc>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
sFilterConfig.FilterMaskIdLow = 0x0000;
 80008c2:	4ba7      	ldr	r3, [pc, #668]	; (8000b60 <main+0x2dc>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80008c8:	4ba5      	ldr	r3, [pc, #660]	; (8000b60 <main+0x2dc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
//	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
sFilterConfig.FilterActivation=ENABLE;
 80008ce:	4ba4      	ldr	r3, [pc, #656]	; (8000b60 <main+0x2dc>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	621a      	str	r2, [r3, #32]
sFilterConfig.SlaveStartFilterBank=14;
 80008d4:	4ba2      	ldr	r3, [pc, #648]	; (8000b60 <main+0x2dc>)
 80008d6:	220e      	movs	r2, #14
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24

if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 80008da:	49a1      	ldr	r1, [pc, #644]	; (8000b60 <main+0x2dc>)
 80008dc:	48a1      	ldr	r0, [pc, #644]	; (8000b64 <main+0x2e0>)
 80008de:	f000 fec3 	bl	8001668 <HAL_CAN_ConfigFilter>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <main+0x68>
{
	Error_Handler();
 80008e8:	f000 fb38 	bl	8000f5c <Error_Handler>
}
if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 80008ec:	489d      	ldr	r0, [pc, #628]	; (8000b64 <main+0x2e0>)
 80008ee:	f000 ff9b 	bl	8001828 <HAL_CAN_Start>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <main+0x78>
{
	Error_Handler();
 80008f8:	f000 fb30 	bl	8000f5c <Error_Handler>
}

if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80008fc:	2103      	movs	r1, #3
 80008fe:	4899      	ldr	r0, [pc, #612]	; (8000b64 <main+0x2e0>)
 8000900:	f001 fa41 	bl	8001d86 <HAL_CAN_ActivateNotification>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <main+0x8a>
{
	Error_Handler();
 800090a:	f000 fb27 	bl	8000f5c <Error_Handler>
//	  {
//	     Error_Handler ();
//	  }

char KeyCommand[1];
KeyCommand[0]=0;
 800090e:	2300      	movs	r3, #0
 8000910:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
int RxBitshift[4];
int TxBitshift[4];
int current=0;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
int current_range=0;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
printf("RMD Start\r\n");
 800091c:	4892      	ldr	r0, [pc, #584]	; (8000b68 <main+0x2e4>)
 800091e:	f003 fee7 	bl	80046f0 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //受信割り込みの開始=6byte受け取ったら次の処理へ
		  get_uart_flag=0;
 8000922:	4b92      	ldr	r3, [pc, #584]	; (8000b6c <main+0x2e8>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
//		  int i=0;
		  HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, 1);
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	2201      	movs	r2, #1
 800092e:	4619      	mov	r1, r3
 8000930:	488f      	ldr	r0, [pc, #572]	; (8000b70 <main+0x2ec>)
 8000932:	f002 fe8c 	bl	800364e <HAL_UART_Receive_IT>
	//	  printf("Key %d\r\n",KeyChange);
		  HAL_UART_Transmit(&huart2, (uint8_t *)KeyCommand, 1,300);
 8000936:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800093a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800093e:	2201      	movs	r2, #1
 8000940:	488b      	ldr	r0, [pc, #556]	; (8000b70 <main+0x2ec>)
 8000942:	f002 fdf2 	bl	800352a <HAL_UART_Transmit>
		  //受信するまで待つ
		  while(!get_uart_flag){}
 8000946:	bf00      	nop
 8000948:	4b88      	ldr	r3, [pc, #544]	; (8000b6c <main+0x2e8>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d0fb      	beq.n	8000948 <main+0xc4>
		  UART1_InIt();
 8000950:	f7ff ff76 	bl	8000840 <UART1_InIt>
		  get_can_flag=0;
 8000954:	4b87      	ldr	r3, [pc, #540]	; (8000b74 <main+0x2f0>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
	  	   //canデータ受信用のフラグを0に
		  RxBitshift[0]=0;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
		  RxBitshift[1]=0;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
		  RxBitshift[2]=0;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
		  RxBitshift[3]=0;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
		  TxBitshift[0]=0;
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
		  TxBitshift[1]=0;
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
		  TxBitshift[2]=0;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
		  TxBitshift[3]=0;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
	//	  printf("beforecase\r\n");
			  if(KeyCommand[0]!=0 ){
 800097a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0cf      	beq.n	8000922 <main+0x9e>
				  switch(KeyCommand[0]){
 8000982:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000986:	3b31      	subs	r3, #49	; 0x31
 8000988:	2b04      	cmp	r3, #4
 800098a:	f200 8123 	bhi.w	8000bd4 <main+0x350>
 800098e:	a201      	add	r2, pc, #4	; (adr r2, 8000994 <main+0x110>)
 8000990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000994:	080009a9 	.word	0x080009a9
 8000998:	080009c7 	.word	0x080009c7
 800099c:	080009e5 	.word	0x080009e5
 80009a0:	08000a03 	.word	0x08000a03
 80009a4:	08000b2b 	.word	0x08000b2b
				  case '1':
					  UART1_Data[4] = 0x00;
 80009a8:	4b73      	ldr	r3, [pc, #460]	; (8000b78 <main+0x2f4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	711a      	strb	r2, [r3, #4]
					  UART1_Data[5] = 0x00;
 80009ae:	4b72      	ldr	r3, [pc, #456]	; (8000b78 <main+0x2f4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	715a      	strb	r2, [r3, #5]
					  Writecom = 0xA4;
 80009b4:	4b71      	ldr	r3, [pc, #452]	; (8000b7c <main+0x2f8>)
 80009b6:	22a4      	movs	r2, #164	; 0xa4
 80009b8:	601a      	str	r2, [r3, #0]
					  RMDCommand();
 80009ba:	f7ff fdfb 	bl	80005b4 <RMDCommand>
					  KeyCommand[0]=0;
 80009be:	2300      	movs	r3, #0
 80009c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					  break;
 80009c4:	e110      	b.n	8000be8 <main+0x364>
				  case'2':
					  UART1_Data[4] = 0x28;
 80009c6:	4b6c      	ldr	r3, [pc, #432]	; (8000b78 <main+0x2f4>)
 80009c8:	2228      	movs	r2, #40	; 0x28
 80009ca:	711a      	strb	r2, [r3, #4]
					  UART1_Data[5] = 0x23;
 80009cc:	4b6a      	ldr	r3, [pc, #424]	; (8000b78 <main+0x2f4>)
 80009ce:	2223      	movs	r2, #35	; 0x23
 80009d0:	715a      	strb	r2, [r3, #5]
					  Writecom=0xA4;
 80009d2:	4b6a      	ldr	r3, [pc, #424]	; (8000b7c <main+0x2f8>)
 80009d4:	22a4      	movs	r2, #164	; 0xa4
 80009d6:	601a      	str	r2, [r3, #0]
					  RMDCommand();
 80009d8:	f7ff fdec 	bl	80005b4 <RMDCommand>
					  KeyCommand[0]=0;
 80009dc:	2300      	movs	r3, #0
 80009de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					  break;
 80009e2:	e101      	b.n	8000be8 <main+0x364>
				  case'3':
					  UART1_Data[4] = 0xB8;
 80009e4:	4b64      	ldr	r3, [pc, #400]	; (8000b78 <main+0x2f4>)
 80009e6:	22b8      	movs	r2, #184	; 0xb8
 80009e8:	711a      	strb	r2, [r3, #4]
					  UART1_Data[5] = 0x88;
 80009ea:	4b63      	ldr	r3, [pc, #396]	; (8000b78 <main+0x2f4>)
 80009ec:	2288      	movs	r2, #136	; 0x88
 80009ee:	715a      	strb	r2, [r3, #5]
					  Writecom=0xA4;
 80009f0:	4b62      	ldr	r3, [pc, #392]	; (8000b7c <main+0x2f8>)
 80009f2:	22a4      	movs	r2, #164	; 0xa4
 80009f4:	601a      	str	r2, [r3, #0]
					  RMDCommand();
 80009f6:	f7ff fddd 	bl	80005b4 <RMDCommand>
					  KeyCommand[0]=0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					  break;
 8000a00:	e0f2      	b.n	8000be8 <main+0x364>
				  case'4':
					  Readcom=0x30;
 8000a02:	4b5f      	ldr	r3, [pc, #380]	; (8000b80 <main+0x2fc>)
 8000a04:	2230      	movs	r2, #48	; 0x30
 8000a06:	601a      	str	r2, [r3, #0]
					  RMDCommand();
 8000a08:	f7ff fdd4 	bl	80005b4 <RMDCommand>
	  				  printf("0x30\r\n");
 8000a0c:	485d      	ldr	r0, [pc, #372]	; (8000b84 <main+0x300>)
 8000a0e:	f003 fe6f 	bl	80046f0 <puts>
	  				  printf("Position loop Kp :%d \r\n",RxData[2]);
 8000a12:	4b5d      	ldr	r3, [pc, #372]	; (8000b88 <main+0x304>)
 8000a14:	789b      	ldrb	r3, [r3, #2]
 8000a16:	4619      	mov	r1, r3
 8000a18:	485c      	ldr	r0, [pc, #368]	; (8000b8c <main+0x308>)
 8000a1a:	f003 fde3 	bl	80045e4 <iprintf>
	  				  printf("Position loop Ki :%d \r\n",RxData[3]);
 8000a1e:	4b5a      	ldr	r3, [pc, #360]	; (8000b88 <main+0x304>)
 8000a20:	78db      	ldrb	r3, [r3, #3]
 8000a22:	4619      	mov	r1, r3
 8000a24:	485a      	ldr	r0, [pc, #360]	; (8000b90 <main+0x30c>)
 8000a26:	f003 fddd 	bl	80045e4 <iprintf>
	  				  printf("Speed loop Kp :%d \r\n",RxData[4]);
 8000a2a:	4b57      	ldr	r3, [pc, #348]	; (8000b88 <main+0x304>)
 8000a2c:	791b      	ldrb	r3, [r3, #4]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4858      	ldr	r0, [pc, #352]	; (8000b94 <main+0x310>)
 8000a32:	f003 fdd7 	bl	80045e4 <iprintf>
	  				  printf("Speed loop Ki :%d \r\n",RxData[5]);
 8000a36:	4b54      	ldr	r3, [pc, #336]	; (8000b88 <main+0x304>)
 8000a38:	795b      	ldrb	r3, [r3, #5]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4856      	ldr	r0, [pc, #344]	; (8000b98 <main+0x314>)
 8000a3e:	f003 fdd1 	bl	80045e4 <iprintf>
	  				  printf("Torque loop Kp :%d \r\n",RxData[6]);
 8000a42:	4b51      	ldr	r3, [pc, #324]	; (8000b88 <main+0x304>)
 8000a44:	799b      	ldrb	r3, [r3, #6]
 8000a46:	4619      	mov	r1, r3
 8000a48:	4854      	ldr	r0, [pc, #336]	; (8000b9c <main+0x318>)
 8000a4a:	f003 fdcb 	bl	80045e4 <iprintf>
	  				  printf("Torque loop Ki :%d \r\n",RxData[7]);
 8000a4e:	4b4e      	ldr	r3, [pc, #312]	; (8000b88 <main+0x304>)
 8000a50:	79db      	ldrb	r3, [r3, #7]
 8000a52:	4619      	mov	r1, r3
 8000a54:	4852      	ldr	r0, [pc, #328]	; (8000ba0 <main+0x31c>)
 8000a56:	f003 fdc5 	bl	80045e4 <iprintf>

					  Readcom=0x33;
 8000a5a:	4b49      	ldr	r3, [pc, #292]	; (8000b80 <main+0x2fc>)
 8000a5c:	2233      	movs	r2, #51	; 0x33
 8000a5e:	601a      	str	r2, [r3, #0]
					  RMDCommand();
 8000a60:	f7ff fda8 	bl	80005b4 <RMDCommand>
	  				  printf("0x33\r\n");
 8000a64:	484f      	ldr	r0, [pc, #316]	; (8000ba4 <main+0x320>)
 8000a66:	f003 fe43 	bl	80046f0 <puts>
					  printf("Position loop P:%d \r\n",RxData[2]);
 8000a6a:	4b47      	ldr	r3, [pc, #284]	; (8000b88 <main+0x304>)
 8000a6c:	789b      	ldrb	r3, [r3, #2]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	484d      	ldr	r0, [pc, #308]	; (8000ba8 <main+0x324>)
 8000a72:	f003 fdb7 	bl	80045e4 <iprintf>
					  printf("Position loop I :%d \r\n",RxData[3]);
 8000a76:	4b44      	ldr	r3, [pc, #272]	; (8000b88 <main+0x304>)
 8000a78:	78db      	ldrb	r3, [r3, #3]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	484b      	ldr	r0, [pc, #300]	; (8000bac <main+0x328>)
 8000a7e:	f003 fdb1 	bl	80045e4 <iprintf>
					  printf("Speed loop P :%d \r\n",RxData[4]);
 8000a82:	4b41      	ldr	r3, [pc, #260]	; (8000b88 <main+0x304>)
 8000a84:	791b      	ldrb	r3, [r3, #4]
 8000a86:	4619      	mov	r1, r3
 8000a88:	4849      	ldr	r0, [pc, #292]	; (8000bb0 <main+0x32c>)
 8000a8a:	f003 fdab 	bl	80045e4 <iprintf>
					  printf("Speed loop I :%d \r\n",RxData[5]);
 8000a8e:	4b3e      	ldr	r3, [pc, #248]	; (8000b88 <main+0x304>)
 8000a90:	795b      	ldrb	r3, [r3, #5]
 8000a92:	4619      	mov	r1, r3
 8000a94:	4847      	ldr	r0, [pc, #284]	; (8000bb4 <main+0x330>)
 8000a96:	f003 fda5 	bl	80045e4 <iprintf>
					  printf("Torque loop P :%d \r\n",RxData[6]);
 8000a9a:	4b3b      	ldr	r3, [pc, #236]	; (8000b88 <main+0x304>)
 8000a9c:	799b      	ldrb	r3, [r3, #6]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4845      	ldr	r0, [pc, #276]	; (8000bb8 <main+0x334>)
 8000aa2:	f003 fd9f 	bl	80045e4 <iprintf>
					  printf("Torque loop I :%d \r\n",RxData[7]);
 8000aa6:	4b38      	ldr	r3, [pc, #224]	; (8000b88 <main+0x304>)
 8000aa8:	79db      	ldrb	r3, [r3, #7]
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4843      	ldr	r0, [pc, #268]	; (8000bbc <main+0x338>)
 8000aae:	f003 fd99 	bl	80045e4 <iprintf>

					  Readcom=0x9C;
 8000ab2:	4b33      	ldr	r3, [pc, #204]	; (8000b80 <main+0x2fc>)
 8000ab4:	229c      	movs	r2, #156	; 0x9c
 8000ab6:	601a      	str	r2, [r3, #0]
					  RMDCommand();
 8000ab8:	f7ff fd7c 	bl	80005b4 <RMDCommand>
	  				  printf("0x9C\r\n");
 8000abc:	4840      	ldr	r0, [pc, #256]	; (8000bc0 <main+0x33c>)
 8000abe:	f003 fe17 	bl	80046f0 <puts>
					  RxBitshift[0]=RxData[2] & 0xFF;
 8000ac2:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <main+0x304>)
 8000ac4:	789b      	ldrb	r3, [r3, #2]
 8000ac6:	617b      	str	r3, [r7, #20]
					  RxBitshift[0]+=(RxData[3] & 0xFF) << 8;
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <main+0x304>)
 8000acc:	78db      	ldrb	r3, [r3, #3]
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	4413      	add	r3, r2
 8000ad2:	617b      	str	r3, [r7, #20]
					  RxBitshift[1]=RxData[4] & 0xFF;
 8000ad4:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <main+0x304>)
 8000ad6:	791b      	ldrb	r3, [r3, #4]
 8000ad8:	61bb      	str	r3, [r7, #24]
					  RxBitshift[1]+=(RxData[5] & 0xFF) << 8;
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <main+0x304>)
 8000ade:	795b      	ldrb	r3, [r3, #5]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	4413      	add	r3, r2
 8000ae4:	61bb      	str	r3, [r7, #24]
					  RxBitshift[2]=RxData[6] & 0xFF;
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <main+0x304>)
 8000ae8:	799b      	ldrb	r3, [r3, #6]
 8000aea:	61fb      	str	r3, [r7, #28]
					  RxBitshift[2]+=(RxData[7] & 0xFF) << 8;
 8000aec:	69fa      	ldr	r2, [r7, #28]
 8000aee:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <main+0x304>)
 8000af0:	79db      	ldrb	r3, [r3, #7]
 8000af2:	021b      	lsls	r3, r3, #8
 8000af4:	4413      	add	r3, r2
 8000af6:	61fb      	str	r3, [r7, #28]
					  printf("Motor temperature:%d \r\n",RxData[1]);
 8000af8:	4b23      	ldr	r3, [pc, #140]	; (8000b88 <main+0x304>)
 8000afa:	785b      	ldrb	r3, [r3, #1]
 8000afc:	4619      	mov	r1, r3
 8000afe:	4831      	ldr	r0, [pc, #196]	; (8000bc4 <main+0x340>)
 8000b00:	f003 fd70 	bl	80045e4 <iprintf>
					  printf("Torque current :%d \r\n",RxBitshift[0]);
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	4619      	mov	r1, r3
 8000b08:	482f      	ldr	r0, [pc, #188]	; (8000bc8 <main+0x344>)
 8000b0a:	f003 fd6b 	bl	80045e4 <iprintf>
					  printf("Speed :%d \r\n",RxBitshift[1]);
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	4619      	mov	r1, r3
 8000b12:	482e      	ldr	r0, [pc, #184]	; (8000bcc <main+0x348>)
 8000b14:	f003 fd66 	bl	80045e4 <iprintf>
					  printf("Encoder position:%d \r\n",RxBitshift[2]);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	482c      	ldr	r0, [pc, #176]	; (8000bd0 <main+0x34c>)
 8000b1e:	f003 fd61 	bl	80045e4 <iprintf>
//					  RMDCommand();
//					  printf("0xA1\r\n");
//					  RxBitshift[0]=RxData[4] & 0xFF;
//					  RxBitshift[0]+=(RxData[5] & 0xFF) << 8;
//					  printf("Torque current :%d \r\n",RxBitshift[0]);
					  KeyCommand[0]=0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					  break;
 8000b28:	e05e      	b.n	8000be8 <main+0x364>
				  case'5':
					  UART1_Data[2] = 0x64;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <main+0x2f4>)
 8000b2c:	2264      	movs	r2, #100	; 0x64
 8000b2e:	709a      	strb	r2, [r3, #2]
					  UART1_Data[3] = 0x64;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <main+0x2f4>)
 8000b32:	2264      	movs	r2, #100	; 0x64
 8000b34:	70da      	strb	r2, [r3, #3]
					  UART1_Data[4] = 0x28;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <main+0x2f4>)
 8000b38:	2228      	movs	r2, #40	; 0x28
 8000b3a:	711a      	strb	r2, [r3, #4]
					  UART1_Data[5] = 0xE;
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <main+0x2f4>)
 8000b3e:	220e      	movs	r2, #14
 8000b40:	715a      	strb	r2, [r3, #5]
					  UART1_Data[6] = 0x14;
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <main+0x2f4>)
 8000b44:	2214      	movs	r2, #20
 8000b46:	719a      	strb	r2, [r3, #6]
					  UART1_Data[7] = 0x14;
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <main+0x2f4>)
 8000b4a:	2214      	movs	r2, #20
 8000b4c:	71da      	strb	r2, [r3, #7]
					  Writecom=0x31;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <main+0x2f8>)
 8000b50:	2231      	movs	r2, #49	; 0x31
 8000b52:	601a      	str	r2, [r3, #0]
					  RMDCommand();
 8000b54:	f7ff fd2e 	bl	80005b4 <RMDCommand>
					  KeyCommand[0]=0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					  break;
 8000b5e:	e043      	b.n	8000be8 <main+0x364>
 8000b60:	200000f8 	.word	0x200000f8
 8000b64:	2000008c 	.word	0x2000008c
 8000b68:	0800564c 	.word	0x0800564c
 8000b6c:	20000170 	.word	0x20000170
 8000b70:	200000b4 	.word	0x200000b4
 8000b74:	20000171 	.word	0x20000171
 8000b78:	20000168 	.word	0x20000168
 8000b7c:	20000174 	.word	0x20000174
 8000b80:	20000178 	.word	0x20000178
 8000b84:	08005658 	.word	0x08005658
 8000b88:	2000015c 	.word	0x2000015c
 8000b8c:	08005660 	.word	0x08005660
 8000b90:	08005678 	.word	0x08005678
 8000b94:	08005690 	.word	0x08005690
 8000b98:	080056a8 	.word	0x080056a8
 8000b9c:	080056c0 	.word	0x080056c0
 8000ba0:	080056d8 	.word	0x080056d8
 8000ba4:	080056f0 	.word	0x080056f0
 8000ba8:	080056f8 	.word	0x080056f8
 8000bac:	08005710 	.word	0x08005710
 8000bb0:	08005728 	.word	0x08005728
 8000bb4:	0800573c 	.word	0x0800573c
 8000bb8:	08005750 	.word	0x08005750
 8000bbc:	08005768 	.word	0x08005768
 8000bc0:	08005780 	.word	0x08005780
 8000bc4:	08005788 	.word	0x08005788
 8000bc8:	080057a0 	.word	0x080057a0
 8000bcc:	080057b8 	.word	0x080057b8
 8000bd0:	080057c8 	.word	0x080057c8
				  default:
					  printf("NoCommand\r\n");
 8000bd4:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <main+0x370>)
 8000bd6:	f003 fd8b 	bl	80046f0 <puts>
					  KeyCommand[0]=0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					  get_can_flag=1;
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <main+0x374>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
					  break;
 8000be6:	bf00      	nop
				  }

				  while(!get_can_flag){}
 8000be8:	bf00      	nop
 8000bea:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <main+0x374>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0fb      	beq.n	8000bea <main+0x366>
		  get_uart_flag=0;
 8000bf2:	e696      	b.n	8000922 <main+0x9e>
 8000bf4:	080057e0 	.word	0x080057e0
 8000bf8:	20000171 	.word	0x20000171

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b094      	sub	sp, #80	; 0x50
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	2234      	movs	r2, #52	; 0x34
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f003 fce2 	bl	80045d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	f107 0308 	add.w	r3, r7, #8
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	4b29      	ldr	r3, [pc, #164]	; (8000ccc <SystemClock_Config+0xd0>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a28      	ldr	r2, [pc, #160]	; (8000ccc <SystemClock_Config+0xd0>)
 8000c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c30:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <SystemClock_Config+0xd0>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <SystemClock_Config+0xd4>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a22      	ldr	r2, [pc, #136]	; (8000cd0 <SystemClock_Config+0xd4>)
 8000c46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <SystemClock_Config+0xd4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c60:	2310      	movs	r3, #16
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c64:	2302      	movs	r3, #2
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000c70:	23a0      	movs	r3, #160	; 0xa0
 8000c72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4618      	mov	r0, r3
 8000c86:	f002 f965 	bl	8002f54 <HAL_RCC_OscConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c90:	f000 f964 	bl	8000f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c94:	230f      	movs	r3, #15
 8000c96:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ca0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ca4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000caa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	2105      	movs	r1, #5
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 fe04 	bl	80028c0 <HAL_RCC_ClockConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000cbe:	f000 f94d 	bl	8000f5c <Error_Handler>
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	3750      	adds	r7, #80	; 0x50
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40007000 	.word	0x40007000

08000cd4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <MX_CAN1_Init+0x68>)
 8000cda:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <MX_CAN1_Init+0x6c>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_CAN1_Init+0x68>)
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_CAN1_Init+0x68>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_CAN1_Init+0x68>)
 8000cec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000cf0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_CAN1_Init+0x68>)
 8000cf4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cf8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_CAN1_Init+0x68>)
 8000cfc:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8000d00:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_CAN1_Init+0x68>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_CAN1_Init+0x68>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_CAN1_Init+0x68>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_CAN1_Init+0x68>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_CAN1_Init+0x68>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_CAN1_Init+0x68>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_CAN1_Init+0x68>)
 8000d28:	f000 fba2 	bl	8001470 <HAL_CAN_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000d32:	f000 f913 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000008c 	.word	0x2000008c
 8000d40:	40006400 	.word	0x40006400

08000d44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <MX_USART2_UART_Init+0x50>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d7c:	f002 fb88 	bl	8003490 <HAL_UART_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d86:	f000 f8e9 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200000b4 	.word	0x200000b4
 8000d94:	40004400 	.word	0x40004400

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <MX_GPIO_Init+0xf8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a36      	ldr	r2, [pc, #216]	; (8000e90 <MX_GPIO_Init+0xf8>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b34      	ldr	r3, [pc, #208]	; (8000e90 <MX_GPIO_Init+0xf8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b30      	ldr	r3, [pc, #192]	; (8000e90 <MX_GPIO_Init+0xf8>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a2f      	ldr	r2, [pc, #188]	; (8000e90 <MX_GPIO_Init+0xf8>)
 8000dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <MX_GPIO_Init+0xf8>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	4b29      	ldr	r3, [pc, #164]	; (8000e90 <MX_GPIO_Init+0xf8>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a28      	ldr	r2, [pc, #160]	; (8000e90 <MX_GPIO_Init+0xf8>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <MX_GPIO_Init+0xf8>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <MX_GPIO_Init+0xf8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a21      	ldr	r2, [pc, #132]	; (8000e90 <MX_GPIO_Init+0xf8>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <MX_GPIO_Init+0xf8>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2120      	movs	r1, #32
 8000e22:	481c      	ldr	r0, [pc, #112]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000e24:	f001 fd32 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	481a      	ldr	r0, [pc, #104]	; (8000e98 <MX_GPIO_Init+0x100>)
 8000e2e:	f001 fd2d 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e38:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4814      	ldr	r0, [pc, #80]	; (8000e9c <MX_GPIO_Init+0x104>)
 8000e4a:	f001 fb8b 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e4e:	2320      	movs	r3, #32
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	480b      	ldr	r0, [pc, #44]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000e66:	f001 fb7d 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_GPIO_Init+0x100>)
 8000e82:	f001 fb6f 	bl	8002564 <HAL_GPIO_Init>

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40020400 	.word	0x40020400
 8000e9c:	40020800 	.word	0x40020800

08000ea0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)	//printfに必要
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	230a      	movs	r3, #10
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <_write+0x24>)
 8000eb6:	f002 fb38 	bl	800352a <HAL_UART_Transmit>
  return len;
 8000eba:	687b      	ldr	r3, [r7, #4]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200000b4 	.word	0x200000b4

08000ec8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*UartHandle)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart2,UART1_Data,6,1000);
//	printf("UART_START\r\n");
//if(get_can_flag==0){
	get_uart_flag=1;
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <HAL_UART_RxCpltCallback+0x1c>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
	printf("UART_GET\r\n");
 8000ed6:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <HAL_UART_RxCpltCallback+0x20>)
 8000ed8:	f003 fc0a 	bl	80046f0 <puts>
//}

}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000170 	.word	0x20000170
 8000ee8:	080057ec 	.word	0x080057ec

08000eec <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
	  printf("TxCan\r\n");
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8000ef6:	f003 fbfb 	bl	80046f0 <puts>
	  nextcan_flag=1;
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]

}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	080057f8 	.word	0x080057f8
 8000f0c:	20000172 	.word	0x20000172

08000f10 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	printf("RxCan\r\n");
 8000f18:	480a      	ldr	r0, [pc, #40]	; (8000f44 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000f1a:	f003 fbe9 	bl	80046f0 <puts>
	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0, &RxHeader,RxData);
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000f22:	2100      	movs	r1, #0
 8000f24:	480a      	ldr	r0, [pc, #40]	; (8000f50 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000f26:	f000 fe1c 	bl	8001b62 <HAL_CAN_GetRxMessage>
	HAL_UART_Transmit(&huart2,RxData,sizeof(RxData),100);//受け取ったデータを送信
 8000f2a:	2364      	movs	r3, #100	; 0x64
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	4906      	ldr	r1, [pc, #24]	; (8000f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000f30:	4808      	ldr	r0, [pc, #32]	; (8000f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000f32:	f002 fafa 	bl	800352a <HAL_UART_Transmit>

	//printf("\r\n");
	get_can_flag=1;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
//  if(flag >0){
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
//  }else{
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
//  }
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	08005800 	.word	0x08005800
 8000f48:	2000015c 	.word	0x2000015c
 8000f4c:	20000138 	.word	0x20000138
 8000f50:	2000008c 	.word	0x2000008c
 8000f54:	200000b4 	.word	0x200000b4
 8000f58:	20000171 	.word	0x20000171

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <Error_Handler+0x8>
	...

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <HAL_MspInit+0x4c>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a0f      	ldr	r2, [pc, #60]	; (8000fb4 <HAL_MspInit+0x4c>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <HAL_MspInit+0x4c>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_MspInit+0x4c>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a08      	ldr	r2, [pc, #32]	; (8000fb4 <HAL_MspInit+0x4c>)
 8000f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_MspInit+0x4c>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a2a      	ldr	r2, [pc, #168]	; (8001080 <HAL_CAN_MspInit+0xc8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d14d      	bne.n	8001076 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b29      	ldr	r3, [pc, #164]	; (8001084 <HAL_CAN_MspInit+0xcc>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a28      	ldr	r2, [pc, #160]	; (8001084 <HAL_CAN_MspInit+0xcc>)
 8000fe4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b26      	ldr	r3, [pc, #152]	; (8001084 <HAL_CAN_MspInit+0xcc>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b22      	ldr	r3, [pc, #136]	; (8001084 <HAL_CAN_MspInit+0xcc>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a21      	ldr	r2, [pc, #132]	; (8001084 <HAL_CAN_MspInit+0xcc>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <HAL_CAN_MspInit+0xcc>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001012:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001024:	2309      	movs	r3, #9
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	4816      	ldr	r0, [pc, #88]	; (8001088 <HAL_CAN_MspInit+0xd0>)
 8001030:	f001 fa98 	bl	8002564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800103e:	2301      	movs	r3, #1
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001046:	2309      	movs	r3, #9
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	480d      	ldr	r0, [pc, #52]	; (8001088 <HAL_CAN_MspInit+0xd0>)
 8001052:	f001 fa87 	bl	8002564 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	2013      	movs	r0, #19
 800105c:	f001 f9b9 	bl	80023d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001060:	2013      	movs	r0, #19
 8001062:	f001 f9d2 	bl	800240a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2014      	movs	r0, #20
 800106c:	f001 f9b1 	bl	80023d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001070:	2014      	movs	r0, #20
 8001072:	f001 f9ca 	bl	800240a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	; 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40006400 	.word	0x40006400
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000

0800108c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a1d      	ldr	r2, [pc, #116]	; (8001120 <HAL_UART_MspInit+0x94>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d133      	bne.n	8001116 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <HAL_UART_MspInit+0x98>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a1b      	ldr	r2, [pc, #108]	; (8001124 <HAL_UART_MspInit+0x98>)
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <HAL_UART_MspInit+0x98>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_UART_MspInit+0x98>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <HAL_UART_MspInit+0x98>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_UART_MspInit+0x98>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010e6:	230c      	movs	r3, #12
 80010e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010f6:	2307      	movs	r3, #7
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	4809      	ldr	r0, [pc, #36]	; (8001128 <HAL_UART_MspInit+0x9c>)
 8001102:	f001 fa2f 	bl	8002564 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	2026      	movs	r0, #38	; 0x26
 800110c:	f001 f961 	bl	80023d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001110:	2026      	movs	r0, #38	; 0x26
 8001112:	f001 f97a 	bl	800240a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40004400 	.word	0x40004400
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000

0800112c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <NMI_Handler+0x4>

08001132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <HardFault_Handler+0x4>

08001138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <MemManage_Handler+0x4>

0800113e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <BusFault_Handler+0x4>

08001144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <UsageFault_Handler+0x4>

0800114a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001178:	f000 f936 	bl	80013e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <CAN1_TX_IRQHandler+0x10>)
 8001186:	f000 fe24 	bl	8001dd2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000008c 	.word	0x2000008c

08001194 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <CAN1_RX0_IRQHandler+0x10>)
 800119a:	f000 fe1a 	bl	8001dd2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000008c 	.word	0x2000008c

080011a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <USART2_IRQHandler+0x10>)
 80011ae:	f002 fa7f 	bl	80036b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200000b4 	.word	0x200000b4

080011bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	e00a      	b.n	80011e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011ce:	f3af 8000 	nop.w
 80011d2:	4601      	mov	r1, r0
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	60ba      	str	r2, [r7, #8]
 80011da:	b2ca      	uxtb	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	3301      	adds	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dbf0      	blt.n	80011ce <_read+0x12>
	}

return len;
 80011ec:	687b      	ldr	r3, [r7, #4]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
	return -1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800121e:	605a      	str	r2, [r3, #4]
	return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <_isatty>:

int _isatty(int file)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
	return 1;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
	return 0;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001268:	4a14      	ldr	r2, [pc, #80]	; (80012bc <_sbrk+0x5c>)
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <_sbrk+0x60>)
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <_sbrk+0x64>)
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <_sbrk+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	429a      	cmp	r2, r3
 800128e:	d207      	bcs.n	80012a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001290:	f003 f976 	bl	8004580 <__errno>
 8001294:	4603      	mov	r3, r0
 8001296:	220c      	movs	r2, #12
 8001298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800129e:	e009      	b.n	80012b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <_sbrk+0x64>)
 80012b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20020000 	.word	0x20020000
 80012c0:	00000400 	.word	0x00000400
 80012c4:	2000017c 	.word	0x2000017c
 80012c8:	20000198 	.word	0x20000198

080012cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <SystemInit+0x20>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <SystemInit+0x20>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001328 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012f6:	490e      	ldr	r1, [pc, #56]	; (8001330 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012f8:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800130c:	4c0b      	ldr	r4, [pc, #44]	; (800133c <LoopFillZerobss+0x26>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800131a:	f7ff ffd7 	bl	80012cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131e:	f003 f935 	bl	800458c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001322:	f7ff faaf 	bl	8000884 <main>
  bx  lr    
 8001326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001328:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800132c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001330:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001334:	080058c8 	.word	0x080058c8
  ldr r2, =_sbss
 8001338:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800133c:	20000194 	.word	0x20000194

08001340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC_IRQHandler>
	...

08001344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_Init+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <HAL_Init+0x40>)
 800134e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001352:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <HAL_Init+0x40>)
 800135a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a07      	ldr	r2, [pc, #28]	; (8001384 <HAL_Init+0x40>)
 8001366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800136c:	2003      	movs	r0, #3
 800136e:	f001 f825 	bl	80023bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001372:	2000      	movs	r0, #0
 8001374:	f000 f808 	bl	8001388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001378:	f7ff fdf6 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023c00 	.word	0x40023c00

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x54>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_InitTick+0x58>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 f83d 	bl	8002426 <HAL_SYSTICK_Config>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00e      	b.n	80013d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b0f      	cmp	r3, #15
 80013ba:	d80a      	bhi.n	80013d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013bc:	2200      	movs	r2, #0
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013c4:	f001 f805 	bl	80023d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <HAL_InitTick+0x5c>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000008 	.word	0x20000008
 80013e4:	20000004 	.word	0x20000004

080013e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x20>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x24>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_IncTick+0x24>)
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000008 	.word	0x20000008
 800140c:	20000180 	.word	0x20000180

08001410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <HAL_GetTick+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000180 	.word	0x20000180

08001428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff ffee 	bl	8001410 <HAL_GetTick>
 8001434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001440:	d005      	beq.n	800144e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_Delay+0x44>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800144e:	bf00      	nop
 8001450:	f7ff ffde 	bl	8001410 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	429a      	cmp	r2, r3
 800145e:	d8f7      	bhi.n	8001450 <HAL_Delay+0x28>
  {
  }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000008 	.word	0x20000008

08001470 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e0ed      	b.n	800165e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fd92 	bl	8000fb8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0201 	orr.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a4:	f7ff ffb4 	bl	8001410 <HAL_GetTick>
 80014a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014aa:	e012      	b.n	80014d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014ac:	f7ff ffb0 	bl	8001410 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b0a      	cmp	r3, #10
 80014b8:	d90b      	bls.n	80014d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2205      	movs	r2, #5
 80014ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e0c5      	b.n	800165e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0e5      	beq.n	80014ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0202 	bic.w	r2, r2, #2
 80014ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014f0:	f7ff ff8e 	bl	8001410 <HAL_GetTick>
 80014f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014f6:	e012      	b.n	800151e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014f8:	f7ff ff8a 	bl	8001410 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b0a      	cmp	r3, #10
 8001504:	d90b      	bls.n	800151e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2205      	movs	r2, #5
 8001516:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e09f      	b.n	800165e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1e5      	bne.n	80014f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7e1b      	ldrb	r3, [r3, #24]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d108      	bne.n	8001546 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	e007      	b.n	8001556 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001554:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7e5b      	ldrb	r3, [r3, #25]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d108      	bne.n	8001570 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	e007      	b.n	8001580 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800157e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7e9b      	ldrb	r3, [r3, #26]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d108      	bne.n	800159a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0220 	orr.w	r2, r2, #32
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e007      	b.n	80015aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0220 	bic.w	r2, r2, #32
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	7edb      	ldrb	r3, [r3, #27]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d108      	bne.n	80015c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0210 	bic.w	r2, r2, #16
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	e007      	b.n	80015d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0210 	orr.w	r2, r2, #16
 80015d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	7f1b      	ldrb	r3, [r3, #28]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d108      	bne.n	80015ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0208 	orr.w	r2, r2, #8
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	e007      	b.n	80015fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0208 	bic.w	r2, r2, #8
 80015fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	7f5b      	ldrb	r3, [r3, #29]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d108      	bne.n	8001618 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 0204 	orr.w	r2, r2, #4
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	e007      	b.n	8001628 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0204 	bic.w	r2, r2, #4
 8001626:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	ea42 0103 	orr.w	r1, r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	1e5a      	subs	r2, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800167e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001680:	7cfb      	ldrb	r3, [r7, #19]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d003      	beq.n	800168e <HAL_CAN_ConfigFilter+0x26>
 8001686:	7cfb      	ldrb	r3, [r7, #19]
 8001688:	2b02      	cmp	r3, #2
 800168a:	f040 80be 	bne.w	800180a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800168e:	4b65      	ldr	r3, [pc, #404]	; (8001824 <HAL_CAN_ConfigFilter+0x1bc>)
 8001690:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001698:	f043 0201 	orr.w	r2, r3, #1
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	431a      	orrs	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	2201      	movs	r2, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43db      	mvns	r3, r3
 80016e0:	401a      	ands	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d123      	bne.n	8001738 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	401a      	ands	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001712:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3248      	adds	r2, #72	; 0x48
 8001718:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800172c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800172e:	6979      	ldr	r1, [r7, #20]
 8001730:	3348      	adds	r3, #72	; 0x48
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d122      	bne.n	8001786 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	431a      	orrs	r2, r3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001760:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3248      	adds	r2, #72	; 0x48
 8001766:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800177a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800177c:	6979      	ldr	r1, [r7, #20]
 800177e:	3348      	adds	r3, #72	; 0x48
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	440b      	add	r3, r1
 8001784:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43db      	mvns	r3, r3
 8001798:	401a      	ands	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80017a0:	e007      	b.n	80017b2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	431a      	orrs	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	401a      	ands	r2, r3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80017cc:	e007      	b.n	80017de <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d107      	bne.n	80017f6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017fc:	f023 0201 	bic.w	r2, r3, #1
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e006      	b.n	8001818 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
  }
}
 8001818:	4618      	mov	r0, r3
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	40006400 	.word	0x40006400

08001828 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d12e      	bne.n	800189a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2202      	movs	r2, #2
 8001840:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0201 	bic.w	r2, r2, #1
 8001852:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001854:	f7ff fddc 	bl	8001410 <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800185a:	e012      	b.n	8001882 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800185c:	f7ff fdd8 	bl	8001410 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b0a      	cmp	r3, #10
 8001868:	d90b      	bls.n	8001882 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2205      	movs	r2, #5
 800187a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e012      	b.n	80018a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1e5      	bne.n	800185c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e006      	b.n	80018a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
  }
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d133      	bne.n	800192c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018d4:	f7ff fd9c 	bl	8001410 <HAL_GetTick>
 80018d8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018da:	e012      	b.n	8001902 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018dc:	f7ff fd98 	bl	8001410 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b0a      	cmp	r3, #10
 80018e8:	d90b      	bls.n	8001902 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2205      	movs	r2, #5
 80018fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e01b      	b.n	800193a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0e5      	beq.n	80018dc <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0202 	bic.w	r2, r2, #2
 800191e:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	e006      	b.n	800193a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
  }
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001942:	b480      	push	{r7}
 8001944:	b089      	sub	sp, #36	; 0x24
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001956:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001960:	7ffb      	ldrb	r3, [r7, #31]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d003      	beq.n	800196e <HAL_CAN_AddTxMessage+0x2c>
 8001966:	7ffb      	ldrb	r3, [r7, #31]
 8001968:	2b02      	cmp	r3, #2
 800196a:	f040 80b8 	bne.w	8001ade <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10a      	bne.n	800198e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800197e:	2b00      	cmp	r3, #0
 8001980:	d105      	bne.n	800198e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80a0 	beq.w	8001ace <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	0e1b      	lsrs	r3, r3, #24
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d907      	bls.n	80019ae <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e09e      	b.n	8001aec <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019ae:	2201      	movs	r2, #1
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10d      	bne.n	80019dc <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019ca:	68f9      	ldr	r1, [r7, #12]
 80019cc:	6809      	ldr	r1, [r1, #0]
 80019ce:	431a      	orrs	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3318      	adds	r3, #24
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	440b      	add	r3, r1
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	e00f      	b.n	80019fc <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019e6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80019f0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3318      	adds	r3, #24
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	440b      	add	r3, r1
 80019fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6819      	ldr	r1, [r3, #0]
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	3318      	adds	r3, #24
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	440b      	add	r3, r1
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	7d1b      	ldrb	r3, [r3, #20]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d111      	bne.n	8001a3c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3318      	adds	r3, #24
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	4413      	add	r3, r2
 8001a24:	3304      	adds	r3, #4
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	6811      	ldr	r1, [r2, #0]
 8001a2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3318      	adds	r3, #24
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	440b      	add	r3, r1
 8001a38:	3304      	adds	r3, #4
 8001a3a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3307      	adds	r3, #7
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	061a      	lsls	r2, r3, #24
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3306      	adds	r3, #6
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	041b      	lsls	r3, r3, #16
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3305      	adds	r3, #5
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	4313      	orrs	r3, r2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	3204      	adds	r2, #4
 8001a5c:	7812      	ldrb	r2, [r2, #0]
 8001a5e:	4610      	mov	r0, r2
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	6811      	ldr	r1, [r2, #0]
 8001a64:	ea43 0200 	orr.w	r2, r3, r0
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	440b      	add	r3, r1
 8001a6e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a72:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3303      	adds	r3, #3
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	061a      	lsls	r2, r3, #24
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3302      	adds	r3, #2
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	041b      	lsls	r3, r3, #16
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	7812      	ldrb	r2, [r2, #0]
 8001a94:	4610      	mov	r0, r2
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	6811      	ldr	r1, [r2, #0]
 8001a9a:	ea43 0200 	orr.w	r2, r3, r0
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001aa8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3318      	adds	r3, #24
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	4413      	add	r3, r2
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	6811      	ldr	r1, [r2, #0]
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	3318      	adds	r3, #24
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	440b      	add	r3, r1
 8001ac8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e00e      	b.n	8001aec <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e006      	b.n	8001aec <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
  }
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3724      	adds	r7, #36	; 0x24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b0a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b0c:	7afb      	ldrb	r3, [r7, #11]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d002      	beq.n	8001b18 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001b12:	7afb      	ldrb	r3, [r7, #11]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d11d      	bne.n	8001b54 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	3301      	adds	r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001b54:	68fb      	ldr	r3, [r7, #12]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b62:	b480      	push	{r7}
 8001b64:	b087      	sub	sp, #28
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b76:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d003      	beq.n	8001b86 <HAL_CAN_GetRxMessage+0x24>
 8001b7e:	7dfb      	ldrb	r3, [r7, #23]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	f040 80f3 	bne.w	8001d6c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10e      	bne.n	8001baa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d116      	bne.n	8001bc8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e0e7      	b.n	8001d7a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d107      	bne.n	8001bc8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0d8      	b.n	8001d7a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	331b      	adds	r3, #27
 8001bd0:	011b      	lsls	r3, r3, #4
 8001bd2:	4413      	add	r3, r2
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0204 	and.w	r2, r3, #4
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10c      	bne.n	8001c00 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	331b      	adds	r3, #27
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	4413      	add	r3, r2
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	0d5b      	lsrs	r3, r3, #21
 8001bf6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	e00b      	b.n	8001c18 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	331b      	adds	r3, #27
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	4413      	add	r3, r2
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	08db      	lsrs	r3, r3, #3
 8001c10:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	331b      	adds	r3, #27
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	4413      	add	r3, r2
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0202 	and.w	r2, r3, #2
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	331b      	adds	r3, #27
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	4413      	add	r3, r2
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 020f 	and.w	r2, r3, #15
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	331b      	adds	r3, #27
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	4413      	add	r3, r2
 8001c52:	3304      	adds	r3, #4
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	331b      	adds	r3, #27
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	4413      	add	r3, r2
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	0c1b      	lsrs	r3, r3, #16
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	011b      	lsls	r3, r3, #4
 8001c7e:	4413      	add	r3, r2
 8001c80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	0a1a      	lsrs	r2, r3, #8
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	4413      	add	r3, r2
 8001cb0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	0c1a      	lsrs	r2, r3, #16
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	3302      	adds	r3, #2
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0e1a      	lsrs	r2, r3, #24
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	3303      	adds	r3, #3
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	3304      	adds	r3, #4
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	0a1a      	lsrs	r2, r3, #8
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	3305      	adds	r3, #5
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	0c1a      	lsrs	r2, r3, #16
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3306      	adds	r3, #6
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	0e1a      	lsrs	r2, r3, #24
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	3307      	adds	r3, #7
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d108      	bne.n	8001d58 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0220 	orr.w	r2, r2, #32
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	e007      	b.n	8001d68 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0220 	orr.w	r2, r2, #32
 8001d66:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	e006      	b.n	8001d7a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
  }
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	371c      	adds	r7, #28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d96:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d002      	beq.n	8001da4 <HAL_CAN_ActivateNotification+0x1e>
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d109      	bne.n	8001db8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6959      	ldr	r1, [r3, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	e006      	b.n	8001dc6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
  }
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b08a      	sub	sp, #40	; 0x28
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d07c      	beq.n	8001f12 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d023      	beq.n	8001e6a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2201      	movs	r2, #1
 8001e28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff f859 	bl	8000eec <HAL_CAN_TxMailbox0CompleteCallback>
 8001e3a:	e016      	b.n	8001e6a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d004      	beq.n	8001e50 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4e:	e00c      	b.n	8001e6a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d004      	beq.n	8001e64 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
 8001e62:	e002      	b.n	8001e6a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f97f 	bl	8002168 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d024      	beq.n	8001ebe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f959 	bl	8002140 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e8e:	e016      	b.n	8001ebe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d004      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea2:	e00c      	b.n	8001ebe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d004      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb6:	e002      	b.n	8001ebe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f95f 	bl	800217c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d024      	beq.n	8001f12 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ed0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f939 	bl	8002154 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ee2:	e016      	b.n	8001f12 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d004      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef6:	e00c      	b.n	8001f12 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d004      	beq.n	8001f0c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0a:	e002      	b.n	8001f12 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f93f 	bl	8002190 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00c      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2210      	movs	r2, #16
 8001f34:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00b      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d006      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2208      	movs	r2, #8
 8001f50:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f926 	bl	80021a4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7fe ffcd 	bl	8000f10 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00c      	beq.n	8001f9a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d007      	beq.n	8001f9a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2210      	movs	r2, #16
 8001f98:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00b      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d006      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2208      	movs	r2, #8
 8001fb4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f908 	bl	80021cc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d009      	beq.n	8001fda <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f8ef 	bl	80021b8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00b      	beq.n	8001ffc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0310 	and.w	r3, r3, #16
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d006      	beq.n	8001ffc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2210      	movs	r2, #16
 8001ff4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8f2 	bl	80021e0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00b      	beq.n	800201e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d006      	beq.n	800201e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2208      	movs	r2, #8
 8002016:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f8eb 	bl	80021f4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d07b      	beq.n	8002120 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	2b00      	cmp	r3, #0
 8002030:	d072      	beq.n	8002118 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	f043 0304 	orr.w	r3, r3, #4
 8002084:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800208c:	2b00      	cmp	r3, #0
 800208e:	d043      	beq.n	8002118 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002096:	2b00      	cmp	r3, #0
 8002098:	d03e      	beq.n	8002118 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020a0:	2b60      	cmp	r3, #96	; 0x60
 80020a2:	d02b      	beq.n	80020fc <HAL_CAN_IRQHandler+0x32a>
 80020a4:	2b60      	cmp	r3, #96	; 0x60
 80020a6:	d82e      	bhi.n	8002106 <HAL_CAN_IRQHandler+0x334>
 80020a8:	2b50      	cmp	r3, #80	; 0x50
 80020aa:	d022      	beq.n	80020f2 <HAL_CAN_IRQHandler+0x320>
 80020ac:	2b50      	cmp	r3, #80	; 0x50
 80020ae:	d82a      	bhi.n	8002106 <HAL_CAN_IRQHandler+0x334>
 80020b0:	2b40      	cmp	r3, #64	; 0x40
 80020b2:	d019      	beq.n	80020e8 <HAL_CAN_IRQHandler+0x316>
 80020b4:	2b40      	cmp	r3, #64	; 0x40
 80020b6:	d826      	bhi.n	8002106 <HAL_CAN_IRQHandler+0x334>
 80020b8:	2b30      	cmp	r3, #48	; 0x30
 80020ba:	d010      	beq.n	80020de <HAL_CAN_IRQHandler+0x30c>
 80020bc:	2b30      	cmp	r3, #48	; 0x30
 80020be:	d822      	bhi.n	8002106 <HAL_CAN_IRQHandler+0x334>
 80020c0:	2b10      	cmp	r3, #16
 80020c2:	d002      	beq.n	80020ca <HAL_CAN_IRQHandler+0x2f8>
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d005      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80020c8:	e01d      	b.n	8002106 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	f043 0308 	orr.w	r3, r3, #8
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020d2:	e019      	b.n	8002108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	f043 0310 	orr.w	r3, r3, #16
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020dc:	e014      	b.n	8002108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	f043 0320 	orr.w	r3, r3, #32
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020e6:	e00f      	b.n	8002108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020f0:	e00a      	b.n	8002108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020fa:	e005      	b.n	8002108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002104:	e000      	b.n	8002108 <HAL_CAN_IRQHandler+0x336>
            break;
 8002106:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002116:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2204      	movs	r2, #4
 800211e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	2b00      	cmp	r3, #0
 8002124:	d008      	beq.n	8002138 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f868 	bl	8002208 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002138:	bf00      	nop
 800213a:	3728      	adds	r7, #40	; 0x28
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <__NVIC_SetPriorityGrouping+0x44>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002238:	4013      	ands	r3, r2
 800223a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800224c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800224e:	4a04      	ldr	r2, [pc, #16]	; (8002260 <__NVIC_SetPriorityGrouping+0x44>)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	60d3      	str	r3, [r2, #12]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <__NVIC_GetPriorityGrouping+0x18>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	0a1b      	lsrs	r3, r3, #8
 800226e:	f003 0307 	and.w	r3, r3, #7
}
 8002272:	4618      	mov	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	2b00      	cmp	r3, #0
 8002290:	db0b      	blt.n	80022aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	f003 021f 	and.w	r2, r3, #31
 8002298:	4907      	ldr	r1, [pc, #28]	; (80022b8 <__NVIC_EnableIRQ+0x38>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	2001      	movs	r0, #1
 80022a2:	fa00 f202 	lsl.w	r2, r0, r2
 80022a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000e100 	.word	0xe000e100

080022bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	6039      	str	r1, [r7, #0]
 80022c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	db0a      	blt.n	80022e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	490c      	ldr	r1, [pc, #48]	; (8002308 <__NVIC_SetPriority+0x4c>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	0112      	lsls	r2, r2, #4
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	440b      	add	r3, r1
 80022e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e4:	e00a      	b.n	80022fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4908      	ldr	r1, [pc, #32]	; (800230c <__NVIC_SetPriority+0x50>)
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	3b04      	subs	r3, #4
 80022f4:	0112      	lsls	r2, r2, #4
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	440b      	add	r3, r1
 80022fa:	761a      	strb	r2, [r3, #24]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000e100 	.word	0xe000e100
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f1c3 0307 	rsb	r3, r3, #7
 800232a:	2b04      	cmp	r3, #4
 800232c:	bf28      	it	cs
 800232e:	2304      	movcs	r3, #4
 8002330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3304      	adds	r3, #4
 8002336:	2b06      	cmp	r3, #6
 8002338:	d902      	bls.n	8002340 <NVIC_EncodePriority+0x30>
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3b03      	subs	r3, #3
 800233e:	e000      	b.n	8002342 <NVIC_EncodePriority+0x32>
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43da      	mvns	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	401a      	ands	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002358:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	43d9      	mvns	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	4313      	orrs	r3, r2
         );
}
 800236a:	4618      	mov	r0, r3
 800236c:	3724      	adds	r7, #36	; 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002388:	d301      	bcc.n	800238e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800238a:	2301      	movs	r3, #1
 800238c:	e00f      	b.n	80023ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238e:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <SysTick_Config+0x40>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002396:	210f      	movs	r1, #15
 8002398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800239c:	f7ff ff8e 	bl	80022bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <SysTick_Config+0x40>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a6:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <SysTick_Config+0x40>)
 80023a8:	2207      	movs	r2, #7
 80023aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	e000e010 	.word	0xe000e010

080023bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff ff29 	bl	800221c <__NVIC_SetPriorityGrouping>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b086      	sub	sp, #24
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e4:	f7ff ff3e 	bl	8002264 <__NVIC_GetPriorityGrouping>
 80023e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	6978      	ldr	r0, [r7, #20]
 80023f0:	f7ff ff8e 	bl	8002310 <NVIC_EncodePriority>
 80023f4:	4602      	mov	r2, r0
 80023f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff5d 	bl	80022bc <__NVIC_SetPriority>
}
 8002402:	bf00      	nop
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff31 	bl	8002280 <__NVIC_EnableIRQ>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ffa2 	bl	8002378 <SysTick_Config>
 8002434:	4603      	mov	r3, r0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800244c:	f7fe ffe0 	bl	8001410 <HAL_GetTick>
 8002450:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d008      	beq.n	8002470 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2280      	movs	r2, #128	; 0x80
 8002462:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e052      	b.n	8002516 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0216 	bic.w	r2, r2, #22
 800247e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800248e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d103      	bne.n	80024a0 <HAL_DMA_Abort+0x62>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249c:	2b00      	cmp	r3, #0
 800249e:	d007      	beq.n	80024b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0208 	bic.w	r2, r2, #8
 80024ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c0:	e013      	b.n	80024ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024c2:	f7fe ffa5 	bl	8001410 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d90c      	bls.n	80024ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2203      	movs	r2, #3
 80024da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e015      	b.n	8002516 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1e4      	bne.n	80024c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fc:	223f      	movs	r2, #63	; 0x3f
 80024fe:	409a      	lsls	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d004      	beq.n	800253c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e00c      	b.n	8002556 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2205      	movs	r2, #5
 8002540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002564:	b480      	push	{r7}
 8002566:	b089      	sub	sp, #36	; 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	e165      	b.n	800284c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002580:	2201      	movs	r2, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	429a      	cmp	r2, r3
 800259a:	f040 8154 	bne.w	8002846 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d005      	beq.n	80025b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d130      	bne.n	8002618 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	2203      	movs	r2, #3
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ec:	2201      	movs	r2, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 0201 	and.w	r2, r3, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b03      	cmp	r3, #3
 8002622:	d017      	beq.n	8002654 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d123      	bne.n	80026a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	08da      	lsrs	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3208      	adds	r2, #8
 8002668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	220f      	movs	r2, #15
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	08da      	lsrs	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3208      	adds	r2, #8
 80026a2:	69b9      	ldr	r1, [r7, #24]
 80026a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2203      	movs	r2, #3
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0203 	and.w	r2, r3, #3
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80ae 	beq.w	8002846 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b5d      	ldr	r3, [pc, #372]	; (8002864 <HAL_GPIO_Init+0x300>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	4a5c      	ldr	r2, [pc, #368]	; (8002864 <HAL_GPIO_Init+0x300>)
 80026f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f8:	6453      	str	r3, [r2, #68]	; 0x44
 80026fa:	4b5a      	ldr	r3, [pc, #360]	; (8002864 <HAL_GPIO_Init+0x300>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002706:	4a58      	ldr	r2, [pc, #352]	; (8002868 <HAL_GPIO_Init+0x304>)
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	089b      	lsrs	r3, r3, #2
 800270c:	3302      	adds	r3, #2
 800270e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	220f      	movs	r2, #15
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4f      	ldr	r2, [pc, #316]	; (800286c <HAL_GPIO_Init+0x308>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d025      	beq.n	800277e <HAL_GPIO_Init+0x21a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4e      	ldr	r2, [pc, #312]	; (8002870 <HAL_GPIO_Init+0x30c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01f      	beq.n	800277a <HAL_GPIO_Init+0x216>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4d      	ldr	r2, [pc, #308]	; (8002874 <HAL_GPIO_Init+0x310>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d019      	beq.n	8002776 <HAL_GPIO_Init+0x212>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4c      	ldr	r2, [pc, #304]	; (8002878 <HAL_GPIO_Init+0x314>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_GPIO_Init+0x20e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4b      	ldr	r2, [pc, #300]	; (800287c <HAL_GPIO_Init+0x318>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00d      	beq.n	800276e <HAL_GPIO_Init+0x20a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4a      	ldr	r2, [pc, #296]	; (8002880 <HAL_GPIO_Init+0x31c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <HAL_GPIO_Init+0x206>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a49      	ldr	r2, [pc, #292]	; (8002884 <HAL_GPIO_Init+0x320>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_GPIO_Init+0x202>
 8002762:	2306      	movs	r3, #6
 8002764:	e00c      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 8002766:	2307      	movs	r3, #7
 8002768:	e00a      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 800276a:	2305      	movs	r3, #5
 800276c:	e008      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 800276e:	2304      	movs	r3, #4
 8002770:	e006      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 8002772:	2303      	movs	r3, #3
 8002774:	e004      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 8002776:	2302      	movs	r3, #2
 8002778:	e002      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 800277e:	2300      	movs	r3, #0
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	f002 0203 	and.w	r2, r2, #3
 8002786:	0092      	lsls	r2, r2, #2
 8002788:	4093      	lsls	r3, r2
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002790:	4935      	ldr	r1, [pc, #212]	; (8002868 <HAL_GPIO_Init+0x304>)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800279e:	4b3a      	ldr	r3, [pc, #232]	; (8002888 <HAL_GPIO_Init+0x324>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027c2:	4a31      	ldr	r2, [pc, #196]	; (8002888 <HAL_GPIO_Init+0x324>)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c8:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <HAL_GPIO_Init+0x324>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027ec:	4a26      	ldr	r2, [pc, #152]	; (8002888 <HAL_GPIO_Init+0x324>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027f2:	4b25      	ldr	r3, [pc, #148]	; (8002888 <HAL_GPIO_Init+0x324>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002816:	4a1c      	ldr	r2, [pc, #112]	; (8002888 <HAL_GPIO_Init+0x324>)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800281c:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <HAL_GPIO_Init+0x324>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002840:	4a11      	ldr	r2, [pc, #68]	; (8002888 <HAL_GPIO_Init+0x324>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3301      	adds	r3, #1
 800284a:	61fb      	str	r3, [r7, #28]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b0f      	cmp	r3, #15
 8002850:	f67f ae96 	bls.w	8002580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3724      	adds	r7, #36	; 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40013800 	.word	0x40013800
 800286c:	40020000 	.word	0x40020000
 8002870:	40020400 	.word	0x40020400
 8002874:	40020800 	.word	0x40020800
 8002878:	40020c00 	.word	0x40020c00
 800287c:	40021000 	.word	0x40021000
 8002880:	40021400 	.word	0x40021400
 8002884:	40021800 	.word	0x40021800
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
 8002898:	4613      	mov	r3, r2
 800289a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800289c:	787b      	ldrb	r3, [r7, #1]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028a8:	e003      	b.n	80028b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	041a      	lsls	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	619a      	str	r2, [r3, #24]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0cc      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d4:	4b68      	ldr	r3, [pc, #416]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d90c      	bls.n	80028fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b65      	ldr	r3, [pc, #404]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b63      	ldr	r3, [pc, #396]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0b8      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d020      	beq.n	800294a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002914:	4b59      	ldr	r3, [pc, #356]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4a58      	ldr	r2, [pc, #352]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800291e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800292c:	4b53      	ldr	r3, [pc, #332]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4a52      	ldr	r2, [pc, #328]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002938:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	494d      	ldr	r1, [pc, #308]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d044      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d119      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e07f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d003      	beq.n	800297e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297a:	2b03      	cmp	r3, #3
 800297c:	d107      	bne.n	800298e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297e:	4b3f      	ldr	r3, [pc, #252]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e06f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e067      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299e:	4b37      	ldr	r3, [pc, #220]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f023 0203 	bic.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4934      	ldr	r1, [pc, #208]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b0:	f7fe fd2e 	bl	8001410 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b8:	f7fe fd2a 	bl	8001410 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e04f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 020c 	and.w	r2, r3, #12
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	429a      	cmp	r2, r3
 80029de:	d1eb      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e0:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d20c      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e032      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4916      	ldr	r1, [pc, #88]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	490e      	ldr	r1, [pc, #56]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a46:	f000 f855 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	490a      	ldr	r1, [pc, #40]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 8002a58:	5ccb      	ldrb	r3, [r1, r3]
 8002a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5e:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x1c8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fc8e 	bl	8001388 <HAL_InitTick>

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023c00 	.word	0x40023c00
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	08005808 	.word	0x08005808
 8002a84:	20000000 	.word	0x20000000
 8002a88:	20000004 	.word	0x20000004

08002a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000000 	.word	0x20000000

08002aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002aa8:	f7ff fff0 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002aac:	4602      	mov	r2, r0
 8002aae:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	0a9b      	lsrs	r3, r3, #10
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	4903      	ldr	r1, [pc, #12]	; (8002ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aba:	5ccb      	ldrb	r3, [r1, r3]
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	08005818 	.word	0x08005818

08002acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ad0:	f7ff ffdc 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	0b5b      	lsrs	r3, r3, #13
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	4903      	ldr	r1, [pc, #12]	; (8002af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ae2:	5ccb      	ldrb	r3, [r1, r3]
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40023800 	.word	0x40023800
 8002af0:	08005818 	.word	0x08005818

08002af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af8:	b0ae      	sub	sp, #184	; 0xb8
 8002afa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b1a:	4bcb      	ldr	r3, [pc, #812]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b0c      	cmp	r3, #12
 8002b24:	f200 8206 	bhi.w	8002f34 <HAL_RCC_GetSysClockFreq+0x440>
 8002b28:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2e:	bf00      	nop
 8002b30:	08002b65 	.word	0x08002b65
 8002b34:	08002f35 	.word	0x08002f35
 8002b38:	08002f35 	.word	0x08002f35
 8002b3c:	08002f35 	.word	0x08002f35
 8002b40:	08002b6d 	.word	0x08002b6d
 8002b44:	08002f35 	.word	0x08002f35
 8002b48:	08002f35 	.word	0x08002f35
 8002b4c:	08002f35 	.word	0x08002f35
 8002b50:	08002b75 	.word	0x08002b75
 8002b54:	08002f35 	.word	0x08002f35
 8002b58:	08002f35 	.word	0x08002f35
 8002b5c:	08002f35 	.word	0x08002f35
 8002b60:	08002d65 	.word	0x08002d65
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b64:	4bb9      	ldr	r3, [pc, #740]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8002b66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002b6a:	e1e7      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b6c:	4bb8      	ldr	r3, [pc, #736]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b72:	e1e3      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b74:	4bb4      	ldr	r3, [pc, #720]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b80:	4bb1      	ldr	r3, [pc, #708]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d071      	beq.n	8002c70 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b8c:	4bae      	ldr	r3, [pc, #696]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	099b      	lsrs	r3, r3, #6
 8002b92:	2200      	movs	r2, #0
 8002b94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b98:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002bae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bb2:	4622      	mov	r2, r4
 8002bb4:	462b      	mov	r3, r5
 8002bb6:	f04f 0000 	mov.w	r0, #0
 8002bba:	f04f 0100 	mov.w	r1, #0
 8002bbe:	0159      	lsls	r1, r3, #5
 8002bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc4:	0150      	lsls	r0, r2, #5
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4621      	mov	r1, r4
 8002bcc:	1a51      	subs	r1, r2, r1
 8002bce:	6439      	str	r1, [r7, #64]	; 0x40
 8002bd0:	4629      	mov	r1, r5
 8002bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002be4:	4649      	mov	r1, r9
 8002be6:	018b      	lsls	r3, r1, #6
 8002be8:	4641      	mov	r1, r8
 8002bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bee:	4641      	mov	r1, r8
 8002bf0:	018a      	lsls	r2, r1, #6
 8002bf2:	4641      	mov	r1, r8
 8002bf4:	1a51      	subs	r1, r2, r1
 8002bf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bf8:	4649      	mov	r1, r9
 8002bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8002bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002c0c:	4649      	mov	r1, r9
 8002c0e:	00cb      	lsls	r3, r1, #3
 8002c10:	4641      	mov	r1, r8
 8002c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c16:	4641      	mov	r1, r8
 8002c18:	00ca      	lsls	r2, r1, #3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4622      	mov	r2, r4
 8002c22:	189b      	adds	r3, r3, r2
 8002c24:	633b      	str	r3, [r7, #48]	; 0x30
 8002c26:	462b      	mov	r3, r5
 8002c28:	460a      	mov	r2, r1
 8002c2a:	eb42 0303 	adc.w	r3, r2, r3
 8002c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	024b      	lsls	r3, r1, #9
 8002c40:	4621      	mov	r1, r4
 8002c42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c46:	4621      	mov	r1, r4
 8002c48:	024a      	lsls	r2, r1, #9
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c52:	2200      	movs	r2, #0
 8002c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c5c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002c60:	f7fd fb26 	bl	80002b0 <__aeabi_uldivmod>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4613      	mov	r3, r2
 8002c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c6e:	e067      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c70:	4b75      	ldr	r3, [pc, #468]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	099b      	lsrs	r3, r3, #6
 8002c76:	2200      	movs	r2, #0
 8002c78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c7c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c88:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c8e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002c92:	4622      	mov	r2, r4
 8002c94:	462b      	mov	r3, r5
 8002c96:	f04f 0000 	mov.w	r0, #0
 8002c9a:	f04f 0100 	mov.w	r1, #0
 8002c9e:	0159      	lsls	r1, r3, #5
 8002ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca4:	0150      	lsls	r0, r2, #5
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4621      	mov	r1, r4
 8002cac:	1a51      	subs	r1, r2, r1
 8002cae:	62b9      	str	r1, [r7, #40]	; 0x28
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002cc4:	4649      	mov	r1, r9
 8002cc6:	018b      	lsls	r3, r1, #6
 8002cc8:	4641      	mov	r1, r8
 8002cca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cce:	4641      	mov	r1, r8
 8002cd0:	018a      	lsls	r2, r1, #6
 8002cd2:	4641      	mov	r1, r8
 8002cd4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cd8:	4649      	mov	r1, r9
 8002cda:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cf2:	4692      	mov	sl, r2
 8002cf4:	469b      	mov	fp, r3
 8002cf6:	4623      	mov	r3, r4
 8002cf8:	eb1a 0303 	adds.w	r3, sl, r3
 8002cfc:	623b      	str	r3, [r7, #32]
 8002cfe:	462b      	mov	r3, r5
 8002d00:	eb4b 0303 	adc.w	r3, fp, r3
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d12:	4629      	mov	r1, r5
 8002d14:	028b      	lsls	r3, r1, #10
 8002d16:	4621      	mov	r1, r4
 8002d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	028a      	lsls	r2, r1, #10
 8002d20:	4610      	mov	r0, r2
 8002d22:	4619      	mov	r1, r3
 8002d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d28:	2200      	movs	r2, #0
 8002d2a:	673b      	str	r3, [r7, #112]	; 0x70
 8002d2c:	677a      	str	r2, [r7, #116]	; 0x74
 8002d2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002d32:	f7fd fabd 	bl	80002b0 <__aeabi_uldivmod>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d40:	4b41      	ldr	r3, [pc, #260]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	0c1b      	lsrs	r3, r3, #16
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002d52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d62:	e0eb      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d64:	4b38      	ldr	r3, [pc, #224]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d70:	4b35      	ldr	r3, [pc, #212]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d06b      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7c:	4b32      	ldr	r3, [pc, #200]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	2200      	movs	r2, #0
 8002d84:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d8e:	663b      	str	r3, [r7, #96]	; 0x60
 8002d90:	2300      	movs	r3, #0
 8002d92:	667b      	str	r3, [r7, #100]	; 0x64
 8002d94:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002d98:	4622      	mov	r2, r4
 8002d9a:	462b      	mov	r3, r5
 8002d9c:	f04f 0000 	mov.w	r0, #0
 8002da0:	f04f 0100 	mov.w	r1, #0
 8002da4:	0159      	lsls	r1, r3, #5
 8002da6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002daa:	0150      	lsls	r0, r2, #5
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4621      	mov	r1, r4
 8002db2:	1a51      	subs	r1, r2, r1
 8002db4:	61b9      	str	r1, [r7, #24]
 8002db6:	4629      	mov	r1, r5
 8002db8:	eb63 0301 	sbc.w	r3, r3, r1
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002dca:	4659      	mov	r1, fp
 8002dcc:	018b      	lsls	r3, r1, #6
 8002dce:	4651      	mov	r1, sl
 8002dd0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dd4:	4651      	mov	r1, sl
 8002dd6:	018a      	lsls	r2, r1, #6
 8002dd8:	4651      	mov	r1, sl
 8002dda:	ebb2 0801 	subs.w	r8, r2, r1
 8002dde:	4659      	mov	r1, fp
 8002de0:	eb63 0901 	sbc.w	r9, r3, r1
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002df0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002df4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002df8:	4690      	mov	r8, r2
 8002dfa:	4699      	mov	r9, r3
 8002dfc:	4623      	mov	r3, r4
 8002dfe:	eb18 0303 	adds.w	r3, r8, r3
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	462b      	mov	r3, r5
 8002e06:	eb49 0303 	adc.w	r3, r9, r3
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e18:	4629      	mov	r1, r5
 8002e1a:	024b      	lsls	r3, r1, #9
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e22:	4621      	mov	r1, r4
 8002e24:	024a      	lsls	r2, r1, #9
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e2e:	2200      	movs	r2, #0
 8002e30:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e32:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002e34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e38:	f7fd fa3a 	bl	80002b0 <__aeabi_uldivmod>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4613      	mov	r3, r2
 8002e42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e46:	e065      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x420>
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	00f42400 	.word	0x00f42400
 8002e50:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e54:	4b3d      	ldr	r3, [pc, #244]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x458>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	099b      	lsrs	r3, r3, #6
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	4611      	mov	r1, r2
 8002e60:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e64:	653b      	str	r3, [r7, #80]	; 0x50
 8002e66:	2300      	movs	r3, #0
 8002e68:	657b      	str	r3, [r7, #84]	; 0x54
 8002e6a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002e6e:	4642      	mov	r2, r8
 8002e70:	464b      	mov	r3, r9
 8002e72:	f04f 0000 	mov.w	r0, #0
 8002e76:	f04f 0100 	mov.w	r1, #0
 8002e7a:	0159      	lsls	r1, r3, #5
 8002e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e80:	0150      	lsls	r0, r2, #5
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4641      	mov	r1, r8
 8002e88:	1a51      	subs	r1, r2, r1
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	4649      	mov	r1, r9
 8002e8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ea0:	4659      	mov	r1, fp
 8002ea2:	018b      	lsls	r3, r1, #6
 8002ea4:	4651      	mov	r1, sl
 8002ea6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eaa:	4651      	mov	r1, sl
 8002eac:	018a      	lsls	r2, r1, #6
 8002eae:	4651      	mov	r1, sl
 8002eb0:	1a54      	subs	r4, r2, r1
 8002eb2:	4659      	mov	r1, fp
 8002eb4:	eb63 0501 	sbc.w	r5, r3, r1
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	00eb      	lsls	r3, r5, #3
 8002ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ec6:	00e2      	lsls	r2, r4, #3
 8002ec8:	4614      	mov	r4, r2
 8002eca:	461d      	mov	r5, r3
 8002ecc:	4643      	mov	r3, r8
 8002ece:	18e3      	adds	r3, r4, r3
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	464b      	mov	r3, r9
 8002ed4:	eb45 0303 	adc.w	r3, r5, r3
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	028b      	lsls	r3, r1, #10
 8002eea:	4621      	mov	r1, r4
 8002eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	028a      	lsls	r2, r1, #10
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002efc:	2200      	movs	r2, #0
 8002efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f00:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002f02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f06:	f7fd f9d3 	bl	80002b0 <__aeabi_uldivmod>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4613      	mov	r3, r2
 8002f10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f14:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x458>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	0f1b      	lsrs	r3, r3, #28
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002f22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f32:	e003      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	37b8      	adds	r7, #184	; 0xb8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	00f42400 	.word	0x00f42400

08002f54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e28d      	b.n	8003482 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8083 	beq.w	800307a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f74:	4b94      	ldr	r3, [pc, #592]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d019      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f80:	4b91      	ldr	r3, [pc, #580]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d106      	bne.n	8002f9a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f8c:	4b8e      	ldr	r3, [pc, #568]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f98:	d00c      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f9a:	4b8b      	ldr	r3, [pc, #556]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	d112      	bne.n	8002fcc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fa6:	4b88      	ldr	r3, [pc, #544]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb2:	d10b      	bne.n	8002fcc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb4:	4b84      	ldr	r3, [pc, #528]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d05b      	beq.n	8003078 <HAL_RCC_OscConfig+0x124>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d157      	bne.n	8003078 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e25a      	b.n	8003482 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd4:	d106      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x90>
 8002fd6:	4b7c      	ldr	r3, [pc, #496]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a7b      	ldr	r2, [pc, #492]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8002fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	e01d      	b.n	8003020 <HAL_RCC_OscConfig+0xcc>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0xb4>
 8002fee:	4b76      	ldr	r3, [pc, #472]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a75      	ldr	r2, [pc, #468]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8002ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	4b73      	ldr	r3, [pc, #460]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a72      	ldr	r2, [pc, #456]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8003000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e00b      	b.n	8003020 <HAL_RCC_OscConfig+0xcc>
 8003008:	4b6f      	ldr	r3, [pc, #444]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a6e      	ldr	r2, [pc, #440]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 800300e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	4b6c      	ldr	r3, [pc, #432]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a6b      	ldr	r2, [pc, #428]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 800301a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800301e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d013      	beq.n	8003050 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe f9f2 	bl	8001410 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003030:	f7fe f9ee 	bl	8001410 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	; 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e21f      	b.n	8003482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	4b61      	ldr	r3, [pc, #388]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0xdc>
 800304e:	e014      	b.n	800307a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe f9de 	bl	8001410 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003058:	f7fe f9da 	bl	8001410 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b64      	cmp	r3, #100	; 0x64
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e20b      	b.n	8003482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306a:	4b57      	ldr	r3, [pc, #348]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x104>
 8003076:	e000      	b.n	800307a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d06f      	beq.n	8003166 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003086:	4b50      	ldr	r3, [pc, #320]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b00      	cmp	r3, #0
 8003090:	d017      	beq.n	80030c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003092:	4b4d      	ldr	r3, [pc, #308]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800309a:	2b08      	cmp	r3, #8
 800309c:	d105      	bne.n	80030aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800309e:	4b4a      	ldr	r3, [pc, #296]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00b      	beq.n	80030c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030aa:	4b47      	ldr	r3, [pc, #284]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	d11c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030b6:	4b44      	ldr	r3, [pc, #272]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d116      	bne.n	80030f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c2:	4b41      	ldr	r3, [pc, #260]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_RCC_OscConfig+0x186>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d001      	beq.n	80030da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e1d3      	b.n	8003482 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030da:	4b3b      	ldr	r3, [pc, #236]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4937      	ldr	r1, [pc, #220]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ee:	e03a      	b.n	8003166 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d020      	beq.n	800313a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f8:	4b34      	ldr	r3, [pc, #208]	; (80031cc <HAL_RCC_OscConfig+0x278>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fe:	f7fe f987 	bl	8001410 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003106:	f7fe f983 	bl	8001410 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e1b4      	b.n	8003482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003118:	4b2b      	ldr	r3, [pc, #172]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003124:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4925      	ldr	r1, [pc, #148]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8003134:	4313      	orrs	r3, r2
 8003136:	600b      	str	r3, [r1, #0]
 8003138:	e015      	b.n	8003166 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313a:	4b24      	ldr	r3, [pc, #144]	; (80031cc <HAL_RCC_OscConfig+0x278>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe f966 	bl	8001410 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003148:	f7fe f962 	bl	8001410 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e193      	b.n	8003482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d036      	beq.n	80031e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d016      	beq.n	80031a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317a:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <HAL_RCC_OscConfig+0x27c>)
 800317c:	2201      	movs	r2, #1
 800317e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003180:	f7fe f946 	bl	8001410 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003188:	f7fe f942 	bl	8001410 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e173      	b.n	8003482 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 800319c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0x234>
 80031a6:	e01b      	b.n	80031e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCC_OscConfig+0x27c>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ae:	f7fe f92f 	bl	8001410 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b4:	e00e      	b.n	80031d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b6:	f7fe f92b 	bl	8001410 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d907      	bls.n	80031d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e15c      	b.n	8003482 <HAL_RCC_OscConfig+0x52e>
 80031c8:	40023800 	.word	0x40023800
 80031cc:	42470000 	.word	0x42470000
 80031d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d4:	4b8a      	ldr	r3, [pc, #552]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 80031d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1ea      	bne.n	80031b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8097 	beq.w	800331c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ee:	2300      	movs	r3, #0
 80031f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f2:	4b83      	ldr	r3, [pc, #524]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10f      	bne.n	800321e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	4b7f      	ldr	r3, [pc, #508]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	4a7e      	ldr	r2, [pc, #504]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 8003208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320c:	6413      	str	r3, [r2, #64]	; 0x40
 800320e:	4b7c      	ldr	r3, [pc, #496]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321a:	2301      	movs	r3, #1
 800321c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321e:	4b79      	ldr	r3, [pc, #484]	; (8003404 <HAL_RCC_OscConfig+0x4b0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003226:	2b00      	cmp	r3, #0
 8003228:	d118      	bne.n	800325c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800322a:	4b76      	ldr	r3, [pc, #472]	; (8003404 <HAL_RCC_OscConfig+0x4b0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a75      	ldr	r2, [pc, #468]	; (8003404 <HAL_RCC_OscConfig+0x4b0>)
 8003230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003236:	f7fe f8eb 	bl	8001410 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323e:	f7fe f8e7 	bl	8001410 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e118      	b.n	8003482 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003250:	4b6c      	ldr	r3, [pc, #432]	; (8003404 <HAL_RCC_OscConfig+0x4b0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d106      	bne.n	8003272 <HAL_RCC_OscConfig+0x31e>
 8003264:	4b66      	ldr	r3, [pc, #408]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	4a65      	ldr	r2, [pc, #404]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6713      	str	r3, [r2, #112]	; 0x70
 8003270:	e01c      	b.n	80032ac <HAL_RCC_OscConfig+0x358>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b05      	cmp	r3, #5
 8003278:	d10c      	bne.n	8003294 <HAL_RCC_OscConfig+0x340>
 800327a:	4b61      	ldr	r3, [pc, #388]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 800327c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327e:	4a60      	ldr	r2, [pc, #384]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 8003280:	f043 0304 	orr.w	r3, r3, #4
 8003284:	6713      	str	r3, [r2, #112]	; 0x70
 8003286:	4b5e      	ldr	r3, [pc, #376]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	4a5d      	ldr	r2, [pc, #372]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6713      	str	r3, [r2, #112]	; 0x70
 8003292:	e00b      	b.n	80032ac <HAL_RCC_OscConfig+0x358>
 8003294:	4b5a      	ldr	r3, [pc, #360]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	4a59      	ldr	r2, [pc, #356]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	6713      	str	r3, [r2, #112]	; 0x70
 80032a0:	4b57      	ldr	r3, [pc, #348]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	4a56      	ldr	r2, [pc, #344]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 80032a6:	f023 0304 	bic.w	r3, r3, #4
 80032aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d015      	beq.n	80032e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b4:	f7fe f8ac 	bl	8001410 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032bc:	f7fe f8a8 	bl	8001410 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e0d7      	b.n	8003482 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d2:	4b4b      	ldr	r3, [pc, #300]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0ee      	beq.n	80032bc <HAL_RCC_OscConfig+0x368>
 80032de:	e014      	b.n	800330a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fe f896 	bl	8001410 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fe f892 	bl	8001410 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e0c1      	b.n	8003482 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fe:	4b40      	ldr	r3, [pc, #256]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1ee      	bne.n	80032e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800330a:	7dfb      	ldrb	r3, [r7, #23]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d105      	bne.n	800331c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003310:	4b3b      	ldr	r3, [pc, #236]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	4a3a      	ldr	r2, [pc, #232]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 8003316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80ad 	beq.w	8003480 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003326:	4b36      	ldr	r3, [pc, #216]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b08      	cmp	r3, #8
 8003330:	d060      	beq.n	80033f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d145      	bne.n	80033c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333a:	4b33      	ldr	r3, [pc, #204]	; (8003408 <HAL_RCC_OscConfig+0x4b4>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fe f866 	bl	8001410 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003348:	f7fe f862 	bl	8001410 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e093      	b.n	8003482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335a:	4b29      	ldr	r3, [pc, #164]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69da      	ldr	r2, [r3, #28]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	019b      	lsls	r3, r3, #6
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	085b      	lsrs	r3, r3, #1
 800337e:	3b01      	subs	r3, #1
 8003380:	041b      	lsls	r3, r3, #16
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	061b      	lsls	r3, r3, #24
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	071b      	lsls	r3, r3, #28
 8003392:	491b      	ldr	r1, [pc, #108]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 8003394:	4313      	orrs	r3, r2
 8003396:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003398:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <HAL_RCC_OscConfig+0x4b4>)
 800339a:	2201      	movs	r2, #1
 800339c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339e:	f7fe f837 	bl	8001410 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a6:	f7fe f833 	bl	8001410 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e064      	b.n	8003482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b8:	4b11      	ldr	r3, [pc, #68]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCC_OscConfig+0x452>
 80033c4:	e05c      	b.n	8003480 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c6:	4b10      	ldr	r3, [pc, #64]	; (8003408 <HAL_RCC_OscConfig+0x4b4>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fe f820 	bl	8001410 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d4:	f7fe f81c 	bl	8001410 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e04d      	b.n	8003482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e6:	4b06      	ldr	r3, [pc, #24]	; (8003400 <HAL_RCC_OscConfig+0x4ac>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x480>
 80033f2:	e045      	b.n	8003480 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d107      	bne.n	800340c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e040      	b.n	8003482 <HAL_RCC_OscConfig+0x52e>
 8003400:	40023800 	.word	0x40023800
 8003404:	40007000 	.word	0x40007000
 8003408:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800340c:	4b1f      	ldr	r3, [pc, #124]	; (800348c <HAL_RCC_OscConfig+0x538>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d030      	beq.n	800347c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003424:	429a      	cmp	r2, r3
 8003426:	d129      	bne.n	800347c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003432:	429a      	cmp	r2, r3
 8003434:	d122      	bne.n	800347c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800343c:	4013      	ands	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003442:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003444:	4293      	cmp	r3, r2
 8003446:	d119      	bne.n	800347c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	085b      	lsrs	r3, r3, #1
 8003454:	3b01      	subs	r3, #1
 8003456:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003458:	429a      	cmp	r2, r3
 800345a:	d10f      	bne.n	800347c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003468:	429a      	cmp	r2, r3
 800346a:	d107      	bne.n	800347c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003478:	429a      	cmp	r2, r3
 800347a:	d001      	beq.n	8003480 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800

08003490 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e03f      	b.n	8003522 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fd fde8 	bl	800108c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2224      	movs	r2, #36	; 0x24
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fddf 	bl	8004098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003508:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b08a      	sub	sp, #40	; 0x28
 800352e:	af02      	add	r7, sp, #8
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	4613      	mov	r3, r2
 8003538:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b20      	cmp	r3, #32
 8003548:	d17c      	bne.n	8003644 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <HAL_UART_Transmit+0x2c>
 8003550:	88fb      	ldrh	r3, [r7, #6]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e075      	b.n	8003646 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_UART_Transmit+0x3e>
 8003564:	2302      	movs	r3, #2
 8003566:	e06e      	b.n	8003646 <HAL_UART_Transmit+0x11c>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2221      	movs	r2, #33	; 0x21
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800357e:	f7fd ff47 	bl	8001410 <HAL_GetTick>
 8003582:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	88fa      	ldrh	r2, [r7, #6]
 8003588:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	88fa      	ldrh	r2, [r7, #6]
 800358e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003598:	d108      	bne.n	80035ac <HAL_UART_Transmit+0x82>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	e003      	b.n	80035b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035bc:	e02a      	b.n	8003614 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2200      	movs	r2, #0
 80035c6:	2180      	movs	r1, #128	; 0x80
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fb1f 	bl	8003c0c <UART_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e036      	b.n	8003646 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10b      	bne.n	80035f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	3302      	adds	r3, #2
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	e007      	b.n	8003606 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	781a      	ldrb	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	3301      	adds	r3, #1
 8003604:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1cf      	bne.n	80035be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2200      	movs	r2, #0
 8003626:	2140      	movs	r1, #64	; 0x40
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 faef 	bl	8003c0c <UART_WaitOnFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e006      	b.n	8003646 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	e000      	b.n	8003646 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003644:	2302      	movs	r3, #2
  }
}
 8003646:	4618      	mov	r0, r3
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	4613      	mov	r3, r2
 800365a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b20      	cmp	r3, #32
 8003666:	d11d      	bne.n	80036a4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_UART_Receive_IT+0x26>
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e016      	b.n	80036a6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_UART_Receive_IT+0x38>
 8003682:	2302      	movs	r3, #2
 8003684:	e00f      	b.n	80036a6 <HAL_UART_Receive_IT+0x58>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	461a      	mov	r2, r3
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 fb24 	bl	8003ce8 <UART_Start_Receive_IT>
 80036a0:	4603      	mov	r3, r0
 80036a2:	e000      	b.n	80036a6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
  }
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b0ba      	sub	sp, #232	; 0xe8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80036dc:	2300      	movs	r3, #0
 80036de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80036ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10f      	bne.n	8003716 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <HAL_UART_IRQHandler+0x66>
 8003702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fc07 	bl	8003f22 <UART_Receive_IT>
      return;
 8003714:	e256      	b.n	8003bc4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003716:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 80de 	beq.w	80038dc <HAL_UART_IRQHandler+0x22c>
 8003720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d106      	bne.n	800373a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800372c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003730:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 80d1 	beq.w	80038dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800373a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <HAL_UART_IRQHandler+0xae>
 8003746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f043 0201 	orr.w	r2, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800375e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_UART_IRQHandler+0xd2>
 800376a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f043 0202 	orr.w	r2, r3, #2
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HAL_UART_IRQHandler+0xf6>
 800378e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f043 0204 	orr.w	r2, r3, #4
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d011      	beq.n	80037d6 <HAL_UART_IRQHandler+0x126>
 80037b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d105      	bne.n	80037ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f043 0208 	orr.w	r2, r3, #8
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 81ed 	beq.w	8003bba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_UART_IRQHandler+0x14e>
 80037ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fb92 	bl	8003f22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	bf0c      	ite	eq
 800380c:	2301      	moveq	r3, #1
 800380e:	2300      	movne	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d103      	bne.n	800382a <HAL_UART_IRQHandler+0x17a>
 8003822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d04f      	beq.n	80038ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fa9a 	bl	8003d64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	2b40      	cmp	r3, #64	; 0x40
 800383c:	d141      	bne.n	80038c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3314      	adds	r3, #20
 8003844:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003848:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800384c:	e853 3f00 	ldrex	r3, [r3]
 8003850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800385c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3314      	adds	r3, #20
 8003866:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800386a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800386e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003876:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800387a:	e841 2300 	strex	r3, r2, [r1]
 800387e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1d9      	bne.n	800383e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	2b00      	cmp	r3, #0
 8003890:	d013      	beq.n	80038ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	4a7d      	ldr	r2, [pc, #500]	; (8003a8c <HAL_UART_IRQHandler+0x3dc>)
 8003898:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe fe3d 	bl	800251e <HAL_DMA_Abort_IT>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d016      	beq.n	80038d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038b4:	4610      	mov	r0, r2
 80038b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b8:	e00e      	b.n	80038d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f990 	bl	8003be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	e00a      	b.n	80038d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f98c 	bl	8003be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c8:	e006      	b.n	80038d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f988 	bl	8003be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80038d6:	e170      	b.n	8003bba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	bf00      	nop
    return;
 80038da:	e16e      	b.n	8003bba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	f040 814a 	bne.w	8003b7a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8143 	beq.w	8003b7a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 813c 	beq.w	8003b7a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	f040 80b4 	bne.w	8003a90 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003934:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8140 	beq.w	8003bbe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003946:	429a      	cmp	r2, r3
 8003948:	f080 8139 	bcs.w	8003bbe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003952:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800395e:	f000 8088 	beq.w	8003a72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	330c      	adds	r3, #12
 8003968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003978:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800397c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	330c      	adds	r3, #12
 800398a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800398e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003992:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003996:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800399a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800399e:	e841 2300 	strex	r3, r2, [r1]
 80039a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1d9      	bne.n	8003962 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3314      	adds	r3, #20
 80039b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3314      	adds	r3, #20
 80039ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e1      	bne.n	80039ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3314      	adds	r3, #20
 80039f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3314      	adds	r3, #20
 8003a0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e3      	bne.n	80039ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a42:	f023 0310 	bic.w	r3, r3, #16
 8003a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	330c      	adds	r3, #12
 8003a50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a54:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a5c:	e841 2300 	strex	r3, r2, [r1]
 8003a60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e3      	bne.n	8003a30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe fce6 	bl	800243e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	4619      	mov	r1, r3
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f8b6 	bl	8003bf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a88:	e099      	b.n	8003bbe <HAL_UART_IRQHandler+0x50e>
 8003a8a:	bf00      	nop
 8003a8c:	08003e2b 	.word	0x08003e2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 808b 	beq.w	8003bc2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003aac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 8086 	beq.w	8003bc2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	330c      	adds	r3, #12
 8003abc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003acc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ada:	647a      	str	r2, [r7, #68]	; 0x44
 8003adc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ae2:	e841 2300 	strex	r3, r2, [r1]
 8003ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1e3      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3314      	adds	r3, #20
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	e853 3f00 	ldrex	r3, [r3]
 8003afc:	623b      	str	r3, [r7, #32]
   return(result);
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3314      	adds	r3, #20
 8003b0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b12:	633a      	str	r2, [r7, #48]	; 0x30
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e3      	bne.n	8003aee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	330c      	adds	r3, #12
 8003b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0310 	bic.w	r3, r3, #16
 8003b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	330c      	adds	r3, #12
 8003b54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b58:	61fa      	str	r2, [r7, #28]
 8003b5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	69b9      	ldr	r1, [r7, #24]
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	617b      	str	r3, [r7, #20]
   return(result);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e3      	bne.n	8003b34 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b70:	4619      	mov	r1, r3
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f83e 	bl	8003bf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b78:	e023      	b.n	8003bc2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_UART_IRQHandler+0x4ea>
 8003b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f95d 	bl	8003e52 <UART_Transmit_IT>
    return;
 8003b98:	e014      	b.n	8003bc4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00e      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x514>
 8003ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d008      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f99d 	bl	8003ef2 <UART_EndTransmit_IT>
    return;
 8003bb8:	e004      	b.n	8003bc4 <HAL_UART_IRQHandler+0x514>
    return;
 8003bba:	bf00      	nop
 8003bbc:	e002      	b.n	8003bc4 <HAL_UART_IRQHandler+0x514>
      return;
 8003bbe:	bf00      	nop
 8003bc0:	e000      	b.n	8003bc4 <HAL_UART_IRQHandler+0x514>
      return;
 8003bc2:	bf00      	nop
  }
}
 8003bc4:	37e8      	adds	r7, #232	; 0xe8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop

08003bcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b090      	sub	sp, #64	; 0x40
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1c:	e050      	b.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c24:	d04c      	beq.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c2c:	f7fd fbf0 	bl	8001410 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d241      	bcs.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	330c      	adds	r3, #12
 8003c42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	e853 3f00 	ldrex	r3, [r3]
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c5c:	637a      	str	r2, [r7, #52]	; 0x34
 8003c5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c64:	e841 2300 	strex	r3, r2, [r1]
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e5      	bne.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3314      	adds	r3, #20
 8003c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	e853 3f00 	ldrex	r3, [r3]
 8003c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f023 0301 	bic.w	r3, r3, #1
 8003c86:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3314      	adds	r3, #20
 8003c8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c90:	623a      	str	r2, [r7, #32]
 8003c92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	69f9      	ldr	r1, [r7, #28]
 8003c96:	6a3a      	ldr	r2, [r7, #32]
 8003c98:	e841 2300 	strex	r3, r2, [r1]
 8003c9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e5      	bne.n	8003c70 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e00f      	b.n	8003ce0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	bf0c      	ite	eq
 8003cd0:	2301      	moveq	r3, #1
 8003cd2:	2300      	movne	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d09f      	beq.n	8003c1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3740      	adds	r7, #64	; 0x40
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	88fa      	ldrh	r2, [r7, #6]
 8003d00:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	88fa      	ldrh	r2, [r7, #6]
 8003d06:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2222      	movs	r2, #34	; 0x22
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d007      	beq.n	8003d36 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d34:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0201 	orr.w	r2, r2, #1
 8003d44:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0220 	orr.w	r2, r2, #32
 8003d54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b095      	sub	sp, #84	; 0x54
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d8c:	643a      	str	r2, [r7, #64]	; 0x40
 8003d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e5      	bne.n	8003d6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3314      	adds	r3, #20
 8003da6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3314      	adds	r3, #20
 8003dbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dc8:	e841 2300 	strex	r3, r2, [r1]
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e5      	bne.n	8003da0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d119      	bne.n	8003e10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f023 0310 	bic.w	r3, r3, #16
 8003df2:	647b      	str	r3, [r7, #68]	; 0x44
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dfc:	61ba      	str	r2, [r7, #24]
 8003dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	6979      	ldr	r1, [r7, #20]
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e5      	bne.n	8003ddc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e1e:	bf00      	nop
 8003e20:	3754      	adds	r7, #84	; 0x54
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f7ff fecb 	bl	8003be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b21      	cmp	r3, #33	; 0x21
 8003e64:	d13e      	bne.n	8003ee4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6e:	d114      	bne.n	8003e9a <UART_Transmit_IT+0x48>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d110      	bne.n	8003e9a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	1c9a      	adds	r2, r3, #2
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	621a      	str	r2, [r3, #32]
 8003e98:	e008      	b.n	8003eac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	1c59      	adds	r1, r3, #1
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6211      	str	r1, [r2, #32]
 8003ea4:	781a      	ldrb	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10f      	bne.n	8003ee0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ece:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ede:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	e000      	b.n	8003ee6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
  }
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff fe5a 	bl	8003bcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b08c      	sub	sp, #48	; 0x30
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b22      	cmp	r3, #34	; 0x22
 8003f34:	f040 80ab 	bne.w	800408e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f40:	d117      	bne.n	8003f72 <UART_Receive_IT+0x50>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d113      	bne.n	8003f72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	1c9a      	adds	r2, r3, #2
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f70:	e026      	b.n	8003fc0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f84:	d007      	beq.n	8003f96 <UART_Receive_IT+0x74>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10a      	bne.n	8003fa4 <UART_Receive_IT+0x82>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	e008      	b.n	8003fb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	4619      	mov	r1, r3
 8003fce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d15a      	bne.n	800408a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0220 	bic.w	r2, r2, #32
 8003fe2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ff2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	2b01      	cmp	r3, #1
 8004012:	d135      	bne.n	8004080 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	330c      	adds	r3, #12
 8004020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	613b      	str	r3, [r7, #16]
   return(result);
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f023 0310 	bic.w	r3, r3, #16
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	330c      	adds	r3, #12
 8004038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403a:	623a      	str	r2, [r7, #32]
 800403c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	69f9      	ldr	r1, [r7, #28]
 8004040:	6a3a      	ldr	r2, [r7, #32]
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	61bb      	str	r3, [r7, #24]
   return(result);
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e5      	bne.n	800401a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b10      	cmp	r3, #16
 800405a:	d10a      	bne.n	8004072 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004076:	4619      	mov	r1, r3
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff fdbb 	bl	8003bf4 <HAL_UARTEx_RxEventCallback>
 800407e:	e002      	b.n	8004086 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7fc ff21 	bl	8000ec8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	e002      	b.n	8004090 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e000      	b.n	8004090 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800408e:	2302      	movs	r3, #2
  }
}
 8004090:	4618      	mov	r0, r3
 8004092:	3730      	adds	r7, #48	; 0x30
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800409c:	b0c0      	sub	sp, #256	; 0x100
 800409e:	af00      	add	r7, sp, #0
 80040a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b4:	68d9      	ldr	r1, [r3, #12]
 80040b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	ea40 0301 	orr.w	r3, r0, r1
 80040c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040f0:	f021 010c 	bic.w	r1, r1, #12
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040fe:	430b      	orrs	r3, r1
 8004100:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800410e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004112:	6999      	ldr	r1, [r3, #24]
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	ea40 0301 	orr.w	r3, r0, r1
 800411e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	4b8f      	ldr	r3, [pc, #572]	; (8004364 <UART_SetConfig+0x2cc>)
 8004128:	429a      	cmp	r2, r3
 800412a:	d005      	beq.n	8004138 <UART_SetConfig+0xa0>
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b8d      	ldr	r3, [pc, #564]	; (8004368 <UART_SetConfig+0x2d0>)
 8004134:	429a      	cmp	r2, r3
 8004136:	d104      	bne.n	8004142 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004138:	f7fe fcc8 	bl	8002acc <HAL_RCC_GetPCLK2Freq>
 800413c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004140:	e003      	b.n	800414a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004142:	f7fe fcaf 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 8004146:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800414a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004154:	f040 810c 	bne.w	8004370 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800415c:	2200      	movs	r2, #0
 800415e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004162:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004166:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800416a:	4622      	mov	r2, r4
 800416c:	462b      	mov	r3, r5
 800416e:	1891      	adds	r1, r2, r2
 8004170:	65b9      	str	r1, [r7, #88]	; 0x58
 8004172:	415b      	adcs	r3, r3
 8004174:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004176:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800417a:	4621      	mov	r1, r4
 800417c:	eb12 0801 	adds.w	r8, r2, r1
 8004180:	4629      	mov	r1, r5
 8004182:	eb43 0901 	adc.w	r9, r3, r1
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800419a:	4690      	mov	r8, r2
 800419c:	4699      	mov	r9, r3
 800419e:	4623      	mov	r3, r4
 80041a0:	eb18 0303 	adds.w	r3, r8, r3
 80041a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041a8:	462b      	mov	r3, r5
 80041aa:	eb49 0303 	adc.w	r3, r9, r3
 80041ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041c6:	460b      	mov	r3, r1
 80041c8:	18db      	adds	r3, r3, r3
 80041ca:	653b      	str	r3, [r7, #80]	; 0x50
 80041cc:	4613      	mov	r3, r2
 80041ce:	eb42 0303 	adc.w	r3, r2, r3
 80041d2:	657b      	str	r3, [r7, #84]	; 0x54
 80041d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80041dc:	f7fc f868 	bl	80002b0 <__aeabi_uldivmod>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4b61      	ldr	r3, [pc, #388]	; (800436c <UART_SetConfig+0x2d4>)
 80041e6:	fba3 2302 	umull	r2, r3, r3, r2
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	011c      	lsls	r4, r3, #4
 80041ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004200:	4642      	mov	r2, r8
 8004202:	464b      	mov	r3, r9
 8004204:	1891      	adds	r1, r2, r2
 8004206:	64b9      	str	r1, [r7, #72]	; 0x48
 8004208:	415b      	adcs	r3, r3
 800420a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800420c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004210:	4641      	mov	r1, r8
 8004212:	eb12 0a01 	adds.w	sl, r2, r1
 8004216:	4649      	mov	r1, r9
 8004218:	eb43 0b01 	adc.w	fp, r3, r1
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004228:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800422c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004230:	4692      	mov	sl, r2
 8004232:	469b      	mov	fp, r3
 8004234:	4643      	mov	r3, r8
 8004236:	eb1a 0303 	adds.w	r3, sl, r3
 800423a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800423e:	464b      	mov	r3, r9
 8004240:	eb4b 0303 	adc.w	r3, fp, r3
 8004244:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004254:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004258:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800425c:	460b      	mov	r3, r1
 800425e:	18db      	adds	r3, r3, r3
 8004260:	643b      	str	r3, [r7, #64]	; 0x40
 8004262:	4613      	mov	r3, r2
 8004264:	eb42 0303 	adc.w	r3, r2, r3
 8004268:	647b      	str	r3, [r7, #68]	; 0x44
 800426a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800426e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004272:	f7fc f81d 	bl	80002b0 <__aeabi_uldivmod>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4611      	mov	r1, r2
 800427c:	4b3b      	ldr	r3, [pc, #236]	; (800436c <UART_SetConfig+0x2d4>)
 800427e:	fba3 2301 	umull	r2, r3, r3, r1
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	2264      	movs	r2, #100	; 0x64
 8004286:	fb02 f303 	mul.w	r3, r2, r3
 800428a:	1acb      	subs	r3, r1, r3
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004292:	4b36      	ldr	r3, [pc, #216]	; (800436c <UART_SetConfig+0x2d4>)
 8004294:	fba3 2302 	umull	r2, r3, r3, r2
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042a0:	441c      	add	r4, r3
 80042a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042b4:	4642      	mov	r2, r8
 80042b6:	464b      	mov	r3, r9
 80042b8:	1891      	adds	r1, r2, r2
 80042ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80042bc:	415b      	adcs	r3, r3
 80042be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042c4:	4641      	mov	r1, r8
 80042c6:	1851      	adds	r1, r2, r1
 80042c8:	6339      	str	r1, [r7, #48]	; 0x30
 80042ca:	4649      	mov	r1, r9
 80042cc:	414b      	adcs	r3, r1
 80042ce:	637b      	str	r3, [r7, #52]	; 0x34
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80042dc:	4659      	mov	r1, fp
 80042de:	00cb      	lsls	r3, r1, #3
 80042e0:	4651      	mov	r1, sl
 80042e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042e6:	4651      	mov	r1, sl
 80042e8:	00ca      	lsls	r2, r1, #3
 80042ea:	4610      	mov	r0, r2
 80042ec:	4619      	mov	r1, r3
 80042ee:	4603      	mov	r3, r0
 80042f0:	4642      	mov	r2, r8
 80042f2:	189b      	adds	r3, r3, r2
 80042f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042f8:	464b      	mov	r3, r9
 80042fa:	460a      	mov	r2, r1
 80042fc:	eb42 0303 	adc.w	r3, r2, r3
 8004300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004310:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004314:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004318:	460b      	mov	r3, r1
 800431a:	18db      	adds	r3, r3, r3
 800431c:	62bb      	str	r3, [r7, #40]	; 0x28
 800431e:	4613      	mov	r3, r2
 8004320:	eb42 0303 	adc.w	r3, r2, r3
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004326:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800432a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800432e:	f7fb ffbf 	bl	80002b0 <__aeabi_uldivmod>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4b0d      	ldr	r3, [pc, #52]	; (800436c <UART_SetConfig+0x2d4>)
 8004338:	fba3 1302 	umull	r1, r3, r3, r2
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	2164      	movs	r1, #100	; 0x64
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	3332      	adds	r3, #50	; 0x32
 800434a:	4a08      	ldr	r2, [pc, #32]	; (800436c <UART_SetConfig+0x2d4>)
 800434c:	fba2 2303 	umull	r2, r3, r2, r3
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	f003 0207 	and.w	r2, r3, #7
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4422      	add	r2, r4
 800435e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004360:	e105      	b.n	800456e <UART_SetConfig+0x4d6>
 8004362:	bf00      	nop
 8004364:	40011000 	.word	0x40011000
 8004368:	40011400 	.word	0x40011400
 800436c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004374:	2200      	movs	r2, #0
 8004376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800437a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800437e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004382:	4642      	mov	r2, r8
 8004384:	464b      	mov	r3, r9
 8004386:	1891      	adds	r1, r2, r2
 8004388:	6239      	str	r1, [r7, #32]
 800438a:	415b      	adcs	r3, r3
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
 800438e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004392:	4641      	mov	r1, r8
 8004394:	1854      	adds	r4, r2, r1
 8004396:	4649      	mov	r1, r9
 8004398:	eb43 0501 	adc.w	r5, r3, r1
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	00eb      	lsls	r3, r5, #3
 80043a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043aa:	00e2      	lsls	r2, r4, #3
 80043ac:	4614      	mov	r4, r2
 80043ae:	461d      	mov	r5, r3
 80043b0:	4643      	mov	r3, r8
 80043b2:	18e3      	adds	r3, r4, r3
 80043b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043b8:	464b      	mov	r3, r9
 80043ba:	eb45 0303 	adc.w	r3, r5, r3
 80043be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043de:	4629      	mov	r1, r5
 80043e0:	008b      	lsls	r3, r1, #2
 80043e2:	4621      	mov	r1, r4
 80043e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043e8:	4621      	mov	r1, r4
 80043ea:	008a      	lsls	r2, r1, #2
 80043ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043f0:	f7fb ff5e 	bl	80002b0 <__aeabi_uldivmod>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4b60      	ldr	r3, [pc, #384]	; (800457c <UART_SetConfig+0x4e4>)
 80043fa:	fba3 2302 	umull	r2, r3, r3, r2
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	011c      	lsls	r4, r3, #4
 8004402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004406:	2200      	movs	r2, #0
 8004408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800440c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004410:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004414:	4642      	mov	r2, r8
 8004416:	464b      	mov	r3, r9
 8004418:	1891      	adds	r1, r2, r2
 800441a:	61b9      	str	r1, [r7, #24]
 800441c:	415b      	adcs	r3, r3
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004424:	4641      	mov	r1, r8
 8004426:	1851      	adds	r1, r2, r1
 8004428:	6139      	str	r1, [r7, #16]
 800442a:	4649      	mov	r1, r9
 800442c:	414b      	adcs	r3, r1
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800443c:	4659      	mov	r1, fp
 800443e:	00cb      	lsls	r3, r1, #3
 8004440:	4651      	mov	r1, sl
 8004442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004446:	4651      	mov	r1, sl
 8004448:	00ca      	lsls	r2, r1, #3
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	4603      	mov	r3, r0
 8004450:	4642      	mov	r2, r8
 8004452:	189b      	adds	r3, r3, r2
 8004454:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004458:	464b      	mov	r3, r9
 800445a:	460a      	mov	r2, r1
 800445c:	eb42 0303 	adc.w	r3, r2, r3
 8004460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	67bb      	str	r3, [r7, #120]	; 0x78
 800446e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800447c:	4649      	mov	r1, r9
 800447e:	008b      	lsls	r3, r1, #2
 8004480:	4641      	mov	r1, r8
 8004482:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004486:	4641      	mov	r1, r8
 8004488:	008a      	lsls	r2, r1, #2
 800448a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800448e:	f7fb ff0f 	bl	80002b0 <__aeabi_uldivmod>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	4b39      	ldr	r3, [pc, #228]	; (800457c <UART_SetConfig+0x4e4>)
 8004498:	fba3 1302 	umull	r1, r3, r3, r2
 800449c:	095b      	lsrs	r3, r3, #5
 800449e:	2164      	movs	r1, #100	; 0x64
 80044a0:	fb01 f303 	mul.w	r3, r1, r3
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	3332      	adds	r3, #50	; 0x32
 80044aa:	4a34      	ldr	r2, [pc, #208]	; (800457c <UART_SetConfig+0x4e4>)
 80044ac:	fba2 2303 	umull	r2, r3, r2, r3
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b6:	441c      	add	r4, r3
 80044b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044bc:	2200      	movs	r2, #0
 80044be:	673b      	str	r3, [r7, #112]	; 0x70
 80044c0:	677a      	str	r2, [r7, #116]	; 0x74
 80044c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044c6:	4642      	mov	r2, r8
 80044c8:	464b      	mov	r3, r9
 80044ca:	1891      	adds	r1, r2, r2
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	415b      	adcs	r3, r3
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044d6:	4641      	mov	r1, r8
 80044d8:	1851      	adds	r1, r2, r1
 80044da:	6039      	str	r1, [r7, #0]
 80044dc:	4649      	mov	r1, r9
 80044de:	414b      	adcs	r3, r1
 80044e0:	607b      	str	r3, [r7, #4]
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	f04f 0300 	mov.w	r3, #0
 80044ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044ee:	4659      	mov	r1, fp
 80044f0:	00cb      	lsls	r3, r1, #3
 80044f2:	4651      	mov	r1, sl
 80044f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044f8:	4651      	mov	r1, sl
 80044fa:	00ca      	lsls	r2, r1, #3
 80044fc:	4610      	mov	r0, r2
 80044fe:	4619      	mov	r1, r3
 8004500:	4603      	mov	r3, r0
 8004502:	4642      	mov	r2, r8
 8004504:	189b      	adds	r3, r3, r2
 8004506:	66bb      	str	r3, [r7, #104]	; 0x68
 8004508:	464b      	mov	r3, r9
 800450a:	460a      	mov	r2, r1
 800450c:	eb42 0303 	adc.w	r3, r2, r3
 8004510:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	663b      	str	r3, [r7, #96]	; 0x60
 800451c:	667a      	str	r2, [r7, #100]	; 0x64
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800452a:	4649      	mov	r1, r9
 800452c:	008b      	lsls	r3, r1, #2
 800452e:	4641      	mov	r1, r8
 8004530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004534:	4641      	mov	r1, r8
 8004536:	008a      	lsls	r2, r1, #2
 8004538:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800453c:	f7fb feb8 	bl	80002b0 <__aeabi_uldivmod>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4b0d      	ldr	r3, [pc, #52]	; (800457c <UART_SetConfig+0x4e4>)
 8004546:	fba3 1302 	umull	r1, r3, r3, r2
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	2164      	movs	r1, #100	; 0x64
 800454e:	fb01 f303 	mul.w	r3, r1, r3
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	3332      	adds	r3, #50	; 0x32
 8004558:	4a08      	ldr	r2, [pc, #32]	; (800457c <UART_SetConfig+0x4e4>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	f003 020f 	and.w	r2, r3, #15
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4422      	add	r2, r4
 800456c:	609a      	str	r2, [r3, #8]
}
 800456e:	bf00      	nop
 8004570:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004574:	46bd      	mov	sp, r7
 8004576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457a:	bf00      	nop
 800457c:	51eb851f 	.word	0x51eb851f

08004580 <__errno>:
 8004580:	4b01      	ldr	r3, [pc, #4]	; (8004588 <__errno+0x8>)
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	2000000c 	.word	0x2000000c

0800458c <__libc_init_array>:
 800458c:	b570      	push	{r4, r5, r6, lr}
 800458e:	4d0d      	ldr	r5, [pc, #52]	; (80045c4 <__libc_init_array+0x38>)
 8004590:	4c0d      	ldr	r4, [pc, #52]	; (80045c8 <__libc_init_array+0x3c>)
 8004592:	1b64      	subs	r4, r4, r5
 8004594:	10a4      	asrs	r4, r4, #2
 8004596:	2600      	movs	r6, #0
 8004598:	42a6      	cmp	r6, r4
 800459a:	d109      	bne.n	80045b0 <__libc_init_array+0x24>
 800459c:	4d0b      	ldr	r5, [pc, #44]	; (80045cc <__libc_init_array+0x40>)
 800459e:	4c0c      	ldr	r4, [pc, #48]	; (80045d0 <__libc_init_array+0x44>)
 80045a0:	f001 f824 	bl	80055ec <_init>
 80045a4:	1b64      	subs	r4, r4, r5
 80045a6:	10a4      	asrs	r4, r4, #2
 80045a8:	2600      	movs	r6, #0
 80045aa:	42a6      	cmp	r6, r4
 80045ac:	d105      	bne.n	80045ba <__libc_init_array+0x2e>
 80045ae:	bd70      	pop	{r4, r5, r6, pc}
 80045b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b4:	4798      	blx	r3
 80045b6:	3601      	adds	r6, #1
 80045b8:	e7ee      	b.n	8004598 <__libc_init_array+0xc>
 80045ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80045be:	4798      	blx	r3
 80045c0:	3601      	adds	r6, #1
 80045c2:	e7f2      	b.n	80045aa <__libc_init_array+0x1e>
 80045c4:	080058c0 	.word	0x080058c0
 80045c8:	080058c0 	.word	0x080058c0
 80045cc:	080058c0 	.word	0x080058c0
 80045d0:	080058c4 	.word	0x080058c4

080045d4 <memset>:
 80045d4:	4402      	add	r2, r0
 80045d6:	4603      	mov	r3, r0
 80045d8:	4293      	cmp	r3, r2
 80045da:	d100      	bne.n	80045de <memset+0xa>
 80045dc:	4770      	bx	lr
 80045de:	f803 1b01 	strb.w	r1, [r3], #1
 80045e2:	e7f9      	b.n	80045d8 <memset+0x4>

080045e4 <iprintf>:
 80045e4:	b40f      	push	{r0, r1, r2, r3}
 80045e6:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <iprintf+0x2c>)
 80045e8:	b513      	push	{r0, r1, r4, lr}
 80045ea:	681c      	ldr	r4, [r3, #0]
 80045ec:	b124      	cbz	r4, 80045f8 <iprintf+0x14>
 80045ee:	69a3      	ldr	r3, [r4, #24]
 80045f0:	b913      	cbnz	r3, 80045f8 <iprintf+0x14>
 80045f2:	4620      	mov	r0, r4
 80045f4:	f000 fa5e 	bl	8004ab4 <__sinit>
 80045f8:	ab05      	add	r3, sp, #20
 80045fa:	9a04      	ldr	r2, [sp, #16]
 80045fc:	68a1      	ldr	r1, [r4, #8]
 80045fe:	9301      	str	r3, [sp, #4]
 8004600:	4620      	mov	r0, r4
 8004602:	f000 fc67 	bl	8004ed4 <_vfiprintf_r>
 8004606:	b002      	add	sp, #8
 8004608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800460c:	b004      	add	sp, #16
 800460e:	4770      	bx	lr
 8004610:	2000000c 	.word	0x2000000c

08004614 <_puts_r>:
 8004614:	b570      	push	{r4, r5, r6, lr}
 8004616:	460e      	mov	r6, r1
 8004618:	4605      	mov	r5, r0
 800461a:	b118      	cbz	r0, 8004624 <_puts_r+0x10>
 800461c:	6983      	ldr	r3, [r0, #24]
 800461e:	b90b      	cbnz	r3, 8004624 <_puts_r+0x10>
 8004620:	f000 fa48 	bl	8004ab4 <__sinit>
 8004624:	69ab      	ldr	r3, [r5, #24]
 8004626:	68ac      	ldr	r4, [r5, #8]
 8004628:	b913      	cbnz	r3, 8004630 <_puts_r+0x1c>
 800462a:	4628      	mov	r0, r5
 800462c:	f000 fa42 	bl	8004ab4 <__sinit>
 8004630:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <_puts_r+0xd0>)
 8004632:	429c      	cmp	r4, r3
 8004634:	d120      	bne.n	8004678 <_puts_r+0x64>
 8004636:	686c      	ldr	r4, [r5, #4]
 8004638:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800463a:	07db      	lsls	r3, r3, #31
 800463c:	d405      	bmi.n	800464a <_puts_r+0x36>
 800463e:	89a3      	ldrh	r3, [r4, #12]
 8004640:	0598      	lsls	r0, r3, #22
 8004642:	d402      	bmi.n	800464a <_puts_r+0x36>
 8004644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004646:	f000 fad3 	bl	8004bf0 <__retarget_lock_acquire_recursive>
 800464a:	89a3      	ldrh	r3, [r4, #12]
 800464c:	0719      	lsls	r1, r3, #28
 800464e:	d51d      	bpl.n	800468c <_puts_r+0x78>
 8004650:	6923      	ldr	r3, [r4, #16]
 8004652:	b1db      	cbz	r3, 800468c <_puts_r+0x78>
 8004654:	3e01      	subs	r6, #1
 8004656:	68a3      	ldr	r3, [r4, #8]
 8004658:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800465c:	3b01      	subs	r3, #1
 800465e:	60a3      	str	r3, [r4, #8]
 8004660:	bb39      	cbnz	r1, 80046b2 <_puts_r+0x9e>
 8004662:	2b00      	cmp	r3, #0
 8004664:	da38      	bge.n	80046d8 <_puts_r+0xc4>
 8004666:	4622      	mov	r2, r4
 8004668:	210a      	movs	r1, #10
 800466a:	4628      	mov	r0, r5
 800466c:	f000 f848 	bl	8004700 <__swbuf_r>
 8004670:	3001      	adds	r0, #1
 8004672:	d011      	beq.n	8004698 <_puts_r+0x84>
 8004674:	250a      	movs	r5, #10
 8004676:	e011      	b.n	800469c <_puts_r+0x88>
 8004678:	4b1b      	ldr	r3, [pc, #108]	; (80046e8 <_puts_r+0xd4>)
 800467a:	429c      	cmp	r4, r3
 800467c:	d101      	bne.n	8004682 <_puts_r+0x6e>
 800467e:	68ac      	ldr	r4, [r5, #8]
 8004680:	e7da      	b.n	8004638 <_puts_r+0x24>
 8004682:	4b1a      	ldr	r3, [pc, #104]	; (80046ec <_puts_r+0xd8>)
 8004684:	429c      	cmp	r4, r3
 8004686:	bf08      	it	eq
 8004688:	68ec      	ldreq	r4, [r5, #12]
 800468a:	e7d5      	b.n	8004638 <_puts_r+0x24>
 800468c:	4621      	mov	r1, r4
 800468e:	4628      	mov	r0, r5
 8004690:	f000 f888 	bl	80047a4 <__swsetup_r>
 8004694:	2800      	cmp	r0, #0
 8004696:	d0dd      	beq.n	8004654 <_puts_r+0x40>
 8004698:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800469c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800469e:	07da      	lsls	r2, r3, #31
 80046a0:	d405      	bmi.n	80046ae <_puts_r+0x9a>
 80046a2:	89a3      	ldrh	r3, [r4, #12]
 80046a4:	059b      	lsls	r3, r3, #22
 80046a6:	d402      	bmi.n	80046ae <_puts_r+0x9a>
 80046a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046aa:	f000 faa2 	bl	8004bf2 <__retarget_lock_release_recursive>
 80046ae:	4628      	mov	r0, r5
 80046b0:	bd70      	pop	{r4, r5, r6, pc}
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	da04      	bge.n	80046c0 <_puts_r+0xac>
 80046b6:	69a2      	ldr	r2, [r4, #24]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	dc06      	bgt.n	80046ca <_puts_r+0xb6>
 80046bc:	290a      	cmp	r1, #10
 80046be:	d004      	beq.n	80046ca <_puts_r+0xb6>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	6022      	str	r2, [r4, #0]
 80046c6:	7019      	strb	r1, [r3, #0]
 80046c8:	e7c5      	b.n	8004656 <_puts_r+0x42>
 80046ca:	4622      	mov	r2, r4
 80046cc:	4628      	mov	r0, r5
 80046ce:	f000 f817 	bl	8004700 <__swbuf_r>
 80046d2:	3001      	adds	r0, #1
 80046d4:	d1bf      	bne.n	8004656 <_puts_r+0x42>
 80046d6:	e7df      	b.n	8004698 <_puts_r+0x84>
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	250a      	movs	r5, #10
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	6022      	str	r2, [r4, #0]
 80046e0:	701d      	strb	r5, [r3, #0]
 80046e2:	e7db      	b.n	800469c <_puts_r+0x88>
 80046e4:	08005844 	.word	0x08005844
 80046e8:	08005864 	.word	0x08005864
 80046ec:	08005824 	.word	0x08005824

080046f0 <puts>:
 80046f0:	4b02      	ldr	r3, [pc, #8]	; (80046fc <puts+0xc>)
 80046f2:	4601      	mov	r1, r0
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	f7ff bf8d 	b.w	8004614 <_puts_r>
 80046fa:	bf00      	nop
 80046fc:	2000000c 	.word	0x2000000c

08004700 <__swbuf_r>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	460e      	mov	r6, r1
 8004704:	4614      	mov	r4, r2
 8004706:	4605      	mov	r5, r0
 8004708:	b118      	cbz	r0, 8004712 <__swbuf_r+0x12>
 800470a:	6983      	ldr	r3, [r0, #24]
 800470c:	b90b      	cbnz	r3, 8004712 <__swbuf_r+0x12>
 800470e:	f000 f9d1 	bl	8004ab4 <__sinit>
 8004712:	4b21      	ldr	r3, [pc, #132]	; (8004798 <__swbuf_r+0x98>)
 8004714:	429c      	cmp	r4, r3
 8004716:	d12b      	bne.n	8004770 <__swbuf_r+0x70>
 8004718:	686c      	ldr	r4, [r5, #4]
 800471a:	69a3      	ldr	r3, [r4, #24]
 800471c:	60a3      	str	r3, [r4, #8]
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	071a      	lsls	r2, r3, #28
 8004722:	d52f      	bpl.n	8004784 <__swbuf_r+0x84>
 8004724:	6923      	ldr	r3, [r4, #16]
 8004726:	b36b      	cbz	r3, 8004784 <__swbuf_r+0x84>
 8004728:	6923      	ldr	r3, [r4, #16]
 800472a:	6820      	ldr	r0, [r4, #0]
 800472c:	1ac0      	subs	r0, r0, r3
 800472e:	6963      	ldr	r3, [r4, #20]
 8004730:	b2f6      	uxtb	r6, r6
 8004732:	4283      	cmp	r3, r0
 8004734:	4637      	mov	r7, r6
 8004736:	dc04      	bgt.n	8004742 <__swbuf_r+0x42>
 8004738:	4621      	mov	r1, r4
 800473a:	4628      	mov	r0, r5
 800473c:	f000 f926 	bl	800498c <_fflush_r>
 8004740:	bb30      	cbnz	r0, 8004790 <__swbuf_r+0x90>
 8004742:	68a3      	ldr	r3, [r4, #8]
 8004744:	3b01      	subs	r3, #1
 8004746:	60a3      	str	r3, [r4, #8]
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	6022      	str	r2, [r4, #0]
 800474e:	701e      	strb	r6, [r3, #0]
 8004750:	6963      	ldr	r3, [r4, #20]
 8004752:	3001      	adds	r0, #1
 8004754:	4283      	cmp	r3, r0
 8004756:	d004      	beq.n	8004762 <__swbuf_r+0x62>
 8004758:	89a3      	ldrh	r3, [r4, #12]
 800475a:	07db      	lsls	r3, r3, #31
 800475c:	d506      	bpl.n	800476c <__swbuf_r+0x6c>
 800475e:	2e0a      	cmp	r6, #10
 8004760:	d104      	bne.n	800476c <__swbuf_r+0x6c>
 8004762:	4621      	mov	r1, r4
 8004764:	4628      	mov	r0, r5
 8004766:	f000 f911 	bl	800498c <_fflush_r>
 800476a:	b988      	cbnz	r0, 8004790 <__swbuf_r+0x90>
 800476c:	4638      	mov	r0, r7
 800476e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004770:	4b0a      	ldr	r3, [pc, #40]	; (800479c <__swbuf_r+0x9c>)
 8004772:	429c      	cmp	r4, r3
 8004774:	d101      	bne.n	800477a <__swbuf_r+0x7a>
 8004776:	68ac      	ldr	r4, [r5, #8]
 8004778:	e7cf      	b.n	800471a <__swbuf_r+0x1a>
 800477a:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <__swbuf_r+0xa0>)
 800477c:	429c      	cmp	r4, r3
 800477e:	bf08      	it	eq
 8004780:	68ec      	ldreq	r4, [r5, #12]
 8004782:	e7ca      	b.n	800471a <__swbuf_r+0x1a>
 8004784:	4621      	mov	r1, r4
 8004786:	4628      	mov	r0, r5
 8004788:	f000 f80c 	bl	80047a4 <__swsetup_r>
 800478c:	2800      	cmp	r0, #0
 800478e:	d0cb      	beq.n	8004728 <__swbuf_r+0x28>
 8004790:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004794:	e7ea      	b.n	800476c <__swbuf_r+0x6c>
 8004796:	bf00      	nop
 8004798:	08005844 	.word	0x08005844
 800479c:	08005864 	.word	0x08005864
 80047a0:	08005824 	.word	0x08005824

080047a4 <__swsetup_r>:
 80047a4:	4b32      	ldr	r3, [pc, #200]	; (8004870 <__swsetup_r+0xcc>)
 80047a6:	b570      	push	{r4, r5, r6, lr}
 80047a8:	681d      	ldr	r5, [r3, #0]
 80047aa:	4606      	mov	r6, r0
 80047ac:	460c      	mov	r4, r1
 80047ae:	b125      	cbz	r5, 80047ba <__swsetup_r+0x16>
 80047b0:	69ab      	ldr	r3, [r5, #24]
 80047b2:	b913      	cbnz	r3, 80047ba <__swsetup_r+0x16>
 80047b4:	4628      	mov	r0, r5
 80047b6:	f000 f97d 	bl	8004ab4 <__sinit>
 80047ba:	4b2e      	ldr	r3, [pc, #184]	; (8004874 <__swsetup_r+0xd0>)
 80047bc:	429c      	cmp	r4, r3
 80047be:	d10f      	bne.n	80047e0 <__swsetup_r+0x3c>
 80047c0:	686c      	ldr	r4, [r5, #4]
 80047c2:	89a3      	ldrh	r3, [r4, #12]
 80047c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047c8:	0719      	lsls	r1, r3, #28
 80047ca:	d42c      	bmi.n	8004826 <__swsetup_r+0x82>
 80047cc:	06dd      	lsls	r5, r3, #27
 80047ce:	d411      	bmi.n	80047f4 <__swsetup_r+0x50>
 80047d0:	2309      	movs	r3, #9
 80047d2:	6033      	str	r3, [r6, #0]
 80047d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047d8:	81a3      	strh	r3, [r4, #12]
 80047da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047de:	e03e      	b.n	800485e <__swsetup_r+0xba>
 80047e0:	4b25      	ldr	r3, [pc, #148]	; (8004878 <__swsetup_r+0xd4>)
 80047e2:	429c      	cmp	r4, r3
 80047e4:	d101      	bne.n	80047ea <__swsetup_r+0x46>
 80047e6:	68ac      	ldr	r4, [r5, #8]
 80047e8:	e7eb      	b.n	80047c2 <__swsetup_r+0x1e>
 80047ea:	4b24      	ldr	r3, [pc, #144]	; (800487c <__swsetup_r+0xd8>)
 80047ec:	429c      	cmp	r4, r3
 80047ee:	bf08      	it	eq
 80047f0:	68ec      	ldreq	r4, [r5, #12]
 80047f2:	e7e6      	b.n	80047c2 <__swsetup_r+0x1e>
 80047f4:	0758      	lsls	r0, r3, #29
 80047f6:	d512      	bpl.n	800481e <__swsetup_r+0x7a>
 80047f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047fa:	b141      	cbz	r1, 800480e <__swsetup_r+0x6a>
 80047fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004800:	4299      	cmp	r1, r3
 8004802:	d002      	beq.n	800480a <__swsetup_r+0x66>
 8004804:	4630      	mov	r0, r6
 8004806:	f000 fa5b 	bl	8004cc0 <_free_r>
 800480a:	2300      	movs	r3, #0
 800480c:	6363      	str	r3, [r4, #52]	; 0x34
 800480e:	89a3      	ldrh	r3, [r4, #12]
 8004810:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004814:	81a3      	strh	r3, [r4, #12]
 8004816:	2300      	movs	r3, #0
 8004818:	6063      	str	r3, [r4, #4]
 800481a:	6923      	ldr	r3, [r4, #16]
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	89a3      	ldrh	r3, [r4, #12]
 8004820:	f043 0308 	orr.w	r3, r3, #8
 8004824:	81a3      	strh	r3, [r4, #12]
 8004826:	6923      	ldr	r3, [r4, #16]
 8004828:	b94b      	cbnz	r3, 800483e <__swsetup_r+0x9a>
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004834:	d003      	beq.n	800483e <__swsetup_r+0x9a>
 8004836:	4621      	mov	r1, r4
 8004838:	4630      	mov	r0, r6
 800483a:	f000 fa01 	bl	8004c40 <__smakebuf_r>
 800483e:	89a0      	ldrh	r0, [r4, #12]
 8004840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004844:	f010 0301 	ands.w	r3, r0, #1
 8004848:	d00a      	beq.n	8004860 <__swsetup_r+0xbc>
 800484a:	2300      	movs	r3, #0
 800484c:	60a3      	str	r3, [r4, #8]
 800484e:	6963      	ldr	r3, [r4, #20]
 8004850:	425b      	negs	r3, r3
 8004852:	61a3      	str	r3, [r4, #24]
 8004854:	6923      	ldr	r3, [r4, #16]
 8004856:	b943      	cbnz	r3, 800486a <__swsetup_r+0xc6>
 8004858:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800485c:	d1ba      	bne.n	80047d4 <__swsetup_r+0x30>
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	0781      	lsls	r1, r0, #30
 8004862:	bf58      	it	pl
 8004864:	6963      	ldrpl	r3, [r4, #20]
 8004866:	60a3      	str	r3, [r4, #8]
 8004868:	e7f4      	b.n	8004854 <__swsetup_r+0xb0>
 800486a:	2000      	movs	r0, #0
 800486c:	e7f7      	b.n	800485e <__swsetup_r+0xba>
 800486e:	bf00      	nop
 8004870:	2000000c 	.word	0x2000000c
 8004874:	08005844 	.word	0x08005844
 8004878:	08005864 	.word	0x08005864
 800487c:	08005824 	.word	0x08005824

08004880 <__sflush_r>:
 8004880:	898a      	ldrh	r2, [r1, #12]
 8004882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004886:	4605      	mov	r5, r0
 8004888:	0710      	lsls	r0, r2, #28
 800488a:	460c      	mov	r4, r1
 800488c:	d458      	bmi.n	8004940 <__sflush_r+0xc0>
 800488e:	684b      	ldr	r3, [r1, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	dc05      	bgt.n	80048a0 <__sflush_r+0x20>
 8004894:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	dc02      	bgt.n	80048a0 <__sflush_r+0x20>
 800489a:	2000      	movs	r0, #0
 800489c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048a2:	2e00      	cmp	r6, #0
 80048a4:	d0f9      	beq.n	800489a <__sflush_r+0x1a>
 80048a6:	2300      	movs	r3, #0
 80048a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048ac:	682f      	ldr	r7, [r5, #0]
 80048ae:	602b      	str	r3, [r5, #0]
 80048b0:	d032      	beq.n	8004918 <__sflush_r+0x98>
 80048b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	075a      	lsls	r2, r3, #29
 80048b8:	d505      	bpl.n	80048c6 <__sflush_r+0x46>
 80048ba:	6863      	ldr	r3, [r4, #4]
 80048bc:	1ac0      	subs	r0, r0, r3
 80048be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048c0:	b10b      	cbz	r3, 80048c6 <__sflush_r+0x46>
 80048c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048c4:	1ac0      	subs	r0, r0, r3
 80048c6:	2300      	movs	r3, #0
 80048c8:	4602      	mov	r2, r0
 80048ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048cc:	6a21      	ldr	r1, [r4, #32]
 80048ce:	4628      	mov	r0, r5
 80048d0:	47b0      	blx	r6
 80048d2:	1c43      	adds	r3, r0, #1
 80048d4:	89a3      	ldrh	r3, [r4, #12]
 80048d6:	d106      	bne.n	80048e6 <__sflush_r+0x66>
 80048d8:	6829      	ldr	r1, [r5, #0]
 80048da:	291d      	cmp	r1, #29
 80048dc:	d82c      	bhi.n	8004938 <__sflush_r+0xb8>
 80048de:	4a2a      	ldr	r2, [pc, #168]	; (8004988 <__sflush_r+0x108>)
 80048e0:	40ca      	lsrs	r2, r1
 80048e2:	07d6      	lsls	r6, r2, #31
 80048e4:	d528      	bpl.n	8004938 <__sflush_r+0xb8>
 80048e6:	2200      	movs	r2, #0
 80048e8:	6062      	str	r2, [r4, #4]
 80048ea:	04d9      	lsls	r1, r3, #19
 80048ec:	6922      	ldr	r2, [r4, #16]
 80048ee:	6022      	str	r2, [r4, #0]
 80048f0:	d504      	bpl.n	80048fc <__sflush_r+0x7c>
 80048f2:	1c42      	adds	r2, r0, #1
 80048f4:	d101      	bne.n	80048fa <__sflush_r+0x7a>
 80048f6:	682b      	ldr	r3, [r5, #0]
 80048f8:	b903      	cbnz	r3, 80048fc <__sflush_r+0x7c>
 80048fa:	6560      	str	r0, [r4, #84]	; 0x54
 80048fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048fe:	602f      	str	r7, [r5, #0]
 8004900:	2900      	cmp	r1, #0
 8004902:	d0ca      	beq.n	800489a <__sflush_r+0x1a>
 8004904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004908:	4299      	cmp	r1, r3
 800490a:	d002      	beq.n	8004912 <__sflush_r+0x92>
 800490c:	4628      	mov	r0, r5
 800490e:	f000 f9d7 	bl	8004cc0 <_free_r>
 8004912:	2000      	movs	r0, #0
 8004914:	6360      	str	r0, [r4, #52]	; 0x34
 8004916:	e7c1      	b.n	800489c <__sflush_r+0x1c>
 8004918:	6a21      	ldr	r1, [r4, #32]
 800491a:	2301      	movs	r3, #1
 800491c:	4628      	mov	r0, r5
 800491e:	47b0      	blx	r6
 8004920:	1c41      	adds	r1, r0, #1
 8004922:	d1c7      	bne.n	80048b4 <__sflush_r+0x34>
 8004924:	682b      	ldr	r3, [r5, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0c4      	beq.n	80048b4 <__sflush_r+0x34>
 800492a:	2b1d      	cmp	r3, #29
 800492c:	d001      	beq.n	8004932 <__sflush_r+0xb2>
 800492e:	2b16      	cmp	r3, #22
 8004930:	d101      	bne.n	8004936 <__sflush_r+0xb6>
 8004932:	602f      	str	r7, [r5, #0]
 8004934:	e7b1      	b.n	800489a <__sflush_r+0x1a>
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800493c:	81a3      	strh	r3, [r4, #12]
 800493e:	e7ad      	b.n	800489c <__sflush_r+0x1c>
 8004940:	690f      	ldr	r7, [r1, #16]
 8004942:	2f00      	cmp	r7, #0
 8004944:	d0a9      	beq.n	800489a <__sflush_r+0x1a>
 8004946:	0793      	lsls	r3, r2, #30
 8004948:	680e      	ldr	r6, [r1, #0]
 800494a:	bf08      	it	eq
 800494c:	694b      	ldreq	r3, [r1, #20]
 800494e:	600f      	str	r7, [r1, #0]
 8004950:	bf18      	it	ne
 8004952:	2300      	movne	r3, #0
 8004954:	eba6 0807 	sub.w	r8, r6, r7
 8004958:	608b      	str	r3, [r1, #8]
 800495a:	f1b8 0f00 	cmp.w	r8, #0
 800495e:	dd9c      	ble.n	800489a <__sflush_r+0x1a>
 8004960:	6a21      	ldr	r1, [r4, #32]
 8004962:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004964:	4643      	mov	r3, r8
 8004966:	463a      	mov	r2, r7
 8004968:	4628      	mov	r0, r5
 800496a:	47b0      	blx	r6
 800496c:	2800      	cmp	r0, #0
 800496e:	dc06      	bgt.n	800497e <__sflush_r+0xfe>
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004976:	81a3      	strh	r3, [r4, #12]
 8004978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800497c:	e78e      	b.n	800489c <__sflush_r+0x1c>
 800497e:	4407      	add	r7, r0
 8004980:	eba8 0800 	sub.w	r8, r8, r0
 8004984:	e7e9      	b.n	800495a <__sflush_r+0xda>
 8004986:	bf00      	nop
 8004988:	20400001 	.word	0x20400001

0800498c <_fflush_r>:
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	690b      	ldr	r3, [r1, #16]
 8004990:	4605      	mov	r5, r0
 8004992:	460c      	mov	r4, r1
 8004994:	b913      	cbnz	r3, 800499c <_fflush_r+0x10>
 8004996:	2500      	movs	r5, #0
 8004998:	4628      	mov	r0, r5
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	b118      	cbz	r0, 80049a6 <_fflush_r+0x1a>
 800499e:	6983      	ldr	r3, [r0, #24]
 80049a0:	b90b      	cbnz	r3, 80049a6 <_fflush_r+0x1a>
 80049a2:	f000 f887 	bl	8004ab4 <__sinit>
 80049a6:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <_fflush_r+0x6c>)
 80049a8:	429c      	cmp	r4, r3
 80049aa:	d11b      	bne.n	80049e4 <_fflush_r+0x58>
 80049ac:	686c      	ldr	r4, [r5, #4]
 80049ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0ef      	beq.n	8004996 <_fflush_r+0xa>
 80049b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049b8:	07d0      	lsls	r0, r2, #31
 80049ba:	d404      	bmi.n	80049c6 <_fflush_r+0x3a>
 80049bc:	0599      	lsls	r1, r3, #22
 80049be:	d402      	bmi.n	80049c6 <_fflush_r+0x3a>
 80049c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049c2:	f000 f915 	bl	8004bf0 <__retarget_lock_acquire_recursive>
 80049c6:	4628      	mov	r0, r5
 80049c8:	4621      	mov	r1, r4
 80049ca:	f7ff ff59 	bl	8004880 <__sflush_r>
 80049ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049d0:	07da      	lsls	r2, r3, #31
 80049d2:	4605      	mov	r5, r0
 80049d4:	d4e0      	bmi.n	8004998 <_fflush_r+0xc>
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	059b      	lsls	r3, r3, #22
 80049da:	d4dd      	bmi.n	8004998 <_fflush_r+0xc>
 80049dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049de:	f000 f908 	bl	8004bf2 <__retarget_lock_release_recursive>
 80049e2:	e7d9      	b.n	8004998 <_fflush_r+0xc>
 80049e4:	4b05      	ldr	r3, [pc, #20]	; (80049fc <_fflush_r+0x70>)
 80049e6:	429c      	cmp	r4, r3
 80049e8:	d101      	bne.n	80049ee <_fflush_r+0x62>
 80049ea:	68ac      	ldr	r4, [r5, #8]
 80049ec:	e7df      	b.n	80049ae <_fflush_r+0x22>
 80049ee:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <_fflush_r+0x74>)
 80049f0:	429c      	cmp	r4, r3
 80049f2:	bf08      	it	eq
 80049f4:	68ec      	ldreq	r4, [r5, #12]
 80049f6:	e7da      	b.n	80049ae <_fflush_r+0x22>
 80049f8:	08005844 	.word	0x08005844
 80049fc:	08005864 	.word	0x08005864
 8004a00:	08005824 	.word	0x08005824

08004a04 <std>:
 8004a04:	2300      	movs	r3, #0
 8004a06:	b510      	push	{r4, lr}
 8004a08:	4604      	mov	r4, r0
 8004a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a12:	6083      	str	r3, [r0, #8]
 8004a14:	8181      	strh	r1, [r0, #12]
 8004a16:	6643      	str	r3, [r0, #100]	; 0x64
 8004a18:	81c2      	strh	r2, [r0, #14]
 8004a1a:	6183      	str	r3, [r0, #24]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	2208      	movs	r2, #8
 8004a20:	305c      	adds	r0, #92	; 0x5c
 8004a22:	f7ff fdd7 	bl	80045d4 <memset>
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <std+0x38>)
 8004a28:	6263      	str	r3, [r4, #36]	; 0x24
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <std+0x3c>)
 8004a2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <std+0x40>)
 8004a30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a32:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <std+0x44>)
 8004a34:	6224      	str	r4, [r4, #32]
 8004a36:	6323      	str	r3, [r4, #48]	; 0x30
 8004a38:	bd10      	pop	{r4, pc}
 8004a3a:	bf00      	nop
 8004a3c:	0800547d 	.word	0x0800547d
 8004a40:	0800549f 	.word	0x0800549f
 8004a44:	080054d7 	.word	0x080054d7
 8004a48:	080054fb 	.word	0x080054fb

08004a4c <_cleanup_r>:
 8004a4c:	4901      	ldr	r1, [pc, #4]	; (8004a54 <_cleanup_r+0x8>)
 8004a4e:	f000 b8af 	b.w	8004bb0 <_fwalk_reent>
 8004a52:	bf00      	nop
 8004a54:	0800498d 	.word	0x0800498d

08004a58 <__sfmoreglue>:
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	2268      	movs	r2, #104	; 0x68
 8004a5c:	1e4d      	subs	r5, r1, #1
 8004a5e:	4355      	muls	r5, r2
 8004a60:	460e      	mov	r6, r1
 8004a62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a66:	f000 f997 	bl	8004d98 <_malloc_r>
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	b140      	cbz	r0, 8004a80 <__sfmoreglue+0x28>
 8004a6e:	2100      	movs	r1, #0
 8004a70:	e9c0 1600 	strd	r1, r6, [r0]
 8004a74:	300c      	adds	r0, #12
 8004a76:	60a0      	str	r0, [r4, #8]
 8004a78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a7c:	f7ff fdaa 	bl	80045d4 <memset>
 8004a80:	4620      	mov	r0, r4
 8004a82:	bd70      	pop	{r4, r5, r6, pc}

08004a84 <__sfp_lock_acquire>:
 8004a84:	4801      	ldr	r0, [pc, #4]	; (8004a8c <__sfp_lock_acquire+0x8>)
 8004a86:	f000 b8b3 	b.w	8004bf0 <__retarget_lock_acquire_recursive>
 8004a8a:	bf00      	nop
 8004a8c:	20000185 	.word	0x20000185

08004a90 <__sfp_lock_release>:
 8004a90:	4801      	ldr	r0, [pc, #4]	; (8004a98 <__sfp_lock_release+0x8>)
 8004a92:	f000 b8ae 	b.w	8004bf2 <__retarget_lock_release_recursive>
 8004a96:	bf00      	nop
 8004a98:	20000185 	.word	0x20000185

08004a9c <__sinit_lock_acquire>:
 8004a9c:	4801      	ldr	r0, [pc, #4]	; (8004aa4 <__sinit_lock_acquire+0x8>)
 8004a9e:	f000 b8a7 	b.w	8004bf0 <__retarget_lock_acquire_recursive>
 8004aa2:	bf00      	nop
 8004aa4:	20000186 	.word	0x20000186

08004aa8 <__sinit_lock_release>:
 8004aa8:	4801      	ldr	r0, [pc, #4]	; (8004ab0 <__sinit_lock_release+0x8>)
 8004aaa:	f000 b8a2 	b.w	8004bf2 <__retarget_lock_release_recursive>
 8004aae:	bf00      	nop
 8004ab0:	20000186 	.word	0x20000186

08004ab4 <__sinit>:
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	f7ff fff0 	bl	8004a9c <__sinit_lock_acquire>
 8004abc:	69a3      	ldr	r3, [r4, #24]
 8004abe:	b11b      	cbz	r3, 8004ac8 <__sinit+0x14>
 8004ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ac4:	f7ff bff0 	b.w	8004aa8 <__sinit_lock_release>
 8004ac8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004acc:	6523      	str	r3, [r4, #80]	; 0x50
 8004ace:	4b13      	ldr	r3, [pc, #76]	; (8004b1c <__sinit+0x68>)
 8004ad0:	4a13      	ldr	r2, [pc, #76]	; (8004b20 <__sinit+0x6c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ad6:	42a3      	cmp	r3, r4
 8004ad8:	bf04      	itt	eq
 8004ada:	2301      	moveq	r3, #1
 8004adc:	61a3      	streq	r3, [r4, #24]
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f000 f820 	bl	8004b24 <__sfp>
 8004ae4:	6060      	str	r0, [r4, #4]
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f000 f81c 	bl	8004b24 <__sfp>
 8004aec:	60a0      	str	r0, [r4, #8]
 8004aee:	4620      	mov	r0, r4
 8004af0:	f000 f818 	bl	8004b24 <__sfp>
 8004af4:	2200      	movs	r2, #0
 8004af6:	60e0      	str	r0, [r4, #12]
 8004af8:	2104      	movs	r1, #4
 8004afa:	6860      	ldr	r0, [r4, #4]
 8004afc:	f7ff ff82 	bl	8004a04 <std>
 8004b00:	68a0      	ldr	r0, [r4, #8]
 8004b02:	2201      	movs	r2, #1
 8004b04:	2109      	movs	r1, #9
 8004b06:	f7ff ff7d 	bl	8004a04 <std>
 8004b0a:	68e0      	ldr	r0, [r4, #12]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	2112      	movs	r1, #18
 8004b10:	f7ff ff78 	bl	8004a04 <std>
 8004b14:	2301      	movs	r3, #1
 8004b16:	61a3      	str	r3, [r4, #24]
 8004b18:	e7d2      	b.n	8004ac0 <__sinit+0xc>
 8004b1a:	bf00      	nop
 8004b1c:	08005820 	.word	0x08005820
 8004b20:	08004a4d 	.word	0x08004a4d

08004b24 <__sfp>:
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	4607      	mov	r7, r0
 8004b28:	f7ff ffac 	bl	8004a84 <__sfp_lock_acquire>
 8004b2c:	4b1e      	ldr	r3, [pc, #120]	; (8004ba8 <__sfp+0x84>)
 8004b2e:	681e      	ldr	r6, [r3, #0]
 8004b30:	69b3      	ldr	r3, [r6, #24]
 8004b32:	b913      	cbnz	r3, 8004b3a <__sfp+0x16>
 8004b34:	4630      	mov	r0, r6
 8004b36:	f7ff ffbd 	bl	8004ab4 <__sinit>
 8004b3a:	3648      	adds	r6, #72	; 0x48
 8004b3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	d503      	bpl.n	8004b4c <__sfp+0x28>
 8004b44:	6833      	ldr	r3, [r6, #0]
 8004b46:	b30b      	cbz	r3, 8004b8c <__sfp+0x68>
 8004b48:	6836      	ldr	r6, [r6, #0]
 8004b4a:	e7f7      	b.n	8004b3c <__sfp+0x18>
 8004b4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b50:	b9d5      	cbnz	r5, 8004b88 <__sfp+0x64>
 8004b52:	4b16      	ldr	r3, [pc, #88]	; (8004bac <__sfp+0x88>)
 8004b54:	60e3      	str	r3, [r4, #12]
 8004b56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b5a:	6665      	str	r5, [r4, #100]	; 0x64
 8004b5c:	f000 f847 	bl	8004bee <__retarget_lock_init_recursive>
 8004b60:	f7ff ff96 	bl	8004a90 <__sfp_lock_release>
 8004b64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b6c:	6025      	str	r5, [r4, #0]
 8004b6e:	61a5      	str	r5, [r4, #24]
 8004b70:	2208      	movs	r2, #8
 8004b72:	4629      	mov	r1, r5
 8004b74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b78:	f7ff fd2c 	bl	80045d4 <memset>
 8004b7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b84:	4620      	mov	r0, r4
 8004b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b88:	3468      	adds	r4, #104	; 0x68
 8004b8a:	e7d9      	b.n	8004b40 <__sfp+0x1c>
 8004b8c:	2104      	movs	r1, #4
 8004b8e:	4638      	mov	r0, r7
 8004b90:	f7ff ff62 	bl	8004a58 <__sfmoreglue>
 8004b94:	4604      	mov	r4, r0
 8004b96:	6030      	str	r0, [r6, #0]
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	d1d5      	bne.n	8004b48 <__sfp+0x24>
 8004b9c:	f7ff ff78 	bl	8004a90 <__sfp_lock_release>
 8004ba0:	230c      	movs	r3, #12
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	e7ee      	b.n	8004b84 <__sfp+0x60>
 8004ba6:	bf00      	nop
 8004ba8:	08005820 	.word	0x08005820
 8004bac:	ffff0001 	.word	0xffff0001

08004bb0 <_fwalk_reent>:
 8004bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bb4:	4606      	mov	r6, r0
 8004bb6:	4688      	mov	r8, r1
 8004bb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bbc:	2700      	movs	r7, #0
 8004bbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bc2:	f1b9 0901 	subs.w	r9, r9, #1
 8004bc6:	d505      	bpl.n	8004bd4 <_fwalk_reent+0x24>
 8004bc8:	6824      	ldr	r4, [r4, #0]
 8004bca:	2c00      	cmp	r4, #0
 8004bcc:	d1f7      	bne.n	8004bbe <_fwalk_reent+0xe>
 8004bce:	4638      	mov	r0, r7
 8004bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bd4:	89ab      	ldrh	r3, [r5, #12]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d907      	bls.n	8004bea <_fwalk_reent+0x3a>
 8004bda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bde:	3301      	adds	r3, #1
 8004be0:	d003      	beq.n	8004bea <_fwalk_reent+0x3a>
 8004be2:	4629      	mov	r1, r5
 8004be4:	4630      	mov	r0, r6
 8004be6:	47c0      	blx	r8
 8004be8:	4307      	orrs	r7, r0
 8004bea:	3568      	adds	r5, #104	; 0x68
 8004bec:	e7e9      	b.n	8004bc2 <_fwalk_reent+0x12>

08004bee <__retarget_lock_init_recursive>:
 8004bee:	4770      	bx	lr

08004bf0 <__retarget_lock_acquire_recursive>:
 8004bf0:	4770      	bx	lr

08004bf2 <__retarget_lock_release_recursive>:
 8004bf2:	4770      	bx	lr

08004bf4 <__swhatbuf_r>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	460e      	mov	r6, r1
 8004bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	b096      	sub	sp, #88	; 0x58
 8004c00:	4614      	mov	r4, r2
 8004c02:	461d      	mov	r5, r3
 8004c04:	da08      	bge.n	8004c18 <__swhatbuf_r+0x24>
 8004c06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	602a      	str	r2, [r5, #0]
 8004c0e:	061a      	lsls	r2, r3, #24
 8004c10:	d410      	bmi.n	8004c34 <__swhatbuf_r+0x40>
 8004c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c16:	e00e      	b.n	8004c36 <__swhatbuf_r+0x42>
 8004c18:	466a      	mov	r2, sp
 8004c1a:	f000 fc95 	bl	8005548 <_fstat_r>
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	dbf1      	blt.n	8004c06 <__swhatbuf_r+0x12>
 8004c22:	9a01      	ldr	r2, [sp, #4]
 8004c24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c2c:	425a      	negs	r2, r3
 8004c2e:	415a      	adcs	r2, r3
 8004c30:	602a      	str	r2, [r5, #0]
 8004c32:	e7ee      	b.n	8004c12 <__swhatbuf_r+0x1e>
 8004c34:	2340      	movs	r3, #64	; 0x40
 8004c36:	2000      	movs	r0, #0
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	b016      	add	sp, #88	; 0x58
 8004c3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c40 <__smakebuf_r>:
 8004c40:	898b      	ldrh	r3, [r1, #12]
 8004c42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c44:	079d      	lsls	r5, r3, #30
 8004c46:	4606      	mov	r6, r0
 8004c48:	460c      	mov	r4, r1
 8004c4a:	d507      	bpl.n	8004c5c <__smakebuf_r+0x1c>
 8004c4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	6123      	str	r3, [r4, #16]
 8004c54:	2301      	movs	r3, #1
 8004c56:	6163      	str	r3, [r4, #20]
 8004c58:	b002      	add	sp, #8
 8004c5a:	bd70      	pop	{r4, r5, r6, pc}
 8004c5c:	ab01      	add	r3, sp, #4
 8004c5e:	466a      	mov	r2, sp
 8004c60:	f7ff ffc8 	bl	8004bf4 <__swhatbuf_r>
 8004c64:	9900      	ldr	r1, [sp, #0]
 8004c66:	4605      	mov	r5, r0
 8004c68:	4630      	mov	r0, r6
 8004c6a:	f000 f895 	bl	8004d98 <_malloc_r>
 8004c6e:	b948      	cbnz	r0, 8004c84 <__smakebuf_r+0x44>
 8004c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c74:	059a      	lsls	r2, r3, #22
 8004c76:	d4ef      	bmi.n	8004c58 <__smakebuf_r+0x18>
 8004c78:	f023 0303 	bic.w	r3, r3, #3
 8004c7c:	f043 0302 	orr.w	r3, r3, #2
 8004c80:	81a3      	strh	r3, [r4, #12]
 8004c82:	e7e3      	b.n	8004c4c <__smakebuf_r+0xc>
 8004c84:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <__smakebuf_r+0x7c>)
 8004c86:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	6020      	str	r0, [r4, #0]
 8004c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c90:	81a3      	strh	r3, [r4, #12]
 8004c92:	9b00      	ldr	r3, [sp, #0]
 8004c94:	6163      	str	r3, [r4, #20]
 8004c96:	9b01      	ldr	r3, [sp, #4]
 8004c98:	6120      	str	r0, [r4, #16]
 8004c9a:	b15b      	cbz	r3, 8004cb4 <__smakebuf_r+0x74>
 8004c9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	f000 fc63 	bl	800556c <_isatty_r>
 8004ca6:	b128      	cbz	r0, 8004cb4 <__smakebuf_r+0x74>
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	f023 0303 	bic.w	r3, r3, #3
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	81a3      	strh	r3, [r4, #12]
 8004cb4:	89a0      	ldrh	r0, [r4, #12]
 8004cb6:	4305      	orrs	r5, r0
 8004cb8:	81a5      	strh	r5, [r4, #12]
 8004cba:	e7cd      	b.n	8004c58 <__smakebuf_r+0x18>
 8004cbc:	08004a4d 	.word	0x08004a4d

08004cc0 <_free_r>:
 8004cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cc2:	2900      	cmp	r1, #0
 8004cc4:	d044      	beq.n	8004d50 <_free_r+0x90>
 8004cc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cca:	9001      	str	r0, [sp, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f1a1 0404 	sub.w	r4, r1, #4
 8004cd2:	bfb8      	it	lt
 8004cd4:	18e4      	addlt	r4, r4, r3
 8004cd6:	f000 fc6b 	bl	80055b0 <__malloc_lock>
 8004cda:	4a1e      	ldr	r2, [pc, #120]	; (8004d54 <_free_r+0x94>)
 8004cdc:	9801      	ldr	r0, [sp, #4]
 8004cde:	6813      	ldr	r3, [r2, #0]
 8004ce0:	b933      	cbnz	r3, 8004cf0 <_free_r+0x30>
 8004ce2:	6063      	str	r3, [r4, #4]
 8004ce4:	6014      	str	r4, [r2, #0]
 8004ce6:	b003      	add	sp, #12
 8004ce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cec:	f000 bc66 	b.w	80055bc <__malloc_unlock>
 8004cf0:	42a3      	cmp	r3, r4
 8004cf2:	d908      	bls.n	8004d06 <_free_r+0x46>
 8004cf4:	6825      	ldr	r5, [r4, #0]
 8004cf6:	1961      	adds	r1, r4, r5
 8004cf8:	428b      	cmp	r3, r1
 8004cfa:	bf01      	itttt	eq
 8004cfc:	6819      	ldreq	r1, [r3, #0]
 8004cfe:	685b      	ldreq	r3, [r3, #4]
 8004d00:	1949      	addeq	r1, r1, r5
 8004d02:	6021      	streq	r1, [r4, #0]
 8004d04:	e7ed      	b.n	8004ce2 <_free_r+0x22>
 8004d06:	461a      	mov	r2, r3
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	b10b      	cbz	r3, 8004d10 <_free_r+0x50>
 8004d0c:	42a3      	cmp	r3, r4
 8004d0e:	d9fa      	bls.n	8004d06 <_free_r+0x46>
 8004d10:	6811      	ldr	r1, [r2, #0]
 8004d12:	1855      	adds	r5, r2, r1
 8004d14:	42a5      	cmp	r5, r4
 8004d16:	d10b      	bne.n	8004d30 <_free_r+0x70>
 8004d18:	6824      	ldr	r4, [r4, #0]
 8004d1a:	4421      	add	r1, r4
 8004d1c:	1854      	adds	r4, r2, r1
 8004d1e:	42a3      	cmp	r3, r4
 8004d20:	6011      	str	r1, [r2, #0]
 8004d22:	d1e0      	bne.n	8004ce6 <_free_r+0x26>
 8004d24:	681c      	ldr	r4, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	6053      	str	r3, [r2, #4]
 8004d2a:	4421      	add	r1, r4
 8004d2c:	6011      	str	r1, [r2, #0]
 8004d2e:	e7da      	b.n	8004ce6 <_free_r+0x26>
 8004d30:	d902      	bls.n	8004d38 <_free_r+0x78>
 8004d32:	230c      	movs	r3, #12
 8004d34:	6003      	str	r3, [r0, #0]
 8004d36:	e7d6      	b.n	8004ce6 <_free_r+0x26>
 8004d38:	6825      	ldr	r5, [r4, #0]
 8004d3a:	1961      	adds	r1, r4, r5
 8004d3c:	428b      	cmp	r3, r1
 8004d3e:	bf04      	itt	eq
 8004d40:	6819      	ldreq	r1, [r3, #0]
 8004d42:	685b      	ldreq	r3, [r3, #4]
 8004d44:	6063      	str	r3, [r4, #4]
 8004d46:	bf04      	itt	eq
 8004d48:	1949      	addeq	r1, r1, r5
 8004d4a:	6021      	streq	r1, [r4, #0]
 8004d4c:	6054      	str	r4, [r2, #4]
 8004d4e:	e7ca      	b.n	8004ce6 <_free_r+0x26>
 8004d50:	b003      	add	sp, #12
 8004d52:	bd30      	pop	{r4, r5, pc}
 8004d54:	20000188 	.word	0x20000188

08004d58 <sbrk_aligned>:
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	4e0e      	ldr	r6, [pc, #56]	; (8004d94 <sbrk_aligned+0x3c>)
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	6831      	ldr	r1, [r6, #0]
 8004d60:	4605      	mov	r5, r0
 8004d62:	b911      	cbnz	r1, 8004d6a <sbrk_aligned+0x12>
 8004d64:	f000 fb7a 	bl	800545c <_sbrk_r>
 8004d68:	6030      	str	r0, [r6, #0]
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	f000 fb75 	bl	800545c <_sbrk_r>
 8004d72:	1c43      	adds	r3, r0, #1
 8004d74:	d00a      	beq.n	8004d8c <sbrk_aligned+0x34>
 8004d76:	1cc4      	adds	r4, r0, #3
 8004d78:	f024 0403 	bic.w	r4, r4, #3
 8004d7c:	42a0      	cmp	r0, r4
 8004d7e:	d007      	beq.n	8004d90 <sbrk_aligned+0x38>
 8004d80:	1a21      	subs	r1, r4, r0
 8004d82:	4628      	mov	r0, r5
 8004d84:	f000 fb6a 	bl	800545c <_sbrk_r>
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d101      	bne.n	8004d90 <sbrk_aligned+0x38>
 8004d8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004d90:	4620      	mov	r0, r4
 8004d92:	bd70      	pop	{r4, r5, r6, pc}
 8004d94:	2000018c 	.word	0x2000018c

08004d98 <_malloc_r>:
 8004d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d9c:	1ccd      	adds	r5, r1, #3
 8004d9e:	f025 0503 	bic.w	r5, r5, #3
 8004da2:	3508      	adds	r5, #8
 8004da4:	2d0c      	cmp	r5, #12
 8004da6:	bf38      	it	cc
 8004da8:	250c      	movcc	r5, #12
 8004daa:	2d00      	cmp	r5, #0
 8004dac:	4607      	mov	r7, r0
 8004dae:	db01      	blt.n	8004db4 <_malloc_r+0x1c>
 8004db0:	42a9      	cmp	r1, r5
 8004db2:	d905      	bls.n	8004dc0 <_malloc_r+0x28>
 8004db4:	230c      	movs	r3, #12
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	2600      	movs	r6, #0
 8004dba:	4630      	mov	r0, r6
 8004dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc0:	4e2e      	ldr	r6, [pc, #184]	; (8004e7c <_malloc_r+0xe4>)
 8004dc2:	f000 fbf5 	bl	80055b0 <__malloc_lock>
 8004dc6:	6833      	ldr	r3, [r6, #0]
 8004dc8:	461c      	mov	r4, r3
 8004dca:	bb34      	cbnz	r4, 8004e1a <_malloc_r+0x82>
 8004dcc:	4629      	mov	r1, r5
 8004dce:	4638      	mov	r0, r7
 8004dd0:	f7ff ffc2 	bl	8004d58 <sbrk_aligned>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	d14d      	bne.n	8004e76 <_malloc_r+0xde>
 8004dda:	6834      	ldr	r4, [r6, #0]
 8004ddc:	4626      	mov	r6, r4
 8004dde:	2e00      	cmp	r6, #0
 8004de0:	d140      	bne.n	8004e64 <_malloc_r+0xcc>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	4631      	mov	r1, r6
 8004de6:	4638      	mov	r0, r7
 8004de8:	eb04 0803 	add.w	r8, r4, r3
 8004dec:	f000 fb36 	bl	800545c <_sbrk_r>
 8004df0:	4580      	cmp	r8, r0
 8004df2:	d13a      	bne.n	8004e6a <_malloc_r+0xd2>
 8004df4:	6821      	ldr	r1, [r4, #0]
 8004df6:	3503      	adds	r5, #3
 8004df8:	1a6d      	subs	r5, r5, r1
 8004dfa:	f025 0503 	bic.w	r5, r5, #3
 8004dfe:	3508      	adds	r5, #8
 8004e00:	2d0c      	cmp	r5, #12
 8004e02:	bf38      	it	cc
 8004e04:	250c      	movcc	r5, #12
 8004e06:	4629      	mov	r1, r5
 8004e08:	4638      	mov	r0, r7
 8004e0a:	f7ff ffa5 	bl	8004d58 <sbrk_aligned>
 8004e0e:	3001      	adds	r0, #1
 8004e10:	d02b      	beq.n	8004e6a <_malloc_r+0xd2>
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	442b      	add	r3, r5
 8004e16:	6023      	str	r3, [r4, #0]
 8004e18:	e00e      	b.n	8004e38 <_malloc_r+0xa0>
 8004e1a:	6822      	ldr	r2, [r4, #0]
 8004e1c:	1b52      	subs	r2, r2, r5
 8004e1e:	d41e      	bmi.n	8004e5e <_malloc_r+0xc6>
 8004e20:	2a0b      	cmp	r2, #11
 8004e22:	d916      	bls.n	8004e52 <_malloc_r+0xba>
 8004e24:	1961      	adds	r1, r4, r5
 8004e26:	42a3      	cmp	r3, r4
 8004e28:	6025      	str	r5, [r4, #0]
 8004e2a:	bf18      	it	ne
 8004e2c:	6059      	strne	r1, [r3, #4]
 8004e2e:	6863      	ldr	r3, [r4, #4]
 8004e30:	bf08      	it	eq
 8004e32:	6031      	streq	r1, [r6, #0]
 8004e34:	5162      	str	r2, [r4, r5]
 8004e36:	604b      	str	r3, [r1, #4]
 8004e38:	4638      	mov	r0, r7
 8004e3a:	f104 060b 	add.w	r6, r4, #11
 8004e3e:	f000 fbbd 	bl	80055bc <__malloc_unlock>
 8004e42:	f026 0607 	bic.w	r6, r6, #7
 8004e46:	1d23      	adds	r3, r4, #4
 8004e48:	1af2      	subs	r2, r6, r3
 8004e4a:	d0b6      	beq.n	8004dba <_malloc_r+0x22>
 8004e4c:	1b9b      	subs	r3, r3, r6
 8004e4e:	50a3      	str	r3, [r4, r2]
 8004e50:	e7b3      	b.n	8004dba <_malloc_r+0x22>
 8004e52:	6862      	ldr	r2, [r4, #4]
 8004e54:	42a3      	cmp	r3, r4
 8004e56:	bf0c      	ite	eq
 8004e58:	6032      	streq	r2, [r6, #0]
 8004e5a:	605a      	strne	r2, [r3, #4]
 8004e5c:	e7ec      	b.n	8004e38 <_malloc_r+0xa0>
 8004e5e:	4623      	mov	r3, r4
 8004e60:	6864      	ldr	r4, [r4, #4]
 8004e62:	e7b2      	b.n	8004dca <_malloc_r+0x32>
 8004e64:	4634      	mov	r4, r6
 8004e66:	6876      	ldr	r6, [r6, #4]
 8004e68:	e7b9      	b.n	8004dde <_malloc_r+0x46>
 8004e6a:	230c      	movs	r3, #12
 8004e6c:	603b      	str	r3, [r7, #0]
 8004e6e:	4638      	mov	r0, r7
 8004e70:	f000 fba4 	bl	80055bc <__malloc_unlock>
 8004e74:	e7a1      	b.n	8004dba <_malloc_r+0x22>
 8004e76:	6025      	str	r5, [r4, #0]
 8004e78:	e7de      	b.n	8004e38 <_malloc_r+0xa0>
 8004e7a:	bf00      	nop
 8004e7c:	20000188 	.word	0x20000188

08004e80 <__sfputc_r>:
 8004e80:	6893      	ldr	r3, [r2, #8]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	b410      	push	{r4}
 8004e88:	6093      	str	r3, [r2, #8]
 8004e8a:	da08      	bge.n	8004e9e <__sfputc_r+0x1e>
 8004e8c:	6994      	ldr	r4, [r2, #24]
 8004e8e:	42a3      	cmp	r3, r4
 8004e90:	db01      	blt.n	8004e96 <__sfputc_r+0x16>
 8004e92:	290a      	cmp	r1, #10
 8004e94:	d103      	bne.n	8004e9e <__sfputc_r+0x1e>
 8004e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e9a:	f7ff bc31 	b.w	8004700 <__swbuf_r>
 8004e9e:	6813      	ldr	r3, [r2, #0]
 8004ea0:	1c58      	adds	r0, r3, #1
 8004ea2:	6010      	str	r0, [r2, #0]
 8004ea4:	7019      	strb	r1, [r3, #0]
 8004ea6:	4608      	mov	r0, r1
 8004ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <__sfputs_r>:
 8004eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb0:	4606      	mov	r6, r0
 8004eb2:	460f      	mov	r7, r1
 8004eb4:	4614      	mov	r4, r2
 8004eb6:	18d5      	adds	r5, r2, r3
 8004eb8:	42ac      	cmp	r4, r5
 8004eba:	d101      	bne.n	8004ec0 <__sfputs_r+0x12>
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	e007      	b.n	8004ed0 <__sfputs_r+0x22>
 8004ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec4:	463a      	mov	r2, r7
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	f7ff ffda 	bl	8004e80 <__sfputc_r>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d1f3      	bne.n	8004eb8 <__sfputs_r+0xa>
 8004ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ed4 <_vfiprintf_r>:
 8004ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed8:	460d      	mov	r5, r1
 8004eda:	b09d      	sub	sp, #116	; 0x74
 8004edc:	4614      	mov	r4, r2
 8004ede:	4698      	mov	r8, r3
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	b118      	cbz	r0, 8004eec <_vfiprintf_r+0x18>
 8004ee4:	6983      	ldr	r3, [r0, #24]
 8004ee6:	b90b      	cbnz	r3, 8004eec <_vfiprintf_r+0x18>
 8004ee8:	f7ff fde4 	bl	8004ab4 <__sinit>
 8004eec:	4b89      	ldr	r3, [pc, #548]	; (8005114 <_vfiprintf_r+0x240>)
 8004eee:	429d      	cmp	r5, r3
 8004ef0:	d11b      	bne.n	8004f2a <_vfiprintf_r+0x56>
 8004ef2:	6875      	ldr	r5, [r6, #4]
 8004ef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ef6:	07d9      	lsls	r1, r3, #31
 8004ef8:	d405      	bmi.n	8004f06 <_vfiprintf_r+0x32>
 8004efa:	89ab      	ldrh	r3, [r5, #12]
 8004efc:	059a      	lsls	r2, r3, #22
 8004efe:	d402      	bmi.n	8004f06 <_vfiprintf_r+0x32>
 8004f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f02:	f7ff fe75 	bl	8004bf0 <__retarget_lock_acquire_recursive>
 8004f06:	89ab      	ldrh	r3, [r5, #12]
 8004f08:	071b      	lsls	r3, r3, #28
 8004f0a:	d501      	bpl.n	8004f10 <_vfiprintf_r+0x3c>
 8004f0c:	692b      	ldr	r3, [r5, #16]
 8004f0e:	b9eb      	cbnz	r3, 8004f4c <_vfiprintf_r+0x78>
 8004f10:	4629      	mov	r1, r5
 8004f12:	4630      	mov	r0, r6
 8004f14:	f7ff fc46 	bl	80047a4 <__swsetup_r>
 8004f18:	b1c0      	cbz	r0, 8004f4c <_vfiprintf_r+0x78>
 8004f1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f1c:	07dc      	lsls	r4, r3, #31
 8004f1e:	d50e      	bpl.n	8004f3e <_vfiprintf_r+0x6a>
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f24:	b01d      	add	sp, #116	; 0x74
 8004f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2a:	4b7b      	ldr	r3, [pc, #492]	; (8005118 <_vfiprintf_r+0x244>)
 8004f2c:	429d      	cmp	r5, r3
 8004f2e:	d101      	bne.n	8004f34 <_vfiprintf_r+0x60>
 8004f30:	68b5      	ldr	r5, [r6, #8]
 8004f32:	e7df      	b.n	8004ef4 <_vfiprintf_r+0x20>
 8004f34:	4b79      	ldr	r3, [pc, #484]	; (800511c <_vfiprintf_r+0x248>)
 8004f36:	429d      	cmp	r5, r3
 8004f38:	bf08      	it	eq
 8004f3a:	68f5      	ldreq	r5, [r6, #12]
 8004f3c:	e7da      	b.n	8004ef4 <_vfiprintf_r+0x20>
 8004f3e:	89ab      	ldrh	r3, [r5, #12]
 8004f40:	0598      	lsls	r0, r3, #22
 8004f42:	d4ed      	bmi.n	8004f20 <_vfiprintf_r+0x4c>
 8004f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f46:	f7ff fe54 	bl	8004bf2 <__retarget_lock_release_recursive>
 8004f4a:	e7e9      	b.n	8004f20 <_vfiprintf_r+0x4c>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f50:	2320      	movs	r3, #32
 8004f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f5a:	2330      	movs	r3, #48	; 0x30
 8004f5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005120 <_vfiprintf_r+0x24c>
 8004f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f64:	f04f 0901 	mov.w	r9, #1
 8004f68:	4623      	mov	r3, r4
 8004f6a:	469a      	mov	sl, r3
 8004f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f70:	b10a      	cbz	r2, 8004f76 <_vfiprintf_r+0xa2>
 8004f72:	2a25      	cmp	r2, #37	; 0x25
 8004f74:	d1f9      	bne.n	8004f6a <_vfiprintf_r+0x96>
 8004f76:	ebba 0b04 	subs.w	fp, sl, r4
 8004f7a:	d00b      	beq.n	8004f94 <_vfiprintf_r+0xc0>
 8004f7c:	465b      	mov	r3, fp
 8004f7e:	4622      	mov	r2, r4
 8004f80:	4629      	mov	r1, r5
 8004f82:	4630      	mov	r0, r6
 8004f84:	f7ff ff93 	bl	8004eae <__sfputs_r>
 8004f88:	3001      	adds	r0, #1
 8004f8a:	f000 80aa 	beq.w	80050e2 <_vfiprintf_r+0x20e>
 8004f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f90:	445a      	add	r2, fp
 8004f92:	9209      	str	r2, [sp, #36]	; 0x24
 8004f94:	f89a 3000 	ldrb.w	r3, [sl]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80a2 	beq.w	80050e2 <_vfiprintf_r+0x20e>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa8:	f10a 0a01 	add.w	sl, sl, #1
 8004fac:	9304      	str	r3, [sp, #16]
 8004fae:	9307      	str	r3, [sp, #28]
 8004fb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8004fb6:	4654      	mov	r4, sl
 8004fb8:	2205      	movs	r2, #5
 8004fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fbe:	4858      	ldr	r0, [pc, #352]	; (8005120 <_vfiprintf_r+0x24c>)
 8004fc0:	f7fb f926 	bl	8000210 <memchr>
 8004fc4:	9a04      	ldr	r2, [sp, #16]
 8004fc6:	b9d8      	cbnz	r0, 8005000 <_vfiprintf_r+0x12c>
 8004fc8:	06d1      	lsls	r1, r2, #27
 8004fca:	bf44      	itt	mi
 8004fcc:	2320      	movmi	r3, #32
 8004fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fd2:	0713      	lsls	r3, r2, #28
 8004fd4:	bf44      	itt	mi
 8004fd6:	232b      	movmi	r3, #43	; 0x2b
 8004fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8004fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8004fe2:	d015      	beq.n	8005010 <_vfiprintf_r+0x13c>
 8004fe4:	9a07      	ldr	r2, [sp, #28]
 8004fe6:	4654      	mov	r4, sl
 8004fe8:	2000      	movs	r0, #0
 8004fea:	f04f 0c0a 	mov.w	ip, #10
 8004fee:	4621      	mov	r1, r4
 8004ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ff4:	3b30      	subs	r3, #48	; 0x30
 8004ff6:	2b09      	cmp	r3, #9
 8004ff8:	d94e      	bls.n	8005098 <_vfiprintf_r+0x1c4>
 8004ffa:	b1b0      	cbz	r0, 800502a <_vfiprintf_r+0x156>
 8004ffc:	9207      	str	r2, [sp, #28]
 8004ffe:	e014      	b.n	800502a <_vfiprintf_r+0x156>
 8005000:	eba0 0308 	sub.w	r3, r0, r8
 8005004:	fa09 f303 	lsl.w	r3, r9, r3
 8005008:	4313      	orrs	r3, r2
 800500a:	9304      	str	r3, [sp, #16]
 800500c:	46a2      	mov	sl, r4
 800500e:	e7d2      	b.n	8004fb6 <_vfiprintf_r+0xe2>
 8005010:	9b03      	ldr	r3, [sp, #12]
 8005012:	1d19      	adds	r1, r3, #4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	9103      	str	r1, [sp, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	bfbb      	ittet	lt
 800501c:	425b      	neglt	r3, r3
 800501e:	f042 0202 	orrlt.w	r2, r2, #2
 8005022:	9307      	strge	r3, [sp, #28]
 8005024:	9307      	strlt	r3, [sp, #28]
 8005026:	bfb8      	it	lt
 8005028:	9204      	strlt	r2, [sp, #16]
 800502a:	7823      	ldrb	r3, [r4, #0]
 800502c:	2b2e      	cmp	r3, #46	; 0x2e
 800502e:	d10c      	bne.n	800504a <_vfiprintf_r+0x176>
 8005030:	7863      	ldrb	r3, [r4, #1]
 8005032:	2b2a      	cmp	r3, #42	; 0x2a
 8005034:	d135      	bne.n	80050a2 <_vfiprintf_r+0x1ce>
 8005036:	9b03      	ldr	r3, [sp, #12]
 8005038:	1d1a      	adds	r2, r3, #4
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	9203      	str	r2, [sp, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	bfb8      	it	lt
 8005042:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005046:	3402      	adds	r4, #2
 8005048:	9305      	str	r3, [sp, #20]
 800504a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005130 <_vfiprintf_r+0x25c>
 800504e:	7821      	ldrb	r1, [r4, #0]
 8005050:	2203      	movs	r2, #3
 8005052:	4650      	mov	r0, sl
 8005054:	f7fb f8dc 	bl	8000210 <memchr>
 8005058:	b140      	cbz	r0, 800506c <_vfiprintf_r+0x198>
 800505a:	2340      	movs	r3, #64	; 0x40
 800505c:	eba0 000a 	sub.w	r0, r0, sl
 8005060:	fa03 f000 	lsl.w	r0, r3, r0
 8005064:	9b04      	ldr	r3, [sp, #16]
 8005066:	4303      	orrs	r3, r0
 8005068:	3401      	adds	r4, #1
 800506a:	9304      	str	r3, [sp, #16]
 800506c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005070:	482c      	ldr	r0, [pc, #176]	; (8005124 <_vfiprintf_r+0x250>)
 8005072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005076:	2206      	movs	r2, #6
 8005078:	f7fb f8ca 	bl	8000210 <memchr>
 800507c:	2800      	cmp	r0, #0
 800507e:	d03f      	beq.n	8005100 <_vfiprintf_r+0x22c>
 8005080:	4b29      	ldr	r3, [pc, #164]	; (8005128 <_vfiprintf_r+0x254>)
 8005082:	bb1b      	cbnz	r3, 80050cc <_vfiprintf_r+0x1f8>
 8005084:	9b03      	ldr	r3, [sp, #12]
 8005086:	3307      	adds	r3, #7
 8005088:	f023 0307 	bic.w	r3, r3, #7
 800508c:	3308      	adds	r3, #8
 800508e:	9303      	str	r3, [sp, #12]
 8005090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005092:	443b      	add	r3, r7
 8005094:	9309      	str	r3, [sp, #36]	; 0x24
 8005096:	e767      	b.n	8004f68 <_vfiprintf_r+0x94>
 8005098:	fb0c 3202 	mla	r2, ip, r2, r3
 800509c:	460c      	mov	r4, r1
 800509e:	2001      	movs	r0, #1
 80050a0:	e7a5      	b.n	8004fee <_vfiprintf_r+0x11a>
 80050a2:	2300      	movs	r3, #0
 80050a4:	3401      	adds	r4, #1
 80050a6:	9305      	str	r3, [sp, #20]
 80050a8:	4619      	mov	r1, r3
 80050aa:	f04f 0c0a 	mov.w	ip, #10
 80050ae:	4620      	mov	r0, r4
 80050b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050b4:	3a30      	subs	r2, #48	; 0x30
 80050b6:	2a09      	cmp	r2, #9
 80050b8:	d903      	bls.n	80050c2 <_vfiprintf_r+0x1ee>
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0c5      	beq.n	800504a <_vfiprintf_r+0x176>
 80050be:	9105      	str	r1, [sp, #20]
 80050c0:	e7c3      	b.n	800504a <_vfiprintf_r+0x176>
 80050c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80050c6:	4604      	mov	r4, r0
 80050c8:	2301      	movs	r3, #1
 80050ca:	e7f0      	b.n	80050ae <_vfiprintf_r+0x1da>
 80050cc:	ab03      	add	r3, sp, #12
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	462a      	mov	r2, r5
 80050d2:	4b16      	ldr	r3, [pc, #88]	; (800512c <_vfiprintf_r+0x258>)
 80050d4:	a904      	add	r1, sp, #16
 80050d6:	4630      	mov	r0, r6
 80050d8:	f3af 8000 	nop.w
 80050dc:	4607      	mov	r7, r0
 80050de:	1c78      	adds	r0, r7, #1
 80050e0:	d1d6      	bne.n	8005090 <_vfiprintf_r+0x1bc>
 80050e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050e4:	07d9      	lsls	r1, r3, #31
 80050e6:	d405      	bmi.n	80050f4 <_vfiprintf_r+0x220>
 80050e8:	89ab      	ldrh	r3, [r5, #12]
 80050ea:	059a      	lsls	r2, r3, #22
 80050ec:	d402      	bmi.n	80050f4 <_vfiprintf_r+0x220>
 80050ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050f0:	f7ff fd7f 	bl	8004bf2 <__retarget_lock_release_recursive>
 80050f4:	89ab      	ldrh	r3, [r5, #12]
 80050f6:	065b      	lsls	r3, r3, #25
 80050f8:	f53f af12 	bmi.w	8004f20 <_vfiprintf_r+0x4c>
 80050fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050fe:	e711      	b.n	8004f24 <_vfiprintf_r+0x50>
 8005100:	ab03      	add	r3, sp, #12
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	462a      	mov	r2, r5
 8005106:	4b09      	ldr	r3, [pc, #36]	; (800512c <_vfiprintf_r+0x258>)
 8005108:	a904      	add	r1, sp, #16
 800510a:	4630      	mov	r0, r6
 800510c:	f000 f880 	bl	8005210 <_printf_i>
 8005110:	e7e4      	b.n	80050dc <_vfiprintf_r+0x208>
 8005112:	bf00      	nop
 8005114:	08005844 	.word	0x08005844
 8005118:	08005864 	.word	0x08005864
 800511c:	08005824 	.word	0x08005824
 8005120:	08005884 	.word	0x08005884
 8005124:	0800588e 	.word	0x0800588e
 8005128:	00000000 	.word	0x00000000
 800512c:	08004eaf 	.word	0x08004eaf
 8005130:	0800588a 	.word	0x0800588a

08005134 <_printf_common>:
 8005134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005138:	4616      	mov	r6, r2
 800513a:	4699      	mov	r9, r3
 800513c:	688a      	ldr	r2, [r1, #8]
 800513e:	690b      	ldr	r3, [r1, #16]
 8005140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005144:	4293      	cmp	r3, r2
 8005146:	bfb8      	it	lt
 8005148:	4613      	movlt	r3, r2
 800514a:	6033      	str	r3, [r6, #0]
 800514c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005150:	4607      	mov	r7, r0
 8005152:	460c      	mov	r4, r1
 8005154:	b10a      	cbz	r2, 800515a <_printf_common+0x26>
 8005156:	3301      	adds	r3, #1
 8005158:	6033      	str	r3, [r6, #0]
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	0699      	lsls	r1, r3, #26
 800515e:	bf42      	ittt	mi
 8005160:	6833      	ldrmi	r3, [r6, #0]
 8005162:	3302      	addmi	r3, #2
 8005164:	6033      	strmi	r3, [r6, #0]
 8005166:	6825      	ldr	r5, [r4, #0]
 8005168:	f015 0506 	ands.w	r5, r5, #6
 800516c:	d106      	bne.n	800517c <_printf_common+0x48>
 800516e:	f104 0a19 	add.w	sl, r4, #25
 8005172:	68e3      	ldr	r3, [r4, #12]
 8005174:	6832      	ldr	r2, [r6, #0]
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	42ab      	cmp	r3, r5
 800517a:	dc26      	bgt.n	80051ca <_printf_common+0x96>
 800517c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005180:	1e13      	subs	r3, r2, #0
 8005182:	6822      	ldr	r2, [r4, #0]
 8005184:	bf18      	it	ne
 8005186:	2301      	movne	r3, #1
 8005188:	0692      	lsls	r2, r2, #26
 800518a:	d42b      	bmi.n	80051e4 <_printf_common+0xb0>
 800518c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005190:	4649      	mov	r1, r9
 8005192:	4638      	mov	r0, r7
 8005194:	47c0      	blx	r8
 8005196:	3001      	adds	r0, #1
 8005198:	d01e      	beq.n	80051d8 <_printf_common+0xa4>
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	68e5      	ldr	r5, [r4, #12]
 800519e:	6832      	ldr	r2, [r6, #0]
 80051a0:	f003 0306 	and.w	r3, r3, #6
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	bf08      	it	eq
 80051a8:	1aad      	subeq	r5, r5, r2
 80051aa:	68a3      	ldr	r3, [r4, #8]
 80051ac:	6922      	ldr	r2, [r4, #16]
 80051ae:	bf0c      	ite	eq
 80051b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051b4:	2500      	movne	r5, #0
 80051b6:	4293      	cmp	r3, r2
 80051b8:	bfc4      	itt	gt
 80051ba:	1a9b      	subgt	r3, r3, r2
 80051bc:	18ed      	addgt	r5, r5, r3
 80051be:	2600      	movs	r6, #0
 80051c0:	341a      	adds	r4, #26
 80051c2:	42b5      	cmp	r5, r6
 80051c4:	d11a      	bne.n	80051fc <_printf_common+0xc8>
 80051c6:	2000      	movs	r0, #0
 80051c8:	e008      	b.n	80051dc <_printf_common+0xa8>
 80051ca:	2301      	movs	r3, #1
 80051cc:	4652      	mov	r2, sl
 80051ce:	4649      	mov	r1, r9
 80051d0:	4638      	mov	r0, r7
 80051d2:	47c0      	blx	r8
 80051d4:	3001      	adds	r0, #1
 80051d6:	d103      	bne.n	80051e0 <_printf_common+0xac>
 80051d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e0:	3501      	adds	r5, #1
 80051e2:	e7c6      	b.n	8005172 <_printf_common+0x3e>
 80051e4:	18e1      	adds	r1, r4, r3
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	2030      	movs	r0, #48	; 0x30
 80051ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ee:	4422      	add	r2, r4
 80051f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051f8:	3302      	adds	r3, #2
 80051fa:	e7c7      	b.n	800518c <_printf_common+0x58>
 80051fc:	2301      	movs	r3, #1
 80051fe:	4622      	mov	r2, r4
 8005200:	4649      	mov	r1, r9
 8005202:	4638      	mov	r0, r7
 8005204:	47c0      	blx	r8
 8005206:	3001      	adds	r0, #1
 8005208:	d0e6      	beq.n	80051d8 <_printf_common+0xa4>
 800520a:	3601      	adds	r6, #1
 800520c:	e7d9      	b.n	80051c2 <_printf_common+0x8e>
	...

08005210 <_printf_i>:
 8005210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005214:	7e0f      	ldrb	r7, [r1, #24]
 8005216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005218:	2f78      	cmp	r7, #120	; 0x78
 800521a:	4691      	mov	r9, r2
 800521c:	4680      	mov	r8, r0
 800521e:	460c      	mov	r4, r1
 8005220:	469a      	mov	sl, r3
 8005222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005226:	d807      	bhi.n	8005238 <_printf_i+0x28>
 8005228:	2f62      	cmp	r7, #98	; 0x62
 800522a:	d80a      	bhi.n	8005242 <_printf_i+0x32>
 800522c:	2f00      	cmp	r7, #0
 800522e:	f000 80d8 	beq.w	80053e2 <_printf_i+0x1d2>
 8005232:	2f58      	cmp	r7, #88	; 0x58
 8005234:	f000 80a3 	beq.w	800537e <_printf_i+0x16e>
 8005238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800523c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005240:	e03a      	b.n	80052b8 <_printf_i+0xa8>
 8005242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005246:	2b15      	cmp	r3, #21
 8005248:	d8f6      	bhi.n	8005238 <_printf_i+0x28>
 800524a:	a101      	add	r1, pc, #4	; (adr r1, 8005250 <_printf_i+0x40>)
 800524c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005250:	080052a9 	.word	0x080052a9
 8005254:	080052bd 	.word	0x080052bd
 8005258:	08005239 	.word	0x08005239
 800525c:	08005239 	.word	0x08005239
 8005260:	08005239 	.word	0x08005239
 8005264:	08005239 	.word	0x08005239
 8005268:	080052bd 	.word	0x080052bd
 800526c:	08005239 	.word	0x08005239
 8005270:	08005239 	.word	0x08005239
 8005274:	08005239 	.word	0x08005239
 8005278:	08005239 	.word	0x08005239
 800527c:	080053c9 	.word	0x080053c9
 8005280:	080052ed 	.word	0x080052ed
 8005284:	080053ab 	.word	0x080053ab
 8005288:	08005239 	.word	0x08005239
 800528c:	08005239 	.word	0x08005239
 8005290:	080053eb 	.word	0x080053eb
 8005294:	08005239 	.word	0x08005239
 8005298:	080052ed 	.word	0x080052ed
 800529c:	08005239 	.word	0x08005239
 80052a0:	08005239 	.word	0x08005239
 80052a4:	080053b3 	.word	0x080053b3
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	1d1a      	adds	r2, r3, #4
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	602a      	str	r2, [r5, #0]
 80052b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0a3      	b.n	8005404 <_printf_i+0x1f4>
 80052bc:	6820      	ldr	r0, [r4, #0]
 80052be:	6829      	ldr	r1, [r5, #0]
 80052c0:	0606      	lsls	r6, r0, #24
 80052c2:	f101 0304 	add.w	r3, r1, #4
 80052c6:	d50a      	bpl.n	80052de <_printf_i+0xce>
 80052c8:	680e      	ldr	r6, [r1, #0]
 80052ca:	602b      	str	r3, [r5, #0]
 80052cc:	2e00      	cmp	r6, #0
 80052ce:	da03      	bge.n	80052d8 <_printf_i+0xc8>
 80052d0:	232d      	movs	r3, #45	; 0x2d
 80052d2:	4276      	negs	r6, r6
 80052d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d8:	485e      	ldr	r0, [pc, #376]	; (8005454 <_printf_i+0x244>)
 80052da:	230a      	movs	r3, #10
 80052dc:	e019      	b.n	8005312 <_printf_i+0x102>
 80052de:	680e      	ldr	r6, [r1, #0]
 80052e0:	602b      	str	r3, [r5, #0]
 80052e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052e6:	bf18      	it	ne
 80052e8:	b236      	sxthne	r6, r6
 80052ea:	e7ef      	b.n	80052cc <_printf_i+0xbc>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	6820      	ldr	r0, [r4, #0]
 80052f0:	1d19      	adds	r1, r3, #4
 80052f2:	6029      	str	r1, [r5, #0]
 80052f4:	0601      	lsls	r1, r0, #24
 80052f6:	d501      	bpl.n	80052fc <_printf_i+0xec>
 80052f8:	681e      	ldr	r6, [r3, #0]
 80052fa:	e002      	b.n	8005302 <_printf_i+0xf2>
 80052fc:	0646      	lsls	r6, r0, #25
 80052fe:	d5fb      	bpl.n	80052f8 <_printf_i+0xe8>
 8005300:	881e      	ldrh	r6, [r3, #0]
 8005302:	4854      	ldr	r0, [pc, #336]	; (8005454 <_printf_i+0x244>)
 8005304:	2f6f      	cmp	r7, #111	; 0x6f
 8005306:	bf0c      	ite	eq
 8005308:	2308      	moveq	r3, #8
 800530a:	230a      	movne	r3, #10
 800530c:	2100      	movs	r1, #0
 800530e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005312:	6865      	ldr	r5, [r4, #4]
 8005314:	60a5      	str	r5, [r4, #8]
 8005316:	2d00      	cmp	r5, #0
 8005318:	bfa2      	ittt	ge
 800531a:	6821      	ldrge	r1, [r4, #0]
 800531c:	f021 0104 	bicge.w	r1, r1, #4
 8005320:	6021      	strge	r1, [r4, #0]
 8005322:	b90e      	cbnz	r6, 8005328 <_printf_i+0x118>
 8005324:	2d00      	cmp	r5, #0
 8005326:	d04d      	beq.n	80053c4 <_printf_i+0x1b4>
 8005328:	4615      	mov	r5, r2
 800532a:	fbb6 f1f3 	udiv	r1, r6, r3
 800532e:	fb03 6711 	mls	r7, r3, r1, r6
 8005332:	5dc7      	ldrb	r7, [r0, r7]
 8005334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005338:	4637      	mov	r7, r6
 800533a:	42bb      	cmp	r3, r7
 800533c:	460e      	mov	r6, r1
 800533e:	d9f4      	bls.n	800532a <_printf_i+0x11a>
 8005340:	2b08      	cmp	r3, #8
 8005342:	d10b      	bne.n	800535c <_printf_i+0x14c>
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	07de      	lsls	r6, r3, #31
 8005348:	d508      	bpl.n	800535c <_printf_i+0x14c>
 800534a:	6923      	ldr	r3, [r4, #16]
 800534c:	6861      	ldr	r1, [r4, #4]
 800534e:	4299      	cmp	r1, r3
 8005350:	bfde      	ittt	le
 8005352:	2330      	movle	r3, #48	; 0x30
 8005354:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005358:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800535c:	1b52      	subs	r2, r2, r5
 800535e:	6122      	str	r2, [r4, #16]
 8005360:	f8cd a000 	str.w	sl, [sp]
 8005364:	464b      	mov	r3, r9
 8005366:	aa03      	add	r2, sp, #12
 8005368:	4621      	mov	r1, r4
 800536a:	4640      	mov	r0, r8
 800536c:	f7ff fee2 	bl	8005134 <_printf_common>
 8005370:	3001      	adds	r0, #1
 8005372:	d14c      	bne.n	800540e <_printf_i+0x1fe>
 8005374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005378:	b004      	add	sp, #16
 800537a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537e:	4835      	ldr	r0, [pc, #212]	; (8005454 <_printf_i+0x244>)
 8005380:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005384:	6829      	ldr	r1, [r5, #0]
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	f851 6b04 	ldr.w	r6, [r1], #4
 800538c:	6029      	str	r1, [r5, #0]
 800538e:	061d      	lsls	r5, r3, #24
 8005390:	d514      	bpl.n	80053bc <_printf_i+0x1ac>
 8005392:	07df      	lsls	r7, r3, #31
 8005394:	bf44      	itt	mi
 8005396:	f043 0320 	orrmi.w	r3, r3, #32
 800539a:	6023      	strmi	r3, [r4, #0]
 800539c:	b91e      	cbnz	r6, 80053a6 <_printf_i+0x196>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	f023 0320 	bic.w	r3, r3, #32
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	2310      	movs	r3, #16
 80053a8:	e7b0      	b.n	800530c <_printf_i+0xfc>
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	f043 0320 	orr.w	r3, r3, #32
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	2378      	movs	r3, #120	; 0x78
 80053b4:	4828      	ldr	r0, [pc, #160]	; (8005458 <_printf_i+0x248>)
 80053b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053ba:	e7e3      	b.n	8005384 <_printf_i+0x174>
 80053bc:	0659      	lsls	r1, r3, #25
 80053be:	bf48      	it	mi
 80053c0:	b2b6      	uxthmi	r6, r6
 80053c2:	e7e6      	b.n	8005392 <_printf_i+0x182>
 80053c4:	4615      	mov	r5, r2
 80053c6:	e7bb      	b.n	8005340 <_printf_i+0x130>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	6826      	ldr	r6, [r4, #0]
 80053cc:	6961      	ldr	r1, [r4, #20]
 80053ce:	1d18      	adds	r0, r3, #4
 80053d0:	6028      	str	r0, [r5, #0]
 80053d2:	0635      	lsls	r5, r6, #24
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	d501      	bpl.n	80053dc <_printf_i+0x1cc>
 80053d8:	6019      	str	r1, [r3, #0]
 80053da:	e002      	b.n	80053e2 <_printf_i+0x1d2>
 80053dc:	0670      	lsls	r0, r6, #25
 80053de:	d5fb      	bpl.n	80053d8 <_printf_i+0x1c8>
 80053e0:	8019      	strh	r1, [r3, #0]
 80053e2:	2300      	movs	r3, #0
 80053e4:	6123      	str	r3, [r4, #16]
 80053e6:	4615      	mov	r5, r2
 80053e8:	e7ba      	b.n	8005360 <_printf_i+0x150>
 80053ea:	682b      	ldr	r3, [r5, #0]
 80053ec:	1d1a      	adds	r2, r3, #4
 80053ee:	602a      	str	r2, [r5, #0]
 80053f0:	681d      	ldr	r5, [r3, #0]
 80053f2:	6862      	ldr	r2, [r4, #4]
 80053f4:	2100      	movs	r1, #0
 80053f6:	4628      	mov	r0, r5
 80053f8:	f7fa ff0a 	bl	8000210 <memchr>
 80053fc:	b108      	cbz	r0, 8005402 <_printf_i+0x1f2>
 80053fe:	1b40      	subs	r0, r0, r5
 8005400:	6060      	str	r0, [r4, #4]
 8005402:	6863      	ldr	r3, [r4, #4]
 8005404:	6123      	str	r3, [r4, #16]
 8005406:	2300      	movs	r3, #0
 8005408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800540c:	e7a8      	b.n	8005360 <_printf_i+0x150>
 800540e:	6923      	ldr	r3, [r4, #16]
 8005410:	462a      	mov	r2, r5
 8005412:	4649      	mov	r1, r9
 8005414:	4640      	mov	r0, r8
 8005416:	47d0      	blx	sl
 8005418:	3001      	adds	r0, #1
 800541a:	d0ab      	beq.n	8005374 <_printf_i+0x164>
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	079b      	lsls	r3, r3, #30
 8005420:	d413      	bmi.n	800544a <_printf_i+0x23a>
 8005422:	68e0      	ldr	r0, [r4, #12]
 8005424:	9b03      	ldr	r3, [sp, #12]
 8005426:	4298      	cmp	r0, r3
 8005428:	bfb8      	it	lt
 800542a:	4618      	movlt	r0, r3
 800542c:	e7a4      	b.n	8005378 <_printf_i+0x168>
 800542e:	2301      	movs	r3, #1
 8005430:	4632      	mov	r2, r6
 8005432:	4649      	mov	r1, r9
 8005434:	4640      	mov	r0, r8
 8005436:	47d0      	blx	sl
 8005438:	3001      	adds	r0, #1
 800543a:	d09b      	beq.n	8005374 <_printf_i+0x164>
 800543c:	3501      	adds	r5, #1
 800543e:	68e3      	ldr	r3, [r4, #12]
 8005440:	9903      	ldr	r1, [sp, #12]
 8005442:	1a5b      	subs	r3, r3, r1
 8005444:	42ab      	cmp	r3, r5
 8005446:	dcf2      	bgt.n	800542e <_printf_i+0x21e>
 8005448:	e7eb      	b.n	8005422 <_printf_i+0x212>
 800544a:	2500      	movs	r5, #0
 800544c:	f104 0619 	add.w	r6, r4, #25
 8005450:	e7f5      	b.n	800543e <_printf_i+0x22e>
 8005452:	bf00      	nop
 8005454:	08005895 	.word	0x08005895
 8005458:	080058a6 	.word	0x080058a6

0800545c <_sbrk_r>:
 800545c:	b538      	push	{r3, r4, r5, lr}
 800545e:	4d06      	ldr	r5, [pc, #24]	; (8005478 <_sbrk_r+0x1c>)
 8005460:	2300      	movs	r3, #0
 8005462:	4604      	mov	r4, r0
 8005464:	4608      	mov	r0, r1
 8005466:	602b      	str	r3, [r5, #0]
 8005468:	f7fb fefa 	bl	8001260 <_sbrk>
 800546c:	1c43      	adds	r3, r0, #1
 800546e:	d102      	bne.n	8005476 <_sbrk_r+0x1a>
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	b103      	cbz	r3, 8005476 <_sbrk_r+0x1a>
 8005474:	6023      	str	r3, [r4, #0]
 8005476:	bd38      	pop	{r3, r4, r5, pc}
 8005478:	20000190 	.word	0x20000190

0800547c <__sread>:
 800547c:	b510      	push	{r4, lr}
 800547e:	460c      	mov	r4, r1
 8005480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005484:	f000 f8a0 	bl	80055c8 <_read_r>
 8005488:	2800      	cmp	r0, #0
 800548a:	bfab      	itete	ge
 800548c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800548e:	89a3      	ldrhlt	r3, [r4, #12]
 8005490:	181b      	addge	r3, r3, r0
 8005492:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005496:	bfac      	ite	ge
 8005498:	6563      	strge	r3, [r4, #84]	; 0x54
 800549a:	81a3      	strhlt	r3, [r4, #12]
 800549c:	bd10      	pop	{r4, pc}

0800549e <__swrite>:
 800549e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a2:	461f      	mov	r7, r3
 80054a4:	898b      	ldrh	r3, [r1, #12]
 80054a6:	05db      	lsls	r3, r3, #23
 80054a8:	4605      	mov	r5, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	4616      	mov	r6, r2
 80054ae:	d505      	bpl.n	80054bc <__swrite+0x1e>
 80054b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b4:	2302      	movs	r3, #2
 80054b6:	2200      	movs	r2, #0
 80054b8:	f000 f868 	bl	800558c <_lseek_r>
 80054bc:	89a3      	ldrh	r3, [r4, #12]
 80054be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054c6:	81a3      	strh	r3, [r4, #12]
 80054c8:	4632      	mov	r2, r6
 80054ca:	463b      	mov	r3, r7
 80054cc:	4628      	mov	r0, r5
 80054ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054d2:	f000 b817 	b.w	8005504 <_write_r>

080054d6 <__sseek>:
 80054d6:	b510      	push	{r4, lr}
 80054d8:	460c      	mov	r4, r1
 80054da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054de:	f000 f855 	bl	800558c <_lseek_r>
 80054e2:	1c43      	adds	r3, r0, #1
 80054e4:	89a3      	ldrh	r3, [r4, #12]
 80054e6:	bf15      	itete	ne
 80054e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80054ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054f2:	81a3      	strheq	r3, [r4, #12]
 80054f4:	bf18      	it	ne
 80054f6:	81a3      	strhne	r3, [r4, #12]
 80054f8:	bd10      	pop	{r4, pc}

080054fa <__sclose>:
 80054fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054fe:	f000 b813 	b.w	8005528 <_close_r>
	...

08005504 <_write_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	4d07      	ldr	r5, [pc, #28]	; (8005524 <_write_r+0x20>)
 8005508:	4604      	mov	r4, r0
 800550a:	4608      	mov	r0, r1
 800550c:	4611      	mov	r1, r2
 800550e:	2200      	movs	r2, #0
 8005510:	602a      	str	r2, [r5, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	f7fb fcc4 	bl	8000ea0 <_write>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d102      	bne.n	8005522 <_write_r+0x1e>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	b103      	cbz	r3, 8005522 <_write_r+0x1e>
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	bd38      	pop	{r3, r4, r5, pc}
 8005524:	20000190 	.word	0x20000190

08005528 <_close_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	4d06      	ldr	r5, [pc, #24]	; (8005544 <_close_r+0x1c>)
 800552c:	2300      	movs	r3, #0
 800552e:	4604      	mov	r4, r0
 8005530:	4608      	mov	r0, r1
 8005532:	602b      	str	r3, [r5, #0]
 8005534:	f7fb fe5f 	bl	80011f6 <_close>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d102      	bne.n	8005542 <_close_r+0x1a>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	b103      	cbz	r3, 8005542 <_close_r+0x1a>
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	20000190 	.word	0x20000190

08005548 <_fstat_r>:
 8005548:	b538      	push	{r3, r4, r5, lr}
 800554a:	4d07      	ldr	r5, [pc, #28]	; (8005568 <_fstat_r+0x20>)
 800554c:	2300      	movs	r3, #0
 800554e:	4604      	mov	r4, r0
 8005550:	4608      	mov	r0, r1
 8005552:	4611      	mov	r1, r2
 8005554:	602b      	str	r3, [r5, #0]
 8005556:	f7fb fe5a 	bl	800120e <_fstat>
 800555a:	1c43      	adds	r3, r0, #1
 800555c:	d102      	bne.n	8005564 <_fstat_r+0x1c>
 800555e:	682b      	ldr	r3, [r5, #0]
 8005560:	b103      	cbz	r3, 8005564 <_fstat_r+0x1c>
 8005562:	6023      	str	r3, [r4, #0]
 8005564:	bd38      	pop	{r3, r4, r5, pc}
 8005566:	bf00      	nop
 8005568:	20000190 	.word	0x20000190

0800556c <_isatty_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	4d06      	ldr	r5, [pc, #24]	; (8005588 <_isatty_r+0x1c>)
 8005570:	2300      	movs	r3, #0
 8005572:	4604      	mov	r4, r0
 8005574:	4608      	mov	r0, r1
 8005576:	602b      	str	r3, [r5, #0]
 8005578:	f7fb fe59 	bl	800122e <_isatty>
 800557c:	1c43      	adds	r3, r0, #1
 800557e:	d102      	bne.n	8005586 <_isatty_r+0x1a>
 8005580:	682b      	ldr	r3, [r5, #0]
 8005582:	b103      	cbz	r3, 8005586 <_isatty_r+0x1a>
 8005584:	6023      	str	r3, [r4, #0]
 8005586:	bd38      	pop	{r3, r4, r5, pc}
 8005588:	20000190 	.word	0x20000190

0800558c <_lseek_r>:
 800558c:	b538      	push	{r3, r4, r5, lr}
 800558e:	4d07      	ldr	r5, [pc, #28]	; (80055ac <_lseek_r+0x20>)
 8005590:	4604      	mov	r4, r0
 8005592:	4608      	mov	r0, r1
 8005594:	4611      	mov	r1, r2
 8005596:	2200      	movs	r2, #0
 8005598:	602a      	str	r2, [r5, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	f7fb fe52 	bl	8001244 <_lseek>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d102      	bne.n	80055aa <_lseek_r+0x1e>
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	b103      	cbz	r3, 80055aa <_lseek_r+0x1e>
 80055a8:	6023      	str	r3, [r4, #0]
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	20000190 	.word	0x20000190

080055b0 <__malloc_lock>:
 80055b0:	4801      	ldr	r0, [pc, #4]	; (80055b8 <__malloc_lock+0x8>)
 80055b2:	f7ff bb1d 	b.w	8004bf0 <__retarget_lock_acquire_recursive>
 80055b6:	bf00      	nop
 80055b8:	20000184 	.word	0x20000184

080055bc <__malloc_unlock>:
 80055bc:	4801      	ldr	r0, [pc, #4]	; (80055c4 <__malloc_unlock+0x8>)
 80055be:	f7ff bb18 	b.w	8004bf2 <__retarget_lock_release_recursive>
 80055c2:	bf00      	nop
 80055c4:	20000184 	.word	0x20000184

080055c8 <_read_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	4d07      	ldr	r5, [pc, #28]	; (80055e8 <_read_r+0x20>)
 80055cc:	4604      	mov	r4, r0
 80055ce:	4608      	mov	r0, r1
 80055d0:	4611      	mov	r1, r2
 80055d2:	2200      	movs	r2, #0
 80055d4:	602a      	str	r2, [r5, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	f7fb fdf0 	bl	80011bc <_read>
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d102      	bne.n	80055e6 <_read_r+0x1e>
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	b103      	cbz	r3, 80055e6 <_read_r+0x1e>
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	bd38      	pop	{r3, r4, r5, pc}
 80055e8:	20000190 	.word	0x20000190

080055ec <_init>:
 80055ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ee:	bf00      	nop
 80055f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f2:	bc08      	pop	{r3}
 80055f4:	469e      	mov	lr, r3
 80055f6:	4770      	bx	lr

080055f8 <_fini>:
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fa:	bf00      	nop
 80055fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fe:	bc08      	pop	{r3}
 8005600:	469e      	mov	lr, r3
 8005602:	4770      	bx	lr
