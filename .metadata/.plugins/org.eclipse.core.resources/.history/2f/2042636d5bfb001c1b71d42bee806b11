
STM32F303_TMC2209_StallGuard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007584  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  08007714  08007714  00017714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c24  08007c24  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007c24  08007c24  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c24  08007c24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c24  08007c24  00017c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c28  08007c28  00017c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000008c4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000934  20000934  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011bfd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000268c  00000000  00000000  00031c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  00034330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e00  00000000  00000000  00035228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d1bb  00000000  00000000  00036028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012318  00000000  00000000  000531e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a994e  00000000  00000000  000654fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010ee49  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046b0  00000000  00000000  0010ee9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080076fc 	.word	0x080076fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080076fc 	.word	0x080076fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <tmc2209_readWriteArray>:
    if (htim == &htim3){ //htim3に設定したタイマー割り込みの時間で発火する
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);//ピンの出力を切り替え
    }
}*/
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	60b9      	str	r1, [r7, #8]
 8000278:	607a      	str	r2, [r7, #4]
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	4603      	mov	r3, r0
 800027e:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8000280:	480e      	ldr	r0, [pc, #56]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000282:	f004 feef 	bl	8005064 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b29a      	uxth	r2, r3
 800028a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800028e:	68b9      	ldr	r1, [r7, #8]
 8000290:	480a      	ldr	r0, [pc, #40]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000292:	f004 f9c7 	bl	8004624 <HAL_UART_Transmit>

	if(readLength > 0){
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00a      	beq.n	80002b2 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 800029c:	4807      	ldr	r0, [pc, #28]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 800029e:	f004 ff33 	bl	8005108 <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength, 3000);
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002aa:	68b9      	ldr	r1, [r7, #8]
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 80002ae:	f004 fa4d 	bl	800474c <HAL_UART_Receive>
	}
}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000124 	.word	0x20000124

080002c0 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 80002ca:	2201      	movs	r2, #1
 80002cc:	6839      	ldr	r1, [r7, #0]
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f005 fe7c 	bl	8005fcc <tmc_CRC8>
 80002d4:	4603      	mov	r3, r0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <reset>:

static uint8_t reset()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 80002e4:	4802      	ldr	r0, [pc, #8]	; (80002f0 <reset+0x10>)
 80002e6:	f006 f8a9 	bl	800643c <tmc2209_reset>
 80002ea:	4603      	mov	r3, r0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	2000022c 	.word	0x2000022c

080002f4 <restore>:

static uint8_t restore()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 80002f8:	4802      	ldr	r0, [pc, #8]	; (8000304 <restore+0x10>)
 80002fa:	f006 f8d9 	bl	80064b0 <tmc2209_restore>
 80002fe:	4603      	mov	r3, r0
}
 8000300:	4618      	mov	r0, r3
 8000302:	bd80      	pop	{r7, pc}
 8000304:	2000022c 	.word	0x2000022c

08000308 <TMC2209_INIT>:


void TMC2209_INIT()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	2101      	movs	r1, #1
 8000312:	2007      	movs	r0, #7
 8000314:	f005 fda2 	bl	8005e5c <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <TMC2209_INIT+0x38>)
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <TMC2209_INIT+0x3c>)
 800031c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <TMC2209_INIT+0x38>)
 8000322:	4a09      	ldr	r2, [pc, #36]	; (8000348 <TMC2209_INIT+0x40>)
 8000324:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <TMC2209_INIT+0x44>)
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <TMC2209_INIT+0x38>)
 800032e:	2200      	movs	r2, #0
 8000330:	2100      	movs	r1, #0
 8000332:	4807      	ldr	r0, [pc, #28]	; (8000350 <TMC2209_INIT+0x48>)
 8000334:	f005 ff9e 	bl	8006274 <tmc2209_init>


	//restore();
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	200004b4 	.word	0x200004b4
 8000344:	080002e1 	.word	0x080002e1
 8000348:	080002f5 	.word	0x080002f5
 800034c:	080078d4 	.word	0x080078d4
 8000350:	2000022c 	.word	0x2000022c

08000354 <HAL_GPIO_EXTI_Callback>:
	return &TMC2209;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	80fb      	strh	r3, [r7, #6]
	//stepper 0 end stop senssor
	if(GPIO_Pin == GPIO_PIN_6 ){
 800035e:	88fb      	ldrh	r3, [r7, #6]
 8000360:	2b40      	cmp	r3, #64	; 0x40
 8000362:	d11b      	bne.n	800039c <HAL_GPIO_EXTI_Callback+0x48>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 8000364:	2140      	movs	r1, #64	; 0x40
 8000366:	480f      	ldr	r0, [pc, #60]	; (80003a4 <HAL_GPIO_EXTI_Callback+0x50>)
 8000368:	f001 fb9a 	bl	8001aa0 <HAL_GPIO_ReadPin>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d106      	bne.n	8000380 <HAL_GPIO_EXTI_Callback+0x2c>
			end_stop_state |= 1;
 8000372:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	b2da      	uxtb	r2, r3
 800037c:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <HAL_GPIO_EXTI_Callback+0x54>)
 800037e:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 8000380:	2140      	movs	r1, #64	; 0x40
 8000382:	4808      	ldr	r0, [pc, #32]	; (80003a4 <HAL_GPIO_EXTI_Callback+0x50>)
 8000384:	f001 fb8c 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d006      	beq.n	800039c <HAL_GPIO_EXTI_Callback+0x48>
			end_stop_state &= ~1;
 800038e:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	f023 0301 	bic.w	r3, r3, #1
 8000396:	b2da      	uxtb	r2, r3
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <HAL_GPIO_EXTI_Callback+0x54>)
 800039a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800039c:	bf00      	nop
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	48000400 	.word	0x48000400
 80003a8:	20000714 	.word	0x20000714

080003ac <Step0>:


void Step0(){                                       //step pin
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	//pull+

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2120      	movs	r1, #32
 80003b4:	4804      	ldr	r0, [pc, #16]	; (80003c8 <Step0+0x1c>)
 80003b6:	f001 fb8b 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80003ba:	2201      	movs	r2, #1
 80003bc:	2120      	movs	r1, #32
 80003be:	4802      	ldr	r0, [pc, #8]	; (80003c8 <Step0+0x1c>)
 80003c0:	f001 fb86 	bl	8001ad0 <HAL_GPIO_WritePin>
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	48000400 	.word	0x48000400

080003cc <Dir0>:

void Dir0(int dir){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dir); //Dir0関数にdirピンを指定して格納
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	461a      	mov	r2, r3
 80003da:	2110      	movs	r1, #16
 80003dc:	4803      	ldr	r0, [pc, #12]	; (80003ec <Dir0+0x20>)
 80003de:	f001 fb77 	bl	8001ad0 <HAL_GPIO_WritePin>
}
 80003e2:	bf00      	nop
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	48000400 	.word	0x48000400

080003f0 <resetStepper>:
	si->stepPosition = 0;
	si->movementDone = 0;
}


void resetStepper(volatile stepperInfo* si){    //resetStepper関数に引数をstepperInfo構造隊にポイント型変数siとして与える
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	si->c0 = si->acceleration;      //変数*siがメンバc0にアクセス.した値に変数*siがメンバaccelerationにアクセス.した値を代入する
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	edd3 7a00 	vldr	s15, [r3]
 80003fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000402:	ee17 2a90 	vmov	r2, s15
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	615a      	str	r2, [r3, #20]
	si->d = si->c0;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	ee07 3a90 	vmov	s15, r3
 8000412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	si->di = si->d;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000426:	ee17 2a90 	vmov	r2, s15
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	645a      	str	r2, [r3, #68]	; 0x44
	si->stepCount = 0;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2200      	movs	r2, #0
 8000432:	649a      	str	r2, [r3, #72]	; 0x48
	si->n = 0;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2200      	movs	r2, #0
 8000438:	63da      	str	r2, [r3, #60]	; 0x3c
	si->rampUpStepCount = 0;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2200      	movs	r2, #0
 800043e:	639a      	str	r2, [r3, #56]	; 0x38
	si->movementDone = 0;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2200      	movs	r2, #0
 8000444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <prepareAbsoluteMovement>:

volatile uint8_t remainingSteppersFlag = 0; //remainingSteppersFlagをuint8_t型で定義し、初期化


void prepareAbsoluteMovement(int absolute_steps){   //prepareAbsoluteMovementで与えられたステップ数だけモータを回す(main文から）
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	printf("absolute_steps:%d\r\n",absolute_steps);
 800045c:	6879      	ldr	r1, [r7, #4]
 800045e:	4820      	ldr	r0, [pc, #128]	; (80004e0 <prepareAbsoluteMovement+0x8c>)
 8000460:	f006 f872 	bl	8006548 <iprintf>
	volatile stepperInfo* si = &steppers[0];	//steppers[0]のアドレスをstepperInfo* si に代入
 8000464:	4b1f      	ldr	r3, [pc, #124]	; (80004e4 <prepareAbsoluteMovement+0x90>)
 8000466:	60fb      	str	r3, [r7, #12]
	int steps = absolute_steps - si->stepPosition;	//目標値からstepPositionを引いた値（stepposition=毎ステップカウントされるdirの値)
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	60bb      	str	r3, [r7, #8]
	printf("steps:%d\r\n",steps);
 8000472:	68b9      	ldr	r1, [r7, #8]
 8000474:	481c      	ldr	r0, [pc, #112]	; (80004e8 <prepareAbsoluteMovement+0x94>)
 8000476:	f006 f867 	bl	8006548 <iprintf>
	if(steps == 0){
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d02b      	beq.n	80004d8 <prepareAbsoluteMovement+0x84>
					return;
				}
	si->dirFunc( steps < 0 ? 1 : 0);
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	68ba      	ldr	r2, [r7, #8]
 8000486:	0fd2      	lsrs	r2, r2, #31
 8000488:	4610      	mov	r0, r2
 800048a:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	2b00      	cmp	r3, #0
 8000490:	dd01      	ble.n	8000496 <prepareAbsoluteMovement+0x42>
 8000492:	2201      	movs	r2, #1
 8000494:	e001      	b.n	800049a <prepareAbsoluteMovement+0x46>
 8000496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	61da      	str	r2, [r3, #28]
	//printf("prepareAbsoluteMovement\r\n");

	si->totalSteps = abs(steps);	//stepsの値をアブソリュートでtotalstepsに格納
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	bfb8      	it	lt
 80004a4:	425b      	neglt	r3, r3
 80004a6:	461a      	mov	r2, r3
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	631a      	str	r2, [r3, #48]	; 0x30
	printf("steps:%d\r\n",si->totalSteps);
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b0:	4619      	mov	r1, r3
 80004b2:	480d      	ldr	r0, [pc, #52]	; (80004e8 <prepareAbsoluteMovement+0x94>)
 80004b4:	f006 f848 	bl	8006548 <iprintf>

	resetStepper(si);
 80004b8:	68f8      	ldr	r0, [r7, #12]
 80004ba:	f7ff ff99 	bl	80003f0 <resetStepper>
	printf("steps:%d\r\n",steps);
 80004be:	68b9      	ldr	r1, [r7, #8]
 80004c0:	4809      	ldr	r0, [pc, #36]	; (80004e8 <prepareAbsoluteMovement+0x94>)
 80004c2:	f006 f841 	bl	8006548 <iprintf>
	remainingSteppersFlag |= (1 << 0);
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <prepareAbsoluteMovement+0x98>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <prepareAbsoluteMovement+0x98>)
 80004d4:	701a      	strb	r2, [r3, #0]
 80004d6:	e000      	b.n	80004da <prepareAbsoluteMovement+0x86>
					return;
 80004d8:	bf00      	nop
}
 80004da:	3710      	adds	r7, #16
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	08007714 	.word	0x08007714
 80004e4:	200006c8 	.word	0x200006c8
 80004e8:	08007728 	.word	0x08007728
 80004ec:	20000715 	.word	0x20000715

080004f0 <setNextInterruptInterval>:


volatile uint8_t nextStepperFlag = 0;

void setNextInterruptInterval(){
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
	unsigned int mind = 999999;
 80004f6:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <setNextInterruptInterval+0x74>)
 80004f8:	607b      	str	r3, [r7, #4]

			if( (remainingSteppersFlag) && steppers[0].di < mind ){
 80004fa:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <setNextInterruptInterval+0x78>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	2b00      	cmp	r3, #0
 8000502:	d007      	beq.n	8000514 <setNextInterruptInterval+0x24>
 8000504:	4b19      	ldr	r3, [pc, #100]	; (800056c <setNextInterruptInterval+0x7c>)
 8000506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	429a      	cmp	r2, r3
 800050c:	d902      	bls.n	8000514 <setNextInterruptInterval+0x24>
				mind = steppers[0].di;
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <setNextInterruptInterval+0x7c>)
 8000510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000512:	607b      	str	r3, [r7, #4]
			}
		nextStepperFlag = 0;
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <setNextInterruptInterval+0x80>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
			if( 1 && steppers[0].di == mind ){
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <setNextInterruptInterval+0x7c>)
 800051c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	429a      	cmp	r2, r3
 8000522:	d107      	bne.n	8000534 <setNextInterruptInterval+0x44>
				nextStepperFlag |= 1;
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <setNextInterruptInterval+0x80>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	f043 0301 	orr.w	r3, r3, #1
 800052e:	b2da      	uxtb	r2, r3
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <setNextInterruptInterval+0x80>)
 8000532:	701a      	strb	r2, [r3, #0]
			}

				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);		//mindにコンペアを設定
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <setNextInterruptInterval+0x84>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	635a      	str	r2, [r3, #52]	; 0x34

			if (remainingSteppersFlag == 0){
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <setNextInterruptInterval+0x78>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	d104      	bne.n	8000550 <setNextInterruptInterval+0x60>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <setNextInterruptInterval+0x84>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800054e:	635a      	str	r2, [r3, #52]	; 0x34
			}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <setNextInterruptInterval+0x84>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	635a      	str	r2, [r3, #52]	; 0x34
		//printf("nownompare:%d\r\n",mind);

}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	000f423f 	.word	0x000f423f
 8000568:	20000715 	.word	0x20000715
 800056c:	200006c8 	.word	0x200006c8
 8000570:	20000716 	.word	0x20000716
 8000574:	200000d8 	.word	0x200000d8

08000578 <currentcheck>:

void currentcheck(){
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
	int32_t current_value = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
	int32_t DIAG_value = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
	int32_t tstep_value = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
	int32_t SGTHRS_value = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	603b      	str	r3, [r7, #0]
//	tmc2209_periodicJob(&TMC2209, HAL_GetTick());

//	SGTHRS_value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
//	printf("SGTHRS: %d\r\n", SGTHRS_value);

	current_value=tmc2209_readInt(&TMC2209, TMC2209_SG_RESULT);	//保持トルクの設定
 800058e:	2141      	movs	r1, #65	; 0x41
 8000590:	4805      	ldr	r0, [pc, #20]	; (80005a8 <currentcheck+0x30>)
 8000592:	f005 fe0c 	bl	80061ae <tmc2209_readInt>
 8000596:	60f8      	str	r0, [r7, #12]
	printf("SG_RESULT : %ld\r\n", current_value);
 8000598:	68f9      	ldr	r1, [r7, #12]
 800059a:	4804      	ldr	r0, [pc, #16]	; (80005ac <currentcheck+0x34>)
 800059c:	f005 ffd4 	bl	8006548 <iprintf>

//	DIAG_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_DIAG_MASK, TMC2209_DIAG_SHIFT);
//	printf("DIAG : %ld\r\n", DIAG_value);
//	tmc2209_periodicJob(&TMC2209, HAL_GetTick());

}
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	2000022c 	.word	0x2000022c
 80005ac:	08007734 	.word	0x08007734

080005b0 <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){      //指定したコンペアを超えた時発火
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
	if(htim == &htim3){
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a1d      	ldr	r2, [pc, #116]	; (8000630 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d133      	bne.n	8000628 <HAL_TIM_OC_DelayElapsedCallback+0x78>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);			//コンペアを65500にセット
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80005c8:	635a      	str	r2, [r3, #52]	; 0x34
				//nextStepperFlagが真でない(0なら)

		//printf("steppers:%ld \r\n",steppers[0].di);

		volatile stepperInfo* s = &steppers[0];
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80005cc:	60fb      	str	r3, [r7, #12]

		if( (s->stepCount) < (s->totalSteps) ){		//1周ごとにカウントしたstepCountがabs(steps)より小さかったら==動作が終了するまで
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d220      	bcs.n	800061c <HAL_TIM_OC_DelayElapsedCallback+0x6c>
			s->stepFunc();
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	4798      	blx	r3
			s->stepCount++;							//カウントし続ける
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005e4:	1c5a      	adds	r2, r3, #1
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	649a      	str	r2, [r3, #72]	; 0x48
			s->stepPosition += s->dir;		//dir(+もしくはー(dirの向き）を加算してstepPositionに格納
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	69da      	ldr	r2, [r3, #28]
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	441a      	add	r2, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	619a      	str	r2, [r3, #24]
			if ( (s->stepCount) >= (s->totalSteps) ){	//stepCountがtotalStepsを超えたとき
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	429a      	cmp	r2, r3
 8000602:	d30b      	bcc.n	800061c <HAL_TIM_OC_DelayElapsedCallback+0x6c>
				s->movementDone = 1;	//movementDoneを1にする
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2201      	movs	r2, #1
 8000608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				remainingSteppersFlag &= ~1;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	f023 0301 	bic.w	r3, r3, #1
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 800061a:	701a      	strb	r2, [r3, #0]

			}
		}
		setNextInterruptInterval();
 800061c:	f7ff ff68 	bl	80004f0 <setNextInterruptInterval>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	; 0x24


	}
}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200000d8 	.word	0x200000d8
 8000634:	200006c8 	.word	0x200006c8
 8000638:	20000715 	.word	0x20000715

0800063c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
    if (htim == &htim2){
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d101      	bne.n	8000650 <HAL_TIM_PeriodElapsedCallback+0x14>
		currentcheck();
 800064c:	f7ff ff94 	bl	8000578 <currentcheck>

    }
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	2000008c 	.word	0x2000008c

0800065c <runAndWait>:
	if( ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){	//割り込みピンが真でない(1でない=0なら)
		end_stop_state |= 1;					//end_stop_stateに左辺か右辺が1なら1を代入
	}
}

void runAndWait(){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	setNextInterruptInterval();
 8000660:	f7ff ff46 	bl	80004f0 <setNextInterruptInterval>
	while(remainingSteppersFlag);
 8000664:	bf00      	nop
 8000666:	4b04      	ldr	r3, [pc, #16]	; (8000678 <runAndWait+0x1c>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1fa      	bne.n	8000666 <runAndWait+0xa>
}
 8000670:	bf00      	nop
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000715 	.word	0x20000715

0800067c <TMCsetup>:



void TMCsetup(){
 800067c:	b580      	push	{r7, lr}
 800067e:	b08e      	sub	sp, #56	; 0x38
 8000680:	af00      	add	r7, sp, #0
	int32_t mstep_value = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t toff_value = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t microstep_value = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t IRUN_value = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t IHOLD_value = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t IHOLDDELAY_value= 0;
 8000696:	2300      	movs	r3, #0
 8000698:	623b      	str	r3, [r7, #32]
	int32_t buffer = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
	int32_t stallgard_setup_value=0;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
	int32_t TCOOLTHRS_value=0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
	int32_t buffer_TPWMTHRS=0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
	int32_t TPWMTHRS_value=0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
	int32_t SEMIN_value=0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
	int32_t SEMAX_value=0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
	int32_t SEIMIN_scale_value=0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
//	FCLKTRIM_scale_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_FACTORY_CONF, TMC2209_FCLKTRIM_MASK, TMC2209_FCLKTRIM_SHIFT);
//	FCLKTRIM_scale_value=31;
//	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_FACTORY_CONF, TMC2209_FCLKTRIM_MASK, TMC2209_FCLKTRIM_SHIFT, FCLKTRIM_scale_value);
//	printf("FCLKTRIM: %ld\r\n", FCLKTRIM_scale_value);

	mstep_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK,TMC2209_MSTEP_REG_SELECT_SHIFT);	//uartでのmicrostepの有効化
 80006ba:	2100      	movs	r1, #0
 80006bc:	48be      	ldr	r0, [pc, #760]	; (80009b8 <TMCsetup+0x33c>)
 80006be:	f005 fd76 	bl	80061ae <tmc2209_readInt>
 80006c2:	4603      	mov	r3, r0
 80006c4:	11db      	asrs	r3, r3, #7
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
	printf("mstep_before : %ld\r\n", mstep_value);
 80006cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80006ce:	48bb      	ldr	r0, [pc, #748]	; (80009bc <TMCsetup+0x340>)
 80006d0:	f005 ff3a 	bl	8006548 <iprintf>
	mstep_value = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	637b      	str	r3, [r7, #52]	; 0x34
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT,mstep_value);
 80006d8:	2100      	movs	r1, #0
 80006da:	48b7      	ldr	r0, [pc, #732]	; (80009b8 <TMCsetup+0x33c>)
 80006dc:	f005 fd67 	bl	80061ae <tmc2209_readInt>
 80006e0:	4603      	mov	r3, r0
 80006e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80006e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006e8:	01db      	lsls	r3, r3, #7
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	4313      	orrs	r3, r2
 80006ee:	461a      	mov	r2, r3
 80006f0:	2100      	movs	r1, #0
 80006f2:	48b1      	ldr	r0, [pc, #708]	; (80009b8 <TMCsetup+0x33c>)
 80006f4:	f005 fd0b 	bl	800610e <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80006f8:	f000 fea8 	bl	800144c <HAL_GetTick>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4619      	mov	r1, r3
 8000700:	48ad      	ldr	r0, [pc, #692]	; (80009b8 <TMCsetup+0x33c>)
 8000702:	f005 fe8a 	bl	800641a <tmc2209_periodicJob>
	mstep_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT);
 8000706:	2100      	movs	r1, #0
 8000708:	48ab      	ldr	r0, [pc, #684]	; (80009b8 <TMCsetup+0x33c>)
 800070a:	f005 fd50 	bl	80061ae <tmc2209_readInt>
 800070e:	4603      	mov	r3, r0
 8000710:	11db      	asrs	r3, r3, #7
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	637b      	str	r3, [r7, #52]	; 0x34
	printf("mstep_after : %ld\r\n", mstep_value);
 8000718:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800071a:	48a9      	ldr	r0, [pc, #676]	; (80009c0 <TMCsetup+0x344>)
 800071c:	f005 ff14 	bl	8006548 <iprintf>

	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);	//保持トルクの設定
 8000720:	216c      	movs	r1, #108	; 0x6c
 8000722:	48a5      	ldr	r0, [pc, #660]	; (80009b8 <TMCsetup+0x33c>)
 8000724:	f005 fd43 	bl	80061ae <tmc2209_readInt>
 8000728:	4603      	mov	r3, r0
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
	printf("toff_before : %ld\r\n", toff_value);
 8000730:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000732:	48a4      	ldr	r0, [pc, #656]	; (80009c4 <TMCsetup+0x348>)
 8000734:	f005 ff08 	bl	8006548 <iprintf>
	toff_value = 4;
 8000738:	2304      	movs	r3, #4
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,toff_value);
 800073c:	216c      	movs	r1, #108	; 0x6c
 800073e:	489e      	ldr	r0, [pc, #632]	; (80009b8 <TMCsetup+0x33c>)
 8000740:	f005 fd35 	bl	80061ae <tmc2209_readInt>
 8000744:	4603      	mov	r3, r0
 8000746:	f023 020f 	bic.w	r2, r3, #15
 800074a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800074c:	f003 030f 	and.w	r3, r3, #15
 8000750:	4313      	orrs	r3, r2
 8000752:	461a      	mov	r2, r3
 8000754:	216c      	movs	r1, #108	; 0x6c
 8000756:	4898      	ldr	r0, [pc, #608]	; (80009b8 <TMCsetup+0x33c>)
 8000758:	f005 fcd9 	bl	800610e <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800075c:	f000 fe76 	bl	800144c <HAL_GetTick>
 8000760:	4603      	mov	r3, r0
 8000762:	4619      	mov	r1, r3
 8000764:	4894      	ldr	r0, [pc, #592]	; (80009b8 <TMCsetup+0x33c>)
 8000766:	f005 fe58 	bl	800641a <tmc2209_periodicJob>
	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 800076a:	216c      	movs	r1, #108	; 0x6c
 800076c:	4892      	ldr	r0, [pc, #584]	; (80009b8 <TMCsetup+0x33c>)
 800076e:	f005 fd1e 	bl	80061ae <tmc2209_readInt>
 8000772:	4603      	mov	r3, r0
 8000774:	f003 030f 	and.w	r3, r3, #15
 8000778:	633b      	str	r3, [r7, #48]	; 0x30
	printf("toff_after : %ld\r\n", toff_value);
 800077a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800077c:	4892      	ldr	r0, [pc, #584]	; (80009c8 <TMCsetup+0x34c>)
 800077e:	f005 fee3 	bl	8006548 <iprintf>

	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);	//microstepの設定
 8000782:	216c      	movs	r1, #108	; 0x6c
 8000784:	488c      	ldr	r0, [pc, #560]	; (80009b8 <TMCsetup+0x33c>)
 8000786:	f005 fd12 	bl	80061ae <tmc2209_readInt>
 800078a:	4603      	mov	r3, r0
 800078c:	161b      	asrs	r3, r3, #24
 800078e:	f003 030f 	and.w	r3, r3, #15
 8000792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000796:	fa42 f303 	asr.w	r3, r2, r3
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
	printf("microstep_before : %ld\r\n", microstep_value);
 800079c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800079e:	488b      	ldr	r0, [pc, #556]	; (80009cc <TMCsetup+0x350>)
 80007a0:	f005 fed2 	bl	8006548 <iprintf>
	microstep_value = 4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT,microstep_value);
 80007a8:	216c      	movs	r1, #108	; 0x6c
 80007aa:	4883      	ldr	r0, [pc, #524]	; (80009b8 <TMCsetup+0x33c>)
 80007ac:	f005 fcff 	bl	80061ae <tmc2209_readInt>
 80007b0:	4603      	mov	r3, r0
 80007b2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80007b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b8:	061b      	lsls	r3, r3, #24
 80007ba:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80007be:	4313      	orrs	r3, r2
 80007c0:	461a      	mov	r2, r3
 80007c2:	216c      	movs	r1, #108	; 0x6c
 80007c4:	487c      	ldr	r0, [pc, #496]	; (80009b8 <TMCsetup+0x33c>)
 80007c6:	f005 fca2 	bl	800610e <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80007ca:	f000 fe3f 	bl	800144c <HAL_GetTick>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4619      	mov	r1, r3
 80007d2:	4879      	ldr	r0, [pc, #484]	; (80009b8 <TMCsetup+0x33c>)
 80007d4:	f005 fe21 	bl	800641a <tmc2209_periodicJob>
	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 80007d8:	216c      	movs	r1, #108	; 0x6c
 80007da:	4877      	ldr	r0, [pc, #476]	; (80009b8 <TMCsetup+0x33c>)
 80007dc:	f005 fce7 	bl	80061ae <tmc2209_readInt>
 80007e0:	4603      	mov	r3, r0
 80007e2:	161b      	asrs	r3, r3, #24
 80007e4:	f003 030f 	and.w	r3, r3, #15
 80007e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ec:	fa42 f303 	asr.w	r3, r2, r3
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	printf("microstep_after : %ld\r\n", microstep_value);
 80007f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80007f4:	4876      	ldr	r0, [pc, #472]	; (80009d0 <TMCsetup+0x354>)
 80007f6:	f005 fea7 	bl	8006548 <iprintf>

	IHOLD_value=16;																							//モーター待機時の電流の設定
 80007fa:	2310      	movs	r3, #16
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, IHOLD_value);
 80007fe:	2110      	movs	r1, #16
 8000800:	486d      	ldr	r0, [pc, #436]	; (80009b8 <TMCsetup+0x33c>)
 8000802:	f005 fcd4 	bl	80061ae <tmc2209_readInt>
 8000806:	4603      	mov	r3, r0
 8000808:	f023 021f 	bic.w	r2, r3, #31
 800080c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080e:	f003 031f 	and.w	r3, r3, #31
 8000812:	4313      	orrs	r3, r2
 8000814:	461a      	mov	r2, r3
 8000816:	2110      	movs	r1, #16
 8000818:	4867      	ldr	r0, [pc, #412]	; (80009b8 <TMCsetup+0x33c>)
 800081a:	f005 fc78 	bl	800610e <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800081e:	f000 fe15 	bl	800144c <HAL_GetTick>
 8000822:	4603      	mov	r3, r0
 8000824:	4619      	mov	r1, r3
 8000826:	4864      	ldr	r0, [pc, #400]	; (80009b8 <TMCsetup+0x33c>)
 8000828:	f005 fdf7 	bl	800641a <tmc2209_periodicJob>
	HAL_Delay(100);
 800082c:	2064      	movs	r0, #100	; 0x64
 800082e:	f000 fe19 	bl	8001464 <HAL_Delay>
	IHOLD_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//保持電流
 8000832:	2110      	movs	r1, #16
 8000834:	4860      	ldr	r0, [pc, #384]	; (80009b8 <TMCsetup+0x33c>)
 8000836:	f005 fcba 	bl	80061ae <tmc2209_readInt>
 800083a:	4603      	mov	r3, r0
 800083c:	f003 031f 	and.w	r3, r3, #31
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
	printf("IHOLD: %ld\r\n", IHOLD_value);
 8000842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000844:	4863      	ldr	r0, [pc, #396]	; (80009d4 <TMCsetup+0x358>)
 8000846:	f005 fe7f 	bl	8006548 <iprintf>

	IRUN_value = 22;
 800084a:	2316      	movs	r3, #22
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, IRUN_value);	//実行電流
 800084e:	2110      	movs	r1, #16
 8000850:	4859      	ldr	r0, [pc, #356]	; (80009b8 <TMCsetup+0x33c>)
 8000852:	f005 fcac 	bl	80061ae <tmc2209_readInt>
 8000856:	4603      	mov	r3, r0
 8000858:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800085c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800085e:	021b      	lsls	r3, r3, #8
 8000860:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8000864:	4313      	orrs	r3, r2
 8000866:	461a      	mov	r2, r3
 8000868:	2110      	movs	r1, #16
 800086a:	4853      	ldr	r0, [pc, #332]	; (80009b8 <TMCsetup+0x33c>)
 800086c:	f005 fc4f 	bl	800610e <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000870:	f000 fdec 	bl	800144c <HAL_GetTick>
 8000874:	4603      	mov	r3, r0
 8000876:	4619      	mov	r1, r3
 8000878:	484f      	ldr	r0, [pc, #316]	; (80009b8 <TMCsetup+0x33c>)
 800087a:	f005 fdce 	bl	800641a <tmc2209_periodicJob>
	HAL_Delay(100);
 800087e:	2064      	movs	r0, #100	; 0x64
 8000880:	f000 fdf0 	bl	8001464 <HAL_Delay>
	IHOLD_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 8000884:	2110      	movs	r1, #16
 8000886:	484c      	ldr	r0, [pc, #304]	; (80009b8 <TMCsetup+0x33c>)
 8000888:	f005 fc91 	bl	80061ae <tmc2209_readInt>
 800088c:	4603      	mov	r3, r0
 800088e:	121b      	asrs	r3, r3, #8
 8000890:	f003 031f 	and.w	r3, r3, #31
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
	printf("IRUN: %ld\r\n", IRUN_value);
 8000896:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000898:	484f      	ldr	r0, [pc, #316]	; (80009d8 <TMCsetup+0x35c>)
 800089a:	f005 fe55 	bl	8006548 <iprintf>

	IHOLDDELAY_value=4;
 800089e:	2304      	movs	r3, #4
 80008a0:	623b      	str	r3, [r7, #32]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT, IHOLDDELAY_value);
 80008a2:	2110      	movs	r1, #16
 80008a4:	4844      	ldr	r0, [pc, #272]	; (80009b8 <TMCsetup+0x33c>)
 80008a6:	f005 fc82 	bl	80061ae <tmc2209_readInt>
 80008aa:	4603      	mov	r3, r0
 80008ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	041b      	lsls	r3, r3, #16
 80008b4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80008b8:	4313      	orrs	r3, r2
 80008ba:	461a      	mov	r2, r3
 80008bc:	2110      	movs	r1, #16
 80008be:	483e      	ldr	r0, [pc, #248]	; (80009b8 <TMCsetup+0x33c>)
 80008c0:	f005 fc25 	bl	800610e <tmc2209_writeInt>
	IHOLDDELAY_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT);
 80008c4:	2110      	movs	r1, #16
 80008c6:	483c      	ldr	r0, [pc, #240]	; (80009b8 <TMCsetup+0x33c>)
 80008c8:	f005 fc71 	bl	80061ae <tmc2209_readInt>
 80008cc:	4603      	mov	r3, r0
 80008ce:	141b      	asrs	r3, r3, #16
 80008d0:	f003 030f 	and.w	r3, r3, #15
 80008d4:	623b      	str	r3, [r7, #32]
	printf("IHOLDDELAY: %ld\r\n", IHOLDDELAY_value);
 80008d6:	6a39      	ldr	r1, [r7, #32]
 80008d8:	4840      	ldr	r0, [pc, #256]	; (80009dc <TMCsetup+0x360>)
 80008da:	f005 fe35 	bl	8006548 <iprintf>

	stallgard_setup_value=40;											//SG_RESULTと比較して、
 80008de:	2328      	movs	r3, #40	; 0x28
 80008e0:	61bb      	str	r3, [r7, #24]
	tmc2209_writeInt(&TMC2209, TMC2209_SGTHRS, stallgard_setup_value);
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	2140      	movs	r1, #64	; 0x40
 80008e6:	4834      	ldr	r0, [pc, #208]	; (80009b8 <TMCsetup+0x33c>)
 80008e8:	f005 fc11 	bl	800610e <tmc2209_writeInt>
	stallgard_setup_value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
 80008ec:	2140      	movs	r1, #64	; 0x40
 80008ee:	4832      	ldr	r0, [pc, #200]	; (80009b8 <TMCsetup+0x33c>)
 80008f0:	f005 fc5d 	bl	80061ae <tmc2209_readInt>
 80008f4:	61b8      	str	r0, [r7, #24]
	printf("SGTHRS: %ld\r\n", stallgard_setup_value);
 80008f6:	69b9      	ldr	r1, [r7, #24]
 80008f8:	4839      	ldr	r0, [pc, #228]	; (80009e0 <TMCsetup+0x364>)
 80008fa:	f005 fe25 	bl	8006548 <iprintf>


//	buffer = tmc2209_readInt(&TMC2209, TMC2209_TCOOLTHRS);
	TCOOLTHRS_value=800;
 80008fe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000902:	617b      	str	r3, [r7, #20]
////				}
////				else
////				{
////					TCOOLTHRS_value = 0x000FFFFF;
////				}
	tmc2209_writeInt(&TMC2209, TMC2209_TCOOLTHRS, TCOOLTHRS_value);
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	2114      	movs	r1, #20
 8000908:	482b      	ldr	r0, [pc, #172]	; (80009b8 <TMCsetup+0x33c>)
 800090a:	f005 fc00 	bl	800610e <tmc2209_writeInt>
	printf("TCOOLTHRS: %ld\r\n", TCOOLTHRS_value);
 800090e:	6979      	ldr	r1, [r7, #20]
 8000910:	4834      	ldr	r0, [pc, #208]	; (80009e4 <TMCsetup+0x368>)
 8000912:	f005 fe19 	bl	8006548 <iprintf>
//	buffer_TPWMTHRS = tmc2209_readInt(&TMC2209, TMC2209_TPWMTHRS);
//	TPWMTHRS_value = MIN(0xFFFFF, (1<<24) / ((buffer_TPWMTHRS) ? buffer_TPWMTHRS : 1));
//
//	TPWMTHRS_value = MIN(0xFFFFF, (1<<24) / ((TPWMTHRS_value) ? TPWMTHRS_value : 1));

	TPWMTHRS_value=100;
 8000916:	2364      	movs	r3, #100	; 0x64
 8000918:	60fb      	str	r3, [r7, #12]
	tmc2209_writeInt(&TMC2209, TMC2209_TPWMTHRS, TPWMTHRS_value);
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	2113      	movs	r1, #19
 800091e:	4826      	ldr	r0, [pc, #152]	; (80009b8 <TMCsetup+0x33c>)
 8000920:	f005 fbf5 	bl	800610e <tmc2209_writeInt>
	printf("TPWMTHRS: %ld\r\n", TPWMTHRS_value);
 8000924:	68f9      	ldr	r1, [r7, #12]
 8000926:	4830      	ldr	r0, [pc, #192]	; (80009e8 <TMCsetup+0x36c>)
 8000928:	f005 fe0e 	bl	8006548 <iprintf>

	//SEMIN_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT);

	SEMIN_value=1;	//IRUNのスケールを1/4
 800092c:	2301      	movs	r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT, SEMIN_value);
 8000930:	2142      	movs	r1, #66	; 0x42
 8000932:	4821      	ldr	r0, [pc, #132]	; (80009b8 <TMCsetup+0x33c>)
 8000934:	f005 fc3b 	bl	80061ae <tmc2209_readInt>
 8000938:	4603      	mov	r3, r0
 800093a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	03db      	lsls	r3, r3, #15
 8000942:	b29b      	uxth	r3, r3
 8000944:	4313      	orrs	r3, r2
 8000946:	461a      	mov	r2, r3
 8000948:	2142      	movs	r1, #66	; 0x42
 800094a:	481b      	ldr	r0, [pc, #108]	; (80009b8 <TMCsetup+0x33c>)
 800094c:	f005 fbdf 	bl	800610e <tmc2209_writeInt>
	printf("SEMIN: %ld\r\n", SEMIN_value);
 8000950:	68b9      	ldr	r1, [r7, #8]
 8000952:	4826      	ldr	r0, [pc, #152]	; (80009ec <TMCsetup+0x370>)
 8000954:	f005 fdf8 	bl	8006548 <iprintf>
//
//	//SEMAX_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_COOLCONF, TMC2209_SEMAX_MASK, TMC2209_SEMAX_SHIFT);
	SEMAX_value = 10;
 8000958:	230a      	movs	r3, #10
 800095a:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT, SEMIN_value);
 800095c:	2142      	movs	r1, #66	; 0x42
 800095e:	4816      	ldr	r0, [pc, #88]	; (80009b8 <TMCsetup+0x33c>)
 8000960:	f005 fc25 	bl	80061ae <tmc2209_readInt>
 8000964:	4603      	mov	r3, r0
 8000966:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	03db      	lsls	r3, r3, #15
 800096e:	b29b      	uxth	r3, r3
 8000970:	4313      	orrs	r3, r2
 8000972:	461a      	mov	r2, r3
 8000974:	2142      	movs	r1, #66	; 0x42
 8000976:	4810      	ldr	r0, [pc, #64]	; (80009b8 <TMCsetup+0x33c>)
 8000978:	f005 fbc9 	bl	800610e <tmc2209_writeInt>
	printf("SEMAX: %ld\r\n", SEMAX_value);
 800097c:	6879      	ldr	r1, [r7, #4]
 800097e:	481c      	ldr	r0, [pc, #112]	; (80009f0 <TMCsetup+0x374>)
 8000980:	f005 fde2 	bl	8006548 <iprintf>

	SEIMIN_scale_value=1;
 8000984:	2301      	movs	r3, #1
 8000986:	603b      	str	r3, [r7, #0]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT, SEIMIN_scale_value);
 8000988:	2142      	movs	r1, #66	; 0x42
 800098a:	480b      	ldr	r0, [pc, #44]	; (80009b8 <TMCsetup+0x33c>)
 800098c:	f005 fc0f 	bl	80061ae <tmc2209_readInt>
 8000990:	4603      	mov	r3, r0
 8000992:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	03db      	lsls	r3, r3, #15
 800099a:	b29b      	uxth	r3, r3
 800099c:	4313      	orrs	r3, r2
 800099e:	461a      	mov	r2, r3
 80009a0:	2142      	movs	r1, #66	; 0x42
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <TMCsetup+0x33c>)
 80009a4:	f005 fbb3 	bl	800610e <tmc2209_writeInt>
	printf("SEIMIN_scal: %ld\r\n", SEIMIN_scale_value);
 80009a8:	6839      	ldr	r1, [r7, #0]
 80009aa:	4812      	ldr	r0, [pc, #72]	; (80009f4 <TMCsetup+0x378>)
 80009ac:	f005 fdcc 	bl	8006548 <iprintf>





}
 80009b0:	bf00      	nop
 80009b2:	3738      	adds	r7, #56	; 0x38
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	2000022c 	.word	0x2000022c
 80009bc:	08007748 	.word	0x08007748
 80009c0:	08007760 	.word	0x08007760
 80009c4:	08007774 	.word	0x08007774
 80009c8:	08007788 	.word	0x08007788
 80009cc:	0800779c 	.word	0x0800779c
 80009d0:	080077b8 	.word	0x080077b8
 80009d4:	080077d0 	.word	0x080077d0
 80009d8:	080077e0 	.word	0x080077e0
 80009dc:	080077ec 	.word	0x080077ec
 80009e0:	08007800 	.word	0x08007800
 80009e4:	08007810 	.word	0x08007810
 80009e8:	08007824 	.word	0x08007824
 80009ec:	08007834 	.word	0x08007834
 80009f0:	08007844 	.word	0x08007844
 80009f4:	08007854 	.word	0x08007854

080009f8 <HAL_UART_RxCpltCallback>:
	//HAL_UART_Transmit(&huart2,(uint8_t *)motorrotate_TM,sizeof(motorrotate_TM),3000);

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
//	char rxbuf[1];
//	HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
//	HAL_UART_Transmit(&huart2,(uint8_t *)rxbuf,sizeof(rxbuf),3000);
	//motorrotate();
	uartflag1 = 1;
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <HAL_UART_RxCpltCallback+0x1c>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
	printf("uart_timer\r\n");
 8000a06:	4804      	ldr	r0, [pc, #16]	; (8000a18 <HAL_UART_RxCpltCallback+0x20>)
 8000a08:	f005 fe24 	bl	8006654 <puts>


}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000717 	.word	0x20000717
 8000a18:	08007868 	.word	0x08007868

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b5b0      	push	{r4, r5, r7, lr}
 8000a1e:	b092      	sub	sp, #72	; 0x48
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000a22:	4b57      	ldr	r3, [pc, #348]	; (8000b80 <main+0x164>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f005 fe1a 	bl	8006664 <setbuf>
	//uint8_t buffer[256];
	//char rxbuf[1];
	char start[] ="1:front,2:back\r\n";
 8000a30:	4b54      	ldr	r3, [pc, #336]	; (8000b84 <main+0x168>)
 8000a32:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000a36:	461d      	mov	r5, r3
 8000a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3c:	682b      	ldr	r3, [r5, #0]
 8000a3e:	7023      	strb	r3, [r4, #0]
	char front[] ="front turn\r\n";
 8000a40:	4b51      	ldr	r3, [pc, #324]	; (8000b88 <main+0x16c>)
 8000a42:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a48:	c407      	stmia	r4!, {r0, r1, r2}
 8000a4a:	7023      	strb	r3, [r4, #0]
	char back[] ="back turn\r\n";
 8000a4c:	4a4f      	ldr	r2, [pc, #316]	; (8000b8c <main+0x170>)
 8000a4e:	f107 0318 	add.w	r3, r7, #24
 8000a52:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char nonans[] ="Not Understand \r\n";
 8000a58:	4b4d      	ldr	r3, [pc, #308]	; (8000b90 <main+0x174>)
 8000a5a:	1d3c      	adds	r4, r7, #4
 8000a5c:	461d      	mov	r5, r3
 8000a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a62:	682b      	ldr	r3, [r5, #0]
 8000a64:	8023      	strh	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a66:	f000 fc97 	bl	8001398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6a:	f000 f8a9 	bl	8000bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6e:	f000 fa23 	bl	8000eb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a72:	f000 f9f1 	bl	8000e58 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000a76:	f000 f9bf 	bl	8000df8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000a7a:	f000 f947 	bl	8000d0c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000a7e:	f000 f8f7 	bl	8000c70 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //int getserial=0;
  TMC2209_INIT();
 8000a82:	f7ff fc41 	bl	8000308 <TMC2209_INIT>
  TMCsetup();
 8000a86:	f7ff fdf9 	bl	800067c <TMCsetup>
  printf("Hello\r\n");
 8000a8a:	4842      	ldr	r0, [pc, #264]	; (8000b94 <main+0x178>)
 8000a8c:	f005 fde2 	bl	8006654 <puts>
  HAL_UART_Transmit(&huart2,(uint8_t *)start,sizeof(start),3000);
 8000a90:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000a94:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a98:	2211      	movs	r2, #17
 8000a9a:	483f      	ldr	r0, [pc, #252]	; (8000b98 <main+0x17c>)
 8000a9c:	f003 fdc2 	bl	8004624 <HAL_UART_Transmit>
  //uint8_t rxbuf[1];
   //int32_t *value=3;

   //TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT, 3 );
   //Set stepper 1
   steppers[0].dirFunc = Dir0;
 8000aa0:	4b3e      	ldr	r3, [pc, #248]	; (8000b9c <main+0x180>)
 8000aa2:	4a3f      	ldr	r2, [pc, #252]	; (8000ba0 <main+0x184>)
 8000aa4:	609a      	str	r2, [r3, #8]
   steppers[0].stepFunc = Step0;
 8000aa6:	4b3d      	ldr	r3, [pc, #244]	; (8000b9c <main+0x180>)
 8000aa8:	4a3e      	ldr	r2, [pc, #248]	; (8000ba4 <main+0x188>)
 8000aaa:	60da      	str	r2, [r3, #12]
   steppers[0].acceleration = 100-1;
 8000aac:	4b3b      	ldr	r3, [pc, #236]	; (8000b9c <main+0x180>)
 8000aae:	4a3e      	ldr	r2, [pc, #248]	; (8000ba8 <main+0x18c>)
 8000ab0:	601a      	str	r2, [r3, #0]
   steppers[0].minStepInterval = 100;
 8000ab2:	4b3a      	ldr	r3, [pc, #232]	; (8000b9c <main+0x180>)
 8000ab4:	2264      	movs	r2, #100	; 0x64
 8000ab6:	605a      	str	r2, [r3, #4]
   steppers[0].homing = 0;
 8000ab8:	4b38      	ldr	r3, [pc, #224]	; (8000b9c <main+0x180>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	741a      	strb	r2, [r3, #16]
   steppers[0].dir_inv = 1;
 8000abe:	4b37      	ldr	r3, [pc, #220]	; (8000b9c <main+0x180>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	621a      	str	r2, [r3, #32]
   steppers[0].seeking_vel = 100;
 8000ac4:	4b35      	ldr	r3, [pc, #212]	; (8000b9c <main+0x180>)
 8000ac6:	2264      	movs	r2, #100	; 0x64
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
   steppers[0].homing_vel = 200;
 8000aca:	4b34      	ldr	r3, [pc, #208]	; (8000b9c <main+0x180>)
 8000acc:	22c8      	movs	r2, #200	; 0xc8
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
   steppers[0].pull_off = 100;
 8000ad0:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <main+0x180>)
 8000ad2:	2264      	movs	r2, #100	; 0x64
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
    //pull+
   //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);  //ena pin
    //pull-w
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);

   HAL_TIM_Base_Start_IT(&htim2);
 8000ad6:	4835      	ldr	r0, [pc, #212]	; (8000bac <main+0x190>)
 8000ad8:	f002 fc1c 	bl	8003314 <HAL_TIM_Base_Start_IT>
   HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000adc:	2100      	movs	r1, #0
 8000ade:	4834      	ldr	r0, [pc, #208]	; (8000bb0 <main+0x194>)
 8000ae0:	f002 fcd6 	bl	8003490 <HAL_TIM_OC_Start_IT>

   //HAL_UART_Transmit(&huart2,(uint8_t *)rxbuf,sizeof(rxbuf),3000);

	rxbuf[0]=0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	703b      	strb	r3, [r7, #0]
	uartflag1=0;
 8000ae8:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <main+0x198>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //example read register value
	  //int32_t value = 0;
	  HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
 8000aee:	463b      	mov	r3, r7
 8000af0:	2201      	movs	r2, #1
 8000af2:	4619      	mov	r1, r3
 8000af4:	4828      	ldr	r0, [pc, #160]	; (8000b98 <main+0x17c>)
 8000af6:	f003 ff69 	bl	80049cc <HAL_UART_Receive_IT>
//	  while(uartflag1==0){
//		  ;
//	  }
	  HAL_UART_Transmit(&huart2,(uint8_t *)rxbuf,sizeof(rxbuf),3000);
 8000afa:	4639      	mov	r1, r7
 8000afc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b00:	2201      	movs	r2, #1
 8000b02:	4825      	ldr	r0, [pc, #148]	; (8000b98 <main+0x17c>)
 8000b04:	f003 fd8e 	bl	8004624 <HAL_UART_Transmit>
	  if(uartflag1==1){
 8000b08:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <main+0x198>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d1ee      	bne.n	8000aee <main+0xd2>
		  if (rxbuf[0] != 0){
 8000b10:	783b      	ldrb	r3, [r7, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d0eb      	beq.n	8000aee <main+0xd2>
			  if(rxbuf[0] == '1'){
 8000b16:	783b      	ldrb	r3, [r7, #0]
 8000b18:	2b31      	cmp	r3, #49	; 0x31
 8000b1a:	d119      	bne.n	8000b50 <main+0x134>
				  //HAL_UART_Transmit_IT(&huart2,(uint8_t *)front, sizeof(front));
				  printf("1:start\r\n");
 8000b1c:	4826      	ldr	r0, [pc, #152]	; (8000bb8 <main+0x19c>)
 8000b1e:	f005 fd99 	bl	8006654 <puts>
				  prepareAbsoluteMovement(10000);
 8000b22:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b26:	f7ff fc95 	bl	8000454 <prepareAbsoluteMovement>
				  runAndWait();
 8000b2a:	f7ff fd97 	bl	800065c <runAndWait>
				  HAL_Delay(100);
 8000b2e:	2064      	movs	r0, #100	; 0x64
 8000b30:	f000 fc98 	bl	8001464 <HAL_Delay>
				  prepareAbsoluteMovement(0);
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fc8d 	bl	8000454 <prepareAbsoluteMovement>
				  runAndWait();
 8000b3a:	f7ff fd8f 	bl	800065c <runAndWait>
				  HAL_Delay(100);
 8000b3e:	2064      	movs	r0, #100	; 0x64
 8000b40:	f000 fc90 	bl	8001464 <HAL_Delay>
				  printf("1:end\r\n");
 8000b44:	481d      	ldr	r0, [pc, #116]	; (8000bbc <main+0x1a0>)
 8000b46:	f005 fd85 	bl	8006654 <puts>
				  rxbuf[0]=0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	703b      	strb	r3, [r7, #0]
 8000b4e:	e012      	b.n	8000b76 <main+0x15a>

			  }
			  else if(rxbuf[0] == '2'){
 8000b50:	783b      	ldrb	r3, [r7, #0]
 8000b52:	2b32      	cmp	r3, #50	; 0x32
 8000b54:	d107      	bne.n	8000b66 <main+0x14a>
				  //HAL_UART_Transmit_IT(&huart2,(uint8_t *)back, sizeof(back));
				  runAndWait();
 8000b56:	f7ff fd81 	bl	800065c <runAndWait>
				  HAL_Delay(100);
 8000b5a:	2064      	movs	r0, #100	; 0x64
 8000b5c:	f000 fc82 	bl	8001464 <HAL_Delay>

				  rxbuf[0]=0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	703b      	strb	r3, [r7, #0]
 8000b64:	e007      	b.n	8000b76 <main+0x15a>
			  }
			  else{
				  HAL_UART_Transmit_IT(&huart2,(uint8_t *)nonans, sizeof(nonans));
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2212      	movs	r2, #18
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480a      	ldr	r0, [pc, #40]	; (8000b98 <main+0x17c>)
 8000b6e:	f003 febf 	bl	80048f0 <HAL_UART_Transmit_IT>
				  rxbuf[0]=0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	703b      	strb	r3, [r7, #0]
			  }
			  uartflag1=0;
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <main+0x198>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
 8000b7c:	e7b7      	b.n	8000aee <main+0xd2>
 8000b7e:	bf00      	nop
 8000b80:	2000000c 	.word	0x2000000c
 8000b84:	08007890 	.word	0x08007890
 8000b88:	080078a4 	.word	0x080078a4
 8000b8c:	080078b4 	.word	0x080078b4
 8000b90:	080078c0 	.word	0x080078c0
 8000b94:	08007874 	.word	0x08007874
 8000b98:	200001a8 	.word	0x200001a8
 8000b9c:	200006c8 	.word	0x200006c8
 8000ba0:	080003cd 	.word	0x080003cd
 8000ba4:	080003ad 	.word	0x080003ad
 8000ba8:	42c60000 	.word	0x42c60000
 8000bac:	2000008c 	.word	0x2000008c
 8000bb0:	200000d8 	.word	0x200000d8
 8000bb4:	20000717 	.word	0x20000717
 8000bb8:	0800787c 	.word	0x0800787c
 8000bbc:	08007888 	.word	0x08007888

08000bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b096      	sub	sp, #88	; 0x58
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bca:	2228      	movs	r2, #40	; 0x28
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f005 fcb2 	bl	8006538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]
 8000bf2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c00:	2302      	movs	r3, #2
 8000c02:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c04:	2300      	movs	r3, #0
 8000c06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c08:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c0c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 ff8c 	bl	8001b30 <HAL_RCC_OscConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c1e:	f000 f9bf 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c22:	230f      	movs	r3, #15
 8000c24:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c26:	2302      	movs	r3, #2
 8000c28:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 ffb4 	bl	8002bac <HAL_RCC_ClockConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c4a:	f000 f9a9 	bl	8000fa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 f9dd 	bl	8003018 <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000c64:	f000 f99c 	bl	8000fa0 <Error_Handler>
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3758      	adds	r7, #88	; 0x58
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c76:	f107 0310 	add.w	r3, r7, #16
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c8e:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <MX_TIM2_Init+0x98>)
 8000c90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 640-1;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <MX_TIM2_Init+0x98>)
 8000c98:	f240 227f 	movw	r2, #639	; 0x27f
 8000c9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_TIM2_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_TIM2_Init+0x98>)
 8000ca6:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000caa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <MX_TIM2_Init+0x98>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_TIM2_Init+0x98>)
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cb8:	4813      	ldr	r0, [pc, #76]	; (8000d08 <MX_TIM2_Init+0x98>)
 8000cba:	f002 fad3 	bl	8003264 <HAL_TIM_Base_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000cc4:	f000 f96c 	bl	8000fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480c      	ldr	r0, [pc, #48]	; (8000d08 <MX_TIM2_Init+0x98>)
 8000cd6:	f002 feaf 	bl	8003a38 <HAL_TIM_ConfigClockSource>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000ce0:	f000 f95e 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_TIM2_Init+0x98>)
 8000cf2:	f003 fb67 	bl	80043c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000cfc:	f000 f950 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000008c 	.word	0x2000008c

08000d0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08e      	sub	sp, #56	; 0x38
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]
 8000d3a:	615a      	str	r2, [r3, #20]
 8000d3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d3e:	4b2c      	ldr	r3, [pc, #176]	; (8000df0 <MX_TIM3_Init+0xe4>)
 8000d40:	4a2c      	ldr	r2, [pc, #176]	; (8000df4 <MX_TIM3_Init+0xe8>)
 8000d42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 640-1;
 8000d44:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <MX_TIM3_Init+0xe4>)
 8000d46:	f240 227f 	movw	r2, #639	; 0x27f
 8000d4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4c:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <MX_TIM3_Init+0xe4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d52:	4b27      	ldr	r3, [pc, #156]	; (8000df0 <MX_TIM3_Init+0xe4>)
 8000d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <MX_TIM3_Init+0xe4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d60:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <MX_TIM3_Init+0xe4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d66:	4822      	ldr	r0, [pc, #136]	; (8000df0 <MX_TIM3_Init+0xe4>)
 8000d68:	f002 fa7c 	bl	8003264 <HAL_TIM_Base_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000d72:	f000 f915 	bl	8000fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d80:	4619      	mov	r1, r3
 8000d82:	481b      	ldr	r0, [pc, #108]	; (8000df0 <MX_TIM3_Init+0xe4>)
 8000d84:	f002 fe58 	bl	8003a38 <HAL_TIM_ConfigClockSource>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000d8e:	f000 f907 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000d92:	4817      	ldr	r0, [pc, #92]	; (8000df0 <MX_TIM3_Init+0xe4>)
 8000d94:	f002 fb1a 	bl	80033cc <HAL_TIM_OC_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d9e:	f000 f8ff 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	480f      	ldr	r0, [pc, #60]	; (8000df0 <MX_TIM3_Init+0xe4>)
 8000db2:	f003 fb07 	bl	80043c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000dbc:	f000 f8f0 	bl	8000fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4806      	ldr	r0, [pc, #24]	; (8000df0 <MX_TIM3_Init+0xe4>)
 8000dd8:	f002 fdb4 	bl	8003944 <HAL_TIM_OC_ConfigChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000de2:	f000 f8dd 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	3738      	adds	r7, #56	; 0x38
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200000d8 	.word	0x200000d8
 8000df4:	40000400 	.word	0x40000400

08000df8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000dfe:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <MX_USART1_UART_Init+0x5c>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e3c:	f003 fb9c 	bl	8004578 <HAL_HalfDuplex_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e46:	f000 f8ab 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000124 	.word	0x20000124
 8000e54:	40013800 	.word	0x40013800

08000e58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e5e:	4a15      	ldr	r2, [pc, #84]	; (8000eb4 <MX_USART2_UART_Init+0x5c>)
 8000e60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e9c:	f003 fb1e 	bl	80044dc <HAL_UART_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ea6:	f000 f87b 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200001a8 	.word	0x200001a8
 8000eb4:	40004400 	.word	0x40004400

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ece:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <MX_GPIO_Init+0xb8>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a27      	ldr	r2, [pc, #156]	; (8000f70 <MX_GPIO_Init+0xb8>)
 8000ed4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <MX_GPIO_Init+0xb8>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <MX_GPIO_Init+0xb8>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	4a21      	ldr	r2, [pc, #132]	; (8000f70 <MX_GPIO_Init+0xb8>)
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	6153      	str	r3, [r2, #20]
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <MX_GPIO_Init+0xb8>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <MX_GPIO_Init+0xb8>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	4a1b      	ldr	r2, [pc, #108]	; (8000f70 <MX_GPIO_Init+0xb8>)
 8000f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f08:	6153      	str	r3, [r2, #20]
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <MX_GPIO_Init+0xb8>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2130      	movs	r1, #48	; 0x30
 8000f1a:	4816      	ldr	r0, [pc, #88]	; (8000f74 <MX_GPIO_Init+0xbc>)
 8000f1c:	f000 fdd8 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f20:	2330      	movs	r3, #48	; 0x30
 8000f22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4619      	mov	r1, r3
 8000f36:	480f      	ldr	r0, [pc, #60]	; (8000f74 <MX_GPIO_Init+0xbc>)
 8000f38:	f000 fc40 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f3c:	2340      	movs	r3, #64	; 0x40
 8000f3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f40:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4808      	ldr	r0, [pc, #32]	; (8000f74 <MX_GPIO_Init+0xbc>)
 8000f52:	f000 fc33 	bl	80017bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2101      	movs	r1, #1
 8000f5a:	2017      	movs	r0, #23
 8000f5c:	f000 fb81 	bl	8001662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f60:	2017      	movs	r0, #23
 8000f62:	f000 fb9a 	bl	800169a <HAL_NVIC_EnableIRQ>

}
 8000f66:	bf00      	nop
 8000f68:	3720      	adds	r7, #32
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	48000400 	.word	0x48000400

08000f78 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	230a      	movs	r3, #10
 8000f8a:	68b9      	ldr	r1, [r7, #8]
 8000f8c:	4803      	ldr	r0, [pc, #12]	; (8000f9c <_write+0x24>)
 8000f8e:	f003 fb49 	bl	8004624 <HAL_UART_Transmit>
  return len;
 8000f92:	687b      	ldr	r3, [r7, #4]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200001a8 	.word	0x200001a8

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <Error_Handler+0x8>
	...

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6193      	str	r3, [r2, #24]
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	61d3      	str	r3, [r2, #28]
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001004:	d114      	bne.n	8001030 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <HAL_TIM_Base_MspInit+0x78>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	4a18      	ldr	r2, [pc, #96]	; (800106c <HAL_TIM_Base_MspInit+0x78>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	61d3      	str	r3, [r2, #28]
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <HAL_TIM_Base_MspInit+0x78>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2102      	movs	r1, #2
 8001022:	201c      	movs	r0, #28
 8001024:	f000 fb1d 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001028:	201c      	movs	r0, #28
 800102a:	f000 fb36 	bl	800169a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800102e:	e018      	b.n	8001062 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <HAL_TIM_Base_MspInit+0x7c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d113      	bne.n	8001062 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <HAL_TIM_Base_MspInit+0x78>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <HAL_TIM_Base_MspInit+0x78>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	61d3      	str	r3, [r2, #28]
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_TIM_Base_MspInit+0x78>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2103      	movs	r1, #3
 8001056:	201d      	movs	r0, #29
 8001058:	f000 fb03 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800105c:	201d      	movs	r0, #29
 800105e:	f000 fb1c 	bl	800169a <HAL_NVIC_EnableIRQ>
}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000
 8001070:	40000400 	.word	0x40000400

08001074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	; 0x30
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a34      	ldr	r2, [pc, #208]	; (8001164 <HAL_UART_MspInit+0xf0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d12a      	bne.n	80010ec <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001096:	4b34      	ldr	r3, [pc, #208]	; (8001168 <HAL_UART_MspInit+0xf4>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	4a33      	ldr	r2, [pc, #204]	; (8001168 <HAL_UART_MspInit+0xf4>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a0:	6193      	str	r3, [r2, #24]
 80010a2:	4b31      	ldr	r3, [pc, #196]	; (8001168 <HAL_UART_MspInit+0xf4>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010aa:	61bb      	str	r3, [r7, #24]
 80010ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <HAL_UART_MspInit+0xf4>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a2d      	ldr	r2, [pc, #180]	; (8001168 <HAL_UART_MspInit+0xf4>)
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	6153      	str	r3, [r2, #20]
 80010ba:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <HAL_UART_MspInit+0xf4>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010cc:	2312      	movs	r3, #18
 80010ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010d8:	2307      	movs	r3, #7
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f000 fb69 	bl	80017bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ea:	e036      	b.n	800115a <HAL_UART_MspInit+0xe6>
  else if(huart->Instance==USART2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a1e      	ldr	r2, [pc, #120]	; (800116c <HAL_UART_MspInit+0xf8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d131      	bne.n	800115a <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <HAL_UART_MspInit+0xf4>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <HAL_UART_MspInit+0xf4>)
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	61d3      	str	r3, [r2, #28]
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <HAL_UART_MspInit+0xf4>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <HAL_UART_MspInit+0xf4>)
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	4a15      	ldr	r2, [pc, #84]	; (8001168 <HAL_UART_MspInit+0xf4>)
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	6153      	str	r3, [r2, #20]
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <HAL_UART_MspInit+0xf4>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001126:	f248 0304 	movw	r3, #32772	; 0x8004
 800112a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001138:	2307      	movs	r3, #7
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f000 fb39 	bl	80017bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	2026      	movs	r0, #38	; 0x26
 8001150:	f000 fa87 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001154:	2026      	movs	r0, #38	; 0x26
 8001156:	f000 faa0 	bl	800169a <HAL_NVIC_EnableIRQ>
}
 800115a:	bf00      	nop
 800115c:	3730      	adds	r7, #48	; 0x30
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40013800 	.word	0x40013800
 8001168:	40021000 	.word	0x40021000
 800116c:	40004400 	.word	0x40004400

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011bc:	f000 f932 	bl	8001424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80011c8:	2040      	movs	r0, #64	; 0x40
 80011ca:	f000 fc99 	bl	8001b00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <TIM2_IRQHandler+0x10>)
 80011da:	f002 fa93 	bl	8003704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000008c 	.word	0x2000008c

080011e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <TIM3_IRQHandler+0x10>)
 80011ee:	f002 fa89 	bl	8003704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200000d8 	.word	0x200000d8

080011fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <USART2_IRQHandler+0x10>)
 8001202:	f003 fc31 	bl	8004a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200001a8 	.word	0x200001a8

08001210 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	e00a      	b.n	8001238 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001222:	f3af 8000 	nop.w
 8001226:	4601      	mov	r1, r0
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	60ba      	str	r2, [r7, #8]
 800122e:	b2ca      	uxtb	r2, r1
 8001230:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	3301      	adds	r3, #1
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	429a      	cmp	r2, r3
 800123e:	dbf0      	blt.n	8001222 <_read+0x12>
	}

return len;
 8001240:	687b      	ldr	r3, [r7, #4]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <_close>:
	}
	return len;
}

int _close(int file)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
	return -1;
 8001252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001272:	605a      	str	r2, [r3, #4]
	return 0;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <_isatty>:

int _isatty(int file)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
	return 1;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
	return 0;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012bc:	4a14      	ldr	r2, [pc, #80]	; (8001310 <_sbrk+0x5c>)
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <_sbrk+0x60>)
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d102      	bne.n	80012d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <_sbrk+0x64>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <_sbrk+0x68>)
 80012d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d207      	bcs.n	80012f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e4:	f005 f8fe 	bl	80064e4 <__errno>
 80012e8:	4603      	mov	r3, r0
 80012ea:	220c      	movs	r2, #12
 80012ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012f2:	e009      	b.n	8001308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <_sbrk+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	4a05      	ldr	r2, [pc, #20]	; (8001318 <_sbrk+0x64>)
 8001304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001306:	68fb      	ldr	r3, [r7, #12]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20003000 	.word	0x20003000
 8001314:	00000400 	.word	0x00000400
 8001318:	20000718 	.word	0x20000718
 800131c:	20000938 	.word	0x20000938

08001320 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <SystemInit+0x20>)
 8001326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <SystemInit+0x20>)
 800132c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800137c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001348:	480d      	ldr	r0, [pc, #52]	; (8001380 <LoopForever+0x6>)
  ldr r1, =_edata
 800134a:	490e      	ldr	r1, [pc, #56]	; (8001384 <LoopForever+0xa>)
  ldr r2, =_sidata
 800134c:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <LoopForever+0xe>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001360:	4c0b      	ldr	r4, [pc, #44]	; (8001390 <LoopForever+0x16>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800136e:	f7ff ffd7 	bl	8001320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001372:	f005 f8bd 	bl	80064f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001376:	f7ff fb51 	bl	8000a1c <main>

0800137a <LoopForever>:

LoopForever:
    b LoopForever
 800137a:	e7fe      	b.n	800137a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800137c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001384:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001388:	08007c2c 	.word	0x08007c2c
  ldr r2, =_sbss
 800138c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001390:	20000934 	.word	0x20000934

08001394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC1_2_IRQHandler>
	...

08001398 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_Init+0x28>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <HAL_Init+0x28>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f94f 	bl	800164c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f000 f808 	bl	80013c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b4:	f7ff fdfa 	bl	8000fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40022000 	.word	0x40022000

080013c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_InitTick+0x54>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x58>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	fbb3 f3f1 	udiv	r3, r3, r1
 80013de:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f967 	bl	80016b6 <HAL_SYSTICK_Config>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00e      	b.n	8001410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	d80a      	bhi.n	800140e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f8:	2200      	movs	r2, #0
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001400:	f000 f92f 	bl	8001662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001404:	4a06      	ldr	r2, [pc, #24]	; (8001420 <HAL_InitTick+0x5c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000000 	.word	0x20000000
 800141c:	20000008 	.word	0x20000008
 8001420:	20000004 	.word	0x20000004

08001424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x20>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x24>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <HAL_IncTick+0x24>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000008 	.word	0x20000008
 8001448:	2000071c 	.word	0x2000071c

0800144c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <HAL_GetTick+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	2000071c 	.word	0x2000071c

08001464 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff ffee 	bl	800144c <HAL_GetTick>
 8001470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800147c:	d005      	beq.n	800148a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_Delay+0x44>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800148a:	bf00      	nop
 800148c:	f7ff ffde 	bl	800144c <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	429a      	cmp	r2, r3
 800149a:	d8f7      	bhi.n	800148c <HAL_Delay+0x28>
  {
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000008 	.word	0x20000008

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db0b      	blt.n	800153a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	f003 021f 	and.w	r2, r3, #31
 8001528:	4907      	ldr	r1, [pc, #28]	; (8001548 <__NVIC_EnableIRQ+0x38>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	2001      	movs	r0, #1
 8001532:	fa00 f202 	lsl.w	r2, r0, r2
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100

0800154c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	2b00      	cmp	r3, #0
 800155e:	db0a      	blt.n	8001576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	490c      	ldr	r1, [pc, #48]	; (8001598 <__NVIC_SetPriority+0x4c>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	0112      	lsls	r2, r2, #4
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	440b      	add	r3, r1
 8001570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001574:	e00a      	b.n	800158c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4908      	ldr	r1, [pc, #32]	; (800159c <__NVIC_SetPriority+0x50>)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	3b04      	subs	r3, #4
 8001584:	0112      	lsls	r2, r2, #4
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	440b      	add	r3, r1
 800158a:	761a      	strb	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f1c3 0307 	rsb	r3, r3, #7
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	bf28      	it	cs
 80015be:	2304      	movcs	r3, #4
 80015c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3304      	adds	r3, #4
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d902      	bls.n	80015d0 <NVIC_EncodePriority+0x30>
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3b03      	subs	r3, #3
 80015ce:	e000      	b.n	80015d2 <NVIC_EncodePriority+0x32>
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	4313      	orrs	r3, r2
         );
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	; 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001618:	d301      	bcc.n	800161e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161a:	2301      	movs	r3, #1
 800161c:	e00f      	b.n	800163e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <SysTick_Config+0x40>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001626:	210f      	movs	r1, #15
 8001628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800162c:	f7ff ff8e 	bl	800154c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <SysTick_Config+0x40>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <SysTick_Config+0x40>)
 8001638:	2207      	movs	r2, #7
 800163a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	e000e010 	.word	0xe000e010

0800164c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff29 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001674:	f7ff ff3e 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 8001678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	6978      	ldr	r0, [r7, #20]
 8001680:	f7ff ff8e 	bl	80015a0 <NVIC_EncodePriority>
 8001684:	4602      	mov	r2, r0
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff5d 	bl	800154c <__NVIC_SetPriority>
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff31 	bl	8001510 <__NVIC_EnableIRQ>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffa2 	bl	8001608 <SysTick_Config>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d008      	beq.n	80016f2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2204      	movs	r2, #4
 80016e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e020      	b.n	8001734 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 020e 	bic.w	r2, r2, #14
 8001700:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171a:	2101      	movs	r1, #1
 800171c:	fa01 f202 	lsl.w	r2, r1, r2
 8001720:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001752:	2b02      	cmp	r3, #2
 8001754:	d005      	beq.n	8001762 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2204      	movs	r2, #4
 800175a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e027      	b.n	80017b2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 020e 	bic.w	r2, r2, #14
 8001770:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0201 	bic.w	r2, r2, #1
 8001780:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178a:	2101      	movs	r1, #1
 800178c:	fa01 f202 	lsl.w	r2, r1, r2
 8001790:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	4798      	blx	r3
    } 
  }
  return status;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ca:	e14e      	b.n	8001a6a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2101      	movs	r1, #1
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	4013      	ands	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8140 	beq.w	8001a64 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d005      	beq.n	80017fc <HAL_GPIO_Init+0x40>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d130      	bne.n	800185e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001832:	2201      	movs	r2, #1
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	f003 0201 	and.w	r2, r3, #1
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b03      	cmp	r3, #3
 8001868:	d017      	beq.n	800189a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d123      	bne.n	80018ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	08da      	lsrs	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3208      	adds	r2, #8
 80018ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	220f      	movs	r2, #15
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	08da      	lsrs	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3208      	adds	r2, #8
 80018e8:	6939      	ldr	r1, [r7, #16]
 80018ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0203 	and.w	r2, r3, #3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 809a 	beq.w	8001a64 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001930:	4b55      	ldr	r3, [pc, #340]	; (8001a88 <HAL_GPIO_Init+0x2cc>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a54      	ldr	r2, [pc, #336]	; (8001a88 <HAL_GPIO_Init+0x2cc>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b52      	ldr	r3, [pc, #328]	; (8001a88 <HAL_GPIO_Init+0x2cc>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001948:	4a50      	ldr	r2, [pc, #320]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3302      	adds	r3, #2
 8001950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001972:	d013      	beq.n	800199c <HAL_GPIO_Init+0x1e0>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a46      	ldr	r2, [pc, #280]	; (8001a90 <HAL_GPIO_Init+0x2d4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d00d      	beq.n	8001998 <HAL_GPIO_Init+0x1dc>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a45      	ldr	r2, [pc, #276]	; (8001a94 <HAL_GPIO_Init+0x2d8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d007      	beq.n	8001994 <HAL_GPIO_Init+0x1d8>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a44      	ldr	r2, [pc, #272]	; (8001a98 <HAL_GPIO_Init+0x2dc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d101      	bne.n	8001990 <HAL_GPIO_Init+0x1d4>
 800198c:	2303      	movs	r3, #3
 800198e:	e006      	b.n	800199e <HAL_GPIO_Init+0x1e2>
 8001990:	2305      	movs	r3, #5
 8001992:	e004      	b.n	800199e <HAL_GPIO_Init+0x1e2>
 8001994:	2302      	movs	r3, #2
 8001996:	e002      	b.n	800199e <HAL_GPIO_Init+0x1e2>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_GPIO_Init+0x1e2>
 800199c:	2300      	movs	r3, #0
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	f002 0203 	and.w	r2, r2, #3
 80019a4:	0092      	lsls	r2, r2, #2
 80019a6:	4093      	lsls	r3, r2
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019ae:	4937      	ldr	r1, [pc, #220]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	3302      	adds	r3, #2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019bc:	4b37      	ldr	r3, [pc, #220]	; (8001a9c <HAL_GPIO_Init+0x2e0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019e0:	4a2e      	ldr	r2, [pc, #184]	; (8001a9c <HAL_GPIO_Init+0x2e0>)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019e6:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <HAL_GPIO_Init+0x2e0>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a0a:	4a24      	ldr	r2, [pc, #144]	; (8001a9c <HAL_GPIO_Init+0x2e0>)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a10:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <HAL_GPIO_Init+0x2e0>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a34:	4a19      	ldr	r2, [pc, #100]	; (8001a9c <HAL_GPIO_Init+0x2e0>)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a3a:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_GPIO_Init+0x2e0>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a5e:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <HAL_GPIO_Init+0x2e0>)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3301      	adds	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f47f aea9 	bne.w	80017cc <HAL_GPIO_Init+0x10>
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	bf00      	nop
 8001a7e:	371c      	adds	r7, #28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	48000400 	.word	0x48000400
 8001a94:	48000800 	.word	0x48000800
 8001a98:	48000c00 	.word	0x48000c00
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	887b      	ldrh	r3, [r7, #2]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	e001      	b.n	8001ac2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]
 8001adc:	4613      	mov	r3, r2
 8001ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae0:	787b      	ldrb	r3, [r7, #1]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ae6:	887a      	ldrh	r2, [r7, #2]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aec:	e002      	b.n	8001af4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d006      	beq.n	8001b24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fc18 	bl	8000354 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40010400 	.word	0x40010400

08001b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b40:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f001 b823 	b.w	8002b9c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 817d 	beq.w	8001e66 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b6c:	4bbc      	ldr	r3, [pc, #752]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d00c      	beq.n	8001b92 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b78:	4bb9      	ldr	r3, [pc, #740]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d15c      	bne.n	8001c3e <HAL_RCC_OscConfig+0x10e>
 8001b84:	4bb6      	ldr	r3, [pc, #728]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b90:	d155      	bne.n	8001c3e <HAL_RCC_OscConfig+0x10e>
 8001b92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b96:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ba6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	095b      	lsrs	r3, r3, #5
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d102      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x94>
 8001bbe:	4ba8      	ldr	r3, [pc, #672]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	e015      	b.n	8001bf0 <HAL_RCC_OscConfig+0xc0>
 8001bc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bc8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bdc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001be0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001bec:	4b9c      	ldr	r3, [pc, #624]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bf4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001bf8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001bfc:	fa92 f2a2 	rbit	r2, r2
 8001c00:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001c04:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001c08:	fab2 f282 	clz	r2, r2
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	f042 0220 	orr.w	r2, r2, #32
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	f002 021f 	and.w	r2, r2, #31
 8001c18:	2101      	movs	r1, #1
 8001c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 811f 	beq.w	8001e64 <HAL_RCC_OscConfig+0x334>
 8001c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f040 8116 	bne.w	8001e64 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	f000 bfaf 	b.w	8002b9c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4e:	d106      	bne.n	8001c5e <HAL_RCC_OscConfig+0x12e>
 8001c50:	4b83      	ldr	r3, [pc, #524]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a82      	ldr	r2, [pc, #520]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	e036      	b.n	8001ccc <HAL_RCC_OscConfig+0x19c>
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x158>
 8001c6e:	4b7c      	ldr	r3, [pc, #496]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a7b      	ldr	r2, [pc, #492]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b79      	ldr	r3, [pc, #484]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a78      	ldr	r2, [pc, #480]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e021      	b.n	8001ccc <HAL_RCC_OscConfig+0x19c>
 8001c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x184>
 8001c9a:	4b71      	ldr	r3, [pc, #452]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a70      	ldr	r2, [pc, #448]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b6e      	ldr	r3, [pc, #440]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a6d      	ldr	r2, [pc, #436]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e00b      	b.n	8001ccc <HAL_RCC_OscConfig+0x19c>
 8001cb4:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a69      	ldr	r2, [pc, #420]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	4b67      	ldr	r3, [pc, #412]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a66      	ldr	r2, [pc, #408]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ccc:	4b64      	ldr	r3, [pc, #400]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	f023 020f 	bic.w	r2, r3, #15
 8001cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	495f      	ldr	r1, [pc, #380]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d059      	beq.n	8001daa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7ff fba9 	bl	800144c <HAL_GetTick>
 8001cfa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff fba4 	bl	800144c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b64      	cmp	r3, #100	; 0x64
 8001d0e:	d902      	bls.n	8001d16 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	f000 bf43 	b.w	8002b9c <HAL_RCC_OscConfig+0x106c>
 8001d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d1a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001d2a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	fab3 f383 	clz	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	095b      	lsrs	r3, r3, #5
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d102      	bne.n	8001d48 <HAL_RCC_OscConfig+0x218>
 8001d42:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	e015      	b.n	8001d74 <HAL_RCC_OscConfig+0x244>
 8001d48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d4c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d60:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d64:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001d70:	4b3b      	ldr	r3, [pc, #236]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d78:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d7c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d80:	fa92 f2a2 	rbit	r2, r2
 8001d84:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001d88:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001d8c:	fab2 f282 	clz	r2, r2
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	f042 0220 	orr.w	r2, r2, #32
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	f002 021f 	and.w	r2, r2, #31
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0ab      	beq.n	8001d00 <HAL_RCC_OscConfig+0x1d0>
 8001da8:	e05d      	b.n	8001e66 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7ff fb4f 	bl	800144c <HAL_GetTick>
 8001dae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db4:	f7ff fb4a 	bl	800144c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b64      	cmp	r3, #100	; 0x64
 8001dc2:	d902      	bls.n	8001dca <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	f000 bee9 	b.w	8002b9c <HAL_RCC_OscConfig+0x106c>
 8001dca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dce:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001dde:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	095b      	lsrs	r3, r3, #5
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d102      	bne.n	8001dfc <HAL_RCC_OscConfig+0x2cc>
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	e015      	b.n	8001e28 <HAL_RCC_OscConfig+0x2f8>
 8001dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e00:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e14:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e18:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_RCC_OscConfig+0x330>)
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e2c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001e30:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e34:	fa92 f2a2 	rbit	r2, r2
 8001e38:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001e3c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001e40:	fab2 f282 	clz	r2, r2
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	f042 0220 	orr.w	r2, r2, #32
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f002 021f 	and.w	r2, r2, #31
 8001e50:	2101      	movs	r1, #1
 8001e52:	fa01 f202 	lsl.w	r2, r1, r2
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1ab      	bne.n	8001db4 <HAL_RCC_OscConfig+0x284>
 8001e5c:	e003      	b.n	8001e66 <HAL_RCC_OscConfig+0x336>
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 817d 	beq.w	8002176 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e7c:	4ba6      	ldr	r3, [pc, #664]	; (8002118 <HAL_RCC_OscConfig+0x5e8>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00b      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e88:	4ba3      	ldr	r3, [pc, #652]	; (8002118 <HAL_RCC_OscConfig+0x5e8>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d172      	bne.n	8001f7a <HAL_RCC_OscConfig+0x44a>
 8001e94:	4ba0      	ldr	r3, [pc, #640]	; (8002118 <HAL_RCC_OscConfig+0x5e8>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d16c      	bne.n	8001f7a <HAL_RCC_OscConfig+0x44a>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001eb2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	095b      	lsrs	r3, r3, #5
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d102      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x3a0>
 8001eca:	4b93      	ldr	r3, [pc, #588]	; (8002118 <HAL_RCC_OscConfig+0x5e8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	e013      	b.n	8001ef8 <HAL_RCC_OscConfig+0x3c8>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001eda:	fa93 f3a3 	rbit	r3, r3
 8001ede:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ee8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001ef4:	4b88      	ldr	r3, [pc, #544]	; (8002118 <HAL_RCC_OscConfig+0x5e8>)
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	2202      	movs	r2, #2
 8001efa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001efe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f02:	fa92 f2a2 	rbit	r2, r2
 8001f06:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001f0a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001f0e:	fab2 f282 	clz	r2, r2
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	f042 0220 	orr.w	r2, r2, #32
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	f002 021f 	and.w	r2, r2, #31
 8001f1e:	2101      	movs	r1, #1
 8001f20:	fa01 f202 	lsl.w	r2, r1, r2
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00a      	beq.n	8001f40 <HAL_RCC_OscConfig+0x410>
 8001f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d002      	beq.n	8001f40 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f000 be2e 	b.w	8002b9c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f40:	4b75      	ldr	r3, [pc, #468]	; (8002118 <HAL_RCC_OscConfig+0x5e8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	21f8      	movs	r1, #248	; 0xf8
 8001f56:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f5e:	fa91 f1a1 	rbit	r1, r1
 8001f62:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001f66:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001f6a:	fab1 f181 	clz	r1, r1
 8001f6e:	b2c9      	uxtb	r1, r1
 8001f70:	408b      	lsls	r3, r1
 8001f72:	4969      	ldr	r1, [pc, #420]	; (8002118 <HAL_RCC_OscConfig+0x5e8>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f78:	e0fd      	b.n	8002176 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8088 	beq.w	800209c <HAL_RCC_OscConfig+0x56c>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001f9e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fa48 	bl	800144c <HAL_GetTick>
 8001fbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7ff fa43 	bl	800144c <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d902      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	f000 bde2 	b.w	8002b9c <HAL_RCC_OscConfig+0x106c>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001fea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d102      	bne.n	8002008 <HAL_RCC_OscConfig+0x4d8>
 8002002:	4b45      	ldr	r3, [pc, #276]	; (8002118 <HAL_RCC_OscConfig+0x5e8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	e013      	b.n	8002030 <HAL_RCC_OscConfig+0x500>
 8002008:	2302      	movs	r3, #2
 800200a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800201a:	2302      	movs	r3, #2
 800201c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002020:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800202c:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <HAL_RCC_OscConfig+0x5e8>)
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	2202      	movs	r2, #2
 8002032:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002036:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800203a:	fa92 f2a2 	rbit	r2, r2
 800203e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002042:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002046:	fab2 f282 	clz	r2, r2
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	f042 0220 	orr.w	r2, r2, #32
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	f002 021f 	and.w	r2, r2, #31
 8002056:	2101      	movs	r1, #1
 8002058:	fa01 f202 	lsl.w	r2, r1, r2
 800205c:	4013      	ands	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0af      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002062:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <HAL_RCC_OscConfig+0x5e8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	21f8      	movs	r1, #248	; 0xf8
 8002078:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002080:	fa91 f1a1 	rbit	r1, r1
 8002084:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002088:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800208c:	fab1 f181 	clz	r1, r1
 8002090:	b2c9      	uxtb	r1, r1
 8002092:	408b      	lsls	r3, r1
 8002094:	4920      	ldr	r1, [pc, #128]	; (8002118 <HAL_RCC_OscConfig+0x5e8>)
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]
 800209a:	e06c      	b.n	8002176 <HAL_RCC_OscConfig+0x646>
 800209c:	2301      	movs	r3, #1
 800209e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80020ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	461a      	mov	r2, r3
 80020c4:	2300      	movs	r3, #0
 80020c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7ff f9c0 	bl	800144c <HAL_GetTick>
 80020cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d2:	f7ff f9bb 	bl	800144c <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d902      	bls.n	80020e8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	f000 bd5a 	b.w	8002b9c <HAL_RCC_OscConfig+0x106c>
 80020e8:	2302      	movs	r3, #2
 80020ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80020fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	095b      	lsrs	r3, r3, #5
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d104      	bne.n	800211c <HAL_RCC_OscConfig+0x5ec>
 8002112:	4b01      	ldr	r3, [pc, #4]	; (8002118 <HAL_RCC_OscConfig+0x5e8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	e015      	b.n	8002144 <HAL_RCC_OscConfig+0x614>
 8002118:	40021000 	.word	0x40021000
 800211c:	2302      	movs	r3, #2
 800211e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800212e:	2302      	movs	r3, #2
 8002130:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002134:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002140:	4bc8      	ldr	r3, [pc, #800]	; (8002464 <HAL_RCC_OscConfig+0x934>)
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	2202      	movs	r2, #2
 8002146:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800214a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800214e:	fa92 f2a2 	rbit	r2, r2
 8002152:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002156:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800215a:	fab2 f282 	clz	r2, r2
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	f042 0220 	orr.w	r2, r2, #32
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	f002 021f 	and.w	r2, r2, #31
 800216a:	2101      	movs	r1, #1
 800216c:	fa01 f202 	lsl.w	r2, r1, r2
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1ad      	bne.n	80020d2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 8110 	beq.w	80023ac <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800218c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002190:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d079      	beq.n	8002290 <HAL_RCC_OscConfig+0x760>
 800219c:	2301      	movs	r3, #1
 800219e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80021ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	4bab      	ldr	r3, [pc, #684]	; (8002468 <HAL_RCC_OscConfig+0x938>)
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	461a      	mov	r2, r3
 80021c2:	2301      	movs	r3, #1
 80021c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c6:	f7ff f941 	bl	800144c <HAL_GetTick>
 80021ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d0:	f7ff f93c 	bl	800144c <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d902      	bls.n	80021e6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	f000 bcdb 	b.w	8002b9c <HAL_RCC_OscConfig+0x106c>
 80021e6:	2302      	movs	r3, #2
 80021e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80021f0:	fa93 f3a3 	rbit	r3, r3
 80021f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80021f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002200:	2202      	movs	r2, #2
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002208:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	fa93 f2a3 	rbit	r2, r3
 8002212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002216:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002224:	2202      	movs	r2, #2
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	fa93 f2a3 	rbit	r2, r3
 8002236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800223e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002240:	4b88      	ldr	r3, [pc, #544]	; (8002464 <HAL_RCC_OscConfig+0x934>)
 8002242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002248:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800224c:	2102      	movs	r1, #2
 800224e:	6019      	str	r1, [r3, #0]
 8002250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002254:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	fa93 f1a3 	rbit	r1, r3
 800225e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002262:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002266:	6019      	str	r1, [r3, #0]
  return result;
 8002268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	2101      	movs	r1, #1
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	4013      	ands	r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0a0      	beq.n	80021d0 <HAL_RCC_OscConfig+0x6a0>
 800228e:	e08d      	b.n	80023ac <HAL_RCC_OscConfig+0x87c>
 8002290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002294:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002298:	2201      	movs	r2, #1
 800229a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	fa93 f2a3 	rbit	r2, r3
 80022aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022b2:	601a      	str	r2, [r3, #0]
  return result;
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022bc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b68      	ldr	r3, [pc, #416]	; (8002468 <HAL_RCC_OscConfig+0x938>)
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	461a      	mov	r2, r3
 80022ce:	2300      	movs	r3, #0
 80022d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7ff f8bb 	bl	800144c <HAL_GetTick>
 80022d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022dc:	f7ff f8b6 	bl	800144c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d902      	bls.n	80022f2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	f000 bc55 	b.w	8002b9c <HAL_RCC_OscConfig+0x106c>
 80022f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022fa:	2202      	movs	r2, #2
 80022fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002302:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	fa93 f2a3 	rbit	r2, r3
 800230c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002310:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800231e:	2202      	movs	r2, #2
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002326:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	fa93 f2a3 	rbit	r2, r3
 8002330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002334:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002342:	2202      	movs	r2, #2
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	fa93 f2a3 	rbit	r2, r3
 8002354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002358:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800235c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235e:	4b41      	ldr	r3, [pc, #260]	; (8002464 <HAL_RCC_OscConfig+0x934>)
 8002360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002366:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800236a:	2102      	movs	r1, #2
 800236c:	6019      	str	r1, [r3, #0]
 800236e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002372:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	fa93 f1a3 	rbit	r1, r3
 800237c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002380:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002384:	6019      	str	r1, [r3, #0]
  return result;
 8002386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	fab3 f383 	clz	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d197      	bne.n	80022dc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 81a1 	beq.w	8002704 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c8:	4b26      	ldr	r3, [pc, #152]	; (8002464 <HAL_RCC_OscConfig+0x934>)
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d116      	bne.n	8002402 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d4:	4b23      	ldr	r3, [pc, #140]	; (8002464 <HAL_RCC_OscConfig+0x934>)
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	4a22      	ldr	r2, [pc, #136]	; (8002464 <HAL_RCC_OscConfig+0x934>)
 80023da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023de:	61d3      	str	r3, [r2, #28]
 80023e0:	4b20      	ldr	r3, [pc, #128]	; (8002464 <HAL_RCC_OscConfig+0x934>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80023e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ec:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80023fa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002402:	4b1a      	ldr	r3, [pc, #104]	; (800246c <HAL_RCC_OscConfig+0x93c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d11a      	bne.n	8002444 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_RCC_OscConfig+0x93c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a16      	ldr	r2, [pc, #88]	; (800246c <HAL_RCC_OscConfig+0x93c>)
 8002414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002418:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241a:	f7ff f817 	bl	800144c <HAL_GetTick>
 800241e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002422:	e009      	b.n	8002438 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002424:	f7ff f812 	bl	800144c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b64      	cmp	r3, #100	; 0x64
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e3b1      	b.n	8002b9c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <HAL_RCC_OscConfig+0x93c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0ef      	beq.n	8002424 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d10d      	bne.n	8002470 <HAL_RCC_OscConfig+0x940>
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_RCC_OscConfig+0x934>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	4a02      	ldr	r2, [pc, #8]	; (8002464 <HAL_RCC_OscConfig+0x934>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6213      	str	r3, [r2, #32]
 8002460:	e03c      	b.n	80024dc <HAL_RCC_OscConfig+0x9ac>
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	10908120 	.word	0x10908120
 800246c:	40007000 	.word	0x40007000
 8002470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002474:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10c      	bne.n	800249a <HAL_RCC_OscConfig+0x96a>
 8002480:	4bc1      	ldr	r3, [pc, #772]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4ac0      	ldr	r2, [pc, #768]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	6213      	str	r3, [r2, #32]
 800248c:	4bbe      	ldr	r3, [pc, #760]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4abd      	ldr	r2, [pc, #756]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 8002492:	f023 0304 	bic.w	r3, r3, #4
 8002496:	6213      	str	r3, [r2, #32]
 8002498:	e020      	b.n	80024dc <HAL_RCC_OscConfig+0x9ac>
 800249a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b05      	cmp	r3, #5
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x994>
 80024aa:	4bb7      	ldr	r3, [pc, #732]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4ab6      	ldr	r2, [pc, #728]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 80024b0:	f043 0304 	orr.w	r3, r3, #4
 80024b4:	6213      	str	r3, [r2, #32]
 80024b6:	4bb4      	ldr	r3, [pc, #720]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4ab3      	ldr	r2, [pc, #716]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6213      	str	r3, [r2, #32]
 80024c2:	e00b      	b.n	80024dc <HAL_RCC_OscConfig+0x9ac>
 80024c4:	4bb0      	ldr	r3, [pc, #704]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4aaf      	ldr	r2, [pc, #700]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 80024ca:	f023 0301 	bic.w	r3, r3, #1
 80024ce:	6213      	str	r3, [r2, #32]
 80024d0:	4bad      	ldr	r3, [pc, #692]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4aac      	ldr	r2, [pc, #688]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 80024d6:	f023 0304 	bic.w	r3, r3, #4
 80024da:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 8081 	beq.w	80025f0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ee:	f7fe ffad 	bl	800144c <HAL_GetTick>
 80024f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f6:	e00b      	b.n	8002510 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f8:	f7fe ffa8 	bl	800144c <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	; 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e345      	b.n	8002b9c <HAL_RCC_OscConfig+0x106c>
 8002510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002514:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002518:	2202      	movs	r2, #2
 800251a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002520:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	fa93 f2a3 	rbit	r2, r3
 800252a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002538:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800253c:	2202      	movs	r2, #2
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002544:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	fa93 f2a3 	rbit	r2, r3
 800254e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002552:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002556:	601a      	str	r2, [r3, #0]
  return result;
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002560:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	b2db      	uxtb	r3, r3
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d102      	bne.n	800257c <HAL_RCC_OscConfig+0xa4c>
 8002576:	4b84      	ldr	r3, [pc, #528]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	e013      	b.n	80025a4 <HAL_RCC_OscConfig+0xa74>
 800257c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002580:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002584:	2202      	movs	r2, #2
 8002586:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	fa93 f2a3 	rbit	r2, r3
 8002596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	4b79      	ldr	r3, [pc, #484]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025a8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80025ac:	2102      	movs	r1, #2
 80025ae:	6011      	str	r1, [r2, #0]
 80025b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025b4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	fa92 f1a2 	rbit	r1, r2
 80025be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025c2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80025c6:	6011      	str	r1, [r2, #0]
  return result;
 80025c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025cc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	fab2 f282 	clz	r2, r2
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	f002 021f 	and.w	r2, r2, #31
 80025e2:	2101      	movs	r1, #1
 80025e4:	fa01 f202 	lsl.w	r2, r1, r2
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d084      	beq.n	80024f8 <HAL_RCC_OscConfig+0x9c8>
 80025ee:	e07f      	b.n	80026f0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f0:	f7fe ff2c 	bl	800144c <HAL_GetTick>
 80025f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f8:	e00b      	b.n	8002612 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7fe ff27 	bl	800144c <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	; 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e2c4      	b.n	8002b9c <HAL_RCC_OscConfig+0x106c>
 8002612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002616:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800261a:	2202      	movs	r2, #2
 800261c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002622:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	fa93 f2a3 	rbit	r2, r3
 800262c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002630:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800263e:	2202      	movs	r2, #2
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002646:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	fa93 f2a3 	rbit	r2, r3
 8002650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002654:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002658:	601a      	str	r2, [r3, #0]
  return result;
 800265a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002662:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002664:	fab3 f383 	clz	r3, r3
 8002668:	b2db      	uxtb	r3, r3
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f043 0302 	orr.w	r3, r3, #2
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d102      	bne.n	800267e <HAL_RCC_OscConfig+0xb4e>
 8002678:	4b43      	ldr	r3, [pc, #268]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	e013      	b.n	80026a6 <HAL_RCC_OscConfig+0xb76>
 800267e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002682:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002686:	2202      	movs	r2, #2
 8002688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	fa93 f2a3 	rbit	r2, r3
 8002698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	4b39      	ldr	r3, [pc, #228]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026aa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80026ae:	2102      	movs	r1, #2
 80026b0:	6011      	str	r1, [r2, #0]
 80026b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026b6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	fa92 f1a2 	rbit	r1, r2
 80026c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026c4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80026c8:	6011      	str	r1, [r2, #0]
  return result;
 80026ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026ce:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	fab2 f282 	clz	r2, r2
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	f002 021f 	and.w	r2, r2, #31
 80026e4:	2101      	movs	r1, #1
 80026e6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d184      	bne.n	80025fa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026f0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d105      	bne.n	8002704 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f8:	4b23      	ldr	r3, [pc, #140]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	4a22      	ldr	r2, [pc, #136]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 80026fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002702:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002708:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 8242 	beq.w	8002b9a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002716:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <HAL_RCC_OscConfig+0xc58>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b08      	cmp	r3, #8
 8002720:	f000 8213 	beq.w	8002b4a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002728:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	2b02      	cmp	r3, #2
 8002732:	f040 8162 	bne.w	80029fa <HAL_RCC_OscConfig+0xeca>
 8002736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800273e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002742:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002748:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	fa93 f2a3 	rbit	r2, r3
 8002752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002756:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800275a:	601a      	str	r2, [r3, #0]
  return result;
 800275c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002760:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002764:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002770:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	461a      	mov	r2, r3
 8002778:	2300      	movs	r3, #0
 800277a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7fe fe66 	bl	800144c <HAL_GetTick>
 8002780:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002784:	e00c      	b.n	80027a0 <HAL_RCC_OscConfig+0xc70>
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278c:	f7fe fe5e 	bl	800144c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e1fd      	b.n	8002b9c <HAL_RCC_OscConfig+0x106c>
 80027a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	fa93 f2a3 	rbit	r2, r3
 80027bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80027c4:	601a      	str	r2, [r3, #0]
  return result;
 80027c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80027ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d102      	bne.n	80027ea <HAL_RCC_OscConfig+0xcba>
 80027e4:	4bb0      	ldr	r3, [pc, #704]	; (8002aa8 <HAL_RCC_OscConfig+0xf78>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	e027      	b.n	800283a <HAL_RCC_OscConfig+0xd0a>
 80027ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80027f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	fa93 f2a3 	rbit	r2, r3
 8002806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002814:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002818:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002822:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	fa93 f2a3 	rbit	r2, r3
 800282c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002830:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	4b9c      	ldr	r3, [pc, #624]	; (8002aa8 <HAL_RCC_OscConfig+0xf78>)
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800283e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002842:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002846:	6011      	str	r1, [r2, #0]
 8002848:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800284c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	fa92 f1a2 	rbit	r1, r2
 8002856:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800285a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800285e:	6011      	str	r1, [r2, #0]
  return result;
 8002860:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002864:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	fab2 f282 	clz	r2, r2
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f042 0220 	orr.w	r2, r2, #32
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f002 021f 	and.w	r2, r2, #31
 800287a:	2101      	movs	r1, #1
 800287c:	fa01 f202 	lsl.w	r2, r1, r2
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d182      	bne.n	800278c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002886:	4b88      	ldr	r3, [pc, #544]	; (8002aa8 <HAL_RCC_OscConfig+0xf78>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	430b      	orrs	r3, r1
 80028a8:	497f      	ldr	r1, [pc, #508]	; (8002aa8 <HAL_RCC_OscConfig+0xf78>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]
 80028ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80028b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	fa93 f2a3 	rbit	r2, r3
 80028ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028d2:	601a      	str	r2, [r3, #0]
  return result;
 80028d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028dc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	461a      	mov	r2, r3
 80028f0:	2301      	movs	r3, #1
 80028f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe fdaa 	bl	800144c <HAL_GetTick>
 80028f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028fc:	e009      	b.n	8002912 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fe:	f7fe fda5 	bl	800144c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e144      	b.n	8002b9c <HAL_RCC_OscConfig+0x106c>
 8002912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002916:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800291a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800291e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002924:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	fa93 f2a3 	rbit	r2, r3
 800292e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002932:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002936:	601a      	str	r2, [r3, #0]
  return result;
 8002938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002940:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d102      	bne.n	800295c <HAL_RCC_OscConfig+0xe2c>
 8002956:	4b54      	ldr	r3, [pc, #336]	; (8002aa8 <HAL_RCC_OscConfig+0xf78>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	e027      	b.n	80029ac <HAL_RCC_OscConfig+0xe7c>
 800295c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002960:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002964:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	fa93 f2a3 	rbit	r2, r3
 8002978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800298a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002994:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	fa93 f2a3 	rbit	r2, r3
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	4b3f      	ldr	r3, [pc, #252]	; (8002aa8 <HAL_RCC_OscConfig+0xf78>)
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029b0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80029b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029b8:	6011      	str	r1, [r2, #0]
 80029ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029be:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	fa92 f1a2 	rbit	r1, r2
 80029c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029cc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80029d0:	6011      	str	r1, [r2, #0]
  return result;
 80029d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029d6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	fab2 f282 	clz	r2, r2
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	f042 0220 	orr.w	r2, r2, #32
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	f002 021f 	and.w	r2, r2, #31
 80029ec:	2101      	movs	r1, #1
 80029ee:	fa01 f202 	lsl.w	r2, r1, r2
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d082      	beq.n	80028fe <HAL_RCC_OscConfig+0xdce>
 80029f8:	e0cf      	b.n	8002b9a <HAL_RCC_OscConfig+0x106a>
 80029fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	fa93 f2a3 	rbit	r2, r3
 8002a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a1e:	601a      	str	r2, [r3, #0]
  return result;
 8002a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a24:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a28:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7fe fd04 	bl	800144c <HAL_GetTick>
 8002a44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a48:	e009      	b.n	8002a5e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4a:	f7fe fcff 	bl	800144c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e09e      	b.n	8002b9c <HAL_RCC_OscConfig+0x106c>
 8002a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a62:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a70:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	fa93 f2a3 	rbit	r2, r3
 8002a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a82:	601a      	str	r2, [r3, #0]
  return result;
 8002a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a88:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d104      	bne.n	8002aac <HAL_RCC_OscConfig+0xf7c>
 8002aa2:	4b01      	ldr	r3, [pc, #4]	; (8002aa8 <HAL_RCC_OscConfig+0xf78>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	e029      	b.n	8002afc <HAL_RCC_OscConfig+0xfcc>
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ab8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	fa93 f2a3 	rbit	r2, r3
 8002ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002acc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002ada:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	fa93 f2a3 	rbit	r2, r3
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <HAL_RCC_OscConfig+0x1078>)
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b00:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002b04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b08:	6011      	str	r1, [r2, #0]
 8002b0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b0e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	fa92 f1a2 	rbit	r1, r2
 8002b18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b1c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b20:	6011      	str	r1, [r2, #0]
  return result;
 8002b22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b26:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	fab2 f282 	clz	r2, r2
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	f042 0220 	orr.w	r2, r2, #32
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	f002 021f 	and.w	r2, r2, #31
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d180      	bne.n	8002a4a <HAL_RCC_OscConfig+0xf1a>
 8002b48:	e027      	b.n	8002b9a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e01e      	b.n	8002b9c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_RCC_OscConfig+0x1078>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b6a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d10b      	bne.n	8002b96 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d001      	beq.n	8002b9a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000

08002bac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b09e      	sub	sp, #120	; 0x78
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e162      	b.n	8002e8a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b90      	ldr	r3, [pc, #576]	; (8002e08 <HAL_RCC_ClockConfig+0x25c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d910      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b8d      	ldr	r3, [pc, #564]	; (8002e08 <HAL_RCC_ClockConfig+0x25c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 0207 	bic.w	r2, r3, #7
 8002bda:	498b      	ldr	r1, [pc, #556]	; (8002e08 <HAL_RCC_ClockConfig+0x25c>)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b89      	ldr	r3, [pc, #548]	; (8002e08 <HAL_RCC_ClockConfig+0x25c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e14a      	b.n	8002e8a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c00:	4b82      	ldr	r3, [pc, #520]	; (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	497f      	ldr	r1, [pc, #508]	; (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 80dc 	beq.w	8002dd8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d13c      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xf6>
 8002c28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c2c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c38:	fab3 f383 	clz	r3, r3
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d102      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xa6>
 8002c4c:	4b6f      	ldr	r3, [pc, #444]	; (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	e00f      	b.n	8002c72 <HAL_RCC_ClockConfig+0xc6>
 8002c52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	667b      	str	r3, [r7, #100]	; 0x64
 8002c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c64:	663b      	str	r3, [r7, #96]	; 0x60
 8002c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c6e:	4b67      	ldr	r3, [pc, #412]	; (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c76:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c7a:	fa92 f2a2 	rbit	r2, r2
 8002c7e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c82:	fab2 f282 	clz	r2, r2
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	f042 0220 	orr.w	r2, r2, #32
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	f002 021f 	and.w	r2, r2, #31
 8002c92:	2101      	movs	r1, #1
 8002c94:	fa01 f202 	lsl.w	r2, r1, r2
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d17b      	bne.n	8002d96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e0f3      	b.n	8002e8a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d13c      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x178>
 8002caa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d102      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x128>
 8002cce:	4b4f      	ldr	r3, [pc, #316]	; (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	e00f      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x148>
 8002cd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cd8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ce6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf0:	4b46      	ldr	r3, [pc, #280]	; (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002cfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cfc:	fa92 f2a2 	rbit	r2, r2
 8002d00:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d04:	fab2 f282 	clz	r2, r2
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	f042 0220 	orr.w	r2, r2, #32
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	f002 021f 	and.w	r2, r2, #31
 8002d14:	2101      	movs	r1, #1
 8002d16:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d13a      	bne.n	8002d96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0b2      	b.n	8002e8a <HAL_RCC_ClockConfig+0x2de>
 8002d24:	2302      	movs	r3, #2
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	095b      	lsrs	r3, r3, #5
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d102      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x1a0>
 8002d46:	4b31      	ldr	r3, [pc, #196]	; (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	e00d      	b.n	8002d68 <HAL_RCC_ClockConfig+0x1bc>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
 8002d58:	2302      	movs	r3, #2
 8002d5a:	623b      	str	r3, [r7, #32]
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	61fb      	str	r3, [r7, #28]
 8002d64:	4b29      	ldr	r3, [pc, #164]	; (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	2202      	movs	r2, #2
 8002d6a:	61ba      	str	r2, [r7, #24]
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	fa92 f2a2 	rbit	r2, r2
 8002d72:	617a      	str	r2, [r7, #20]
  return result;
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	fab2 f282 	clz	r2, r2
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	f042 0220 	orr.w	r2, r2, #32
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	f002 021f 	and.w	r2, r2, #31
 8002d86:	2101      	movs	r1, #1
 8002d88:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e079      	b.n	8002e8a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d96:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f023 0203 	bic.w	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	491a      	ldr	r1, [pc, #104]	; (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da8:	f7fe fb50 	bl	800144c <HAL_GetTick>
 8002dac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db0:	f7fe fb4c 	bl	800144c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e061      	b.n	8002e8a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc6:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <HAL_RCC_ClockConfig+0x260>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 020c 	and.w	r2, r3, #12
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d1eb      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_ClockConfig+0x25c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d214      	bcs.n	8002e10 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_RCC_ClockConfig+0x25c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 0207 	bic.w	r2, r3, #7
 8002dee:	4906      	ldr	r1, [pc, #24]	; (8002e08 <HAL_RCC_ClockConfig+0x25c>)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <HAL_RCC_ClockConfig+0x25c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e040      	b.n	8002e8a <HAL_RCC_ClockConfig+0x2de>
 8002e08:	40022000 	.word	0x40022000
 8002e0c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	; (8002e94 <HAL_RCC_ClockConfig+0x2e8>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	491a      	ldr	r1, [pc, #104]	; (8002e94 <HAL_RCC_ClockConfig+0x2e8>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e3a:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <HAL_RCC_ClockConfig+0x2e8>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4912      	ldr	r1, [pc, #72]	; (8002e94 <HAL_RCC_ClockConfig+0x2e8>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e4e:	f000 f829 	bl	8002ea4 <HAL_RCC_GetSysClockFreq>
 8002e52:	4601      	mov	r1, r0
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <HAL_RCC_ClockConfig+0x2e8>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e5c:	22f0      	movs	r2, #240	; 0xf0
 8002e5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	fa92 f2a2 	rbit	r2, r2
 8002e66:	60fa      	str	r2, [r7, #12]
  return result;
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	fab2 f282 	clz	r2, r2
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	40d3      	lsrs	r3, r2
 8002e72:	4a09      	ldr	r2, [pc, #36]	; (8002e98 <HAL_RCC_ClockConfig+0x2ec>)
 8002e74:	5cd3      	ldrb	r3, [r2, r3]
 8002e76:	fa21 f303 	lsr.w	r3, r1, r3
 8002e7a:	4a08      	ldr	r2, [pc, #32]	; (8002e9c <HAL_RCC_ClockConfig+0x2f0>)
 8002e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e7e:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <HAL_RCC_ClockConfig+0x2f4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fa9e 	bl	80013c4 <HAL_InitTick>
  
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3778      	adds	r7, #120	; 0x78
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000
 8002e98:	08007ad4 	.word	0x08007ad4
 8002e9c:	20000000 	.word	0x20000000
 8002ea0:	20000004 	.word	0x20000004

08002ea4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b08b      	sub	sp, #44	; 0x2c
 8002ea8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ebe:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d002      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x30>
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d003      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0x36>
 8002ed2:	e03c      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ed4:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ed6:	623b      	str	r3, [r7, #32]
      break;
 8002ed8:	e03c      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ee0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ee4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	fa92 f2a2 	rbit	r2, r2
 8002eec:	607a      	str	r2, [r7, #4]
  return result;
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	fab2 f282 	clz	r2, r2
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	40d3      	lsrs	r3, r2
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002efa:	5cd3      	ldrb	r3, [r2, r3]
 8002efc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002efe:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	220f      	movs	r2, #15
 8002f08:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	fa92 f2a2 	rbit	r2, r2
 8002f10:	60fa      	str	r2, [r7, #12]
  return result;
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	fab2 f282 	clz	r2, r2
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	40d3      	lsrs	r3, r2
 8002f1c:	4a14      	ldr	r2, [pc, #80]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f1e:	5cd3      	ldrb	r3, [r2, r3]
 8002f20:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f2c:	4a0e      	ldr	r2, [pc, #56]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fb02 f303 	mul.w	r3, r2, r3
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3c:	e004      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	4a0c      	ldr	r2, [pc, #48]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f42:	fb02 f303 	mul.w	r3, r2, r3
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	623b      	str	r3, [r7, #32]
      break;
 8002f4c:	e002      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f50:	623b      	str	r3, [r7, #32]
      break;
 8002f52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f54:	6a3b      	ldr	r3, [r7, #32]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	372c      	adds	r7, #44	; 0x2c
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000
 8002f68:	007a1200 	.word	0x007a1200
 8002f6c:	08007aec 	.word	0x08007aec
 8002f70:	08007afc 	.word	0x08007afc
 8002f74:	003d0900 	.word	0x003d0900

08002f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f7c:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	20000000 	.word	0x20000000

08002f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f96:	f7ff ffef 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002f9a:	4601      	mov	r1, r0
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fa4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002fa8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	fa92 f2a2 	rbit	r2, r2
 8002fb0:	603a      	str	r2, [r7, #0]
  return result;
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	fab2 f282 	clz	r2, r2
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	40d3      	lsrs	r3, r2
 8002fbc:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002fbe:	5cd3      	ldrb	r3, [r2, r3]
 8002fc0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	08007ae4 	.word	0x08007ae4

08002fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002fda:	f7ff ffcd 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002fde:	4601      	mov	r1, r0
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002fe8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002fec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	fa92 f2a2 	rbit	r2, r2
 8002ff4:	603a      	str	r2, [r7, #0]
  return result;
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	fab2 f282 	clz	r2, r2
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	40d3      	lsrs	r3, r2
 8003000:	4a04      	ldr	r2, [pc, #16]	; (8003014 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003002:	5cd3      	ldrb	r3, [r2, r3]
 8003004:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000
 8003014:	08007ae4 	.word	0x08007ae4

08003018 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b092      	sub	sp, #72	; 0x48
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003028:	2300      	movs	r3, #0
 800302a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80cd 	beq.w	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303c:	4b86      	ldr	r3, [pc, #536]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10e      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003048:	4b83      	ldr	r3, [pc, #524]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	4a82      	ldr	r2, [pc, #520]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800304e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003052:	61d3      	str	r3, [r2, #28]
 8003054:	4b80      	ldr	r3, [pc, #512]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003060:	2301      	movs	r3, #1
 8003062:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003066:	4b7d      	ldr	r3, [pc, #500]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d118      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003072:	4b7a      	ldr	r3, [pc, #488]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a79      	ldr	r2, [pc, #484]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307e:	f7fe f9e5 	bl	800144c <HAL_GetTick>
 8003082:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003084:	e008      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003086:	f7fe f9e1 	bl	800144c <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b64      	cmp	r3, #100	; 0x64
 8003092:	d901      	bls.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e0db      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	4b70      	ldr	r3, [pc, #448]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030a4:	4b6c      	ldr	r3, [pc, #432]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d07d      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030be:	429a      	cmp	r2, r3
 80030c0:	d076      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030c2:	4b65      	ldr	r3, [pc, #404]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030d0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80030da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030dc:	fab3 f383 	clz	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	4b5e      	ldr	r3, [pc, #376]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	461a      	mov	r2, r3
 80030ec:	2301      	movs	r3, #1
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f8:	fa93 f3a3 	rbit	r3, r3
 80030fc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003100:	fab3 f383 	clz	r3, r3
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	4b55      	ldr	r3, [pc, #340]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	461a      	mov	r2, r3
 8003110:	2300      	movs	r3, #0
 8003112:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003114:	4a50      	ldr	r2, [pc, #320]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003118:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800311a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d045      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7fe f992 	bl	800144c <HAL_GetTick>
 8003128:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312a:	e00a      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312c:	f7fe f98e 	bl	800144c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e086      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003142:	2302      	movs	r3, #2
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
 800314e:	2302      	movs	r3, #2
 8003150:	623b      	str	r3, [r7, #32]
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	fa93 f3a3 	rbit	r3, r3
 8003158:	61fb      	str	r3, [r7, #28]
  return result;
 800315a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315c:	fab3 f383 	clz	r3, r3
 8003160:	b2db      	uxtb	r3, r3
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f043 0302 	orr.w	r3, r3, #2
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d102      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003170:	4b39      	ldr	r3, [pc, #228]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	e007      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003176:	2302      	movs	r3, #2
 8003178:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	4b35      	ldr	r3, [pc, #212]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	2202      	movs	r2, #2
 8003188:	613a      	str	r2, [r7, #16]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	fa92 f2a2 	rbit	r2, r2
 8003190:	60fa      	str	r2, [r7, #12]
  return result;
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	fab2 f282 	clz	r2, r2
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	f002 021f 	and.w	r2, r2, #31
 80031a4:	2101      	movs	r1, #1
 80031a6:	fa01 f202 	lsl.w	r2, r1, r2
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0bd      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80031b0:	4b29      	ldr	r3, [pc, #164]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4926      	ldr	r1, [pc, #152]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d105      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ca:	4b23      	ldr	r3, [pc, #140]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	4a22      	ldr	r2, [pc, #136]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031e2:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f023 0203 	bic.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	491a      	ldr	r1, [pc, #104]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003200:	4b15      	ldr	r3, [pc, #84]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	f023 0210 	bic.w	r2, r3, #16
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	4912      	ldr	r1, [pc, #72]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800320e:	4313      	orrs	r3, r2
 8003210:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321a:	2b00      	cmp	r3, #0
 800321c:	d008      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800321e:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	490b      	ldr	r1, [pc, #44]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800322c:	4313      	orrs	r3, r2
 800322e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	4903      	ldr	r1, [pc, #12]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800324a:	4313      	orrs	r3, r2
 800324c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3748      	adds	r7, #72	; 0x48
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40021000 	.word	0x40021000
 800325c:	40007000 	.word	0x40007000
 8003260:	10908100 	.word	0x10908100

08003264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e049      	b.n	800330a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fd feb2 	bl	8000ff4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3304      	adds	r3, #4
 80032a0:	4619      	mov	r1, r3
 80032a2:	4610      	mov	r0, r2
 80032a4:	f000 fcb0 	bl	8003c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d001      	beq.n	800332c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e040      	b.n	80033ae <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a1c      	ldr	r2, [pc, #112]	; (80033bc <HAL_TIM_Base_Start_IT+0xa8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00e      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x58>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003356:	d009      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x58>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a18      	ldr	r2, [pc, #96]	; (80033c0 <HAL_TIM_Base_Start_IT+0xac>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x58>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d115      	bne.n	8003398 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	4b15      	ldr	r3, [pc, #84]	; (80033c8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003374:	4013      	ands	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b06      	cmp	r3, #6
 800337c:	d015      	beq.n	80033aa <HAL_TIM_Base_Start_IT+0x96>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003384:	d011      	beq.n	80033aa <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0201 	orr.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003396:	e008      	b.n	80033aa <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	e000      	b.n	80033ac <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40012c00 	.word	0x40012c00
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40014000 	.word	0x40014000
 80033c8:	00010007 	.word	0x00010007

080033cc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e049      	b.n	8003472 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f841 	bl	800347a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3304      	adds	r3, #4
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f000 fbfc 	bl	8003c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <HAL_TIM_OC_Start_IT+0x28>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	bf14      	ite	ne
 80034b0:	2301      	movne	r3, #1
 80034b2:	2300      	moveq	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	e03c      	b.n	8003532 <HAL_TIM_OC_Start_IT+0xa2>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d109      	bne.n	80034d2 <HAL_TIM_OC_Start_IT+0x42>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	bf14      	ite	ne
 80034ca:	2301      	movne	r3, #1
 80034cc:	2300      	moveq	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	e02f      	b.n	8003532 <HAL_TIM_OC_Start_IT+0xa2>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d109      	bne.n	80034ec <HAL_TIM_OC_Start_IT+0x5c>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	bf14      	ite	ne
 80034e4:	2301      	movne	r3, #1
 80034e6:	2300      	moveq	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e022      	b.n	8003532 <HAL_TIM_OC_Start_IT+0xa2>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2b0c      	cmp	r3, #12
 80034f0:	d109      	bne.n	8003506 <HAL_TIM_OC_Start_IT+0x76>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	bf14      	ite	ne
 80034fe:	2301      	movne	r3, #1
 8003500:	2300      	moveq	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	e015      	b.n	8003532 <HAL_TIM_OC_Start_IT+0xa2>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b10      	cmp	r3, #16
 800350a:	d109      	bne.n	8003520 <HAL_TIM_OC_Start_IT+0x90>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	bf14      	ite	ne
 8003518:	2301      	movne	r3, #1
 800351a:	2300      	moveq	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	e008      	b.n	8003532 <HAL_TIM_OC_Start_IT+0xa2>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	bf14      	ite	ne
 800352c:	2301      	movne	r3, #1
 800352e:	2300      	moveq	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e0d3      	b.n	80036e2 <HAL_TIM_OC_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d104      	bne.n	800354a <HAL_TIM_OC_Start_IT+0xba>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003548:	e023      	b.n	8003592 <HAL_TIM_OC_Start_IT+0x102>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b04      	cmp	r3, #4
 800354e:	d104      	bne.n	800355a <HAL_TIM_OC_Start_IT+0xca>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003558:	e01b      	b.n	8003592 <HAL_TIM_OC_Start_IT+0x102>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b08      	cmp	r3, #8
 800355e:	d104      	bne.n	800356a <HAL_TIM_OC_Start_IT+0xda>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003568:	e013      	b.n	8003592 <HAL_TIM_OC_Start_IT+0x102>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b0c      	cmp	r3, #12
 800356e:	d104      	bne.n	800357a <HAL_TIM_OC_Start_IT+0xea>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003578:	e00b      	b.n	8003592 <HAL_TIM_OC_Start_IT+0x102>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b10      	cmp	r3, #16
 800357e:	d104      	bne.n	800358a <HAL_TIM_OC_Start_IT+0xfa>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003588:	e003      	b.n	8003592 <HAL_TIM_OC_Start_IT+0x102>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2202      	movs	r2, #2
 800358e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b0c      	cmp	r3, #12
 8003596:	d841      	bhi.n	800361c <HAL_TIM_OC_Start_IT+0x18c>
 8003598:	a201      	add	r2, pc, #4	; (adr r2, 80035a0 <HAL_TIM_OC_Start_IT+0x110>)
 800359a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359e:	bf00      	nop
 80035a0:	080035d5 	.word	0x080035d5
 80035a4:	0800361d 	.word	0x0800361d
 80035a8:	0800361d 	.word	0x0800361d
 80035ac:	0800361d 	.word	0x0800361d
 80035b0:	080035e7 	.word	0x080035e7
 80035b4:	0800361d 	.word	0x0800361d
 80035b8:	0800361d 	.word	0x0800361d
 80035bc:	0800361d 	.word	0x0800361d
 80035c0:	080035f9 	.word	0x080035f9
 80035c4:	0800361d 	.word	0x0800361d
 80035c8:	0800361d 	.word	0x0800361d
 80035cc:	0800361d 	.word	0x0800361d
 80035d0:	0800360b 	.word	0x0800360b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0202 	orr.w	r2, r2, #2
 80035e2:	60da      	str	r2, [r3, #12]
      break;
 80035e4:	e01d      	b.n	8003622 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0204 	orr.w	r2, r2, #4
 80035f4:	60da      	str	r2, [r3, #12]
      break;
 80035f6:	e014      	b.n	8003622 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0208 	orr.w	r2, r2, #8
 8003606:	60da      	str	r2, [r3, #12]
      break;
 8003608:	e00b      	b.n	8003622 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0210 	orr.w	r2, r2, #16
 8003618:	60da      	str	r2, [r3, #12]
      break;
 800361a:	e002      	b.n	8003622 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
      break;
 8003620:	bf00      	nop
  }

  if (status == HAL_OK)
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d15b      	bne.n	80036e0 <HAL_TIM_OC_Start_IT+0x250>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2201      	movs	r2, #1
 800362e:	6839      	ldr	r1, [r7, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fea1 	bl	8004378 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2c      	ldr	r2, [pc, #176]	; (80036ec <HAL_TIM_OC_Start_IT+0x25c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00e      	beq.n	800365e <HAL_TIM_OC_Start_IT+0x1ce>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a2a      	ldr	r2, [pc, #168]	; (80036f0 <HAL_TIM_OC_Start_IT+0x260>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_TIM_OC_Start_IT+0x1ce>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a29      	ldr	r2, [pc, #164]	; (80036f4 <HAL_TIM_OC_Start_IT+0x264>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_TIM_OC_Start_IT+0x1ce>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a27      	ldr	r2, [pc, #156]	; (80036f8 <HAL_TIM_OC_Start_IT+0x268>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d101      	bne.n	8003662 <HAL_TIM_OC_Start_IT+0x1d2>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_TIM_OC_Start_IT+0x1d4>
 8003662:	2300      	movs	r3, #0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <HAL_TIM_OC_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003676:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1b      	ldr	r2, [pc, #108]	; (80036ec <HAL_TIM_OC_Start_IT+0x25c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00e      	beq.n	80036a0 <HAL_TIM_OC_Start_IT+0x210>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368a:	d009      	beq.n	80036a0 <HAL_TIM_OC_Start_IT+0x210>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1a      	ldr	r2, [pc, #104]	; (80036fc <HAL_TIM_OC_Start_IT+0x26c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d004      	beq.n	80036a0 <HAL_TIM_OC_Start_IT+0x210>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a15      	ldr	r2, [pc, #84]	; (80036f0 <HAL_TIM_OC_Start_IT+0x260>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d115      	bne.n	80036cc <HAL_TIM_OC_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	4b16      	ldr	r3, [pc, #88]	; (8003700 <HAL_TIM_OC_Start_IT+0x270>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b06      	cmp	r3, #6
 80036b0:	d015      	beq.n	80036de <HAL_TIM_OC_Start_IT+0x24e>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b8:	d011      	beq.n	80036de <HAL_TIM_OC_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0201 	orr.w	r2, r2, #1
 80036c8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ca:	e008      	b.n	80036de <HAL_TIM_OC_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	e000      	b.n	80036e0 <HAL_TIM_OC_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036de:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40012c00 	.word	0x40012c00
 80036f0:	40014000 	.word	0x40014000
 80036f4:	40014400 	.word	0x40014400
 80036f8:	40014800 	.word	0x40014800
 80036fc:	40000400 	.word	0x40000400
 8003700:	00010007 	.word	0x00010007

08003704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b02      	cmp	r3, #2
 8003718:	d122      	bne.n	8003760 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b02      	cmp	r3, #2
 8003726:	d11b      	bne.n	8003760 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0202 	mvn.w	r2, #2
 8003730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa3f 	bl	8003bca <HAL_TIM_IC_CaptureCallback>
 800374c:	e005      	b.n	800375a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fc ff2e 	bl	80005b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fa42 	bl	8003bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b04      	cmp	r3, #4
 800376c:	d122      	bne.n	80037b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b04      	cmp	r3, #4
 800377a:	d11b      	bne.n	80037b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0204 	mvn.w	r2, #4
 8003784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2202      	movs	r2, #2
 800378a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa15 	bl	8003bca <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fc ff04 	bl	80005b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fa18 	bl	8003bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d122      	bne.n	8003808 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d11b      	bne.n	8003808 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0208 	mvn.w	r2, #8
 80037d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2204      	movs	r2, #4
 80037de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f9eb 	bl	8003bca <HAL_TIM_IC_CaptureCallback>
 80037f4:	e005      	b.n	8003802 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fc feda 	bl	80005b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f9ee 	bl	8003bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b10      	cmp	r3, #16
 8003814:	d122      	bne.n	800385c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b10      	cmp	r3, #16
 8003822:	d11b      	bne.n	800385c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0210 	mvn.w	r2, #16
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2208      	movs	r2, #8
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f9c1 	bl	8003bca <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fc feb0 	bl	80005b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f9c4 	bl	8003bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d10e      	bne.n	8003888 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b01      	cmp	r3, #1
 8003876:	d107      	bne.n	8003888 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0201 	mvn.w	r2, #1
 8003880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fc feda 	bl	800063c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003892:	2b80      	cmp	r3, #128	; 0x80
 8003894:	d10e      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a0:	2b80      	cmp	r3, #128	; 0x80
 80038a2:	d107      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fe00 	bl	80044b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c2:	d10e      	bne.n	80038e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ce:	2b80      	cmp	r3, #128	; 0x80
 80038d0:	d107      	bne.n	80038e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fdf3 	bl	80044c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ec:	2b40      	cmp	r3, #64	; 0x40
 80038ee:	d10e      	bne.n	800390e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b40      	cmp	r3, #64	; 0x40
 80038fc:	d107      	bne.n	800390e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f972 	bl	8003bf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b20      	cmp	r3, #32
 800391a:	d10e      	bne.n	800393a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b20      	cmp	r3, #32
 8003928:	d107      	bne.n	800393a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f06f 0220 	mvn.w	r2, #32
 8003932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fdb3 	bl	80044a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <HAL_TIM_OC_ConfigChannel+0x1e>
 800395e:	2302      	movs	r3, #2
 8003960:	e066      	b.n	8003a30 <HAL_TIM_OC_ConfigChannel+0xec>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b14      	cmp	r3, #20
 800396e:	d857      	bhi.n	8003a20 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003970:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003976:	bf00      	nop
 8003978:	080039cd 	.word	0x080039cd
 800397c:	08003a21 	.word	0x08003a21
 8003980:	08003a21 	.word	0x08003a21
 8003984:	08003a21 	.word	0x08003a21
 8003988:	080039db 	.word	0x080039db
 800398c:	08003a21 	.word	0x08003a21
 8003990:	08003a21 	.word	0x08003a21
 8003994:	08003a21 	.word	0x08003a21
 8003998:	080039e9 	.word	0x080039e9
 800399c:	08003a21 	.word	0x08003a21
 80039a0:	08003a21 	.word	0x08003a21
 80039a4:	08003a21 	.word	0x08003a21
 80039a8:	080039f7 	.word	0x080039f7
 80039ac:	08003a21 	.word	0x08003a21
 80039b0:	08003a21 	.word	0x08003a21
 80039b4:	08003a21 	.word	0x08003a21
 80039b8:	08003a05 	.word	0x08003a05
 80039bc:	08003a21 	.word	0x08003a21
 80039c0:	08003a21 	.word	0x08003a21
 80039c4:	08003a21 	.word	0x08003a21
 80039c8:	08003a13 	.word	0x08003a13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 f990 	bl	8003cf8 <TIM_OC1_SetConfig>
      break;
 80039d8:	e025      	b.n	8003a26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fa0f 	bl	8003e04 <TIM_OC2_SetConfig>
      break;
 80039e6:	e01e      	b.n	8003a26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fa88 	bl	8003f04 <TIM_OC3_SetConfig>
      break;
 80039f4:	e017      	b.n	8003a26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 faff 	bl	8004000 <TIM_OC4_SetConfig>
      break;
 8003a02:	e010      	b.n	8003a26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fb5c 	bl	80040c8 <TIM_OC5_SetConfig>
      break;
 8003a10:	e009      	b.n	8003a26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fbb3 	bl	8004184 <TIM_OC6_SetConfig>
      break;
 8003a1e:	e002      	b.n	8003a26 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	75fb      	strb	r3, [r7, #23]
      break;
 8003a24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_TIM_ConfigClockSource+0x1c>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e0b6      	b.n	8003bc2 <HAL_TIM_ConfigClockSource+0x18a>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a90:	d03e      	beq.n	8003b10 <HAL_TIM_ConfigClockSource+0xd8>
 8003a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a96:	f200 8087 	bhi.w	8003ba8 <HAL_TIM_ConfigClockSource+0x170>
 8003a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9e:	f000 8086 	beq.w	8003bae <HAL_TIM_ConfigClockSource+0x176>
 8003aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa6:	d87f      	bhi.n	8003ba8 <HAL_TIM_ConfigClockSource+0x170>
 8003aa8:	2b70      	cmp	r3, #112	; 0x70
 8003aaa:	d01a      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0xaa>
 8003aac:	2b70      	cmp	r3, #112	; 0x70
 8003aae:	d87b      	bhi.n	8003ba8 <HAL_TIM_ConfigClockSource+0x170>
 8003ab0:	2b60      	cmp	r3, #96	; 0x60
 8003ab2:	d050      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x11e>
 8003ab4:	2b60      	cmp	r3, #96	; 0x60
 8003ab6:	d877      	bhi.n	8003ba8 <HAL_TIM_ConfigClockSource+0x170>
 8003ab8:	2b50      	cmp	r3, #80	; 0x50
 8003aba:	d03c      	beq.n	8003b36 <HAL_TIM_ConfigClockSource+0xfe>
 8003abc:	2b50      	cmp	r3, #80	; 0x50
 8003abe:	d873      	bhi.n	8003ba8 <HAL_TIM_ConfigClockSource+0x170>
 8003ac0:	2b40      	cmp	r3, #64	; 0x40
 8003ac2:	d058      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0x13e>
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	d86f      	bhi.n	8003ba8 <HAL_TIM_ConfigClockSource+0x170>
 8003ac8:	2b30      	cmp	r3, #48	; 0x30
 8003aca:	d064      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0x15e>
 8003acc:	2b30      	cmp	r3, #48	; 0x30
 8003ace:	d86b      	bhi.n	8003ba8 <HAL_TIM_ConfigClockSource+0x170>
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d060      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0x15e>
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d867      	bhi.n	8003ba8 <HAL_TIM_ConfigClockSource+0x170>
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d05c      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0x15e>
 8003adc:	2b10      	cmp	r3, #16
 8003ade:	d05a      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0x15e>
 8003ae0:	e062      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6899      	ldr	r1, [r3, #8]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f000 fc21 	bl	8004338 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	609a      	str	r2, [r3, #8]
      break;
 8003b0e:	e04f      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	6899      	ldr	r1, [r3, #8]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f000 fc0a 	bl	8004338 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b32:	609a      	str	r2, [r3, #8]
      break;
 8003b34:	e03c      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6859      	ldr	r1, [r3, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f000 fb7e 	bl	8004244 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2150      	movs	r1, #80	; 0x50
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fbd7 	bl	8004302 <TIM_ITRx_SetConfig>
      break;
 8003b54:	e02c      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	6859      	ldr	r1, [r3, #4]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f000 fb9d 	bl	80042a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2160      	movs	r1, #96	; 0x60
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fbc7 	bl	8004302 <TIM_ITRx_SetConfig>
      break;
 8003b74:	e01c      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6859      	ldr	r1, [r3, #4]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	461a      	mov	r2, r3
 8003b84:	f000 fb5e 	bl	8004244 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2140      	movs	r1, #64	; 0x40
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fbb7 	bl	8004302 <TIM_ITRx_SetConfig>
      break;
 8003b94:	e00c      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	f000 fbae 	bl	8004302 <TIM_ITRx_SetConfig>
      break;
 8003ba6:	e003      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
      break;
 8003bac:	e000      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003bae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
	...

08003c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a32      	ldr	r2, [pc, #200]	; (8003ce4 <TIM_Base_SetConfig+0xdc>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d007      	beq.n	8003c30 <TIM_Base_SetConfig+0x28>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c26:	d003      	beq.n	8003c30 <TIM_Base_SetConfig+0x28>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a2f      	ldr	r2, [pc, #188]	; (8003ce8 <TIM_Base_SetConfig+0xe0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d108      	bne.n	8003c42 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a27      	ldr	r2, [pc, #156]	; (8003ce4 <TIM_Base_SetConfig+0xdc>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d013      	beq.n	8003c72 <TIM_Base_SetConfig+0x6a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c50:	d00f      	beq.n	8003c72 <TIM_Base_SetConfig+0x6a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a24      	ldr	r2, [pc, #144]	; (8003ce8 <TIM_Base_SetConfig+0xe0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00b      	beq.n	8003c72 <TIM_Base_SetConfig+0x6a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a23      	ldr	r2, [pc, #140]	; (8003cec <TIM_Base_SetConfig+0xe4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d007      	beq.n	8003c72 <TIM_Base_SetConfig+0x6a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a22      	ldr	r2, [pc, #136]	; (8003cf0 <TIM_Base_SetConfig+0xe8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d003      	beq.n	8003c72 <TIM_Base_SetConfig+0x6a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a21      	ldr	r2, [pc, #132]	; (8003cf4 <TIM_Base_SetConfig+0xec>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d108      	bne.n	8003c84 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a0e      	ldr	r2, [pc, #56]	; (8003ce4 <TIM_Base_SetConfig+0xdc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00b      	beq.n	8003cc8 <TIM_Base_SetConfig+0xc0>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a0e      	ldr	r2, [pc, #56]	; (8003cec <TIM_Base_SetConfig+0xe4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d007      	beq.n	8003cc8 <TIM_Base_SetConfig+0xc0>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a0d      	ldr	r2, [pc, #52]	; (8003cf0 <TIM_Base_SetConfig+0xe8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_Base_SetConfig+0xc0>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a0c      	ldr	r2, [pc, #48]	; (8003cf4 <TIM_Base_SetConfig+0xec>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d103      	bne.n	8003cd0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	615a      	str	r2, [r3, #20]
}
 8003cd6:	bf00      	nop
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40012c00 	.word	0x40012c00
 8003ce8:	40000400 	.word	0x40000400
 8003cec:	40014000 	.word	0x40014000
 8003cf0:	40014400 	.word	0x40014400
 8003cf4:	40014800 	.word	0x40014800

08003cf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	f023 0201 	bic.w	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0303 	bic.w	r3, r3, #3
 8003d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f023 0302 	bic.w	r3, r3, #2
 8003d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a28      	ldr	r2, [pc, #160]	; (8003df4 <TIM_OC1_SetConfig+0xfc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00b      	beq.n	8003d70 <TIM_OC1_SetConfig+0x78>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a27      	ldr	r2, [pc, #156]	; (8003df8 <TIM_OC1_SetConfig+0x100>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d007      	beq.n	8003d70 <TIM_OC1_SetConfig+0x78>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a26      	ldr	r2, [pc, #152]	; (8003dfc <TIM_OC1_SetConfig+0x104>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <TIM_OC1_SetConfig+0x78>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a25      	ldr	r2, [pc, #148]	; (8003e00 <TIM_OC1_SetConfig+0x108>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d10c      	bne.n	8003d8a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0308 	bic.w	r3, r3, #8
 8003d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f023 0304 	bic.w	r3, r3, #4
 8003d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a19      	ldr	r2, [pc, #100]	; (8003df4 <TIM_OC1_SetConfig+0xfc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00b      	beq.n	8003daa <TIM_OC1_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a18      	ldr	r2, [pc, #96]	; (8003df8 <TIM_OC1_SetConfig+0x100>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <TIM_OC1_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a17      	ldr	r2, [pc, #92]	; (8003dfc <TIM_OC1_SetConfig+0x104>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d003      	beq.n	8003daa <TIM_OC1_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a16      	ldr	r2, [pc, #88]	; (8003e00 <TIM_OC1_SetConfig+0x108>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d111      	bne.n	8003dce <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	621a      	str	r2, [r3, #32]
}
 8003de8:	bf00      	nop
 8003dea:	371c      	adds	r7, #28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	40012c00 	.word	0x40012c00
 8003df8:	40014000 	.word	0x40014000
 8003dfc:	40014400 	.word	0x40014400
 8003e00:	40014800 	.word	0x40014800

08003e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	f023 0210 	bic.w	r2, r3, #16
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f023 0320 	bic.w	r3, r3, #32
 8003e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a24      	ldr	r2, [pc, #144]	; (8003ef4 <TIM_OC2_SetConfig+0xf0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d10d      	bne.n	8003e84 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a1b      	ldr	r2, [pc, #108]	; (8003ef4 <TIM_OC2_SetConfig+0xf0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00b      	beq.n	8003ea4 <TIM_OC2_SetConfig+0xa0>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a1a      	ldr	r2, [pc, #104]	; (8003ef8 <TIM_OC2_SetConfig+0xf4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d007      	beq.n	8003ea4 <TIM_OC2_SetConfig+0xa0>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a19      	ldr	r2, [pc, #100]	; (8003efc <TIM_OC2_SetConfig+0xf8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_OC2_SetConfig+0xa0>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a18      	ldr	r2, [pc, #96]	; (8003f00 <TIM_OC2_SetConfig+0xfc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d113      	bne.n	8003ecc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eaa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eb2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	621a      	str	r2, [r3, #32]
}
 8003ee6:	bf00      	nop
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40014000 	.word	0x40014000
 8003efc:	40014400 	.word	0x40014400
 8003f00:	40014800 	.word	0x40014800

08003f04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0303 	bic.w	r3, r3, #3
 8003f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a23      	ldr	r2, [pc, #140]	; (8003ff0 <TIM_OC3_SetConfig+0xec>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d10d      	bne.n	8003f82 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f80:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a1a      	ldr	r2, [pc, #104]	; (8003ff0 <TIM_OC3_SetConfig+0xec>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00b      	beq.n	8003fa2 <TIM_OC3_SetConfig+0x9e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a19      	ldr	r2, [pc, #100]	; (8003ff4 <TIM_OC3_SetConfig+0xf0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d007      	beq.n	8003fa2 <TIM_OC3_SetConfig+0x9e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a18      	ldr	r2, [pc, #96]	; (8003ff8 <TIM_OC3_SetConfig+0xf4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d003      	beq.n	8003fa2 <TIM_OC3_SetConfig+0x9e>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a17      	ldr	r2, [pc, #92]	; (8003ffc <TIM_OC3_SetConfig+0xf8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d113      	bne.n	8003fca <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	621a      	str	r2, [r3, #32]
}
 8003fe4:	bf00      	nop
 8003fe6:	371c      	adds	r7, #28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	40012c00 	.word	0x40012c00
 8003ff4:	40014000 	.word	0x40014000
 8003ff8:	40014400 	.word	0x40014400
 8003ffc:	40014800 	.word	0x40014800

08004000 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800402e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	021b      	lsls	r3, r3, #8
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800404e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	031b      	lsls	r3, r3, #12
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a16      	ldr	r2, [pc, #88]	; (80040b8 <TIM_OC4_SetConfig+0xb8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00b      	beq.n	800407c <TIM_OC4_SetConfig+0x7c>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a15      	ldr	r2, [pc, #84]	; (80040bc <TIM_OC4_SetConfig+0xbc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d007      	beq.n	800407c <TIM_OC4_SetConfig+0x7c>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a14      	ldr	r2, [pc, #80]	; (80040c0 <TIM_OC4_SetConfig+0xc0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d003      	beq.n	800407c <TIM_OC4_SetConfig+0x7c>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a13      	ldr	r2, [pc, #76]	; (80040c4 <TIM_OC4_SetConfig+0xc4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d109      	bne.n	8004090 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004082:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	019b      	lsls	r3, r3, #6
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40012c00 	.word	0x40012c00
 80040bc:	40014000 	.word	0x40014000
 80040c0:	40014400 	.word	0x40014400
 80040c4:	40014800 	.word	0x40014800

080040c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800410c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	041b      	lsls	r3, r3, #16
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a15      	ldr	r2, [pc, #84]	; (8004174 <TIM_OC5_SetConfig+0xac>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00b      	beq.n	800413a <TIM_OC5_SetConfig+0x72>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a14      	ldr	r2, [pc, #80]	; (8004178 <TIM_OC5_SetConfig+0xb0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d007      	beq.n	800413a <TIM_OC5_SetConfig+0x72>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a13      	ldr	r2, [pc, #76]	; (800417c <TIM_OC5_SetConfig+0xb4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d003      	beq.n	800413a <TIM_OC5_SetConfig+0x72>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a12      	ldr	r2, [pc, #72]	; (8004180 <TIM_OC5_SetConfig+0xb8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d109      	bne.n	800414e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004140:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	621a      	str	r2, [r3, #32]
}
 8004168:	bf00      	nop
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	40012c00 	.word	0x40012c00
 8004178:	40014000 	.word	0x40014000
 800417c:	40014400 	.word	0x40014400
 8004180:	40014800 	.word	0x40014800

08004184 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	021b      	lsls	r3, r3, #8
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	051b      	lsls	r3, r3, #20
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a16      	ldr	r2, [pc, #88]	; (8004234 <TIM_OC6_SetConfig+0xb0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00b      	beq.n	80041f8 <TIM_OC6_SetConfig+0x74>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a15      	ldr	r2, [pc, #84]	; (8004238 <TIM_OC6_SetConfig+0xb4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d007      	beq.n	80041f8 <TIM_OC6_SetConfig+0x74>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a14      	ldr	r2, [pc, #80]	; (800423c <TIM_OC6_SetConfig+0xb8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_OC6_SetConfig+0x74>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a13      	ldr	r2, [pc, #76]	; (8004240 <TIM_OC6_SetConfig+0xbc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d109      	bne.n	800420c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	029b      	lsls	r3, r3, #10
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	621a      	str	r2, [r3, #32]
}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40012c00 	.word	0x40012c00
 8004238:	40014000 	.word	0x40014000
 800423c:	40014400 	.word	0x40014400
 8004240:	40014800 	.word	0x40014800

08004244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f023 0201 	bic.w	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800426e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f023 030a 	bic.w	r3, r3, #10
 8004280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b087      	sub	sp, #28
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	f023 0210 	bic.w	r2, r3, #16
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	031b      	lsls	r3, r3, #12
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	621a      	str	r2, [r3, #32]
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004302:	b480      	push	{r7}
 8004304:	b085      	sub	sp, #20
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	f043 0307 	orr.w	r3, r3, #7
 8004324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	609a      	str	r2, [r3, #8]
}
 800432c:	bf00      	nop
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004352:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	021a      	lsls	r2, r3, #8
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	431a      	orrs	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4313      	orrs	r3, r2
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	609a      	str	r2, [r3, #8]
}
 800436c:	bf00      	nop
 800436e:	371c      	adds	r7, #28
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	2201      	movs	r2, #1
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a1a      	ldr	r2, [r3, #32]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	43db      	mvns	r3, r3
 800439a:	401a      	ands	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a1a      	ldr	r2, [r3, #32]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	fa01 f303 	lsl.w	r3, r1, r3
 80043b0:	431a      	orrs	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	621a      	str	r2, [r3, #32]
}
 80043b6:	bf00      	nop
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043d8:	2302      	movs	r3, #2
 80043da:	e054      	b.n	8004486 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a24      	ldr	r2, [pc, #144]	; (8004494 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d108      	bne.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800440c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a17      	ldr	r2, [pc, #92]	; (8004494 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00e      	beq.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004444:	d009      	beq.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a13      	ldr	r2, [pc, #76]	; (8004498 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d004      	beq.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a11      	ldr	r2, [pc, #68]	; (800449c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d10c      	bne.n	8004474 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004460:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	4313      	orrs	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40012c00 	.word	0x40012c00
 8004498:	40000400 	.word	0x40000400
 800449c:	40014000 	.word	0x40014000

080044a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e040      	b.n	8004570 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fc fdb8 	bl	8001074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2224      	movs	r2, #36	; 0x24
 8004508:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0201 	bic.w	r2, r2, #1
 8004518:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fe46 	bl	80051ac <UART_SetConfig>
 8004520:	4603      	mov	r3, r0
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e022      	b.n	8004570 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 ff70 	bl	8005418 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004546:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004556:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fff7 	bl	800555c <UART_CheckIdleState>
 800456e:	4603      	mov	r3, r0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e048      	b.n	800461c <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fc fd6a 	bl	8001074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2224      	movs	r2, #36	; 0x24
 80045a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0201 	bic.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fdf8 	bl	80051ac <UART_SetConfig>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e02a      	b.n	800461c <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 ff22 	bl	8005418 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80045f2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0208 	orr.w	r2, r2, #8
 8004602:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 ffa1 	bl	800555c <UART_CheckIdleState>
 800461a:	4603      	mov	r3, r0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	; 0x28
 8004628:	af02      	add	r7, sp, #8
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004638:	2b20      	cmp	r3, #32
 800463a:	f040 8082 	bne.w	8004742 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <HAL_UART_Transmit+0x26>
 8004644:	88fb      	ldrh	r3, [r7, #6]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e07a      	b.n	8004744 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_UART_Transmit+0x38>
 8004658:	2302      	movs	r3, #2
 800465a:	e073      	b.n	8004744 <HAL_UART_Transmit+0x120>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2221      	movs	r2, #33	; 0x21
 8004670:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004672:	f7fc feeb 	bl	800144c <HAL_GetTick>
 8004676:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	88fa      	ldrh	r2, [r7, #6]
 800467c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	88fa      	ldrh	r2, [r7, #6]
 8004684:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004690:	d108      	bne.n	80046a4 <HAL_UART_Transmit+0x80>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d104      	bne.n	80046a4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	e003      	b.n	80046ac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80046b4:	e02d      	b.n	8004712 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2200      	movs	r2, #0
 80046be:	2180      	movs	r1, #128	; 0x80
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 ff94 	bl	80055ee <UART_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e039      	b.n	8004744 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10b      	bne.n	80046ee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	881a      	ldrh	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e2:	b292      	uxth	r2, r2
 80046e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	3302      	adds	r3, #2
 80046ea:	61bb      	str	r3, [r7, #24]
 80046ec:	e008      	b.n	8004700 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	781a      	ldrb	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	b292      	uxth	r2, r2
 80046f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3301      	adds	r3, #1
 80046fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1cb      	bne.n	80046b6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2200      	movs	r2, #0
 8004726:	2140      	movs	r1, #64	; 0x40
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 ff60 	bl	80055ee <UART_WaitOnFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e005      	b.n	8004744 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	e000      	b.n	8004744 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004742:	2302      	movs	r3, #2
  }
}
 8004744:	4618      	mov	r0, r3
 8004746:	3720      	adds	r7, #32
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	; 0x28
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	4613      	mov	r3, r2
 800475a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004760:	2b20      	cmp	r3, #32
 8004762:	f040 80bf 	bne.w	80048e4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <HAL_UART_Receive+0x26>
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e0b7      	b.n	80048e6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_UART_Receive+0x38>
 8004780:	2302      	movs	r3, #2
 8004782:	e0b0      	b.n	80048e6 <HAL_UART_Receive+0x19a>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2222      	movs	r2, #34	; 0x22
 8004798:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047a0:	f7fc fe54 	bl	800144c <HAL_GetTick>
 80047a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	88fa      	ldrh	r2, [r7, #6]
 80047aa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	88fa      	ldrh	r2, [r7, #6]
 80047b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047be:	d10e      	bne.n	80047de <HAL_UART_Receive+0x92>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d105      	bne.n	80047d4 <HAL_UART_Receive+0x88>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80047ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047d2:	e02d      	b.n	8004830 <HAL_UART_Receive+0xe4>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	22ff      	movs	r2, #255	; 0xff
 80047d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047dc:	e028      	b.n	8004830 <HAL_UART_Receive+0xe4>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10d      	bne.n	8004802 <HAL_UART_Receive+0xb6>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d104      	bne.n	80047f8 <HAL_UART_Receive+0xac>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	22ff      	movs	r2, #255	; 0xff
 80047f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047f6:	e01b      	b.n	8004830 <HAL_UART_Receive+0xe4>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	227f      	movs	r2, #127	; 0x7f
 80047fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004800:	e016      	b.n	8004830 <HAL_UART_Receive+0xe4>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800480a:	d10d      	bne.n	8004828 <HAL_UART_Receive+0xdc>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d104      	bne.n	800481e <HAL_UART_Receive+0xd2>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	227f      	movs	r2, #127	; 0x7f
 8004818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800481c:	e008      	b.n	8004830 <HAL_UART_Receive+0xe4>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	223f      	movs	r2, #63	; 0x3f
 8004822:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004826:	e003      	b.n	8004830 <HAL_UART_Receive+0xe4>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004836:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004840:	d108      	bne.n	8004854 <HAL_UART_Receive+0x108>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d104      	bne.n	8004854 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	e003      	b.n	800485c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004858:	2300      	movs	r3, #0
 800485a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004864:	e033      	b.n	80048ce <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2200      	movs	r2, #0
 800486e:	2120      	movs	r1, #32
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 febc 	bl	80055ee <UART_WaitOnFlagUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e032      	b.n	80048e6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10c      	bne.n	80048a0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800488c:	b29a      	uxth	r2, r3
 800488e:	8a7b      	ldrh	r3, [r7, #18]
 8004890:	4013      	ands	r3, r2
 8004892:	b29a      	uxth	r2, r3
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	3302      	adds	r3, #2
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	e00d      	b.n	80048bc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	8a7b      	ldrh	r3, [r7, #18]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	4013      	ands	r3, r2
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	3301      	adds	r3, #1
 80048ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1c5      	bne.n	8004866 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	e000      	b.n	80048e6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
  }
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3720      	adds	r7, #32
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b08b      	sub	sp, #44	; 0x2c
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	4613      	mov	r3, r2
 80048fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004902:	2b20      	cmp	r3, #32
 8004904:	d156      	bne.n	80049b4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_UART_Transmit_IT+0x22>
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e04f      	b.n	80049b6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_UART_Transmit_IT+0x34>
 8004920:	2302      	movs	r3, #2
 8004922:	e048      	b.n	80049b6 <HAL_UART_Transmit_IT+0xc6>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	88fa      	ldrh	r2, [r7, #6]
 8004936:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	88fa      	ldrh	r2, [r7, #6]
 800493e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2221      	movs	r2, #33	; 0x21
 8004954:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495e:	d107      	bne.n	8004970 <HAL_UART_Transmit_IT+0x80>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d103      	bne.n	8004970 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4a16      	ldr	r2, [pc, #88]	; (80049c4 <HAL_UART_Transmit_IT+0xd4>)
 800496c:	669a      	str	r2, [r3, #104]	; 0x68
 800496e:	e002      	b.n	8004976 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4a15      	ldr	r2, [pc, #84]	; (80049c8 <HAL_UART_Transmit_IT+0xd8>)
 8004974:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	e853 3f00 	ldrex	r3, [r3]
 800498a:	613b      	str	r3, [r7, #16]
   return(result);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	623b      	str	r3, [r7, #32]
 800499e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	69f9      	ldr	r1, [r7, #28]
 80049a2:	6a3a      	ldr	r2, [r7, #32]
 80049a4:	e841 2300 	strex	r3, r2, [r1]
 80049a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e6      	bne.n	800497e <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	e000      	b.n	80049b6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80049b4:	2302      	movs	r3, #2
  }
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	372c      	adds	r7, #44	; 0x2c
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	08005a7b 	.word	0x08005a7b
 80049c8:	080059c3 	.word	0x080059c3

080049cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	; 0x28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	4613      	mov	r3, r2
 80049d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d13d      	bne.n	8004a5e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <HAL_UART_Receive_IT+0x22>
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e036      	b.n	8004a60 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_UART_Receive_IT+0x34>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e02f      	b.n	8004a60 <HAL_UART_Receive_IT+0x94>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d018      	beq.n	8004a4e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	613b      	str	r3, [r7, #16]
   return(result);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	623b      	str	r3, [r7, #32]
 8004a3c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	69f9      	ldr	r1, [r7, #28]
 8004a40:	6a3a      	ldr	r2, [r7, #32]
 8004a42:	e841 2300 	strex	r3, r2, [r1]
 8004a46:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e6      	bne.n	8004a1c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	461a      	mov	r2, r3
 8004a52:	68b9      	ldr	r1, [r7, #8]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fe8f 	bl	8005778 <UART_Start_Receive_IT>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	e000      	b.n	8004a60 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a5e:	2302      	movs	r3, #2
  }
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3728      	adds	r7, #40	; 0x28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b0ba      	sub	sp, #232	; 0xe8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004a92:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a96:	4013      	ands	r3, r2
 8004a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004a9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d115      	bne.n	8004ad0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00f      	beq.n	8004ad0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d009      	beq.n	8004ad0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 82a3 	beq.w	800500c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	4798      	blx	r3
      }
      return;
 8004ace:	e29d      	b.n	800500c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 8117 	beq.w	8004d08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ae6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004aea:	4b85      	ldr	r3, [pc, #532]	; (8004d00 <HAL_UART_IRQHandler+0x298>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 810a 	beq.w	8004d08 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d011      	beq.n	8004b24 <HAL_UART_IRQHandler+0xbc>
 8004b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00b      	beq.n	8004b24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2201      	movs	r2, #1
 8004b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1a:	f043 0201 	orr.w	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d011      	beq.n	8004b54 <HAL_UART_IRQHandler+0xec>
 8004b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00b      	beq.n	8004b54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2202      	movs	r2, #2
 8004b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b4a:	f043 0204 	orr.w	r2, r3, #4
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d011      	beq.n	8004b84 <HAL_UART_IRQHandler+0x11c>
 8004b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00b      	beq.n	8004b84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2204      	movs	r2, #4
 8004b72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b7a:	f043 0202 	orr.w	r2, r3, #2
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d017      	beq.n	8004bc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d105      	bne.n	8004ba8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ba0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00b      	beq.n	8004bc0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2208      	movs	r2, #8
 8004bae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bb6:	f043 0208 	orr.w	r2, r3, #8
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d012      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x18a>
 8004bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00c      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004be0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004be8:	f043 0220 	orr.w	r2, r3, #32
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 8209 	beq.w	8005010 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c02:	f003 0320 	and.w	r3, r3, #32
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00d      	beq.n	8004c26 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b40      	cmp	r3, #64	; 0x40
 8004c3c:	d005      	beq.n	8004c4a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d04f      	beq.n	8004cea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fe40 	bl	80058d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5a:	2b40      	cmp	r3, #64	; 0x40
 8004c5c:	d141      	bne.n	8004ce2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3308      	adds	r3, #8
 8004c64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c6c:	e853 3f00 	ldrex	r3, [r3]
 8004c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3308      	adds	r3, #8
 8004c86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1d9      	bne.n	8004c5e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d013      	beq.n	8004cda <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb6:	4a13      	ldr	r2, [pc, #76]	; (8004d04 <HAL_UART_IRQHandler+0x29c>)
 8004cb8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fc fd3e 	bl	8001740 <HAL_DMA_Abort_IT>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d017      	beq.n	8004cfa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd8:	e00f      	b.n	8004cfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f9ac 	bl	8005038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce0:	e00b      	b.n	8004cfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f9a8 	bl	8005038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce8:	e007      	b.n	8004cfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f9a4 	bl	8005038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004cf8:	e18a      	b.n	8005010 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cfa:	bf00      	nop
    return;
 8004cfc:	e188      	b.n	8005010 <HAL_UART_IRQHandler+0x5a8>
 8004cfe:	bf00      	nop
 8004d00:	04000120 	.word	0x04000120
 8004d04:	08005997 	.word	0x08005997

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	f040 8143 	bne.w	8004f98 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 813c 	beq.w	8004f98 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8135 	beq.w	8004f98 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2210      	movs	r2, #16
 8004d34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d40:	2b40      	cmp	r3, #64	; 0x40
 8004d42:	f040 80b1 	bne.w	8004ea8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 815c 	beq.w	8005014 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d66:	429a      	cmp	r2, r3
 8004d68:	f080 8154 	bcs.w	8005014 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	f000 8085 	beq.w	8004e8c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004dac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004db0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004db8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004dbc:	e841 2300 	strex	r3, r2, [r1]
 8004dc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1da      	bne.n	8004d82 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ddc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3308      	adds	r3, #8
 8004dec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004df0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004df4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004df8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dfc:	e841 2300 	strex	r3, r2, [r1]
 8004e00:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e1      	bne.n	8004dcc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3308      	adds	r3, #8
 8004e0e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e12:	e853 3f00 	ldrex	r3, [r3]
 8004e16:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3308      	adds	r3, #8
 8004e28:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e2c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e3      	bne.n	8004e08 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5c:	f023 0310 	bic.w	r3, r3, #16
 8004e60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e70:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e4      	bne.n	8004e4c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fc fc21 	bl	80016ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f8d3 	bl	800504c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ea6:	e0b5      	b.n	8005014 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80a7 	beq.w	8005018 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004eca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80a2 	beq.w	8005018 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ee8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004efc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e4      	bne.n	8004ed4 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	623b      	str	r3, [r7, #32]
   return(result);
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	f023 0301 	bic.w	r3, r3, #1
 8004f20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3308      	adds	r3, #8
 8004f2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f2e:	633a      	str	r2, [r7, #48]	; 0x30
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e3      	bne.n	8004f0a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f023 0310 	bic.w	r3, r3, #16
 8004f68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	461a      	mov	r2, r3
 8004f72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f76:	61fb      	str	r3, [r7, #28]
 8004f78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	69b9      	ldr	r1, [r7, #24]
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	617b      	str	r3, [r7, #20]
   return(result);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e4      	bne.n	8004f54 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f85b 	bl	800504c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f96:	e03f      	b.n	8005018 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00e      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x55a>
 8004fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d008      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004fb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 ff43 	bl	8005e46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fc0:	e02d      	b.n	800501e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00e      	beq.n	8004fec <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d008      	beq.n	8004fec <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d01c      	beq.n	800501c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	4798      	blx	r3
    }
    return;
 8004fea:	e017      	b.n	800501c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d012      	beq.n	800501e <HAL_UART_IRQHandler+0x5b6>
 8004ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00c      	beq.n	800501e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fd98 	bl	8005b3a <UART_EndTransmit_IT>
    return;
 800500a:	e008      	b.n	800501e <HAL_UART_IRQHandler+0x5b6>
      return;
 800500c:	bf00      	nop
 800500e:	e006      	b.n	800501e <HAL_UART_IRQHandler+0x5b6>
    return;
 8005010:	bf00      	nop
 8005012:	e004      	b.n	800501e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005014:	bf00      	nop
 8005016:	e002      	b.n	800501e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005018:	bf00      	nop
 800501a:	e000      	b.n	800501e <HAL_UART_IRQHandler+0x5b6>
    return;
 800501c:	bf00      	nop
  }

}
 800501e:	37e8      	adds	r7, #232	; 0xe8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005064:	b480      	push	{r7}
 8005066:	b08f      	sub	sp, #60	; 0x3c
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_HalfDuplex_EnableTransmitter+0x16>
 8005076:	2302      	movs	r3, #2
 8005078:	e040      	b.n	80050fc <HAL_HalfDuplex_EnableTransmitter+0x98>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2224      	movs	r2, #36	; 0x24
 8005086:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	61fb      	str	r3, [r7, #28]
   return(result);
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f023 030c 	bic.w	r3, r3, #12
 800509c:	637b      	str	r3, [r7, #52]	; 0x34
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e6      	bne.n	8005088 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f043 0308 	orr.w	r3, r3, #8
 80050ce:	633b      	str	r3, [r7, #48]	; 0x30
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	6979      	ldr	r1, [r7, #20]
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	613b      	str	r3, [r7, #16]
   return(result);
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e6      	bne.n	80050ba <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	373c      	adds	r7, #60	; 0x3c
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8005108:	b480      	push	{r7}
 800510a:	b08f      	sub	sp, #60	; 0x3c
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005116:	2b01      	cmp	r3, #1
 8005118:	d101      	bne.n	800511e <HAL_HalfDuplex_EnableReceiver+0x16>
 800511a:	2302      	movs	r3, #2
 800511c:	e040      	b.n	80051a0 <HAL_HalfDuplex_EnableReceiver+0x98>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2224      	movs	r2, #36	; 0x24
 800512a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	61fb      	str	r3, [r7, #28]
   return(result);
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	f023 030c 	bic.w	r3, r3, #12
 8005140:	637b      	str	r3, [r7, #52]	; 0x34
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800514c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e6      	bne.n	800512c <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	e853 3f00 	ldrex	r3, [r3]
 800516a:	60bb      	str	r3, [r7, #8]
   return(result);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f043 0304 	orr.w	r3, r3, #4
 8005172:	633b      	str	r3, [r7, #48]	; 0x30
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005180:	6979      	ldr	r1, [r7, #20]
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	e841 2300 	strex	r3, r2, [r1]
 8005188:	613b      	str	r3, [r7, #16]
   return(result);
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1e6      	bne.n	800515e <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	373c      	adds	r7, #60	; 0x3c
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b088      	sub	sp, #32
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	4b8a      	ldr	r3, [pc, #552]	; (8005400 <UART_SetConfig+0x254>)
 80051d8:	4013      	ands	r3, r2
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6812      	ldr	r2, [r2, #0]
 80051de:	6979      	ldr	r1, [r7, #20]
 80051e0:	430b      	orrs	r3, r1
 80051e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	430a      	orrs	r2, r1
 800521c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a78      	ldr	r2, [pc, #480]	; (8005404 <UART_SetConfig+0x258>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d120      	bne.n	800526a <UART_SetConfig+0xbe>
 8005228:	4b77      	ldr	r3, [pc, #476]	; (8005408 <UART_SetConfig+0x25c>)
 800522a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	2b03      	cmp	r3, #3
 8005232:	d817      	bhi.n	8005264 <UART_SetConfig+0xb8>
 8005234:	a201      	add	r2, pc, #4	; (adr r2, 800523c <UART_SetConfig+0x90>)
 8005236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523a:	bf00      	nop
 800523c:	0800524d 	.word	0x0800524d
 8005240:	08005259 	.word	0x08005259
 8005244:	0800525f 	.word	0x0800525f
 8005248:	08005253 	.word	0x08005253
 800524c:	2300      	movs	r3, #0
 800524e:	77fb      	strb	r3, [r7, #31]
 8005250:	e01d      	b.n	800528e <UART_SetConfig+0xe2>
 8005252:	2302      	movs	r3, #2
 8005254:	77fb      	strb	r3, [r7, #31]
 8005256:	e01a      	b.n	800528e <UART_SetConfig+0xe2>
 8005258:	2304      	movs	r3, #4
 800525a:	77fb      	strb	r3, [r7, #31]
 800525c:	e017      	b.n	800528e <UART_SetConfig+0xe2>
 800525e:	2308      	movs	r3, #8
 8005260:	77fb      	strb	r3, [r7, #31]
 8005262:	e014      	b.n	800528e <UART_SetConfig+0xe2>
 8005264:	2310      	movs	r3, #16
 8005266:	77fb      	strb	r3, [r7, #31]
 8005268:	e011      	b.n	800528e <UART_SetConfig+0xe2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a67      	ldr	r2, [pc, #412]	; (800540c <UART_SetConfig+0x260>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d102      	bne.n	800527a <UART_SetConfig+0xce>
 8005274:	2300      	movs	r3, #0
 8005276:	77fb      	strb	r3, [r7, #31]
 8005278:	e009      	b.n	800528e <UART_SetConfig+0xe2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a64      	ldr	r2, [pc, #400]	; (8005410 <UART_SetConfig+0x264>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d102      	bne.n	800528a <UART_SetConfig+0xde>
 8005284:	2300      	movs	r3, #0
 8005286:	77fb      	strb	r3, [r7, #31]
 8005288:	e001      	b.n	800528e <UART_SetConfig+0xe2>
 800528a:	2310      	movs	r3, #16
 800528c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005296:	d15b      	bne.n	8005350 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005298:	7ffb      	ldrb	r3, [r7, #31]
 800529a:	2b08      	cmp	r3, #8
 800529c:	d827      	bhi.n	80052ee <UART_SetConfig+0x142>
 800529e:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <UART_SetConfig+0xf8>)
 80052a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a4:	080052c9 	.word	0x080052c9
 80052a8:	080052d1 	.word	0x080052d1
 80052ac:	080052d9 	.word	0x080052d9
 80052b0:	080052ef 	.word	0x080052ef
 80052b4:	080052df 	.word	0x080052df
 80052b8:	080052ef 	.word	0x080052ef
 80052bc:	080052ef 	.word	0x080052ef
 80052c0:	080052ef 	.word	0x080052ef
 80052c4:	080052e7 	.word	0x080052e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c8:	f7fd fe62 	bl	8002f90 <HAL_RCC_GetPCLK1Freq>
 80052cc:	61b8      	str	r0, [r7, #24]
        break;
 80052ce:	e013      	b.n	80052f8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d0:	f7fd fe80 	bl	8002fd4 <HAL_RCC_GetPCLK2Freq>
 80052d4:	61b8      	str	r0, [r7, #24]
        break;
 80052d6:	e00f      	b.n	80052f8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d8:	4b4e      	ldr	r3, [pc, #312]	; (8005414 <UART_SetConfig+0x268>)
 80052da:	61bb      	str	r3, [r7, #24]
        break;
 80052dc:	e00c      	b.n	80052f8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052de:	f7fd fde1 	bl	8002ea4 <HAL_RCC_GetSysClockFreq>
 80052e2:	61b8      	str	r0, [r7, #24]
        break;
 80052e4:	e008      	b.n	80052f8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ea:	61bb      	str	r3, [r7, #24]
        break;
 80052ec:	e004      	b.n	80052f8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	77bb      	strb	r3, [r7, #30]
        break;
 80052f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d074      	beq.n	80053e8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	005a      	lsls	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	085b      	lsrs	r3, r3, #1
 8005308:	441a      	add	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005312:	b29b      	uxth	r3, r3
 8005314:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	2b0f      	cmp	r3, #15
 800531a:	d916      	bls.n	800534a <UART_SetConfig+0x19e>
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005322:	d212      	bcs.n	800534a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	b29b      	uxth	r3, r3
 8005328:	f023 030f 	bic.w	r3, r3, #15
 800532c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	085b      	lsrs	r3, r3, #1
 8005332:	b29b      	uxth	r3, r3
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	b29a      	uxth	r2, r3
 800533a:	89fb      	ldrh	r3, [r7, #14]
 800533c:	4313      	orrs	r3, r2
 800533e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	89fa      	ldrh	r2, [r7, #14]
 8005346:	60da      	str	r2, [r3, #12]
 8005348:	e04e      	b.n	80053e8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	77bb      	strb	r3, [r7, #30]
 800534e:	e04b      	b.n	80053e8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005350:	7ffb      	ldrb	r3, [r7, #31]
 8005352:	2b08      	cmp	r3, #8
 8005354:	d827      	bhi.n	80053a6 <UART_SetConfig+0x1fa>
 8005356:	a201      	add	r2, pc, #4	; (adr r2, 800535c <UART_SetConfig+0x1b0>)
 8005358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535c:	08005381 	.word	0x08005381
 8005360:	08005389 	.word	0x08005389
 8005364:	08005391 	.word	0x08005391
 8005368:	080053a7 	.word	0x080053a7
 800536c:	08005397 	.word	0x08005397
 8005370:	080053a7 	.word	0x080053a7
 8005374:	080053a7 	.word	0x080053a7
 8005378:	080053a7 	.word	0x080053a7
 800537c:	0800539f 	.word	0x0800539f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005380:	f7fd fe06 	bl	8002f90 <HAL_RCC_GetPCLK1Freq>
 8005384:	61b8      	str	r0, [r7, #24]
        break;
 8005386:	e013      	b.n	80053b0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005388:	f7fd fe24 	bl	8002fd4 <HAL_RCC_GetPCLK2Freq>
 800538c:	61b8      	str	r0, [r7, #24]
        break;
 800538e:	e00f      	b.n	80053b0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005390:	4b20      	ldr	r3, [pc, #128]	; (8005414 <UART_SetConfig+0x268>)
 8005392:	61bb      	str	r3, [r7, #24]
        break;
 8005394:	e00c      	b.n	80053b0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005396:	f7fd fd85 	bl	8002ea4 <HAL_RCC_GetSysClockFreq>
 800539a:	61b8      	str	r0, [r7, #24]
        break;
 800539c:	e008      	b.n	80053b0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800539e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053a2:	61bb      	str	r3, [r7, #24]
        break;
 80053a4:	e004      	b.n	80053b0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	77bb      	strb	r3, [r7, #30]
        break;
 80053ae:	bf00      	nop
    }

    if (pclk != 0U)
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d018      	beq.n	80053e8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	085a      	lsrs	r2, r3, #1
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	441a      	add	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	2b0f      	cmp	r3, #15
 80053d0:	d908      	bls.n	80053e4 <UART_SetConfig+0x238>
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d8:	d204      	bcs.n	80053e4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	60da      	str	r2, [r3, #12]
 80053e2:	e001      	b.n	80053e8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3720      	adds	r7, #32
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	efff69f3 	.word	0xefff69f3
 8005404:	40013800 	.word	0x40013800
 8005408:	40021000 	.word	0x40021000
 800540c:	40004400 	.word	0x40004400
 8005410:	40004800 	.word	0x40004800
 8005414:	007a1200 	.word	0x007a1200

08005418 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00a      	beq.n	8005442 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	f003 0310 	and.w	r3, r3, #16
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00a      	beq.n	80054ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01a      	beq.n	800552e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005516:	d10a      	bne.n	800552e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	605a      	str	r2, [r3, #4]
  }
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af02      	add	r7, sp, #8
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800556c:	f7fb ff6e 	bl	800144c <HAL_GetTick>
 8005570:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b08      	cmp	r3, #8
 800557e:	d10e      	bne.n	800559e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f82d 	bl	80055ee <UART_WaitOnFlagUntilTimeout>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e023      	b.n	80055e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d10e      	bne.n	80055ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f817 	bl	80055ee <UART_WaitOnFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e00d      	b.n	80055e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b09c      	sub	sp, #112	; 0x70
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	60b9      	str	r1, [r7, #8]
 80055f8:	603b      	str	r3, [r7, #0]
 80055fa:	4613      	mov	r3, r2
 80055fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055fe:	e0a5      	b.n	800574c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005606:	f000 80a1 	beq.w	800574c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560a:	f7fb ff1f 	bl	800144c <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005616:	429a      	cmp	r2, r3
 8005618:	d302      	bcc.n	8005620 <UART_WaitOnFlagUntilTimeout+0x32>
 800561a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800561c:	2b00      	cmp	r3, #0
 800561e:	d13e      	bne.n	800569e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800562e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005630:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005634:	667b      	str	r3, [r7, #100]	; 0x64
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	461a      	mov	r2, r3
 800563c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800563e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005640:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005642:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005644:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005646:	e841 2300 	strex	r3, r2, [r1]
 800564a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800564c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1e6      	bne.n	8005620 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3308      	adds	r3, #8
 8005658:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565c:	e853 3f00 	ldrex	r3, [r3]
 8005660:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	663b      	str	r3, [r7, #96]	; 0x60
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3308      	adds	r3, #8
 8005670:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005672:	64ba      	str	r2, [r7, #72]	; 0x48
 8005674:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005678:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800567a:	e841 2300 	strex	r3, r2, [r1]
 800567e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1e5      	bne.n	8005652 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2220      	movs	r2, #32
 800568a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2220      	movs	r2, #32
 8005690:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e067      	b.n	800576e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d04f      	beq.n	800574c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ba:	d147      	bne.n	800574c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e4:	637b      	str	r3, [r7, #52]	; 0x34
 80056e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e6      	bne.n	80056c6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3308      	adds	r3, #8
 80056fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	613b      	str	r3, [r7, #16]
   return(result);
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f023 0301 	bic.w	r3, r3, #1
 800570e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3308      	adds	r3, #8
 8005716:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005718:	623a      	str	r2, [r7, #32]
 800571a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	69f9      	ldr	r1, [r7, #28]
 800571e:	6a3a      	ldr	r2, [r7, #32]
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	61bb      	str	r3, [r7, #24]
   return(result);
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e5      	bne.n	80056f8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2220      	movs	r2, #32
 8005730:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e010      	b.n	800576e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69da      	ldr	r2, [r3, #28]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4013      	ands	r3, r2
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	429a      	cmp	r2, r3
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	461a      	mov	r2, r3
 8005764:	79fb      	ldrb	r3, [r7, #7]
 8005766:	429a      	cmp	r2, r3
 8005768:	f43f af4a 	beq.w	8005600 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3770      	adds	r7, #112	; 0x70
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005778:	b480      	push	{r7}
 800577a:	b091      	sub	sp, #68	; 0x44
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	4613      	mov	r3, r2
 8005784:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	88fa      	ldrh	r2, [r7, #6]
 8005790:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	88fa      	ldrh	r2, [r7, #6]
 8005798:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057aa:	d10e      	bne.n	80057ca <UART_Start_Receive_IT+0x52>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d105      	bne.n	80057c0 <UART_Start_Receive_IT+0x48>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80057ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057be:	e02d      	b.n	800581c <UART_Start_Receive_IT+0xa4>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	22ff      	movs	r2, #255	; 0xff
 80057c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057c8:	e028      	b.n	800581c <UART_Start_Receive_IT+0xa4>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10d      	bne.n	80057ee <UART_Start_Receive_IT+0x76>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d104      	bne.n	80057e4 <UART_Start_Receive_IT+0x6c>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	22ff      	movs	r2, #255	; 0xff
 80057de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057e2:	e01b      	b.n	800581c <UART_Start_Receive_IT+0xa4>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	227f      	movs	r2, #127	; 0x7f
 80057e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057ec:	e016      	b.n	800581c <UART_Start_Receive_IT+0xa4>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057f6:	d10d      	bne.n	8005814 <UART_Start_Receive_IT+0x9c>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d104      	bne.n	800580a <UART_Start_Receive_IT+0x92>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	227f      	movs	r2, #127	; 0x7f
 8005804:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005808:	e008      	b.n	800581c <UART_Start_Receive_IT+0xa4>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	223f      	movs	r2, #63	; 0x3f
 800580e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005812:	e003      	b.n	800581c <UART_Start_Receive_IT+0xa4>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2222      	movs	r2, #34	; 0x22
 8005828:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3308      	adds	r3, #8
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	e853 3f00 	ldrex	r3, [r3]
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	f043 0301 	orr.w	r3, r3, #1
 8005840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3308      	adds	r3, #8
 8005848:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800584a:	637a      	str	r2, [r7, #52]	; 0x34
 800584c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005850:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e5      	bne.n	800582a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005866:	d107      	bne.n	8005878 <UART_Start_Receive_IT+0x100>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d103      	bne.n	8005878 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4a15      	ldr	r2, [pc, #84]	; (80058c8 <UART_Start_Receive_IT+0x150>)
 8005874:	665a      	str	r2, [r3, #100]	; 0x64
 8005876:	e002      	b.n	800587e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4a14      	ldr	r2, [pc, #80]	; (80058cc <UART_Start_Receive_IT+0x154>)
 800587c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	613b      	str	r3, [r7, #16]
   return(result);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800589a:	63bb      	str	r3, [r7, #56]	; 0x38
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a4:	623b      	str	r3, [r7, #32]
 80058a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	69f9      	ldr	r1, [r7, #28]
 80058aa:	6a3a      	ldr	r2, [r7, #32]
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e6      	bne.n	8005886 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3744      	adds	r7, #68	; 0x44
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	08005ceb 	.word	0x08005ceb
 80058cc:	08005b8f 	.word	0x08005b8f

080058d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b095      	sub	sp, #84	; 0x54
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f6:	643b      	str	r3, [r7, #64]	; 0x40
 80058f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e6      	bne.n	80058d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3308      	adds	r3, #8
 8005910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	e853 3f00 	ldrex	r3, [r3]
 8005918:	61fb      	str	r3, [r7, #28]
   return(result);
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	f023 0301 	bic.w	r3, r3, #1
 8005920:	64bb      	str	r3, [r7, #72]	; 0x48
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3308      	adds	r3, #8
 8005928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800592a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800592c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1e5      	bne.n	800590a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005942:	2b01      	cmp	r3, #1
 8005944:	d118      	bne.n	8005978 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	60bb      	str	r3, [r7, #8]
   return(result);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f023 0310 	bic.w	r3, r3, #16
 800595a:	647b      	str	r3, [r7, #68]	; 0x44
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005964:	61bb      	str	r3, [r7, #24]
 8005966:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6979      	ldr	r1, [r7, #20]
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	613b      	str	r3, [r7, #16]
   return(result);
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e6      	bne.n	8005946 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	665a      	str	r2, [r3, #100]	; 0x64
}
 800598a:	bf00      	nop
 800598c:	3754      	adds	r7, #84	; 0x54
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f7ff fb3f 	bl	8005038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b08f      	sub	sp, #60	; 0x3c
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ce:	2b21      	cmp	r3, #33	; 0x21
 80059d0:	d14d      	bne.n	8005a6e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d132      	bne.n	8005a44 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059f2:	637b      	str	r3, [r7, #52]	; 0x34
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059fe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e6      	bne.n	80059de <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a24:	633b      	str	r3, [r7, #48]	; 0x30
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	61bb      	str	r3, [r7, #24]
 8005a30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	6979      	ldr	r1, [r7, #20]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1e6      	bne.n	8005a10 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005a42:	e014      	b.n	8005a6e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a48:	781a      	ldrb	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	b292      	uxth	r2, r2
 8005a50:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	3b01      	subs	r3, #1
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005a6e:	bf00      	nop
 8005a70:	373c      	adds	r7, #60	; 0x3c
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b091      	sub	sp, #68	; 0x44
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a86:	2b21      	cmp	r3, #33	; 0x21
 8005a88:	d151      	bne.n	8005b2e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d132      	bne.n	8005afc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	e853 3f00 	ldrex	r3, [r3]
 8005aa2:	623b      	str	r3, [r7, #32]
   return(result);
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ab6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e6      	bne.n	8005a96 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005adc:	637b      	str	r3, [r7, #52]	; 0x34
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	69b9      	ldr	r1, [r7, #24]
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	617b      	str	r3, [r7, #20]
   return(result);
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e6      	bne.n	8005ac8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005afa:	e018      	b.n	8005b2e <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b00:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b04:	881a      	ldrh	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b0e:	b292      	uxth	r2, r2
 8005b10:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b16:	1c9a      	adds	r2, r3, #2
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005b2e:	bf00      	nop
 8005b30:	3744      	adds	r7, #68	; 0x44
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b088      	sub	sp, #32
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	e853 3f00 	ldrex	r3, [r3]
 8005b4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b56:	61fb      	str	r3, [r7, #28]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	61bb      	str	r3, [r7, #24]
 8005b62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	6979      	ldr	r1, [r7, #20]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e6      	bne.n	8005b42 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff fa4f 	bl	8005024 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b86:	bf00      	nop
 8005b88:	3720      	adds	r7, #32
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b096      	sub	sp, #88	; 0x58
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b9c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba4:	2b22      	cmp	r3, #34	; 0x22
 8005ba6:	f040 8094 	bne.w	8005cd2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005bb0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005bb4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005bb8:	b2d9      	uxtb	r1, r3
 8005bba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc4:	400a      	ands	r2, r1
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d177      	bne.n	8005ce2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c06:	653b      	str	r3, [r7, #80]	; 0x50
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c10:	647b      	str	r3, [r7, #68]	; 0x44
 8005c12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c18:	e841 2300 	strex	r3, r2, [r1]
 8005c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e6      	bne.n	8005bf2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3308      	adds	r3, #8
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	623b      	str	r3, [r7, #32]
   return(result);
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	f023 0301 	bic.w	r3, r3, #1
 8005c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3308      	adds	r3, #8
 8005c42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c44:	633a      	str	r2, [r7, #48]	; 0x30
 8005c46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e5      	bne.n	8005c24 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d12e      	bne.n	8005cca <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	e853 3f00 	ldrex	r3, [r3]
 8005c7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0310 	bic.w	r3, r3, #16
 8005c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c90:	61fb      	str	r3, [r7, #28]
 8005c92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	69b9      	ldr	r1, [r7, #24]
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	e841 2300 	strex	r3, r2, [r1]
 8005c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e6      	bne.n	8005c72 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	2b10      	cmp	r3, #16
 8005cb0:	d103      	bne.n	8005cba <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2210      	movs	r2, #16
 8005cb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff f9c2 	bl	800504c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cc8:	e00b      	b.n	8005ce2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7fa fe94 	bl	80009f8 <HAL_UART_RxCpltCallback>
}
 8005cd0:	e007      	b.n	8005ce2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	699a      	ldr	r2, [r3, #24]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 0208 	orr.w	r2, r2, #8
 8005ce0:	619a      	str	r2, [r3, #24]
}
 8005ce2:	bf00      	nop
 8005ce4:	3758      	adds	r7, #88	; 0x58
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b096      	sub	sp, #88	; 0x58
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cf8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d00:	2b22      	cmp	r3, #34	; 0x22
 8005d02:	f040 8094 	bne.w	8005e2e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d0c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d14:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d16:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005d1a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d1e:	4013      	ands	r3, r2
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d24:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2a:	1c9a      	adds	r2, r3, #2
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d177      	bne.n	8005e3e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d6c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d6e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e6      	bne.n	8005d4e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3308      	adds	r3, #8
 8005d86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	e853 3f00 	ldrex	r3, [r3]
 8005d8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f023 0301 	bic.w	r3, r3, #1
 8005d96:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005da0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005da2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e5      	bne.n	8005d80 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d12e      	bne.n	8005e26 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f023 0310 	bic.w	r3, r3, #16
 8005de2:	647b      	str	r3, [r7, #68]	; 0x44
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	461a      	mov	r2, r3
 8005dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	6979      	ldr	r1, [r7, #20]
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e6      	bne.n	8005dce <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	2b10      	cmp	r3, #16
 8005e0c:	d103      	bne.n	8005e16 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2210      	movs	r2, #16
 8005e14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff f914 	bl	800504c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e24:	e00b      	b.n	8005e3e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fa fde6 	bl	80009f8 <HAL_UART_RxCpltCallback>
}
 8005e2c:	e007      	b.n	8005e3e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	699a      	ldr	r2, [r3, #24]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0208 	orr.w	r2, r2, #8
 8005e3c:	619a      	str	r2, [r3, #24]
}
 8005e3e:	bf00      	nop
 8005e40:	3758      	adds	r7, #88	; 0x58
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e4e:	bf00      	nop
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
	...

08005e5c <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	4603      	mov	r3, r0
 8005e64:	71fb      	strb	r3, [r7, #7]
 8005e66:	460b      	mov	r3, r1
 8005e68:	71bb      	strb	r3, [r7, #6]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8005e6e:	797b      	ldrb	r3, [r7, #5]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d901      	bls.n	8005e78 <tmc_fillCRC8Table+0x1c>
		return 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	e09e      	b.n	8005fb6 <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 8005e78:	797a      	ldrb	r2, [r7, #5]
 8005e7a:	4951      	ldr	r1, [pc, #324]	; (8005fc0 <tmc_fillCRC8Table+0x164>)
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	01db      	lsls	r3, r3, #7
 8005e80:	4413      	add	r3, r2
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	440b      	add	r3, r1
 8005e86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005e8a:	79fa      	ldrb	r2, [r7, #7]
 8005e8c:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8005e8e:	797a      	ldrb	r2, [r7, #5]
 8005e90:	494b      	ldr	r1, [pc, #300]	; (8005fc0 <tmc_fillCRC8Table+0x164>)
 8005e92:	4613      	mov	r3, r2
 8005e94:	01db      	lsls	r3, r3, #7
 8005e96:	4413      	add	r3, r2
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	440b      	add	r3, r1
 8005e9c:	f203 1301 	addw	r3, r3, #257	; 0x101
 8005ea0:	79ba      	ldrb	r2, [r7, #6]
 8005ea2:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 8005ea4:	797a      	ldrb	r2, [r7, #5]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	01db      	lsls	r3, r3, #7
 8005eaa:	4413      	add	r3, r2
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	4a44      	ldr	r2, [pc, #272]	; (8005fc0 <tmc_fillCRC8Table+0x164>)
 8005eb0:	4413      	add	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eba:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8005ebc:	4b41      	ldr	r3, [pc, #260]	; (8005fc4 <tmc_fillCRC8Table+0x168>)
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	e074      	b.n	8005fac <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 8005ec2:	79bb      	ldrb	r3, [r7, #6]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d004      	beq.n	8005ed2 <tmc_fillCRC8Table+0x76>
 8005ec8:	6978      	ldr	r0, [r7, #20]
 8005eca:	f000 f8f7 	bl	80060bc <flipBitsInBytes>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	e000      	b.n	8005ed4 <tmc_fillCRC8Table+0x78>
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	e035      	b.n	8005f48 <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	0fdb      	lsrs	r3, r3, #31
 8005ee0:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <tmc_fillCRC8Table+0x9a>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	e000      	b.n	8005ef8 <tmc_fillCRC8Table+0x9c>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	69fa      	ldr	r2, [r7, #28]
 8005efa:	4053      	eors	r3, r2
 8005efc:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <tmc_fillCRC8Table+0xb2>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	021b      	lsls	r3, r3, #8
 8005f0c:	e000      	b.n	8005f10 <tmc_fillCRC8Table+0xb4>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	69fa      	ldr	r2, [r7, #28]
 8005f12:	4053      	eors	r3, r2
 8005f14:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <tmc_fillCRC8Table+0xca>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	041b      	lsls	r3, r3, #16
 8005f24:	e000      	b.n	8005f28 <tmc_fillCRC8Table+0xcc>
 8005f26:	2300      	movs	r3, #0
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	4053      	eors	r3, r2
 8005f2c:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 8005f2e:	7afb      	ldrb	r3, [r7, #11]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <tmc_fillCRC8Table+0xde>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	061b      	lsls	r3, r3, #24
 8005f38:	e000      	b.n	8005f3c <tmc_fillCRC8Table+0xe0>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	69fa      	ldr	r2, [r7, #28]
 8005f3e:	4053      	eors	r3, r2
 8005f40:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	3301      	adds	r3, #1
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	2b07      	cmp	r3, #7
 8005f4c:	ddc6      	ble.n	8005edc <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 8005f4e:	79bb      	ldrb	r3, [r7, #6]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d004      	beq.n	8005f5e <tmc_fillCRC8Table+0x102>
 8005f54:	69f8      	ldr	r0, [r7, #28]
 8005f56:	f000 f8b1 	bl	80060bc <flipBitsInBytes>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	e000      	b.n	8005f60 <tmc_fillCRC8Table+0x104>
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	61ba      	str	r2, [r7, #24]
 8005f68:	69fa      	ldr	r2, [r7, #28]
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	0a1b      	lsrs	r3, r3, #8
 8005f72:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	61ba      	str	r2, [r7, #24]
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	0a1b      	lsrs	r3, r3, #8
 8005f84:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	61ba      	str	r2, [r7, #24]
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	0a1b      	lsrs	r3, r3, #8
 8005f96:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	61ba      	str	r2, [r7, #24]
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	4a06      	ldr	r2, [pc, #24]	; (8005fc8 <tmc_fillCRC8Table+0x16c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d186      	bne.n	8005ec2 <tmc_fillCRC8Table+0x66>
	}

	return 1;
 8005fb4:	2301      	movs	r3, #1
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3720      	adds	r7, #32
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20000720 	.word	0x20000720
 8005fc4:	03020100 	.word	0x03020100
 8005fc8:	04030200 	.word	0x04030200

08005fcc <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8005fde:	79fb      	ldrb	r3, [r7, #7]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d901      	bls.n	8005fe8 <tmc_CRC8+0x1c>
		return 0;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e02c      	b.n	8006042 <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 8005fe8:	79fa      	ldrb	r2, [r7, #7]
 8005fea:	4613      	mov	r3, r2
 8005fec:	01db      	lsls	r3, r3, #7
 8005fee:	4413      	add	r3, r2
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	4a16      	ldr	r2, [pc, #88]	; (800604c <tmc_CRC8+0x80>)
 8005ff4:	4413      	add	r3, r2
 8005ff6:	613b      	str	r3, [r7, #16]

	while(bytes--)
 8005ff8:	e00b      	b.n	8006012 <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	60fa      	str	r2, [r7, #12]
 8006000:	781a      	ldrb	r2, [r3, #0]
 8006002:	7dfb      	ldrb	r3, [r7, #23]
 8006004:	4053      	eors	r3, r2
 8006006:	b2db      	uxtb	r3, r3
 8006008:	461a      	mov	r2, r3
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	4413      	add	r3, r2
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	1e5a      	subs	r2, r3, #1
 8006016:	60ba      	str	r2, [r7, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1ee      	bne.n	8005ffa <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 800601c:	79fa      	ldrb	r2, [r7, #7]
 800601e:	490b      	ldr	r1, [pc, #44]	; (800604c <tmc_CRC8+0x80>)
 8006020:	4613      	mov	r3, r2
 8006022:	01db      	lsls	r3, r3, #7
 8006024:	4413      	add	r3, r2
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	440b      	add	r3, r1
 800602a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <tmc_CRC8+0x74>
 8006034:	7dfb      	ldrb	r3, [r7, #23]
 8006036:	4618      	mov	r0, r3
 8006038:	f000 f80a 	bl	8006050 <flipByte>
 800603c:	4603      	mov	r3, r0
 800603e:	e000      	b.n	8006042 <tmc_CRC8+0x76>
 8006040:	7dfb      	ldrb	r3, [r7, #23]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20000720 	.word	0x20000720

08006050 <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	4603      	mov	r3, r0
 8006058:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	085b      	lsrs	r3, r3, #1
 800605e:	b2db      	uxtb	r3, r3
 8006060:	b25b      	sxtb	r3, r3
 8006062:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8006066:	b25a      	sxtb	r2, r3
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	b25b      	sxtb	r3, r3
 800606e:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8006072:	b25b      	sxtb	r3, r3
 8006074:	4313      	orrs	r3, r2
 8006076:	b25b      	sxtb	r3, r3
 8006078:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 800607a:	79fb      	ldrb	r3, [r7, #7]
 800607c:	089b      	lsrs	r3, r3, #2
 800607e:	b2db      	uxtb	r3, r3
 8006080:	b25b      	sxtb	r3, r3
 8006082:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8006086:	b25a      	sxtb	r2, r3
 8006088:	79fb      	ldrb	r3, [r7, #7]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	b25b      	sxtb	r3, r3
 800608e:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8006092:	b25b      	sxtb	r3, r3
 8006094:	4313      	orrs	r3, r2
 8006096:	b25b      	sxtb	r3, r3
 8006098:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	091b      	lsrs	r3, r3, #4
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	b25a      	sxtb	r2, r3
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	b25b      	sxtb	r3, r3
 80060a8:	4313      	orrs	r3, r2
 80060aa:	b25b      	sxtb	r3, r3
 80060ac:	71fb      	strb	r3, [r7, #7]

	return value;
 80060ae:	79fb      	ldrb	r3, [r7, #7]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	085b      	lsrs	r3, r3, #1
 80060c8:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 80060d4:	4313      	orrs	r3, r2
 80060d6:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	089b      	lsrs	r3, r3, #2
 80060dc:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 80060e8:	4313      	orrs	r3, r2
 80060ea:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	091b      	lsrs	r3, r3, #4
 80060f0:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80060fc:	4313      	orrs	r3, r2
 80060fe:	607b      	str	r3, [r7, #4]

	return value;
 8006100:	687b      	ldr	r3, [r7, #4]
}
 8006102:	4618      	mov	r0, r3
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b086      	sub	sp, #24
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	460b      	mov	r3, r1
 8006118:	607a      	str	r2, [r7, #4]
 800611a:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 800611c:	2305      	movs	r3, #5
 800611e:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8006126:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 8006128:	7afb      	ldrb	r3, [r7, #11]
 800612a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800612e:	b2db      	uxtb	r3, r3
 8006130:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	0e1b      	lsrs	r3, r3, #24
 8006136:	b2db      	uxtb	r3, r3
 8006138:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	141b      	asrs	r3, r3, #16
 800613e:	b2db      	uxtb	r3, r3
 8006140:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	121b      	asrs	r3, r3, #8
 8006146:	b2db      	uxtb	r3, r3
 8006148:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 8006150:	f107 0310 	add.w	r3, r7, #16
 8006154:	2107      	movs	r1, #7
 8006156:	4618      	mov	r0, r3
 8006158:	f7fa f8b2 	bl	80002c0 <tmc2209_CRC8>
 800615c:	4603      	mov	r3, r0
 800615e:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8006168:	f107 0110 	add.w	r1, r7, #16
 800616c:	2300      	movs	r3, #0
 800616e:	2208      	movs	r2, #8
 8006170:	f7fa f87e 	bl	8000270 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 8006174:	7afb      	ldrb	r3, [r7, #11]
 8006176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800617a:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	7afb      	ldrb	r3, [r7, #11]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 800618a:	7afb      	ldrb	r3, [r7, #11]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4413      	add	r3, r2
 8006190:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 8006194:	7afb      	ldrb	r3, [r7, #11]
 8006196:	f042 0208 	orr.w	r2, r2, #8
 800619a:	b2d1      	uxtb	r1, r2
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	460a      	mov	r2, r1
 80061a2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 80061a6:	bf00      	nop
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 80061ae:	b590      	push	{r4, r7, lr}
 80061b0:	b085      	sub	sp, #20
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	460b      	mov	r3, r1
 80061b8:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 80061ba:	2300      	movs	r3, #0
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	2300      	movs	r3, #0
 80061c0:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 80061c2:	78fb      	ldrb	r3, [r7, #3]
 80061c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061c8:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	4413      	add	r3, r2
 80061d0:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d106      	bne.n	80061ea <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	e03f      	b.n	800626a <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 80061ea:	2305      	movs	r3, #5
 80061ec:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 80061f4:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 80061fa:	f107 0308 	add.w	r3, r7, #8
 80061fe:	2103      	movs	r1, #3
 8006200:	4618      	mov	r0, r3
 8006202:	f7fa f85d 	bl	80002c0 <tmc2209_CRC8>
 8006206:	4603      	mov	r3, r0
 8006208:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8006212:	f107 0108 	add.w	r1, r7, #8
 8006216:	2308      	movs	r3, #8
 8006218:	2204      	movs	r2, #4
 800621a:	f7fa f829 	bl	8000270 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 800621e:	7a3b      	ldrb	r3, [r7, #8]
 8006220:	2b05      	cmp	r3, #5
 8006222:	d001      	beq.n	8006228 <tmc2209_readInt+0x7a>
		return 0;
 8006224:	2300      	movs	r3, #0
 8006226:	e020      	b.n	800626a <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 8006228:	7a7b      	ldrb	r3, [r7, #9]
 800622a:	2bff      	cmp	r3, #255	; 0xff
 800622c:	d001      	beq.n	8006232 <tmc2209_readInt+0x84>
		return 0;
 800622e:	2300      	movs	r3, #0
 8006230:	e01b      	b.n	800626a <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 8006232:	7abb      	ldrb	r3, [r7, #10]
 8006234:	78fa      	ldrb	r2, [r7, #3]
 8006236:	429a      	cmp	r2, r3
 8006238:	d001      	beq.n	800623e <tmc2209_readInt+0x90>
		return 0;
 800623a:	2300      	movs	r3, #0
 800623c:	e015      	b.n	800626a <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 800623e:	7bfc      	ldrb	r4, [r7, #15]
 8006240:	f107 0308 	add.w	r3, r7, #8
 8006244:	2107      	movs	r1, #7
 8006246:	4618      	mov	r0, r3
 8006248:	f7fa f83a 	bl	80002c0 <tmc2209_CRC8>
 800624c:	4603      	mov	r3, r0
 800624e:	429c      	cmp	r4, r3
 8006250:	d001      	beq.n	8006256 <tmc2209_readInt+0xa8>
		return 0;
 8006252:	2300      	movs	r3, #0
 8006254:	e009      	b.n	800626a <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 8006256:	7afb      	ldrb	r3, [r7, #11]
 8006258:	061a      	lsls	r2, r3, #24
 800625a:	7b3b      	ldrb	r3, [r7, #12]
 800625c:	041b      	lsls	r3, r3, #16
 800625e:	4313      	orrs	r3, r2
 8006260:	7b7a      	ldrb	r2, [r7, #13]
 8006262:	0212      	lsls	r2, r2, #8
 8006264:	4313      	orrs	r3, r2
 8006266:	7bba      	ldrb	r2, [r7, #14]
 8006268:	4313      	orrs	r3, r2
}
 800626a:	4618      	mov	r0, r3
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	bd90      	pop	{r4, r7, pc}
	...

08006274 <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	607b      	str	r3, [r7, #4]
 800627e:	460b      	mov	r3, r1
 8006280:	72fb      	strb	r3, [r7, #11]
 8006282:	4613      	mov	r3, r2
 8006284:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	7aba      	ldrb	r2, [r7, #10]
 800628a:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2200      	movs	r2, #0
 800629a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	7afa      	ldrb	r2, [r7, #11]
 80062a4:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2200      	movs	r2, #0
 80062ae:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2200      	movs	r2, #0
 80062b6:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80062b8:	2300      	movs	r3, #0
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e017      	b.n	80062ee <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 80062be:	4a11      	ldr	r2, [pc, #68]	; (8006304 <tmc2209_init+0x90>)
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	4413      	add	r3, r2
 80062c4:	7819      	ldrb	r1, [r3, #0]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80062d0:	460a      	mov	r2, r1
 80062d2:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	6a3a      	ldr	r2, [r7, #32]
 80062da:	4413      	add	r3, r2
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68f9      	ldr	r1, [r7, #12]
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	440b      	add	r3, r1
 80062e6:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	3301      	adds	r3, #1
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b7f      	cmp	r3, #127	; 0x7f
 80062f2:	d9e4      	bls.n	80062be <tmc2209_init+0x4a>
	}
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	08007b0c 	.word	0x08007b0c

08006308 <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3301      	adds	r3, #1
 8006316:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d131      	bne.n	8006386 <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3304      	adds	r3, #4
 8006328:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 800632a:	e005      	b.n	8006338 <writeConfiguration+0x30>
		{
			(*ptr)++;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	3301      	adds	r3, #1
 8006332:	b2da      	uxtb	r2, r3
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	b25b      	sxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	db3b      	blt.n	80063ba <writeConfiguration+0xb2>
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4413      	add	r3, r2
 800634c:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0e9      	beq.n	800632c <writeConfiguration+0x24>
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	461a      	mov	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4413      	add	r3, r2
 8006362:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	d025      	beq.n	80063ba <writeConfiguration+0xb2>
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4413      	add	r3, r2
 8006378:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0d3      	beq.n	800632c <writeConfiguration+0x24>
 8006384:	e019      	b.n	80063ba <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3304      	adds	r3, #4
 800638a:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 800638c:	e005      	b.n	800639a <writeConfiguration+0x92>
		{
			(*ptr)++;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	3301      	adds	r3, #1
 8006394:	b2da      	uxtb	r2, r3
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	b25b      	sxtb	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	db0a      	blt.n	80063ba <writeConfiguration+0xb2>
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	461a      	mov	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4413      	add	r3, r2
 80063ae:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80063b2:	f003 0342 	and.w	r3, r3, #66	; 0x42
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d1e9      	bne.n	800638e <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	b25b      	sxtb	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	db12      	blt.n	80063ea <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	7819      	ldrb	r1, [r3, #0]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff fe99 	bl	800610e <tmc2209_writeInt>
		(*ptr)++;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	3301      	adds	r3, #1
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 80063e8:	e013      	b.n	8006412 <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6812      	ldr	r2, [r2, #0]
 8006402:	7812      	ldrb	r2, [r2, #0]
 8006404:	4611      	mov	r1, r2
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]
}
 8006412:	bf00      	nop
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b082      	sub	sp, #8
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7ff ff6a 	bl	8006308 <writeConfiguration>
		return;
 8006434:	bf00      	nop
	}
}
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <tmc2209_reset+0x16>
		return false;
 800644e:	2300      	movs	r3, #0
 8006450:	e028      	b.n	80064a4 <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8006452:	2300      	movs	r3, #0
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	e019      	b.n	800648c <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4413      	add	r3, r2
 800645e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	f023 0308 	bic.w	r3, r3, #8
 8006468:	b2d9      	uxtb	r1, r3
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4413      	add	r3, r2
 8006470:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006474:	460a      	mov	r2, r1
 8006476:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	2200      	movs	r2, #0
 8006484:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3301      	adds	r3, #1
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b7f      	cmp	r3, #127	; 0x7f
 8006490:	d9e2      	bls.n	8006458 <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2201      	movs	r2, #1
 8006498:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2200      	movs	r2, #0
 80064a0:	705a      	strb	r2, [r3, #1]

	return true;
 80064a2:	2301      	movs	r3, #1
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <tmc2209_restore+0x16>
		return false;
 80064c2:	2300      	movs	r3, #0
 80064c4:	e008      	b.n	80064d8 <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2202      	movs	r2, #2
 80064cc:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2200      	movs	r2, #0
 80064d4:	705a      	strb	r2, [r3, #1]

	return true;
 80064d6:	2301      	movs	r3, #1
}
 80064d8:	4618      	mov	r0, r3
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <__errno>:
 80064e4:	4b01      	ldr	r3, [pc, #4]	; (80064ec <__errno+0x8>)
 80064e6:	6818      	ldr	r0, [r3, #0]
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	2000000c 	.word	0x2000000c

080064f0 <__libc_init_array>:
 80064f0:	b570      	push	{r4, r5, r6, lr}
 80064f2:	4d0d      	ldr	r5, [pc, #52]	; (8006528 <__libc_init_array+0x38>)
 80064f4:	4c0d      	ldr	r4, [pc, #52]	; (800652c <__libc_init_array+0x3c>)
 80064f6:	1b64      	subs	r4, r4, r5
 80064f8:	10a4      	asrs	r4, r4, #2
 80064fa:	2600      	movs	r6, #0
 80064fc:	42a6      	cmp	r6, r4
 80064fe:	d109      	bne.n	8006514 <__libc_init_array+0x24>
 8006500:	4d0b      	ldr	r5, [pc, #44]	; (8006530 <__libc_init_array+0x40>)
 8006502:	4c0c      	ldr	r4, [pc, #48]	; (8006534 <__libc_init_array+0x44>)
 8006504:	f001 f8fa 	bl	80076fc <_init>
 8006508:	1b64      	subs	r4, r4, r5
 800650a:	10a4      	asrs	r4, r4, #2
 800650c:	2600      	movs	r6, #0
 800650e:	42a6      	cmp	r6, r4
 8006510:	d105      	bne.n	800651e <__libc_init_array+0x2e>
 8006512:	bd70      	pop	{r4, r5, r6, pc}
 8006514:	f855 3b04 	ldr.w	r3, [r5], #4
 8006518:	4798      	blx	r3
 800651a:	3601      	adds	r6, #1
 800651c:	e7ee      	b.n	80064fc <__libc_init_array+0xc>
 800651e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006522:	4798      	blx	r3
 8006524:	3601      	adds	r6, #1
 8006526:	e7f2      	b.n	800650e <__libc_init_array+0x1e>
 8006528:	08007c24 	.word	0x08007c24
 800652c:	08007c24 	.word	0x08007c24
 8006530:	08007c24 	.word	0x08007c24
 8006534:	08007c28 	.word	0x08007c28

08006538 <memset>:
 8006538:	4402      	add	r2, r0
 800653a:	4603      	mov	r3, r0
 800653c:	4293      	cmp	r3, r2
 800653e:	d100      	bne.n	8006542 <memset+0xa>
 8006540:	4770      	bx	lr
 8006542:	f803 1b01 	strb.w	r1, [r3], #1
 8006546:	e7f9      	b.n	800653c <memset+0x4>

08006548 <iprintf>:
 8006548:	b40f      	push	{r0, r1, r2, r3}
 800654a:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <iprintf+0x2c>)
 800654c:	b513      	push	{r0, r1, r4, lr}
 800654e:	681c      	ldr	r4, [r3, #0]
 8006550:	b124      	cbz	r4, 800655c <iprintf+0x14>
 8006552:	69a3      	ldr	r3, [r4, #24]
 8006554:	b913      	cbnz	r3, 800655c <iprintf+0x14>
 8006556:	4620      	mov	r0, r4
 8006558:	f000 fb2c 	bl	8006bb4 <__sinit>
 800655c:	ab05      	add	r3, sp, #20
 800655e:	9a04      	ldr	r2, [sp, #16]
 8006560:	68a1      	ldr	r1, [r4, #8]
 8006562:	9301      	str	r3, [sp, #4]
 8006564:	4620      	mov	r0, r4
 8006566:	f000 fd3d 	bl	8006fe4 <_vfiprintf_r>
 800656a:	b002      	add	sp, #8
 800656c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006570:	b004      	add	sp, #16
 8006572:	4770      	bx	lr
 8006574:	2000000c 	.word	0x2000000c

08006578 <_puts_r>:
 8006578:	b570      	push	{r4, r5, r6, lr}
 800657a:	460e      	mov	r6, r1
 800657c:	4605      	mov	r5, r0
 800657e:	b118      	cbz	r0, 8006588 <_puts_r+0x10>
 8006580:	6983      	ldr	r3, [r0, #24]
 8006582:	b90b      	cbnz	r3, 8006588 <_puts_r+0x10>
 8006584:	f000 fb16 	bl	8006bb4 <__sinit>
 8006588:	69ab      	ldr	r3, [r5, #24]
 800658a:	68ac      	ldr	r4, [r5, #8]
 800658c:	b913      	cbnz	r3, 8006594 <_puts_r+0x1c>
 800658e:	4628      	mov	r0, r5
 8006590:	f000 fb10 	bl	8006bb4 <__sinit>
 8006594:	4b2c      	ldr	r3, [pc, #176]	; (8006648 <_puts_r+0xd0>)
 8006596:	429c      	cmp	r4, r3
 8006598:	d120      	bne.n	80065dc <_puts_r+0x64>
 800659a:	686c      	ldr	r4, [r5, #4]
 800659c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800659e:	07db      	lsls	r3, r3, #31
 80065a0:	d405      	bmi.n	80065ae <_puts_r+0x36>
 80065a2:	89a3      	ldrh	r3, [r4, #12]
 80065a4:	0598      	lsls	r0, r3, #22
 80065a6:	d402      	bmi.n	80065ae <_puts_r+0x36>
 80065a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065aa:	f000 fba1 	bl	8006cf0 <__retarget_lock_acquire_recursive>
 80065ae:	89a3      	ldrh	r3, [r4, #12]
 80065b0:	0719      	lsls	r1, r3, #28
 80065b2:	d51d      	bpl.n	80065f0 <_puts_r+0x78>
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	b1db      	cbz	r3, 80065f0 <_puts_r+0x78>
 80065b8:	3e01      	subs	r6, #1
 80065ba:	68a3      	ldr	r3, [r4, #8]
 80065bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065c0:	3b01      	subs	r3, #1
 80065c2:	60a3      	str	r3, [r4, #8]
 80065c4:	bb39      	cbnz	r1, 8006616 <_puts_r+0x9e>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	da38      	bge.n	800663c <_puts_r+0xc4>
 80065ca:	4622      	mov	r2, r4
 80065cc:	210a      	movs	r1, #10
 80065ce:	4628      	mov	r0, r5
 80065d0:	f000 f916 	bl	8006800 <__swbuf_r>
 80065d4:	3001      	adds	r0, #1
 80065d6:	d011      	beq.n	80065fc <_puts_r+0x84>
 80065d8:	250a      	movs	r5, #10
 80065da:	e011      	b.n	8006600 <_puts_r+0x88>
 80065dc:	4b1b      	ldr	r3, [pc, #108]	; (800664c <_puts_r+0xd4>)
 80065de:	429c      	cmp	r4, r3
 80065e0:	d101      	bne.n	80065e6 <_puts_r+0x6e>
 80065e2:	68ac      	ldr	r4, [r5, #8]
 80065e4:	e7da      	b.n	800659c <_puts_r+0x24>
 80065e6:	4b1a      	ldr	r3, [pc, #104]	; (8006650 <_puts_r+0xd8>)
 80065e8:	429c      	cmp	r4, r3
 80065ea:	bf08      	it	eq
 80065ec:	68ec      	ldreq	r4, [r5, #12]
 80065ee:	e7d5      	b.n	800659c <_puts_r+0x24>
 80065f0:	4621      	mov	r1, r4
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 f956 	bl	80068a4 <__swsetup_r>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d0dd      	beq.n	80065b8 <_puts_r+0x40>
 80065fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006600:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006602:	07da      	lsls	r2, r3, #31
 8006604:	d405      	bmi.n	8006612 <_puts_r+0x9a>
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	059b      	lsls	r3, r3, #22
 800660a:	d402      	bmi.n	8006612 <_puts_r+0x9a>
 800660c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800660e:	f000 fb70 	bl	8006cf2 <__retarget_lock_release_recursive>
 8006612:	4628      	mov	r0, r5
 8006614:	bd70      	pop	{r4, r5, r6, pc}
 8006616:	2b00      	cmp	r3, #0
 8006618:	da04      	bge.n	8006624 <_puts_r+0xac>
 800661a:	69a2      	ldr	r2, [r4, #24]
 800661c:	429a      	cmp	r2, r3
 800661e:	dc06      	bgt.n	800662e <_puts_r+0xb6>
 8006620:	290a      	cmp	r1, #10
 8006622:	d004      	beq.n	800662e <_puts_r+0xb6>
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	6022      	str	r2, [r4, #0]
 800662a:	7019      	strb	r1, [r3, #0]
 800662c:	e7c5      	b.n	80065ba <_puts_r+0x42>
 800662e:	4622      	mov	r2, r4
 8006630:	4628      	mov	r0, r5
 8006632:	f000 f8e5 	bl	8006800 <__swbuf_r>
 8006636:	3001      	adds	r0, #1
 8006638:	d1bf      	bne.n	80065ba <_puts_r+0x42>
 800663a:	e7df      	b.n	80065fc <_puts_r+0x84>
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	250a      	movs	r5, #10
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	6022      	str	r2, [r4, #0]
 8006644:	701d      	strb	r5, [r3, #0]
 8006646:	e7db      	b.n	8006600 <_puts_r+0x88>
 8006648:	08007bb0 	.word	0x08007bb0
 800664c:	08007bd0 	.word	0x08007bd0
 8006650:	08007b90 	.word	0x08007b90

08006654 <puts>:
 8006654:	4b02      	ldr	r3, [pc, #8]	; (8006660 <puts+0xc>)
 8006656:	4601      	mov	r1, r0
 8006658:	6818      	ldr	r0, [r3, #0]
 800665a:	f7ff bf8d 	b.w	8006578 <_puts_r>
 800665e:	bf00      	nop
 8006660:	2000000c 	.word	0x2000000c

08006664 <setbuf>:
 8006664:	2900      	cmp	r1, #0
 8006666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800666a:	bf0c      	ite	eq
 800666c:	2202      	moveq	r2, #2
 800666e:	2200      	movne	r2, #0
 8006670:	f000 b800 	b.w	8006674 <setvbuf>

08006674 <setvbuf>:
 8006674:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006678:	461d      	mov	r5, r3
 800667a:	4b5d      	ldr	r3, [pc, #372]	; (80067f0 <setvbuf+0x17c>)
 800667c:	681f      	ldr	r7, [r3, #0]
 800667e:	4604      	mov	r4, r0
 8006680:	460e      	mov	r6, r1
 8006682:	4690      	mov	r8, r2
 8006684:	b127      	cbz	r7, 8006690 <setvbuf+0x1c>
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	b913      	cbnz	r3, 8006690 <setvbuf+0x1c>
 800668a:	4638      	mov	r0, r7
 800668c:	f000 fa92 	bl	8006bb4 <__sinit>
 8006690:	4b58      	ldr	r3, [pc, #352]	; (80067f4 <setvbuf+0x180>)
 8006692:	429c      	cmp	r4, r3
 8006694:	d167      	bne.n	8006766 <setvbuf+0xf2>
 8006696:	687c      	ldr	r4, [r7, #4]
 8006698:	f1b8 0f02 	cmp.w	r8, #2
 800669c:	d006      	beq.n	80066ac <setvbuf+0x38>
 800669e:	f1b8 0f01 	cmp.w	r8, #1
 80066a2:	f200 809f 	bhi.w	80067e4 <setvbuf+0x170>
 80066a6:	2d00      	cmp	r5, #0
 80066a8:	f2c0 809c 	blt.w	80067e4 <setvbuf+0x170>
 80066ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066ae:	07db      	lsls	r3, r3, #31
 80066b0:	d405      	bmi.n	80066be <setvbuf+0x4a>
 80066b2:	89a3      	ldrh	r3, [r4, #12]
 80066b4:	0598      	lsls	r0, r3, #22
 80066b6:	d402      	bmi.n	80066be <setvbuf+0x4a>
 80066b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066ba:	f000 fb19 	bl	8006cf0 <__retarget_lock_acquire_recursive>
 80066be:	4621      	mov	r1, r4
 80066c0:	4638      	mov	r0, r7
 80066c2:	f000 f9e3 	bl	8006a8c <_fflush_r>
 80066c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066c8:	b141      	cbz	r1, 80066dc <setvbuf+0x68>
 80066ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066ce:	4299      	cmp	r1, r3
 80066d0:	d002      	beq.n	80066d8 <setvbuf+0x64>
 80066d2:	4638      	mov	r0, r7
 80066d4:	f000 fb7c 	bl	8006dd0 <_free_r>
 80066d8:	2300      	movs	r3, #0
 80066da:	6363      	str	r3, [r4, #52]	; 0x34
 80066dc:	2300      	movs	r3, #0
 80066de:	61a3      	str	r3, [r4, #24]
 80066e0:	6063      	str	r3, [r4, #4]
 80066e2:	89a3      	ldrh	r3, [r4, #12]
 80066e4:	0619      	lsls	r1, r3, #24
 80066e6:	d503      	bpl.n	80066f0 <setvbuf+0x7c>
 80066e8:	6921      	ldr	r1, [r4, #16]
 80066ea:	4638      	mov	r0, r7
 80066ec:	f000 fb70 	bl	8006dd0 <_free_r>
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80066f6:	f023 0303 	bic.w	r3, r3, #3
 80066fa:	f1b8 0f02 	cmp.w	r8, #2
 80066fe:	81a3      	strh	r3, [r4, #12]
 8006700:	d06c      	beq.n	80067dc <setvbuf+0x168>
 8006702:	ab01      	add	r3, sp, #4
 8006704:	466a      	mov	r2, sp
 8006706:	4621      	mov	r1, r4
 8006708:	4638      	mov	r0, r7
 800670a:	f000 faf3 	bl	8006cf4 <__swhatbuf_r>
 800670e:	89a3      	ldrh	r3, [r4, #12]
 8006710:	4318      	orrs	r0, r3
 8006712:	81a0      	strh	r0, [r4, #12]
 8006714:	2d00      	cmp	r5, #0
 8006716:	d130      	bne.n	800677a <setvbuf+0x106>
 8006718:	9d00      	ldr	r5, [sp, #0]
 800671a:	4628      	mov	r0, r5
 800671c:	f000 fb50 	bl	8006dc0 <malloc>
 8006720:	4606      	mov	r6, r0
 8006722:	2800      	cmp	r0, #0
 8006724:	d155      	bne.n	80067d2 <setvbuf+0x15e>
 8006726:	f8dd 9000 	ldr.w	r9, [sp]
 800672a:	45a9      	cmp	r9, r5
 800672c:	d14a      	bne.n	80067c4 <setvbuf+0x150>
 800672e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006732:	2200      	movs	r2, #0
 8006734:	60a2      	str	r2, [r4, #8]
 8006736:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800673a:	6022      	str	r2, [r4, #0]
 800673c:	6122      	str	r2, [r4, #16]
 800673e:	2201      	movs	r2, #1
 8006740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006744:	6162      	str	r2, [r4, #20]
 8006746:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006748:	f043 0302 	orr.w	r3, r3, #2
 800674c:	07d2      	lsls	r2, r2, #31
 800674e:	81a3      	strh	r3, [r4, #12]
 8006750:	d405      	bmi.n	800675e <setvbuf+0xea>
 8006752:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006756:	d102      	bne.n	800675e <setvbuf+0xea>
 8006758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800675a:	f000 faca 	bl	8006cf2 <__retarget_lock_release_recursive>
 800675e:	4628      	mov	r0, r5
 8006760:	b003      	add	sp, #12
 8006762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006766:	4b24      	ldr	r3, [pc, #144]	; (80067f8 <setvbuf+0x184>)
 8006768:	429c      	cmp	r4, r3
 800676a:	d101      	bne.n	8006770 <setvbuf+0xfc>
 800676c:	68bc      	ldr	r4, [r7, #8]
 800676e:	e793      	b.n	8006698 <setvbuf+0x24>
 8006770:	4b22      	ldr	r3, [pc, #136]	; (80067fc <setvbuf+0x188>)
 8006772:	429c      	cmp	r4, r3
 8006774:	bf08      	it	eq
 8006776:	68fc      	ldreq	r4, [r7, #12]
 8006778:	e78e      	b.n	8006698 <setvbuf+0x24>
 800677a:	2e00      	cmp	r6, #0
 800677c:	d0cd      	beq.n	800671a <setvbuf+0xa6>
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	b913      	cbnz	r3, 8006788 <setvbuf+0x114>
 8006782:	4638      	mov	r0, r7
 8006784:	f000 fa16 	bl	8006bb4 <__sinit>
 8006788:	f1b8 0f01 	cmp.w	r8, #1
 800678c:	bf08      	it	eq
 800678e:	89a3      	ldrheq	r3, [r4, #12]
 8006790:	6026      	str	r6, [r4, #0]
 8006792:	bf04      	itt	eq
 8006794:	f043 0301 	orreq.w	r3, r3, #1
 8006798:	81a3      	strheq	r3, [r4, #12]
 800679a:	89a2      	ldrh	r2, [r4, #12]
 800679c:	f012 0308 	ands.w	r3, r2, #8
 80067a0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80067a4:	d01c      	beq.n	80067e0 <setvbuf+0x16c>
 80067a6:	07d3      	lsls	r3, r2, #31
 80067a8:	bf41      	itttt	mi
 80067aa:	2300      	movmi	r3, #0
 80067ac:	426d      	negmi	r5, r5
 80067ae:	60a3      	strmi	r3, [r4, #8]
 80067b0:	61a5      	strmi	r5, [r4, #24]
 80067b2:	bf58      	it	pl
 80067b4:	60a5      	strpl	r5, [r4, #8]
 80067b6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80067b8:	f015 0501 	ands.w	r5, r5, #1
 80067bc:	d115      	bne.n	80067ea <setvbuf+0x176>
 80067be:	f412 7f00 	tst.w	r2, #512	; 0x200
 80067c2:	e7c8      	b.n	8006756 <setvbuf+0xe2>
 80067c4:	4648      	mov	r0, r9
 80067c6:	f000 fafb 	bl	8006dc0 <malloc>
 80067ca:	4606      	mov	r6, r0
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d0ae      	beq.n	800672e <setvbuf+0xba>
 80067d0:	464d      	mov	r5, r9
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d8:	81a3      	strh	r3, [r4, #12]
 80067da:	e7d0      	b.n	800677e <setvbuf+0x10a>
 80067dc:	2500      	movs	r5, #0
 80067de:	e7a8      	b.n	8006732 <setvbuf+0xbe>
 80067e0:	60a3      	str	r3, [r4, #8]
 80067e2:	e7e8      	b.n	80067b6 <setvbuf+0x142>
 80067e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80067e8:	e7b9      	b.n	800675e <setvbuf+0xea>
 80067ea:	2500      	movs	r5, #0
 80067ec:	e7b7      	b.n	800675e <setvbuf+0xea>
 80067ee:	bf00      	nop
 80067f0:	2000000c 	.word	0x2000000c
 80067f4:	08007bb0 	.word	0x08007bb0
 80067f8:	08007bd0 	.word	0x08007bd0
 80067fc:	08007b90 	.word	0x08007b90

08006800 <__swbuf_r>:
 8006800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006802:	460e      	mov	r6, r1
 8006804:	4614      	mov	r4, r2
 8006806:	4605      	mov	r5, r0
 8006808:	b118      	cbz	r0, 8006812 <__swbuf_r+0x12>
 800680a:	6983      	ldr	r3, [r0, #24]
 800680c:	b90b      	cbnz	r3, 8006812 <__swbuf_r+0x12>
 800680e:	f000 f9d1 	bl	8006bb4 <__sinit>
 8006812:	4b21      	ldr	r3, [pc, #132]	; (8006898 <__swbuf_r+0x98>)
 8006814:	429c      	cmp	r4, r3
 8006816:	d12b      	bne.n	8006870 <__swbuf_r+0x70>
 8006818:	686c      	ldr	r4, [r5, #4]
 800681a:	69a3      	ldr	r3, [r4, #24]
 800681c:	60a3      	str	r3, [r4, #8]
 800681e:	89a3      	ldrh	r3, [r4, #12]
 8006820:	071a      	lsls	r2, r3, #28
 8006822:	d52f      	bpl.n	8006884 <__swbuf_r+0x84>
 8006824:	6923      	ldr	r3, [r4, #16]
 8006826:	b36b      	cbz	r3, 8006884 <__swbuf_r+0x84>
 8006828:	6923      	ldr	r3, [r4, #16]
 800682a:	6820      	ldr	r0, [r4, #0]
 800682c:	1ac0      	subs	r0, r0, r3
 800682e:	6963      	ldr	r3, [r4, #20]
 8006830:	b2f6      	uxtb	r6, r6
 8006832:	4283      	cmp	r3, r0
 8006834:	4637      	mov	r7, r6
 8006836:	dc04      	bgt.n	8006842 <__swbuf_r+0x42>
 8006838:	4621      	mov	r1, r4
 800683a:	4628      	mov	r0, r5
 800683c:	f000 f926 	bl	8006a8c <_fflush_r>
 8006840:	bb30      	cbnz	r0, 8006890 <__swbuf_r+0x90>
 8006842:	68a3      	ldr	r3, [r4, #8]
 8006844:	3b01      	subs	r3, #1
 8006846:	60a3      	str	r3, [r4, #8]
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	6022      	str	r2, [r4, #0]
 800684e:	701e      	strb	r6, [r3, #0]
 8006850:	6963      	ldr	r3, [r4, #20]
 8006852:	3001      	adds	r0, #1
 8006854:	4283      	cmp	r3, r0
 8006856:	d004      	beq.n	8006862 <__swbuf_r+0x62>
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	07db      	lsls	r3, r3, #31
 800685c:	d506      	bpl.n	800686c <__swbuf_r+0x6c>
 800685e:	2e0a      	cmp	r6, #10
 8006860:	d104      	bne.n	800686c <__swbuf_r+0x6c>
 8006862:	4621      	mov	r1, r4
 8006864:	4628      	mov	r0, r5
 8006866:	f000 f911 	bl	8006a8c <_fflush_r>
 800686a:	b988      	cbnz	r0, 8006890 <__swbuf_r+0x90>
 800686c:	4638      	mov	r0, r7
 800686e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006870:	4b0a      	ldr	r3, [pc, #40]	; (800689c <__swbuf_r+0x9c>)
 8006872:	429c      	cmp	r4, r3
 8006874:	d101      	bne.n	800687a <__swbuf_r+0x7a>
 8006876:	68ac      	ldr	r4, [r5, #8]
 8006878:	e7cf      	b.n	800681a <__swbuf_r+0x1a>
 800687a:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <__swbuf_r+0xa0>)
 800687c:	429c      	cmp	r4, r3
 800687e:	bf08      	it	eq
 8006880:	68ec      	ldreq	r4, [r5, #12]
 8006882:	e7ca      	b.n	800681a <__swbuf_r+0x1a>
 8006884:	4621      	mov	r1, r4
 8006886:	4628      	mov	r0, r5
 8006888:	f000 f80c 	bl	80068a4 <__swsetup_r>
 800688c:	2800      	cmp	r0, #0
 800688e:	d0cb      	beq.n	8006828 <__swbuf_r+0x28>
 8006890:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006894:	e7ea      	b.n	800686c <__swbuf_r+0x6c>
 8006896:	bf00      	nop
 8006898:	08007bb0 	.word	0x08007bb0
 800689c:	08007bd0 	.word	0x08007bd0
 80068a0:	08007b90 	.word	0x08007b90

080068a4 <__swsetup_r>:
 80068a4:	4b32      	ldr	r3, [pc, #200]	; (8006970 <__swsetup_r+0xcc>)
 80068a6:	b570      	push	{r4, r5, r6, lr}
 80068a8:	681d      	ldr	r5, [r3, #0]
 80068aa:	4606      	mov	r6, r0
 80068ac:	460c      	mov	r4, r1
 80068ae:	b125      	cbz	r5, 80068ba <__swsetup_r+0x16>
 80068b0:	69ab      	ldr	r3, [r5, #24]
 80068b2:	b913      	cbnz	r3, 80068ba <__swsetup_r+0x16>
 80068b4:	4628      	mov	r0, r5
 80068b6:	f000 f97d 	bl	8006bb4 <__sinit>
 80068ba:	4b2e      	ldr	r3, [pc, #184]	; (8006974 <__swsetup_r+0xd0>)
 80068bc:	429c      	cmp	r4, r3
 80068be:	d10f      	bne.n	80068e0 <__swsetup_r+0x3c>
 80068c0:	686c      	ldr	r4, [r5, #4]
 80068c2:	89a3      	ldrh	r3, [r4, #12]
 80068c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068c8:	0719      	lsls	r1, r3, #28
 80068ca:	d42c      	bmi.n	8006926 <__swsetup_r+0x82>
 80068cc:	06dd      	lsls	r5, r3, #27
 80068ce:	d411      	bmi.n	80068f4 <__swsetup_r+0x50>
 80068d0:	2309      	movs	r3, #9
 80068d2:	6033      	str	r3, [r6, #0]
 80068d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068d8:	81a3      	strh	r3, [r4, #12]
 80068da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068de:	e03e      	b.n	800695e <__swsetup_r+0xba>
 80068e0:	4b25      	ldr	r3, [pc, #148]	; (8006978 <__swsetup_r+0xd4>)
 80068e2:	429c      	cmp	r4, r3
 80068e4:	d101      	bne.n	80068ea <__swsetup_r+0x46>
 80068e6:	68ac      	ldr	r4, [r5, #8]
 80068e8:	e7eb      	b.n	80068c2 <__swsetup_r+0x1e>
 80068ea:	4b24      	ldr	r3, [pc, #144]	; (800697c <__swsetup_r+0xd8>)
 80068ec:	429c      	cmp	r4, r3
 80068ee:	bf08      	it	eq
 80068f0:	68ec      	ldreq	r4, [r5, #12]
 80068f2:	e7e6      	b.n	80068c2 <__swsetup_r+0x1e>
 80068f4:	0758      	lsls	r0, r3, #29
 80068f6:	d512      	bpl.n	800691e <__swsetup_r+0x7a>
 80068f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068fa:	b141      	cbz	r1, 800690e <__swsetup_r+0x6a>
 80068fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006900:	4299      	cmp	r1, r3
 8006902:	d002      	beq.n	800690a <__swsetup_r+0x66>
 8006904:	4630      	mov	r0, r6
 8006906:	f000 fa63 	bl	8006dd0 <_free_r>
 800690a:	2300      	movs	r3, #0
 800690c:	6363      	str	r3, [r4, #52]	; 0x34
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006914:	81a3      	strh	r3, [r4, #12]
 8006916:	2300      	movs	r3, #0
 8006918:	6063      	str	r3, [r4, #4]
 800691a:	6923      	ldr	r3, [r4, #16]
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	89a3      	ldrh	r3, [r4, #12]
 8006920:	f043 0308 	orr.w	r3, r3, #8
 8006924:	81a3      	strh	r3, [r4, #12]
 8006926:	6923      	ldr	r3, [r4, #16]
 8006928:	b94b      	cbnz	r3, 800693e <__swsetup_r+0x9a>
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006934:	d003      	beq.n	800693e <__swsetup_r+0x9a>
 8006936:	4621      	mov	r1, r4
 8006938:	4630      	mov	r0, r6
 800693a:	f000 fa01 	bl	8006d40 <__smakebuf_r>
 800693e:	89a0      	ldrh	r0, [r4, #12]
 8006940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006944:	f010 0301 	ands.w	r3, r0, #1
 8006948:	d00a      	beq.n	8006960 <__swsetup_r+0xbc>
 800694a:	2300      	movs	r3, #0
 800694c:	60a3      	str	r3, [r4, #8]
 800694e:	6963      	ldr	r3, [r4, #20]
 8006950:	425b      	negs	r3, r3
 8006952:	61a3      	str	r3, [r4, #24]
 8006954:	6923      	ldr	r3, [r4, #16]
 8006956:	b943      	cbnz	r3, 800696a <__swsetup_r+0xc6>
 8006958:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800695c:	d1ba      	bne.n	80068d4 <__swsetup_r+0x30>
 800695e:	bd70      	pop	{r4, r5, r6, pc}
 8006960:	0781      	lsls	r1, r0, #30
 8006962:	bf58      	it	pl
 8006964:	6963      	ldrpl	r3, [r4, #20]
 8006966:	60a3      	str	r3, [r4, #8]
 8006968:	e7f4      	b.n	8006954 <__swsetup_r+0xb0>
 800696a:	2000      	movs	r0, #0
 800696c:	e7f7      	b.n	800695e <__swsetup_r+0xba>
 800696e:	bf00      	nop
 8006970:	2000000c 	.word	0x2000000c
 8006974:	08007bb0 	.word	0x08007bb0
 8006978:	08007bd0 	.word	0x08007bd0
 800697c:	08007b90 	.word	0x08007b90

08006980 <__sflush_r>:
 8006980:	898a      	ldrh	r2, [r1, #12]
 8006982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006986:	4605      	mov	r5, r0
 8006988:	0710      	lsls	r0, r2, #28
 800698a:	460c      	mov	r4, r1
 800698c:	d458      	bmi.n	8006a40 <__sflush_r+0xc0>
 800698e:	684b      	ldr	r3, [r1, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	dc05      	bgt.n	80069a0 <__sflush_r+0x20>
 8006994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006996:	2b00      	cmp	r3, #0
 8006998:	dc02      	bgt.n	80069a0 <__sflush_r+0x20>
 800699a:	2000      	movs	r0, #0
 800699c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069a2:	2e00      	cmp	r6, #0
 80069a4:	d0f9      	beq.n	800699a <__sflush_r+0x1a>
 80069a6:	2300      	movs	r3, #0
 80069a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069ac:	682f      	ldr	r7, [r5, #0]
 80069ae:	602b      	str	r3, [r5, #0]
 80069b0:	d032      	beq.n	8006a18 <__sflush_r+0x98>
 80069b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069b4:	89a3      	ldrh	r3, [r4, #12]
 80069b6:	075a      	lsls	r2, r3, #29
 80069b8:	d505      	bpl.n	80069c6 <__sflush_r+0x46>
 80069ba:	6863      	ldr	r3, [r4, #4]
 80069bc:	1ac0      	subs	r0, r0, r3
 80069be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069c0:	b10b      	cbz	r3, 80069c6 <__sflush_r+0x46>
 80069c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069c4:	1ac0      	subs	r0, r0, r3
 80069c6:	2300      	movs	r3, #0
 80069c8:	4602      	mov	r2, r0
 80069ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069cc:	6a21      	ldr	r1, [r4, #32]
 80069ce:	4628      	mov	r0, r5
 80069d0:	47b0      	blx	r6
 80069d2:	1c43      	adds	r3, r0, #1
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	d106      	bne.n	80069e6 <__sflush_r+0x66>
 80069d8:	6829      	ldr	r1, [r5, #0]
 80069da:	291d      	cmp	r1, #29
 80069dc:	d82c      	bhi.n	8006a38 <__sflush_r+0xb8>
 80069de:	4a2a      	ldr	r2, [pc, #168]	; (8006a88 <__sflush_r+0x108>)
 80069e0:	40ca      	lsrs	r2, r1
 80069e2:	07d6      	lsls	r6, r2, #31
 80069e4:	d528      	bpl.n	8006a38 <__sflush_r+0xb8>
 80069e6:	2200      	movs	r2, #0
 80069e8:	6062      	str	r2, [r4, #4]
 80069ea:	04d9      	lsls	r1, r3, #19
 80069ec:	6922      	ldr	r2, [r4, #16]
 80069ee:	6022      	str	r2, [r4, #0]
 80069f0:	d504      	bpl.n	80069fc <__sflush_r+0x7c>
 80069f2:	1c42      	adds	r2, r0, #1
 80069f4:	d101      	bne.n	80069fa <__sflush_r+0x7a>
 80069f6:	682b      	ldr	r3, [r5, #0]
 80069f8:	b903      	cbnz	r3, 80069fc <__sflush_r+0x7c>
 80069fa:	6560      	str	r0, [r4, #84]	; 0x54
 80069fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069fe:	602f      	str	r7, [r5, #0]
 8006a00:	2900      	cmp	r1, #0
 8006a02:	d0ca      	beq.n	800699a <__sflush_r+0x1a>
 8006a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a08:	4299      	cmp	r1, r3
 8006a0a:	d002      	beq.n	8006a12 <__sflush_r+0x92>
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	f000 f9df 	bl	8006dd0 <_free_r>
 8006a12:	2000      	movs	r0, #0
 8006a14:	6360      	str	r0, [r4, #52]	; 0x34
 8006a16:	e7c1      	b.n	800699c <__sflush_r+0x1c>
 8006a18:	6a21      	ldr	r1, [r4, #32]
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	47b0      	blx	r6
 8006a20:	1c41      	adds	r1, r0, #1
 8006a22:	d1c7      	bne.n	80069b4 <__sflush_r+0x34>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0c4      	beq.n	80069b4 <__sflush_r+0x34>
 8006a2a:	2b1d      	cmp	r3, #29
 8006a2c:	d001      	beq.n	8006a32 <__sflush_r+0xb2>
 8006a2e:	2b16      	cmp	r3, #22
 8006a30:	d101      	bne.n	8006a36 <__sflush_r+0xb6>
 8006a32:	602f      	str	r7, [r5, #0]
 8006a34:	e7b1      	b.n	800699a <__sflush_r+0x1a>
 8006a36:	89a3      	ldrh	r3, [r4, #12]
 8006a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3c:	81a3      	strh	r3, [r4, #12]
 8006a3e:	e7ad      	b.n	800699c <__sflush_r+0x1c>
 8006a40:	690f      	ldr	r7, [r1, #16]
 8006a42:	2f00      	cmp	r7, #0
 8006a44:	d0a9      	beq.n	800699a <__sflush_r+0x1a>
 8006a46:	0793      	lsls	r3, r2, #30
 8006a48:	680e      	ldr	r6, [r1, #0]
 8006a4a:	bf08      	it	eq
 8006a4c:	694b      	ldreq	r3, [r1, #20]
 8006a4e:	600f      	str	r7, [r1, #0]
 8006a50:	bf18      	it	ne
 8006a52:	2300      	movne	r3, #0
 8006a54:	eba6 0807 	sub.w	r8, r6, r7
 8006a58:	608b      	str	r3, [r1, #8]
 8006a5a:	f1b8 0f00 	cmp.w	r8, #0
 8006a5e:	dd9c      	ble.n	800699a <__sflush_r+0x1a>
 8006a60:	6a21      	ldr	r1, [r4, #32]
 8006a62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a64:	4643      	mov	r3, r8
 8006a66:	463a      	mov	r2, r7
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b0      	blx	r6
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	dc06      	bgt.n	8006a7e <__sflush_r+0xfe>
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a76:	81a3      	strh	r3, [r4, #12]
 8006a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a7c:	e78e      	b.n	800699c <__sflush_r+0x1c>
 8006a7e:	4407      	add	r7, r0
 8006a80:	eba8 0800 	sub.w	r8, r8, r0
 8006a84:	e7e9      	b.n	8006a5a <__sflush_r+0xda>
 8006a86:	bf00      	nop
 8006a88:	20400001 	.word	0x20400001

08006a8c <_fflush_r>:
 8006a8c:	b538      	push	{r3, r4, r5, lr}
 8006a8e:	690b      	ldr	r3, [r1, #16]
 8006a90:	4605      	mov	r5, r0
 8006a92:	460c      	mov	r4, r1
 8006a94:	b913      	cbnz	r3, 8006a9c <_fflush_r+0x10>
 8006a96:	2500      	movs	r5, #0
 8006a98:	4628      	mov	r0, r5
 8006a9a:	bd38      	pop	{r3, r4, r5, pc}
 8006a9c:	b118      	cbz	r0, 8006aa6 <_fflush_r+0x1a>
 8006a9e:	6983      	ldr	r3, [r0, #24]
 8006aa0:	b90b      	cbnz	r3, 8006aa6 <_fflush_r+0x1a>
 8006aa2:	f000 f887 	bl	8006bb4 <__sinit>
 8006aa6:	4b14      	ldr	r3, [pc, #80]	; (8006af8 <_fflush_r+0x6c>)
 8006aa8:	429c      	cmp	r4, r3
 8006aaa:	d11b      	bne.n	8006ae4 <_fflush_r+0x58>
 8006aac:	686c      	ldr	r4, [r5, #4]
 8006aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0ef      	beq.n	8006a96 <_fflush_r+0xa>
 8006ab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ab8:	07d0      	lsls	r0, r2, #31
 8006aba:	d404      	bmi.n	8006ac6 <_fflush_r+0x3a>
 8006abc:	0599      	lsls	r1, r3, #22
 8006abe:	d402      	bmi.n	8006ac6 <_fflush_r+0x3a>
 8006ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ac2:	f000 f915 	bl	8006cf0 <__retarget_lock_acquire_recursive>
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	4621      	mov	r1, r4
 8006aca:	f7ff ff59 	bl	8006980 <__sflush_r>
 8006ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ad0:	07da      	lsls	r2, r3, #31
 8006ad2:	4605      	mov	r5, r0
 8006ad4:	d4e0      	bmi.n	8006a98 <_fflush_r+0xc>
 8006ad6:	89a3      	ldrh	r3, [r4, #12]
 8006ad8:	059b      	lsls	r3, r3, #22
 8006ada:	d4dd      	bmi.n	8006a98 <_fflush_r+0xc>
 8006adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ade:	f000 f908 	bl	8006cf2 <__retarget_lock_release_recursive>
 8006ae2:	e7d9      	b.n	8006a98 <_fflush_r+0xc>
 8006ae4:	4b05      	ldr	r3, [pc, #20]	; (8006afc <_fflush_r+0x70>)
 8006ae6:	429c      	cmp	r4, r3
 8006ae8:	d101      	bne.n	8006aee <_fflush_r+0x62>
 8006aea:	68ac      	ldr	r4, [r5, #8]
 8006aec:	e7df      	b.n	8006aae <_fflush_r+0x22>
 8006aee:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <_fflush_r+0x74>)
 8006af0:	429c      	cmp	r4, r3
 8006af2:	bf08      	it	eq
 8006af4:	68ec      	ldreq	r4, [r5, #12]
 8006af6:	e7da      	b.n	8006aae <_fflush_r+0x22>
 8006af8:	08007bb0 	.word	0x08007bb0
 8006afc:	08007bd0 	.word	0x08007bd0
 8006b00:	08007b90 	.word	0x08007b90

08006b04 <std>:
 8006b04:	2300      	movs	r3, #0
 8006b06:	b510      	push	{r4, lr}
 8006b08:	4604      	mov	r4, r0
 8006b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b12:	6083      	str	r3, [r0, #8]
 8006b14:	8181      	strh	r1, [r0, #12]
 8006b16:	6643      	str	r3, [r0, #100]	; 0x64
 8006b18:	81c2      	strh	r2, [r0, #14]
 8006b1a:	6183      	str	r3, [r0, #24]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	2208      	movs	r2, #8
 8006b20:	305c      	adds	r0, #92	; 0x5c
 8006b22:	f7ff fd09 	bl	8006538 <memset>
 8006b26:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <std+0x38>)
 8006b28:	6263      	str	r3, [r4, #36]	; 0x24
 8006b2a:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <std+0x3c>)
 8006b2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <std+0x40>)
 8006b30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b32:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <std+0x44>)
 8006b34:	6224      	str	r4, [r4, #32]
 8006b36:	6323      	str	r3, [r4, #48]	; 0x30
 8006b38:	bd10      	pop	{r4, pc}
 8006b3a:	bf00      	nop
 8006b3c:	0800758d 	.word	0x0800758d
 8006b40:	080075af 	.word	0x080075af
 8006b44:	080075e7 	.word	0x080075e7
 8006b48:	0800760b 	.word	0x0800760b

08006b4c <_cleanup_r>:
 8006b4c:	4901      	ldr	r1, [pc, #4]	; (8006b54 <_cleanup_r+0x8>)
 8006b4e:	f000 b8af 	b.w	8006cb0 <_fwalk_reent>
 8006b52:	bf00      	nop
 8006b54:	08006a8d 	.word	0x08006a8d

08006b58 <__sfmoreglue>:
 8006b58:	b570      	push	{r4, r5, r6, lr}
 8006b5a:	2268      	movs	r2, #104	; 0x68
 8006b5c:	1e4d      	subs	r5, r1, #1
 8006b5e:	4355      	muls	r5, r2
 8006b60:	460e      	mov	r6, r1
 8006b62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b66:	f000 f99f 	bl	8006ea8 <_malloc_r>
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	b140      	cbz	r0, 8006b80 <__sfmoreglue+0x28>
 8006b6e:	2100      	movs	r1, #0
 8006b70:	e9c0 1600 	strd	r1, r6, [r0]
 8006b74:	300c      	adds	r0, #12
 8006b76:	60a0      	str	r0, [r4, #8]
 8006b78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b7c:	f7ff fcdc 	bl	8006538 <memset>
 8006b80:	4620      	mov	r0, r4
 8006b82:	bd70      	pop	{r4, r5, r6, pc}

08006b84 <__sfp_lock_acquire>:
 8006b84:	4801      	ldr	r0, [pc, #4]	; (8006b8c <__sfp_lock_acquire+0x8>)
 8006b86:	f000 b8b3 	b.w	8006cf0 <__retarget_lock_acquire_recursive>
 8006b8a:	bf00      	nop
 8006b8c:	20000925 	.word	0x20000925

08006b90 <__sfp_lock_release>:
 8006b90:	4801      	ldr	r0, [pc, #4]	; (8006b98 <__sfp_lock_release+0x8>)
 8006b92:	f000 b8ae 	b.w	8006cf2 <__retarget_lock_release_recursive>
 8006b96:	bf00      	nop
 8006b98:	20000925 	.word	0x20000925

08006b9c <__sinit_lock_acquire>:
 8006b9c:	4801      	ldr	r0, [pc, #4]	; (8006ba4 <__sinit_lock_acquire+0x8>)
 8006b9e:	f000 b8a7 	b.w	8006cf0 <__retarget_lock_acquire_recursive>
 8006ba2:	bf00      	nop
 8006ba4:	20000926 	.word	0x20000926

08006ba8 <__sinit_lock_release>:
 8006ba8:	4801      	ldr	r0, [pc, #4]	; (8006bb0 <__sinit_lock_release+0x8>)
 8006baa:	f000 b8a2 	b.w	8006cf2 <__retarget_lock_release_recursive>
 8006bae:	bf00      	nop
 8006bb0:	20000926 	.word	0x20000926

08006bb4 <__sinit>:
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	f7ff fff0 	bl	8006b9c <__sinit_lock_acquire>
 8006bbc:	69a3      	ldr	r3, [r4, #24]
 8006bbe:	b11b      	cbz	r3, 8006bc8 <__sinit+0x14>
 8006bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc4:	f7ff bff0 	b.w	8006ba8 <__sinit_lock_release>
 8006bc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bcc:	6523      	str	r3, [r4, #80]	; 0x50
 8006bce:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <__sinit+0x68>)
 8006bd0:	4a13      	ldr	r2, [pc, #76]	; (8006c20 <__sinit+0x6c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bd6:	42a3      	cmp	r3, r4
 8006bd8:	bf04      	itt	eq
 8006bda:	2301      	moveq	r3, #1
 8006bdc:	61a3      	streq	r3, [r4, #24]
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 f820 	bl	8006c24 <__sfp>
 8006be4:	6060      	str	r0, [r4, #4]
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 f81c 	bl	8006c24 <__sfp>
 8006bec:	60a0      	str	r0, [r4, #8]
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f000 f818 	bl	8006c24 <__sfp>
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	60e0      	str	r0, [r4, #12]
 8006bf8:	2104      	movs	r1, #4
 8006bfa:	6860      	ldr	r0, [r4, #4]
 8006bfc:	f7ff ff82 	bl	8006b04 <std>
 8006c00:	68a0      	ldr	r0, [r4, #8]
 8006c02:	2201      	movs	r2, #1
 8006c04:	2109      	movs	r1, #9
 8006c06:	f7ff ff7d 	bl	8006b04 <std>
 8006c0a:	68e0      	ldr	r0, [r4, #12]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	2112      	movs	r1, #18
 8006c10:	f7ff ff78 	bl	8006b04 <std>
 8006c14:	2301      	movs	r3, #1
 8006c16:	61a3      	str	r3, [r4, #24]
 8006c18:	e7d2      	b.n	8006bc0 <__sinit+0xc>
 8006c1a:	bf00      	nop
 8006c1c:	08007b8c 	.word	0x08007b8c
 8006c20:	08006b4d 	.word	0x08006b4d

08006c24 <__sfp>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	4607      	mov	r7, r0
 8006c28:	f7ff ffac 	bl	8006b84 <__sfp_lock_acquire>
 8006c2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ca8 <__sfp+0x84>)
 8006c2e:	681e      	ldr	r6, [r3, #0]
 8006c30:	69b3      	ldr	r3, [r6, #24]
 8006c32:	b913      	cbnz	r3, 8006c3a <__sfp+0x16>
 8006c34:	4630      	mov	r0, r6
 8006c36:	f7ff ffbd 	bl	8006bb4 <__sinit>
 8006c3a:	3648      	adds	r6, #72	; 0x48
 8006c3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	d503      	bpl.n	8006c4c <__sfp+0x28>
 8006c44:	6833      	ldr	r3, [r6, #0]
 8006c46:	b30b      	cbz	r3, 8006c8c <__sfp+0x68>
 8006c48:	6836      	ldr	r6, [r6, #0]
 8006c4a:	e7f7      	b.n	8006c3c <__sfp+0x18>
 8006c4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c50:	b9d5      	cbnz	r5, 8006c88 <__sfp+0x64>
 8006c52:	4b16      	ldr	r3, [pc, #88]	; (8006cac <__sfp+0x88>)
 8006c54:	60e3      	str	r3, [r4, #12]
 8006c56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c5a:	6665      	str	r5, [r4, #100]	; 0x64
 8006c5c:	f000 f847 	bl	8006cee <__retarget_lock_init_recursive>
 8006c60:	f7ff ff96 	bl	8006b90 <__sfp_lock_release>
 8006c64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c6c:	6025      	str	r5, [r4, #0]
 8006c6e:	61a5      	str	r5, [r4, #24]
 8006c70:	2208      	movs	r2, #8
 8006c72:	4629      	mov	r1, r5
 8006c74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c78:	f7ff fc5e 	bl	8006538 <memset>
 8006c7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c84:	4620      	mov	r0, r4
 8006c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c88:	3468      	adds	r4, #104	; 0x68
 8006c8a:	e7d9      	b.n	8006c40 <__sfp+0x1c>
 8006c8c:	2104      	movs	r1, #4
 8006c8e:	4638      	mov	r0, r7
 8006c90:	f7ff ff62 	bl	8006b58 <__sfmoreglue>
 8006c94:	4604      	mov	r4, r0
 8006c96:	6030      	str	r0, [r6, #0]
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d1d5      	bne.n	8006c48 <__sfp+0x24>
 8006c9c:	f7ff ff78 	bl	8006b90 <__sfp_lock_release>
 8006ca0:	230c      	movs	r3, #12
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	e7ee      	b.n	8006c84 <__sfp+0x60>
 8006ca6:	bf00      	nop
 8006ca8:	08007b8c 	.word	0x08007b8c
 8006cac:	ffff0001 	.word	0xffff0001

08006cb0 <_fwalk_reent>:
 8006cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	4688      	mov	r8, r1
 8006cb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cbc:	2700      	movs	r7, #0
 8006cbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cc2:	f1b9 0901 	subs.w	r9, r9, #1
 8006cc6:	d505      	bpl.n	8006cd4 <_fwalk_reent+0x24>
 8006cc8:	6824      	ldr	r4, [r4, #0]
 8006cca:	2c00      	cmp	r4, #0
 8006ccc:	d1f7      	bne.n	8006cbe <_fwalk_reent+0xe>
 8006cce:	4638      	mov	r0, r7
 8006cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cd4:	89ab      	ldrh	r3, [r5, #12]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d907      	bls.n	8006cea <_fwalk_reent+0x3a>
 8006cda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	d003      	beq.n	8006cea <_fwalk_reent+0x3a>
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	47c0      	blx	r8
 8006ce8:	4307      	orrs	r7, r0
 8006cea:	3568      	adds	r5, #104	; 0x68
 8006cec:	e7e9      	b.n	8006cc2 <_fwalk_reent+0x12>

08006cee <__retarget_lock_init_recursive>:
 8006cee:	4770      	bx	lr

08006cf0 <__retarget_lock_acquire_recursive>:
 8006cf0:	4770      	bx	lr

08006cf2 <__retarget_lock_release_recursive>:
 8006cf2:	4770      	bx	lr

08006cf4 <__swhatbuf_r>:
 8006cf4:	b570      	push	{r4, r5, r6, lr}
 8006cf6:	460e      	mov	r6, r1
 8006cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cfc:	2900      	cmp	r1, #0
 8006cfe:	b096      	sub	sp, #88	; 0x58
 8006d00:	4614      	mov	r4, r2
 8006d02:	461d      	mov	r5, r3
 8006d04:	da08      	bge.n	8006d18 <__swhatbuf_r+0x24>
 8006d06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	602a      	str	r2, [r5, #0]
 8006d0e:	061a      	lsls	r2, r3, #24
 8006d10:	d410      	bmi.n	8006d34 <__swhatbuf_r+0x40>
 8006d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d16:	e00e      	b.n	8006d36 <__swhatbuf_r+0x42>
 8006d18:	466a      	mov	r2, sp
 8006d1a:	f000 fc9d 	bl	8007658 <_fstat_r>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	dbf1      	blt.n	8006d06 <__swhatbuf_r+0x12>
 8006d22:	9a01      	ldr	r2, [sp, #4]
 8006d24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d2c:	425a      	negs	r2, r3
 8006d2e:	415a      	adcs	r2, r3
 8006d30:	602a      	str	r2, [r5, #0]
 8006d32:	e7ee      	b.n	8006d12 <__swhatbuf_r+0x1e>
 8006d34:	2340      	movs	r3, #64	; 0x40
 8006d36:	2000      	movs	r0, #0
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	b016      	add	sp, #88	; 0x58
 8006d3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d40 <__smakebuf_r>:
 8006d40:	898b      	ldrh	r3, [r1, #12]
 8006d42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d44:	079d      	lsls	r5, r3, #30
 8006d46:	4606      	mov	r6, r0
 8006d48:	460c      	mov	r4, r1
 8006d4a:	d507      	bpl.n	8006d5c <__smakebuf_r+0x1c>
 8006d4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	6123      	str	r3, [r4, #16]
 8006d54:	2301      	movs	r3, #1
 8006d56:	6163      	str	r3, [r4, #20]
 8006d58:	b002      	add	sp, #8
 8006d5a:	bd70      	pop	{r4, r5, r6, pc}
 8006d5c:	ab01      	add	r3, sp, #4
 8006d5e:	466a      	mov	r2, sp
 8006d60:	f7ff ffc8 	bl	8006cf4 <__swhatbuf_r>
 8006d64:	9900      	ldr	r1, [sp, #0]
 8006d66:	4605      	mov	r5, r0
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f000 f89d 	bl	8006ea8 <_malloc_r>
 8006d6e:	b948      	cbnz	r0, 8006d84 <__smakebuf_r+0x44>
 8006d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d74:	059a      	lsls	r2, r3, #22
 8006d76:	d4ef      	bmi.n	8006d58 <__smakebuf_r+0x18>
 8006d78:	f023 0303 	bic.w	r3, r3, #3
 8006d7c:	f043 0302 	orr.w	r3, r3, #2
 8006d80:	81a3      	strh	r3, [r4, #12]
 8006d82:	e7e3      	b.n	8006d4c <__smakebuf_r+0xc>
 8006d84:	4b0d      	ldr	r3, [pc, #52]	; (8006dbc <__smakebuf_r+0x7c>)
 8006d86:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d88:	89a3      	ldrh	r3, [r4, #12]
 8006d8a:	6020      	str	r0, [r4, #0]
 8006d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d90:	81a3      	strh	r3, [r4, #12]
 8006d92:	9b00      	ldr	r3, [sp, #0]
 8006d94:	6163      	str	r3, [r4, #20]
 8006d96:	9b01      	ldr	r3, [sp, #4]
 8006d98:	6120      	str	r0, [r4, #16]
 8006d9a:	b15b      	cbz	r3, 8006db4 <__smakebuf_r+0x74>
 8006d9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006da0:	4630      	mov	r0, r6
 8006da2:	f000 fc6b 	bl	800767c <_isatty_r>
 8006da6:	b128      	cbz	r0, 8006db4 <__smakebuf_r+0x74>
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	f023 0303 	bic.w	r3, r3, #3
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	81a3      	strh	r3, [r4, #12]
 8006db4:	89a0      	ldrh	r0, [r4, #12]
 8006db6:	4305      	orrs	r5, r0
 8006db8:	81a5      	strh	r5, [r4, #12]
 8006dba:	e7cd      	b.n	8006d58 <__smakebuf_r+0x18>
 8006dbc:	08006b4d 	.word	0x08006b4d

08006dc0 <malloc>:
 8006dc0:	4b02      	ldr	r3, [pc, #8]	; (8006dcc <malloc+0xc>)
 8006dc2:	4601      	mov	r1, r0
 8006dc4:	6818      	ldr	r0, [r3, #0]
 8006dc6:	f000 b86f 	b.w	8006ea8 <_malloc_r>
 8006dca:	bf00      	nop
 8006dcc:	2000000c 	.word	0x2000000c

08006dd0 <_free_r>:
 8006dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dd2:	2900      	cmp	r1, #0
 8006dd4:	d044      	beq.n	8006e60 <_free_r+0x90>
 8006dd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dda:	9001      	str	r0, [sp, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f1a1 0404 	sub.w	r4, r1, #4
 8006de2:	bfb8      	it	lt
 8006de4:	18e4      	addlt	r4, r4, r3
 8006de6:	f000 fc6b 	bl	80076c0 <__malloc_lock>
 8006dea:	4a1e      	ldr	r2, [pc, #120]	; (8006e64 <_free_r+0x94>)
 8006dec:	9801      	ldr	r0, [sp, #4]
 8006dee:	6813      	ldr	r3, [r2, #0]
 8006df0:	b933      	cbnz	r3, 8006e00 <_free_r+0x30>
 8006df2:	6063      	str	r3, [r4, #4]
 8006df4:	6014      	str	r4, [r2, #0]
 8006df6:	b003      	add	sp, #12
 8006df8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dfc:	f000 bc66 	b.w	80076cc <__malloc_unlock>
 8006e00:	42a3      	cmp	r3, r4
 8006e02:	d908      	bls.n	8006e16 <_free_r+0x46>
 8006e04:	6825      	ldr	r5, [r4, #0]
 8006e06:	1961      	adds	r1, r4, r5
 8006e08:	428b      	cmp	r3, r1
 8006e0a:	bf01      	itttt	eq
 8006e0c:	6819      	ldreq	r1, [r3, #0]
 8006e0e:	685b      	ldreq	r3, [r3, #4]
 8006e10:	1949      	addeq	r1, r1, r5
 8006e12:	6021      	streq	r1, [r4, #0]
 8006e14:	e7ed      	b.n	8006df2 <_free_r+0x22>
 8006e16:	461a      	mov	r2, r3
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	b10b      	cbz	r3, 8006e20 <_free_r+0x50>
 8006e1c:	42a3      	cmp	r3, r4
 8006e1e:	d9fa      	bls.n	8006e16 <_free_r+0x46>
 8006e20:	6811      	ldr	r1, [r2, #0]
 8006e22:	1855      	adds	r5, r2, r1
 8006e24:	42a5      	cmp	r5, r4
 8006e26:	d10b      	bne.n	8006e40 <_free_r+0x70>
 8006e28:	6824      	ldr	r4, [r4, #0]
 8006e2a:	4421      	add	r1, r4
 8006e2c:	1854      	adds	r4, r2, r1
 8006e2e:	42a3      	cmp	r3, r4
 8006e30:	6011      	str	r1, [r2, #0]
 8006e32:	d1e0      	bne.n	8006df6 <_free_r+0x26>
 8006e34:	681c      	ldr	r4, [r3, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	6053      	str	r3, [r2, #4]
 8006e3a:	4421      	add	r1, r4
 8006e3c:	6011      	str	r1, [r2, #0]
 8006e3e:	e7da      	b.n	8006df6 <_free_r+0x26>
 8006e40:	d902      	bls.n	8006e48 <_free_r+0x78>
 8006e42:	230c      	movs	r3, #12
 8006e44:	6003      	str	r3, [r0, #0]
 8006e46:	e7d6      	b.n	8006df6 <_free_r+0x26>
 8006e48:	6825      	ldr	r5, [r4, #0]
 8006e4a:	1961      	adds	r1, r4, r5
 8006e4c:	428b      	cmp	r3, r1
 8006e4e:	bf04      	itt	eq
 8006e50:	6819      	ldreq	r1, [r3, #0]
 8006e52:	685b      	ldreq	r3, [r3, #4]
 8006e54:	6063      	str	r3, [r4, #4]
 8006e56:	bf04      	itt	eq
 8006e58:	1949      	addeq	r1, r1, r5
 8006e5a:	6021      	streq	r1, [r4, #0]
 8006e5c:	6054      	str	r4, [r2, #4]
 8006e5e:	e7ca      	b.n	8006df6 <_free_r+0x26>
 8006e60:	b003      	add	sp, #12
 8006e62:	bd30      	pop	{r4, r5, pc}
 8006e64:	20000928 	.word	0x20000928

08006e68 <sbrk_aligned>:
 8006e68:	b570      	push	{r4, r5, r6, lr}
 8006e6a:	4e0e      	ldr	r6, [pc, #56]	; (8006ea4 <sbrk_aligned+0x3c>)
 8006e6c:	460c      	mov	r4, r1
 8006e6e:	6831      	ldr	r1, [r6, #0]
 8006e70:	4605      	mov	r5, r0
 8006e72:	b911      	cbnz	r1, 8006e7a <sbrk_aligned+0x12>
 8006e74:	f000 fb7a 	bl	800756c <_sbrk_r>
 8006e78:	6030      	str	r0, [r6, #0]
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	f000 fb75 	bl	800756c <_sbrk_r>
 8006e82:	1c43      	adds	r3, r0, #1
 8006e84:	d00a      	beq.n	8006e9c <sbrk_aligned+0x34>
 8006e86:	1cc4      	adds	r4, r0, #3
 8006e88:	f024 0403 	bic.w	r4, r4, #3
 8006e8c:	42a0      	cmp	r0, r4
 8006e8e:	d007      	beq.n	8006ea0 <sbrk_aligned+0x38>
 8006e90:	1a21      	subs	r1, r4, r0
 8006e92:	4628      	mov	r0, r5
 8006e94:	f000 fb6a 	bl	800756c <_sbrk_r>
 8006e98:	3001      	adds	r0, #1
 8006e9a:	d101      	bne.n	8006ea0 <sbrk_aligned+0x38>
 8006e9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	2000092c 	.word	0x2000092c

08006ea8 <_malloc_r>:
 8006ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eac:	1ccd      	adds	r5, r1, #3
 8006eae:	f025 0503 	bic.w	r5, r5, #3
 8006eb2:	3508      	adds	r5, #8
 8006eb4:	2d0c      	cmp	r5, #12
 8006eb6:	bf38      	it	cc
 8006eb8:	250c      	movcc	r5, #12
 8006eba:	2d00      	cmp	r5, #0
 8006ebc:	4607      	mov	r7, r0
 8006ebe:	db01      	blt.n	8006ec4 <_malloc_r+0x1c>
 8006ec0:	42a9      	cmp	r1, r5
 8006ec2:	d905      	bls.n	8006ed0 <_malloc_r+0x28>
 8006ec4:	230c      	movs	r3, #12
 8006ec6:	603b      	str	r3, [r7, #0]
 8006ec8:	2600      	movs	r6, #0
 8006eca:	4630      	mov	r0, r6
 8006ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ed0:	4e2e      	ldr	r6, [pc, #184]	; (8006f8c <_malloc_r+0xe4>)
 8006ed2:	f000 fbf5 	bl	80076c0 <__malloc_lock>
 8006ed6:	6833      	ldr	r3, [r6, #0]
 8006ed8:	461c      	mov	r4, r3
 8006eda:	bb34      	cbnz	r4, 8006f2a <_malloc_r+0x82>
 8006edc:	4629      	mov	r1, r5
 8006ede:	4638      	mov	r0, r7
 8006ee0:	f7ff ffc2 	bl	8006e68 <sbrk_aligned>
 8006ee4:	1c43      	adds	r3, r0, #1
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	d14d      	bne.n	8006f86 <_malloc_r+0xde>
 8006eea:	6834      	ldr	r4, [r6, #0]
 8006eec:	4626      	mov	r6, r4
 8006eee:	2e00      	cmp	r6, #0
 8006ef0:	d140      	bne.n	8006f74 <_malloc_r+0xcc>
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4638      	mov	r0, r7
 8006ef8:	eb04 0803 	add.w	r8, r4, r3
 8006efc:	f000 fb36 	bl	800756c <_sbrk_r>
 8006f00:	4580      	cmp	r8, r0
 8006f02:	d13a      	bne.n	8006f7a <_malloc_r+0xd2>
 8006f04:	6821      	ldr	r1, [r4, #0]
 8006f06:	3503      	adds	r5, #3
 8006f08:	1a6d      	subs	r5, r5, r1
 8006f0a:	f025 0503 	bic.w	r5, r5, #3
 8006f0e:	3508      	adds	r5, #8
 8006f10:	2d0c      	cmp	r5, #12
 8006f12:	bf38      	it	cc
 8006f14:	250c      	movcc	r5, #12
 8006f16:	4629      	mov	r1, r5
 8006f18:	4638      	mov	r0, r7
 8006f1a:	f7ff ffa5 	bl	8006e68 <sbrk_aligned>
 8006f1e:	3001      	adds	r0, #1
 8006f20:	d02b      	beq.n	8006f7a <_malloc_r+0xd2>
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	442b      	add	r3, r5
 8006f26:	6023      	str	r3, [r4, #0]
 8006f28:	e00e      	b.n	8006f48 <_malloc_r+0xa0>
 8006f2a:	6822      	ldr	r2, [r4, #0]
 8006f2c:	1b52      	subs	r2, r2, r5
 8006f2e:	d41e      	bmi.n	8006f6e <_malloc_r+0xc6>
 8006f30:	2a0b      	cmp	r2, #11
 8006f32:	d916      	bls.n	8006f62 <_malloc_r+0xba>
 8006f34:	1961      	adds	r1, r4, r5
 8006f36:	42a3      	cmp	r3, r4
 8006f38:	6025      	str	r5, [r4, #0]
 8006f3a:	bf18      	it	ne
 8006f3c:	6059      	strne	r1, [r3, #4]
 8006f3e:	6863      	ldr	r3, [r4, #4]
 8006f40:	bf08      	it	eq
 8006f42:	6031      	streq	r1, [r6, #0]
 8006f44:	5162      	str	r2, [r4, r5]
 8006f46:	604b      	str	r3, [r1, #4]
 8006f48:	4638      	mov	r0, r7
 8006f4a:	f104 060b 	add.w	r6, r4, #11
 8006f4e:	f000 fbbd 	bl	80076cc <__malloc_unlock>
 8006f52:	f026 0607 	bic.w	r6, r6, #7
 8006f56:	1d23      	adds	r3, r4, #4
 8006f58:	1af2      	subs	r2, r6, r3
 8006f5a:	d0b6      	beq.n	8006eca <_malloc_r+0x22>
 8006f5c:	1b9b      	subs	r3, r3, r6
 8006f5e:	50a3      	str	r3, [r4, r2]
 8006f60:	e7b3      	b.n	8006eca <_malloc_r+0x22>
 8006f62:	6862      	ldr	r2, [r4, #4]
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	bf0c      	ite	eq
 8006f68:	6032      	streq	r2, [r6, #0]
 8006f6a:	605a      	strne	r2, [r3, #4]
 8006f6c:	e7ec      	b.n	8006f48 <_malloc_r+0xa0>
 8006f6e:	4623      	mov	r3, r4
 8006f70:	6864      	ldr	r4, [r4, #4]
 8006f72:	e7b2      	b.n	8006eda <_malloc_r+0x32>
 8006f74:	4634      	mov	r4, r6
 8006f76:	6876      	ldr	r6, [r6, #4]
 8006f78:	e7b9      	b.n	8006eee <_malloc_r+0x46>
 8006f7a:	230c      	movs	r3, #12
 8006f7c:	603b      	str	r3, [r7, #0]
 8006f7e:	4638      	mov	r0, r7
 8006f80:	f000 fba4 	bl	80076cc <__malloc_unlock>
 8006f84:	e7a1      	b.n	8006eca <_malloc_r+0x22>
 8006f86:	6025      	str	r5, [r4, #0]
 8006f88:	e7de      	b.n	8006f48 <_malloc_r+0xa0>
 8006f8a:	bf00      	nop
 8006f8c:	20000928 	.word	0x20000928

08006f90 <__sfputc_r>:
 8006f90:	6893      	ldr	r3, [r2, #8]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	b410      	push	{r4}
 8006f98:	6093      	str	r3, [r2, #8]
 8006f9a:	da08      	bge.n	8006fae <__sfputc_r+0x1e>
 8006f9c:	6994      	ldr	r4, [r2, #24]
 8006f9e:	42a3      	cmp	r3, r4
 8006fa0:	db01      	blt.n	8006fa6 <__sfputc_r+0x16>
 8006fa2:	290a      	cmp	r1, #10
 8006fa4:	d103      	bne.n	8006fae <__sfputc_r+0x1e>
 8006fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006faa:	f7ff bc29 	b.w	8006800 <__swbuf_r>
 8006fae:	6813      	ldr	r3, [r2, #0]
 8006fb0:	1c58      	adds	r0, r3, #1
 8006fb2:	6010      	str	r0, [r2, #0]
 8006fb4:	7019      	strb	r1, [r3, #0]
 8006fb6:	4608      	mov	r0, r1
 8006fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <__sfputs_r>:
 8006fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc0:	4606      	mov	r6, r0
 8006fc2:	460f      	mov	r7, r1
 8006fc4:	4614      	mov	r4, r2
 8006fc6:	18d5      	adds	r5, r2, r3
 8006fc8:	42ac      	cmp	r4, r5
 8006fca:	d101      	bne.n	8006fd0 <__sfputs_r+0x12>
 8006fcc:	2000      	movs	r0, #0
 8006fce:	e007      	b.n	8006fe0 <__sfputs_r+0x22>
 8006fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fd4:	463a      	mov	r2, r7
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	f7ff ffda 	bl	8006f90 <__sfputc_r>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d1f3      	bne.n	8006fc8 <__sfputs_r+0xa>
 8006fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fe4 <_vfiprintf_r>:
 8006fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe8:	460d      	mov	r5, r1
 8006fea:	b09d      	sub	sp, #116	; 0x74
 8006fec:	4614      	mov	r4, r2
 8006fee:	4698      	mov	r8, r3
 8006ff0:	4606      	mov	r6, r0
 8006ff2:	b118      	cbz	r0, 8006ffc <_vfiprintf_r+0x18>
 8006ff4:	6983      	ldr	r3, [r0, #24]
 8006ff6:	b90b      	cbnz	r3, 8006ffc <_vfiprintf_r+0x18>
 8006ff8:	f7ff fddc 	bl	8006bb4 <__sinit>
 8006ffc:	4b89      	ldr	r3, [pc, #548]	; (8007224 <_vfiprintf_r+0x240>)
 8006ffe:	429d      	cmp	r5, r3
 8007000:	d11b      	bne.n	800703a <_vfiprintf_r+0x56>
 8007002:	6875      	ldr	r5, [r6, #4]
 8007004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007006:	07d9      	lsls	r1, r3, #31
 8007008:	d405      	bmi.n	8007016 <_vfiprintf_r+0x32>
 800700a:	89ab      	ldrh	r3, [r5, #12]
 800700c:	059a      	lsls	r2, r3, #22
 800700e:	d402      	bmi.n	8007016 <_vfiprintf_r+0x32>
 8007010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007012:	f7ff fe6d 	bl	8006cf0 <__retarget_lock_acquire_recursive>
 8007016:	89ab      	ldrh	r3, [r5, #12]
 8007018:	071b      	lsls	r3, r3, #28
 800701a:	d501      	bpl.n	8007020 <_vfiprintf_r+0x3c>
 800701c:	692b      	ldr	r3, [r5, #16]
 800701e:	b9eb      	cbnz	r3, 800705c <_vfiprintf_r+0x78>
 8007020:	4629      	mov	r1, r5
 8007022:	4630      	mov	r0, r6
 8007024:	f7ff fc3e 	bl	80068a4 <__swsetup_r>
 8007028:	b1c0      	cbz	r0, 800705c <_vfiprintf_r+0x78>
 800702a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800702c:	07dc      	lsls	r4, r3, #31
 800702e:	d50e      	bpl.n	800704e <_vfiprintf_r+0x6a>
 8007030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007034:	b01d      	add	sp, #116	; 0x74
 8007036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800703a:	4b7b      	ldr	r3, [pc, #492]	; (8007228 <_vfiprintf_r+0x244>)
 800703c:	429d      	cmp	r5, r3
 800703e:	d101      	bne.n	8007044 <_vfiprintf_r+0x60>
 8007040:	68b5      	ldr	r5, [r6, #8]
 8007042:	e7df      	b.n	8007004 <_vfiprintf_r+0x20>
 8007044:	4b79      	ldr	r3, [pc, #484]	; (800722c <_vfiprintf_r+0x248>)
 8007046:	429d      	cmp	r5, r3
 8007048:	bf08      	it	eq
 800704a:	68f5      	ldreq	r5, [r6, #12]
 800704c:	e7da      	b.n	8007004 <_vfiprintf_r+0x20>
 800704e:	89ab      	ldrh	r3, [r5, #12]
 8007050:	0598      	lsls	r0, r3, #22
 8007052:	d4ed      	bmi.n	8007030 <_vfiprintf_r+0x4c>
 8007054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007056:	f7ff fe4c 	bl	8006cf2 <__retarget_lock_release_recursive>
 800705a:	e7e9      	b.n	8007030 <_vfiprintf_r+0x4c>
 800705c:	2300      	movs	r3, #0
 800705e:	9309      	str	r3, [sp, #36]	; 0x24
 8007060:	2320      	movs	r3, #32
 8007062:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007066:	f8cd 800c 	str.w	r8, [sp, #12]
 800706a:	2330      	movs	r3, #48	; 0x30
 800706c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007230 <_vfiprintf_r+0x24c>
 8007070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007074:	f04f 0901 	mov.w	r9, #1
 8007078:	4623      	mov	r3, r4
 800707a:	469a      	mov	sl, r3
 800707c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007080:	b10a      	cbz	r2, 8007086 <_vfiprintf_r+0xa2>
 8007082:	2a25      	cmp	r2, #37	; 0x25
 8007084:	d1f9      	bne.n	800707a <_vfiprintf_r+0x96>
 8007086:	ebba 0b04 	subs.w	fp, sl, r4
 800708a:	d00b      	beq.n	80070a4 <_vfiprintf_r+0xc0>
 800708c:	465b      	mov	r3, fp
 800708e:	4622      	mov	r2, r4
 8007090:	4629      	mov	r1, r5
 8007092:	4630      	mov	r0, r6
 8007094:	f7ff ff93 	bl	8006fbe <__sfputs_r>
 8007098:	3001      	adds	r0, #1
 800709a:	f000 80aa 	beq.w	80071f2 <_vfiprintf_r+0x20e>
 800709e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070a0:	445a      	add	r2, fp
 80070a2:	9209      	str	r2, [sp, #36]	; 0x24
 80070a4:	f89a 3000 	ldrb.w	r3, [sl]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 80a2 	beq.w	80071f2 <_vfiprintf_r+0x20e>
 80070ae:	2300      	movs	r3, #0
 80070b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070b8:	f10a 0a01 	add.w	sl, sl, #1
 80070bc:	9304      	str	r3, [sp, #16]
 80070be:	9307      	str	r3, [sp, #28]
 80070c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070c4:	931a      	str	r3, [sp, #104]	; 0x68
 80070c6:	4654      	mov	r4, sl
 80070c8:	2205      	movs	r2, #5
 80070ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070ce:	4858      	ldr	r0, [pc, #352]	; (8007230 <_vfiprintf_r+0x24c>)
 80070d0:	f7f9 f87e 	bl	80001d0 <memchr>
 80070d4:	9a04      	ldr	r2, [sp, #16]
 80070d6:	b9d8      	cbnz	r0, 8007110 <_vfiprintf_r+0x12c>
 80070d8:	06d1      	lsls	r1, r2, #27
 80070da:	bf44      	itt	mi
 80070dc:	2320      	movmi	r3, #32
 80070de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070e2:	0713      	lsls	r3, r2, #28
 80070e4:	bf44      	itt	mi
 80070e6:	232b      	movmi	r3, #43	; 0x2b
 80070e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070ec:	f89a 3000 	ldrb.w	r3, [sl]
 80070f0:	2b2a      	cmp	r3, #42	; 0x2a
 80070f2:	d015      	beq.n	8007120 <_vfiprintf_r+0x13c>
 80070f4:	9a07      	ldr	r2, [sp, #28]
 80070f6:	4654      	mov	r4, sl
 80070f8:	2000      	movs	r0, #0
 80070fa:	f04f 0c0a 	mov.w	ip, #10
 80070fe:	4621      	mov	r1, r4
 8007100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007104:	3b30      	subs	r3, #48	; 0x30
 8007106:	2b09      	cmp	r3, #9
 8007108:	d94e      	bls.n	80071a8 <_vfiprintf_r+0x1c4>
 800710a:	b1b0      	cbz	r0, 800713a <_vfiprintf_r+0x156>
 800710c:	9207      	str	r2, [sp, #28]
 800710e:	e014      	b.n	800713a <_vfiprintf_r+0x156>
 8007110:	eba0 0308 	sub.w	r3, r0, r8
 8007114:	fa09 f303 	lsl.w	r3, r9, r3
 8007118:	4313      	orrs	r3, r2
 800711a:	9304      	str	r3, [sp, #16]
 800711c:	46a2      	mov	sl, r4
 800711e:	e7d2      	b.n	80070c6 <_vfiprintf_r+0xe2>
 8007120:	9b03      	ldr	r3, [sp, #12]
 8007122:	1d19      	adds	r1, r3, #4
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	9103      	str	r1, [sp, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	bfbb      	ittet	lt
 800712c:	425b      	neglt	r3, r3
 800712e:	f042 0202 	orrlt.w	r2, r2, #2
 8007132:	9307      	strge	r3, [sp, #28]
 8007134:	9307      	strlt	r3, [sp, #28]
 8007136:	bfb8      	it	lt
 8007138:	9204      	strlt	r2, [sp, #16]
 800713a:	7823      	ldrb	r3, [r4, #0]
 800713c:	2b2e      	cmp	r3, #46	; 0x2e
 800713e:	d10c      	bne.n	800715a <_vfiprintf_r+0x176>
 8007140:	7863      	ldrb	r3, [r4, #1]
 8007142:	2b2a      	cmp	r3, #42	; 0x2a
 8007144:	d135      	bne.n	80071b2 <_vfiprintf_r+0x1ce>
 8007146:	9b03      	ldr	r3, [sp, #12]
 8007148:	1d1a      	adds	r2, r3, #4
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	9203      	str	r2, [sp, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	bfb8      	it	lt
 8007152:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007156:	3402      	adds	r4, #2
 8007158:	9305      	str	r3, [sp, #20]
 800715a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007240 <_vfiprintf_r+0x25c>
 800715e:	7821      	ldrb	r1, [r4, #0]
 8007160:	2203      	movs	r2, #3
 8007162:	4650      	mov	r0, sl
 8007164:	f7f9 f834 	bl	80001d0 <memchr>
 8007168:	b140      	cbz	r0, 800717c <_vfiprintf_r+0x198>
 800716a:	2340      	movs	r3, #64	; 0x40
 800716c:	eba0 000a 	sub.w	r0, r0, sl
 8007170:	fa03 f000 	lsl.w	r0, r3, r0
 8007174:	9b04      	ldr	r3, [sp, #16]
 8007176:	4303      	orrs	r3, r0
 8007178:	3401      	adds	r4, #1
 800717a:	9304      	str	r3, [sp, #16]
 800717c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007180:	482c      	ldr	r0, [pc, #176]	; (8007234 <_vfiprintf_r+0x250>)
 8007182:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007186:	2206      	movs	r2, #6
 8007188:	f7f9 f822 	bl	80001d0 <memchr>
 800718c:	2800      	cmp	r0, #0
 800718e:	d03f      	beq.n	8007210 <_vfiprintf_r+0x22c>
 8007190:	4b29      	ldr	r3, [pc, #164]	; (8007238 <_vfiprintf_r+0x254>)
 8007192:	bb1b      	cbnz	r3, 80071dc <_vfiprintf_r+0x1f8>
 8007194:	9b03      	ldr	r3, [sp, #12]
 8007196:	3307      	adds	r3, #7
 8007198:	f023 0307 	bic.w	r3, r3, #7
 800719c:	3308      	adds	r3, #8
 800719e:	9303      	str	r3, [sp, #12]
 80071a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a2:	443b      	add	r3, r7
 80071a4:	9309      	str	r3, [sp, #36]	; 0x24
 80071a6:	e767      	b.n	8007078 <_vfiprintf_r+0x94>
 80071a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80071ac:	460c      	mov	r4, r1
 80071ae:	2001      	movs	r0, #1
 80071b0:	e7a5      	b.n	80070fe <_vfiprintf_r+0x11a>
 80071b2:	2300      	movs	r3, #0
 80071b4:	3401      	adds	r4, #1
 80071b6:	9305      	str	r3, [sp, #20]
 80071b8:	4619      	mov	r1, r3
 80071ba:	f04f 0c0a 	mov.w	ip, #10
 80071be:	4620      	mov	r0, r4
 80071c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071c4:	3a30      	subs	r2, #48	; 0x30
 80071c6:	2a09      	cmp	r2, #9
 80071c8:	d903      	bls.n	80071d2 <_vfiprintf_r+0x1ee>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0c5      	beq.n	800715a <_vfiprintf_r+0x176>
 80071ce:	9105      	str	r1, [sp, #20]
 80071d0:	e7c3      	b.n	800715a <_vfiprintf_r+0x176>
 80071d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80071d6:	4604      	mov	r4, r0
 80071d8:	2301      	movs	r3, #1
 80071da:	e7f0      	b.n	80071be <_vfiprintf_r+0x1da>
 80071dc:	ab03      	add	r3, sp, #12
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	462a      	mov	r2, r5
 80071e2:	4b16      	ldr	r3, [pc, #88]	; (800723c <_vfiprintf_r+0x258>)
 80071e4:	a904      	add	r1, sp, #16
 80071e6:	4630      	mov	r0, r6
 80071e8:	f3af 8000 	nop.w
 80071ec:	4607      	mov	r7, r0
 80071ee:	1c78      	adds	r0, r7, #1
 80071f0:	d1d6      	bne.n	80071a0 <_vfiprintf_r+0x1bc>
 80071f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071f4:	07d9      	lsls	r1, r3, #31
 80071f6:	d405      	bmi.n	8007204 <_vfiprintf_r+0x220>
 80071f8:	89ab      	ldrh	r3, [r5, #12]
 80071fa:	059a      	lsls	r2, r3, #22
 80071fc:	d402      	bmi.n	8007204 <_vfiprintf_r+0x220>
 80071fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007200:	f7ff fd77 	bl	8006cf2 <__retarget_lock_release_recursive>
 8007204:	89ab      	ldrh	r3, [r5, #12]
 8007206:	065b      	lsls	r3, r3, #25
 8007208:	f53f af12 	bmi.w	8007030 <_vfiprintf_r+0x4c>
 800720c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800720e:	e711      	b.n	8007034 <_vfiprintf_r+0x50>
 8007210:	ab03      	add	r3, sp, #12
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	462a      	mov	r2, r5
 8007216:	4b09      	ldr	r3, [pc, #36]	; (800723c <_vfiprintf_r+0x258>)
 8007218:	a904      	add	r1, sp, #16
 800721a:	4630      	mov	r0, r6
 800721c:	f000 f880 	bl	8007320 <_printf_i>
 8007220:	e7e4      	b.n	80071ec <_vfiprintf_r+0x208>
 8007222:	bf00      	nop
 8007224:	08007bb0 	.word	0x08007bb0
 8007228:	08007bd0 	.word	0x08007bd0
 800722c:	08007b90 	.word	0x08007b90
 8007230:	08007bf0 	.word	0x08007bf0
 8007234:	08007bfa 	.word	0x08007bfa
 8007238:	00000000 	.word	0x00000000
 800723c:	08006fbf 	.word	0x08006fbf
 8007240:	08007bf6 	.word	0x08007bf6

08007244 <_printf_common>:
 8007244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007248:	4616      	mov	r6, r2
 800724a:	4699      	mov	r9, r3
 800724c:	688a      	ldr	r2, [r1, #8]
 800724e:	690b      	ldr	r3, [r1, #16]
 8007250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007254:	4293      	cmp	r3, r2
 8007256:	bfb8      	it	lt
 8007258:	4613      	movlt	r3, r2
 800725a:	6033      	str	r3, [r6, #0]
 800725c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007260:	4607      	mov	r7, r0
 8007262:	460c      	mov	r4, r1
 8007264:	b10a      	cbz	r2, 800726a <_printf_common+0x26>
 8007266:	3301      	adds	r3, #1
 8007268:	6033      	str	r3, [r6, #0]
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	0699      	lsls	r1, r3, #26
 800726e:	bf42      	ittt	mi
 8007270:	6833      	ldrmi	r3, [r6, #0]
 8007272:	3302      	addmi	r3, #2
 8007274:	6033      	strmi	r3, [r6, #0]
 8007276:	6825      	ldr	r5, [r4, #0]
 8007278:	f015 0506 	ands.w	r5, r5, #6
 800727c:	d106      	bne.n	800728c <_printf_common+0x48>
 800727e:	f104 0a19 	add.w	sl, r4, #25
 8007282:	68e3      	ldr	r3, [r4, #12]
 8007284:	6832      	ldr	r2, [r6, #0]
 8007286:	1a9b      	subs	r3, r3, r2
 8007288:	42ab      	cmp	r3, r5
 800728a:	dc26      	bgt.n	80072da <_printf_common+0x96>
 800728c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007290:	1e13      	subs	r3, r2, #0
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	bf18      	it	ne
 8007296:	2301      	movne	r3, #1
 8007298:	0692      	lsls	r2, r2, #26
 800729a:	d42b      	bmi.n	80072f4 <_printf_common+0xb0>
 800729c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072a0:	4649      	mov	r1, r9
 80072a2:	4638      	mov	r0, r7
 80072a4:	47c0      	blx	r8
 80072a6:	3001      	adds	r0, #1
 80072a8:	d01e      	beq.n	80072e8 <_printf_common+0xa4>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	68e5      	ldr	r5, [r4, #12]
 80072ae:	6832      	ldr	r2, [r6, #0]
 80072b0:	f003 0306 	and.w	r3, r3, #6
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	bf08      	it	eq
 80072b8:	1aad      	subeq	r5, r5, r2
 80072ba:	68a3      	ldr	r3, [r4, #8]
 80072bc:	6922      	ldr	r2, [r4, #16]
 80072be:	bf0c      	ite	eq
 80072c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072c4:	2500      	movne	r5, #0
 80072c6:	4293      	cmp	r3, r2
 80072c8:	bfc4      	itt	gt
 80072ca:	1a9b      	subgt	r3, r3, r2
 80072cc:	18ed      	addgt	r5, r5, r3
 80072ce:	2600      	movs	r6, #0
 80072d0:	341a      	adds	r4, #26
 80072d2:	42b5      	cmp	r5, r6
 80072d4:	d11a      	bne.n	800730c <_printf_common+0xc8>
 80072d6:	2000      	movs	r0, #0
 80072d8:	e008      	b.n	80072ec <_printf_common+0xa8>
 80072da:	2301      	movs	r3, #1
 80072dc:	4652      	mov	r2, sl
 80072de:	4649      	mov	r1, r9
 80072e0:	4638      	mov	r0, r7
 80072e2:	47c0      	blx	r8
 80072e4:	3001      	adds	r0, #1
 80072e6:	d103      	bne.n	80072f0 <_printf_common+0xac>
 80072e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f0:	3501      	adds	r5, #1
 80072f2:	e7c6      	b.n	8007282 <_printf_common+0x3e>
 80072f4:	18e1      	adds	r1, r4, r3
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	2030      	movs	r0, #48	; 0x30
 80072fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072fe:	4422      	add	r2, r4
 8007300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007308:	3302      	adds	r3, #2
 800730a:	e7c7      	b.n	800729c <_printf_common+0x58>
 800730c:	2301      	movs	r3, #1
 800730e:	4622      	mov	r2, r4
 8007310:	4649      	mov	r1, r9
 8007312:	4638      	mov	r0, r7
 8007314:	47c0      	blx	r8
 8007316:	3001      	adds	r0, #1
 8007318:	d0e6      	beq.n	80072e8 <_printf_common+0xa4>
 800731a:	3601      	adds	r6, #1
 800731c:	e7d9      	b.n	80072d2 <_printf_common+0x8e>
	...

08007320 <_printf_i>:
 8007320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007324:	7e0f      	ldrb	r7, [r1, #24]
 8007326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007328:	2f78      	cmp	r7, #120	; 0x78
 800732a:	4691      	mov	r9, r2
 800732c:	4680      	mov	r8, r0
 800732e:	460c      	mov	r4, r1
 8007330:	469a      	mov	sl, r3
 8007332:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007336:	d807      	bhi.n	8007348 <_printf_i+0x28>
 8007338:	2f62      	cmp	r7, #98	; 0x62
 800733a:	d80a      	bhi.n	8007352 <_printf_i+0x32>
 800733c:	2f00      	cmp	r7, #0
 800733e:	f000 80d8 	beq.w	80074f2 <_printf_i+0x1d2>
 8007342:	2f58      	cmp	r7, #88	; 0x58
 8007344:	f000 80a3 	beq.w	800748e <_printf_i+0x16e>
 8007348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800734c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007350:	e03a      	b.n	80073c8 <_printf_i+0xa8>
 8007352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007356:	2b15      	cmp	r3, #21
 8007358:	d8f6      	bhi.n	8007348 <_printf_i+0x28>
 800735a:	a101      	add	r1, pc, #4	; (adr r1, 8007360 <_printf_i+0x40>)
 800735c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007360:	080073b9 	.word	0x080073b9
 8007364:	080073cd 	.word	0x080073cd
 8007368:	08007349 	.word	0x08007349
 800736c:	08007349 	.word	0x08007349
 8007370:	08007349 	.word	0x08007349
 8007374:	08007349 	.word	0x08007349
 8007378:	080073cd 	.word	0x080073cd
 800737c:	08007349 	.word	0x08007349
 8007380:	08007349 	.word	0x08007349
 8007384:	08007349 	.word	0x08007349
 8007388:	08007349 	.word	0x08007349
 800738c:	080074d9 	.word	0x080074d9
 8007390:	080073fd 	.word	0x080073fd
 8007394:	080074bb 	.word	0x080074bb
 8007398:	08007349 	.word	0x08007349
 800739c:	08007349 	.word	0x08007349
 80073a0:	080074fb 	.word	0x080074fb
 80073a4:	08007349 	.word	0x08007349
 80073a8:	080073fd 	.word	0x080073fd
 80073ac:	08007349 	.word	0x08007349
 80073b0:	08007349 	.word	0x08007349
 80073b4:	080074c3 	.word	0x080074c3
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	1d1a      	adds	r2, r3, #4
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	602a      	str	r2, [r5, #0]
 80073c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073c8:	2301      	movs	r3, #1
 80073ca:	e0a3      	b.n	8007514 <_printf_i+0x1f4>
 80073cc:	6820      	ldr	r0, [r4, #0]
 80073ce:	6829      	ldr	r1, [r5, #0]
 80073d0:	0606      	lsls	r6, r0, #24
 80073d2:	f101 0304 	add.w	r3, r1, #4
 80073d6:	d50a      	bpl.n	80073ee <_printf_i+0xce>
 80073d8:	680e      	ldr	r6, [r1, #0]
 80073da:	602b      	str	r3, [r5, #0]
 80073dc:	2e00      	cmp	r6, #0
 80073de:	da03      	bge.n	80073e8 <_printf_i+0xc8>
 80073e0:	232d      	movs	r3, #45	; 0x2d
 80073e2:	4276      	negs	r6, r6
 80073e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073e8:	485e      	ldr	r0, [pc, #376]	; (8007564 <_printf_i+0x244>)
 80073ea:	230a      	movs	r3, #10
 80073ec:	e019      	b.n	8007422 <_printf_i+0x102>
 80073ee:	680e      	ldr	r6, [r1, #0]
 80073f0:	602b      	str	r3, [r5, #0]
 80073f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073f6:	bf18      	it	ne
 80073f8:	b236      	sxthne	r6, r6
 80073fa:	e7ef      	b.n	80073dc <_printf_i+0xbc>
 80073fc:	682b      	ldr	r3, [r5, #0]
 80073fe:	6820      	ldr	r0, [r4, #0]
 8007400:	1d19      	adds	r1, r3, #4
 8007402:	6029      	str	r1, [r5, #0]
 8007404:	0601      	lsls	r1, r0, #24
 8007406:	d501      	bpl.n	800740c <_printf_i+0xec>
 8007408:	681e      	ldr	r6, [r3, #0]
 800740a:	e002      	b.n	8007412 <_printf_i+0xf2>
 800740c:	0646      	lsls	r6, r0, #25
 800740e:	d5fb      	bpl.n	8007408 <_printf_i+0xe8>
 8007410:	881e      	ldrh	r6, [r3, #0]
 8007412:	4854      	ldr	r0, [pc, #336]	; (8007564 <_printf_i+0x244>)
 8007414:	2f6f      	cmp	r7, #111	; 0x6f
 8007416:	bf0c      	ite	eq
 8007418:	2308      	moveq	r3, #8
 800741a:	230a      	movne	r3, #10
 800741c:	2100      	movs	r1, #0
 800741e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007422:	6865      	ldr	r5, [r4, #4]
 8007424:	60a5      	str	r5, [r4, #8]
 8007426:	2d00      	cmp	r5, #0
 8007428:	bfa2      	ittt	ge
 800742a:	6821      	ldrge	r1, [r4, #0]
 800742c:	f021 0104 	bicge.w	r1, r1, #4
 8007430:	6021      	strge	r1, [r4, #0]
 8007432:	b90e      	cbnz	r6, 8007438 <_printf_i+0x118>
 8007434:	2d00      	cmp	r5, #0
 8007436:	d04d      	beq.n	80074d4 <_printf_i+0x1b4>
 8007438:	4615      	mov	r5, r2
 800743a:	fbb6 f1f3 	udiv	r1, r6, r3
 800743e:	fb03 6711 	mls	r7, r3, r1, r6
 8007442:	5dc7      	ldrb	r7, [r0, r7]
 8007444:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007448:	4637      	mov	r7, r6
 800744a:	42bb      	cmp	r3, r7
 800744c:	460e      	mov	r6, r1
 800744e:	d9f4      	bls.n	800743a <_printf_i+0x11a>
 8007450:	2b08      	cmp	r3, #8
 8007452:	d10b      	bne.n	800746c <_printf_i+0x14c>
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	07de      	lsls	r6, r3, #31
 8007458:	d508      	bpl.n	800746c <_printf_i+0x14c>
 800745a:	6923      	ldr	r3, [r4, #16]
 800745c:	6861      	ldr	r1, [r4, #4]
 800745e:	4299      	cmp	r1, r3
 8007460:	bfde      	ittt	le
 8007462:	2330      	movle	r3, #48	; 0x30
 8007464:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007468:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800746c:	1b52      	subs	r2, r2, r5
 800746e:	6122      	str	r2, [r4, #16]
 8007470:	f8cd a000 	str.w	sl, [sp]
 8007474:	464b      	mov	r3, r9
 8007476:	aa03      	add	r2, sp, #12
 8007478:	4621      	mov	r1, r4
 800747a:	4640      	mov	r0, r8
 800747c:	f7ff fee2 	bl	8007244 <_printf_common>
 8007480:	3001      	adds	r0, #1
 8007482:	d14c      	bne.n	800751e <_printf_i+0x1fe>
 8007484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007488:	b004      	add	sp, #16
 800748a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800748e:	4835      	ldr	r0, [pc, #212]	; (8007564 <_printf_i+0x244>)
 8007490:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007494:	6829      	ldr	r1, [r5, #0]
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	f851 6b04 	ldr.w	r6, [r1], #4
 800749c:	6029      	str	r1, [r5, #0]
 800749e:	061d      	lsls	r5, r3, #24
 80074a0:	d514      	bpl.n	80074cc <_printf_i+0x1ac>
 80074a2:	07df      	lsls	r7, r3, #31
 80074a4:	bf44      	itt	mi
 80074a6:	f043 0320 	orrmi.w	r3, r3, #32
 80074aa:	6023      	strmi	r3, [r4, #0]
 80074ac:	b91e      	cbnz	r6, 80074b6 <_printf_i+0x196>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	f023 0320 	bic.w	r3, r3, #32
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	2310      	movs	r3, #16
 80074b8:	e7b0      	b.n	800741c <_printf_i+0xfc>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	f043 0320 	orr.w	r3, r3, #32
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	2378      	movs	r3, #120	; 0x78
 80074c4:	4828      	ldr	r0, [pc, #160]	; (8007568 <_printf_i+0x248>)
 80074c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074ca:	e7e3      	b.n	8007494 <_printf_i+0x174>
 80074cc:	0659      	lsls	r1, r3, #25
 80074ce:	bf48      	it	mi
 80074d0:	b2b6      	uxthmi	r6, r6
 80074d2:	e7e6      	b.n	80074a2 <_printf_i+0x182>
 80074d4:	4615      	mov	r5, r2
 80074d6:	e7bb      	b.n	8007450 <_printf_i+0x130>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	6826      	ldr	r6, [r4, #0]
 80074dc:	6961      	ldr	r1, [r4, #20]
 80074de:	1d18      	adds	r0, r3, #4
 80074e0:	6028      	str	r0, [r5, #0]
 80074e2:	0635      	lsls	r5, r6, #24
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	d501      	bpl.n	80074ec <_printf_i+0x1cc>
 80074e8:	6019      	str	r1, [r3, #0]
 80074ea:	e002      	b.n	80074f2 <_printf_i+0x1d2>
 80074ec:	0670      	lsls	r0, r6, #25
 80074ee:	d5fb      	bpl.n	80074e8 <_printf_i+0x1c8>
 80074f0:	8019      	strh	r1, [r3, #0]
 80074f2:	2300      	movs	r3, #0
 80074f4:	6123      	str	r3, [r4, #16]
 80074f6:	4615      	mov	r5, r2
 80074f8:	e7ba      	b.n	8007470 <_printf_i+0x150>
 80074fa:	682b      	ldr	r3, [r5, #0]
 80074fc:	1d1a      	adds	r2, r3, #4
 80074fe:	602a      	str	r2, [r5, #0]
 8007500:	681d      	ldr	r5, [r3, #0]
 8007502:	6862      	ldr	r2, [r4, #4]
 8007504:	2100      	movs	r1, #0
 8007506:	4628      	mov	r0, r5
 8007508:	f7f8 fe62 	bl	80001d0 <memchr>
 800750c:	b108      	cbz	r0, 8007512 <_printf_i+0x1f2>
 800750e:	1b40      	subs	r0, r0, r5
 8007510:	6060      	str	r0, [r4, #4]
 8007512:	6863      	ldr	r3, [r4, #4]
 8007514:	6123      	str	r3, [r4, #16]
 8007516:	2300      	movs	r3, #0
 8007518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800751c:	e7a8      	b.n	8007470 <_printf_i+0x150>
 800751e:	6923      	ldr	r3, [r4, #16]
 8007520:	462a      	mov	r2, r5
 8007522:	4649      	mov	r1, r9
 8007524:	4640      	mov	r0, r8
 8007526:	47d0      	blx	sl
 8007528:	3001      	adds	r0, #1
 800752a:	d0ab      	beq.n	8007484 <_printf_i+0x164>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	079b      	lsls	r3, r3, #30
 8007530:	d413      	bmi.n	800755a <_printf_i+0x23a>
 8007532:	68e0      	ldr	r0, [r4, #12]
 8007534:	9b03      	ldr	r3, [sp, #12]
 8007536:	4298      	cmp	r0, r3
 8007538:	bfb8      	it	lt
 800753a:	4618      	movlt	r0, r3
 800753c:	e7a4      	b.n	8007488 <_printf_i+0x168>
 800753e:	2301      	movs	r3, #1
 8007540:	4632      	mov	r2, r6
 8007542:	4649      	mov	r1, r9
 8007544:	4640      	mov	r0, r8
 8007546:	47d0      	blx	sl
 8007548:	3001      	adds	r0, #1
 800754a:	d09b      	beq.n	8007484 <_printf_i+0x164>
 800754c:	3501      	adds	r5, #1
 800754e:	68e3      	ldr	r3, [r4, #12]
 8007550:	9903      	ldr	r1, [sp, #12]
 8007552:	1a5b      	subs	r3, r3, r1
 8007554:	42ab      	cmp	r3, r5
 8007556:	dcf2      	bgt.n	800753e <_printf_i+0x21e>
 8007558:	e7eb      	b.n	8007532 <_printf_i+0x212>
 800755a:	2500      	movs	r5, #0
 800755c:	f104 0619 	add.w	r6, r4, #25
 8007560:	e7f5      	b.n	800754e <_printf_i+0x22e>
 8007562:	bf00      	nop
 8007564:	08007c01 	.word	0x08007c01
 8007568:	08007c12 	.word	0x08007c12

0800756c <_sbrk_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4d06      	ldr	r5, [pc, #24]	; (8007588 <_sbrk_r+0x1c>)
 8007570:	2300      	movs	r3, #0
 8007572:	4604      	mov	r4, r0
 8007574:	4608      	mov	r0, r1
 8007576:	602b      	str	r3, [r5, #0]
 8007578:	f7f9 fe9c 	bl	80012b4 <_sbrk>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_sbrk_r+0x1a>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	b103      	cbz	r3, 8007586 <_sbrk_r+0x1a>
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	20000930 	.word	0x20000930

0800758c <__sread>:
 800758c:	b510      	push	{r4, lr}
 800758e:	460c      	mov	r4, r1
 8007590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007594:	f000 f8a0 	bl	80076d8 <_read_r>
 8007598:	2800      	cmp	r0, #0
 800759a:	bfab      	itete	ge
 800759c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800759e:	89a3      	ldrhlt	r3, [r4, #12]
 80075a0:	181b      	addge	r3, r3, r0
 80075a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075a6:	bfac      	ite	ge
 80075a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80075aa:	81a3      	strhlt	r3, [r4, #12]
 80075ac:	bd10      	pop	{r4, pc}

080075ae <__swrite>:
 80075ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b2:	461f      	mov	r7, r3
 80075b4:	898b      	ldrh	r3, [r1, #12]
 80075b6:	05db      	lsls	r3, r3, #23
 80075b8:	4605      	mov	r5, r0
 80075ba:	460c      	mov	r4, r1
 80075bc:	4616      	mov	r6, r2
 80075be:	d505      	bpl.n	80075cc <__swrite+0x1e>
 80075c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c4:	2302      	movs	r3, #2
 80075c6:	2200      	movs	r2, #0
 80075c8:	f000 f868 	bl	800769c <_lseek_r>
 80075cc:	89a3      	ldrh	r3, [r4, #12]
 80075ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075d6:	81a3      	strh	r3, [r4, #12]
 80075d8:	4632      	mov	r2, r6
 80075da:	463b      	mov	r3, r7
 80075dc:	4628      	mov	r0, r5
 80075de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075e2:	f000 b817 	b.w	8007614 <_write_r>

080075e6 <__sseek>:
 80075e6:	b510      	push	{r4, lr}
 80075e8:	460c      	mov	r4, r1
 80075ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ee:	f000 f855 	bl	800769c <_lseek_r>
 80075f2:	1c43      	adds	r3, r0, #1
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	bf15      	itete	ne
 80075f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80075fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007602:	81a3      	strheq	r3, [r4, #12]
 8007604:	bf18      	it	ne
 8007606:	81a3      	strhne	r3, [r4, #12]
 8007608:	bd10      	pop	{r4, pc}

0800760a <__sclose>:
 800760a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800760e:	f000 b813 	b.w	8007638 <_close_r>
	...

08007614 <_write_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4d07      	ldr	r5, [pc, #28]	; (8007634 <_write_r+0x20>)
 8007618:	4604      	mov	r4, r0
 800761a:	4608      	mov	r0, r1
 800761c:	4611      	mov	r1, r2
 800761e:	2200      	movs	r2, #0
 8007620:	602a      	str	r2, [r5, #0]
 8007622:	461a      	mov	r2, r3
 8007624:	f7f9 fca8 	bl	8000f78 <_write>
 8007628:	1c43      	adds	r3, r0, #1
 800762a:	d102      	bne.n	8007632 <_write_r+0x1e>
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	b103      	cbz	r3, 8007632 <_write_r+0x1e>
 8007630:	6023      	str	r3, [r4, #0]
 8007632:	bd38      	pop	{r3, r4, r5, pc}
 8007634:	20000930 	.word	0x20000930

08007638 <_close_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4d06      	ldr	r5, [pc, #24]	; (8007654 <_close_r+0x1c>)
 800763c:	2300      	movs	r3, #0
 800763e:	4604      	mov	r4, r0
 8007640:	4608      	mov	r0, r1
 8007642:	602b      	str	r3, [r5, #0]
 8007644:	f7f9 fe01 	bl	800124a <_close>
 8007648:	1c43      	adds	r3, r0, #1
 800764a:	d102      	bne.n	8007652 <_close_r+0x1a>
 800764c:	682b      	ldr	r3, [r5, #0]
 800764e:	b103      	cbz	r3, 8007652 <_close_r+0x1a>
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	bd38      	pop	{r3, r4, r5, pc}
 8007654:	20000930 	.word	0x20000930

08007658 <_fstat_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4d07      	ldr	r5, [pc, #28]	; (8007678 <_fstat_r+0x20>)
 800765c:	2300      	movs	r3, #0
 800765e:	4604      	mov	r4, r0
 8007660:	4608      	mov	r0, r1
 8007662:	4611      	mov	r1, r2
 8007664:	602b      	str	r3, [r5, #0]
 8007666:	f7f9 fdfc 	bl	8001262 <_fstat>
 800766a:	1c43      	adds	r3, r0, #1
 800766c:	d102      	bne.n	8007674 <_fstat_r+0x1c>
 800766e:	682b      	ldr	r3, [r5, #0]
 8007670:	b103      	cbz	r3, 8007674 <_fstat_r+0x1c>
 8007672:	6023      	str	r3, [r4, #0]
 8007674:	bd38      	pop	{r3, r4, r5, pc}
 8007676:	bf00      	nop
 8007678:	20000930 	.word	0x20000930

0800767c <_isatty_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	4d06      	ldr	r5, [pc, #24]	; (8007698 <_isatty_r+0x1c>)
 8007680:	2300      	movs	r3, #0
 8007682:	4604      	mov	r4, r0
 8007684:	4608      	mov	r0, r1
 8007686:	602b      	str	r3, [r5, #0]
 8007688:	f7f9 fdfb 	bl	8001282 <_isatty>
 800768c:	1c43      	adds	r3, r0, #1
 800768e:	d102      	bne.n	8007696 <_isatty_r+0x1a>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	b103      	cbz	r3, 8007696 <_isatty_r+0x1a>
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	bd38      	pop	{r3, r4, r5, pc}
 8007698:	20000930 	.word	0x20000930

0800769c <_lseek_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4d07      	ldr	r5, [pc, #28]	; (80076bc <_lseek_r+0x20>)
 80076a0:	4604      	mov	r4, r0
 80076a2:	4608      	mov	r0, r1
 80076a4:	4611      	mov	r1, r2
 80076a6:	2200      	movs	r2, #0
 80076a8:	602a      	str	r2, [r5, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	f7f9 fdf4 	bl	8001298 <_lseek>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d102      	bne.n	80076ba <_lseek_r+0x1e>
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	b103      	cbz	r3, 80076ba <_lseek_r+0x1e>
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	20000930 	.word	0x20000930

080076c0 <__malloc_lock>:
 80076c0:	4801      	ldr	r0, [pc, #4]	; (80076c8 <__malloc_lock+0x8>)
 80076c2:	f7ff bb15 	b.w	8006cf0 <__retarget_lock_acquire_recursive>
 80076c6:	bf00      	nop
 80076c8:	20000924 	.word	0x20000924

080076cc <__malloc_unlock>:
 80076cc:	4801      	ldr	r0, [pc, #4]	; (80076d4 <__malloc_unlock+0x8>)
 80076ce:	f7ff bb10 	b.w	8006cf2 <__retarget_lock_release_recursive>
 80076d2:	bf00      	nop
 80076d4:	20000924 	.word	0x20000924

080076d8 <_read_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4d07      	ldr	r5, [pc, #28]	; (80076f8 <_read_r+0x20>)
 80076dc:	4604      	mov	r4, r0
 80076de:	4608      	mov	r0, r1
 80076e0:	4611      	mov	r1, r2
 80076e2:	2200      	movs	r2, #0
 80076e4:	602a      	str	r2, [r5, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	f7f9 fd92 	bl	8001210 <_read>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d102      	bne.n	80076f6 <_read_r+0x1e>
 80076f0:	682b      	ldr	r3, [r5, #0]
 80076f2:	b103      	cbz	r3, 80076f6 <_read_r+0x1e>
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	20000930 	.word	0x20000930

080076fc <_init>:
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	bf00      	nop
 8007700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007702:	bc08      	pop	{r3}
 8007704:	469e      	mov	lr, r3
 8007706:	4770      	bx	lr

08007708 <_fini>:
 8007708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770a:	bf00      	nop
 800770c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800770e:	bc08      	pop	{r3}
 8007710:	469e      	mov	lr, r3
 8007712:	4770      	bx	lr
