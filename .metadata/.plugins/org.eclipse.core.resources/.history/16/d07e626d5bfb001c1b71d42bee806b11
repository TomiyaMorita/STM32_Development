
STM32F303_TMC2209_StallGuard_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  0800765c  0800765c  0001765c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bac  08007bac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007bac  08007bac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007bac  08007bac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bac  08007bac  00017bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bb0  08007bb0  00017bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000878  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008e8  200008e8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ab6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002661  00000000  00000000  00031b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  000341b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dd0  00000000  00000000  00035080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d1bb  00000000  00000000  00035e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001225f  00000000  00000000  0005300b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a990b  00000000  00000000  0006526a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010eb75  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045dc  00000000  00000000  0010ebc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007644 	.word	0x08007644

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007644 	.word	0x08007644

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <tmc2209_readWriteArray>:
    if (htim == &htim3){ //htim3に設定したタイマー割り込みの時間で発火する
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);//ピンの出力を切り替え
    }
}*/
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	60b9      	str	r1, [r7, #8]
 8000278:	607a      	str	r2, [r7, #4]
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	4603      	mov	r3, r0
 800027e:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8000280:	480e      	ldr	r0, [pc, #56]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000282:	f004 fe93 	bl	8004fac <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b29a      	uxth	r2, r3
 800028a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800028e:	68b9      	ldr	r1, [r7, #8]
 8000290:	480a      	ldr	r0, [pc, #40]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000292:	f004 f96b 	bl	800456c <HAL_UART_Transmit>
//	HAL_UART_Transmit_IT(&huart1, data, writeLength);


	if(readLength > 0){
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00a      	beq.n	80002b2 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 800029c:	4807      	ldr	r0, [pc, #28]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 800029e:	f004 fed7 	bl	8005050 <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength,3000);
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002aa:	68b9      	ldr	r1, [r7, #8]
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 80002ae:	f004 f9f1 	bl	8004694 <HAL_UART_Receive>
//		HAL_UART_Receive_IT(&huart1, data, readLength);
	}
}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	200000d8 	.word	0x200000d8

080002c0 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 80002ca:	2201      	movs	r2, #1
 80002cc:	6839      	ldr	r1, [r7, #0]
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f005 fe20 	bl	8005f14 <tmc_CRC8>
 80002d4:	4603      	mov	r3, r0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <reset>:

static uint8_t reset()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 80002e4:	4802      	ldr	r0, [pc, #8]	; (80002f0 <reset+0x10>)
 80002e6:	f006 f84d 	bl	8006384 <tmc2209_reset>
 80002ea:	4603      	mov	r3, r0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	200001e0 	.word	0x200001e0

080002f4 <restore>:

static uint8_t restore()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 80002f8:	4802      	ldr	r0, [pc, #8]	; (8000304 <restore+0x10>)
 80002fa:	f006 f87d 	bl	80063f8 <tmc2209_restore>
 80002fe:	4603      	mov	r3, r0
}
 8000300:	4618      	mov	r0, r3
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200001e0 	.word	0x200001e0

08000308 <TMC2209_INIT>:


void TMC2209_INIT()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	2101      	movs	r1, #1
 8000312:	2007      	movs	r0, #7
 8000314:	f005 fd46 	bl	8005da4 <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <TMC2209_INIT+0x38>)
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <TMC2209_INIT+0x3c>)
 800031c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <TMC2209_INIT+0x38>)
 8000322:	4a09      	ldr	r2, [pc, #36]	; (8000348 <TMC2209_INIT+0x40>)
 8000324:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <TMC2209_INIT+0x44>)
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <TMC2209_INIT+0x38>)
 800032e:	2200      	movs	r2, #0
 8000330:	2100      	movs	r1, #0
 8000332:	4807      	ldr	r0, [pc, #28]	; (8000350 <TMC2209_INIT+0x48>)
 8000334:	f005 ff42 	bl	80061bc <tmc2209_init>


	//restore();
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000468 	.word	0x20000468
 8000344:	080002e1 	.word	0x080002e1
 8000348:	080002f5 	.word	0x080002f5
 800034c:	0800785c 	.word	0x0800785c
 8000350:	200001e0 	.word	0x200001e0

08000354 <Step0>:
	//	DIAG_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_DIAG_MASK, TMC2209_DIAG_SHIFT);
	//	printf("DIAG : %ld\r\n", DIAG_value);
	//	tmc2209_periodicJob(&TMC2209, HAL_GetTick());

}
void Step0(){                                       //step pin
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	//pull+

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2120      	movs	r1, #32
 800035c:	4804      	ldr	r0, [pc, #16]	; (8000370 <Step0+0x1c>)
 800035e:	f001 fba3 	bl	8001aa8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000362:	2201      	movs	r2, #1
 8000364:	2120      	movs	r1, #32
 8000366:	4802      	ldr	r0, [pc, #8]	; (8000370 <Step0+0x1c>)
 8000368:	f001 fb9e 	bl	8001aa8 <HAL_GPIO_WritePin>
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	48000400 	.word	0x48000400

08000374 <Dir0>:

void Dir0(int dir){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dir); //Dir0関数にdirピンを指定して格納
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	b2db      	uxtb	r3, r3
 8000380:	461a      	mov	r2, r3
 8000382:	2110      	movs	r1, #16
 8000384:	4803      	ldr	r0, [pc, #12]	; (8000394 <Dir0+0x20>)
 8000386:	f001 fb8f 	bl	8001aa8 <HAL_GPIO_WritePin>
}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	48000400 	.word	0x48000400

08000398 <motorrotate>:

uint8_t remainingstepperFlag = 0;
uint8_t stopflag = 0;
void motorrotate(int absolute_steps){
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	volatile stepperInfo* si = &stepper[0];	//stepper[0]のアドレスをstepperInfo* si に代入
 80003a0:	4b1d      	ldr	r3, [pc, #116]	; (8000418 <motorrotate+0x80>)
 80003a2:	60fb      	str	r3, [r7, #12]
	int steps = absolute_steps - si->stepPosition;
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	1ad3      	subs	r3, r2, r3
 80003ac:	60bb      	str	r3, [r7, #8]
//	printf("steps:%d\r\n",steps);
	if(steps == 0){
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d02c      	beq.n	800040e <motorrotate+0x76>
					return;
				}
	si->dirFunc( steps < 0 ? 1 : 0);	//Dir0のプラスマイナスの判定して0より小さいなら1、大きいなら0をHAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dir)のdirにいれる
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	689b      	ldr	r3, [r3, #8]
 80003b8:	68ba      	ldr	r2, [r7, #8]
 80003ba:	0fd2      	lsrs	r2, r2, #31
 80003bc:	4610      	mov	r0, r2
 80003be:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;			//stepsが0より大きければ1、小さければ２をdirにいれる
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	dd01      	ble.n	80003ca <motorrotate+0x32>
 80003c6:	2201      	movs	r2, #1
 80003c8:	e001      	b.n	80003ce <motorrotate+0x36>
 80003ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	61da      	str	r2, [r3, #28]
	si->totalSteps = abs(steps);	//stepsの値をアブソリュートでtotalstepsに格納
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	bfb8      	it	lt
 80003d8:	425b      	neglt	r3, r3
 80003da:	461a      	mov	r2, r3
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	631a      	str	r2, [r3, #48]	; 0x30
	si->di = si->acceleration;      //変数*siがメンバc0にアクセス.した値に変数*siがメンバaccelerationにアクセス.した値を代入する
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	edd3 7a00 	vldr	s15, [r3]
 80003e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003ea:	ee17 2a90 	vmov	r2, s15
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	645a      	str	r2, [r3, #68]	; 0x44
	si->stepCount = 0;
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	2200      	movs	r2, #0
 80003f6:	649a      	str	r2, [r3, #72]	; 0x48
	si->n = 0;
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	2200      	movs	r2, #0
 80003fc:	63da      	str	r2, [r3, #60]	; 0x3c
//	printf("steps:%d\r\n",steps);
	remainingstepperFlag |= 1;
 80003fe:	4b07      	ldr	r3, [pc, #28]	; (800041c <motorrotate+0x84>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	f043 0301 	orr.w	r3, r3, #1
 8000406:	b2da      	uxtb	r2, r3
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <motorrotate+0x84>)
 800040a:	701a      	strb	r2, [r3, #0]
 800040c:	e000      	b.n	8000410 <motorrotate+0x78>
					return;
 800040e:	bf00      	nop
}
 8000410:	3710      	adds	r7, #16
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	2000067c 	.word	0x2000067c
 800041c:	200006c8 	.word	0x200006c8

08000420 <setNextInterruptInterval>:
volatile uint8_t nextStepperFlag = 0;
void setNextInterruptInterval(){
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
	unsigned int mind = 999999;
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <setNextInterruptInterval+0x70>)
 8000428:	607b      	str	r3, [r7, #4]
	if( (remainingstepperFlag) && stepper[0].di < mind ){
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <setNextInterruptInterval+0x74>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d007      	beq.n	8000442 <setNextInterruptInterval+0x22>
 8000432:	4b19      	ldr	r3, [pc, #100]	; (8000498 <setNextInterruptInterval+0x78>)
 8000434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	429a      	cmp	r2, r3
 800043a:	d902      	bls.n	8000442 <setNextInterruptInterval+0x22>
		mind = stepper[0].di;		//diに格納されているの(acceleration)を読み込む
 800043c:	4b16      	ldr	r3, [pc, #88]	; (8000498 <setNextInterruptInterval+0x78>)
 800043e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000440:	607b      	str	r3, [r7, #4]
	}
	nextStepperFlag = 0;
 8000442:	4b16      	ldr	r3, [pc, #88]	; (800049c <setNextInterruptInterval+0x7c>)
 8000444:	2200      	movs	r2, #0
 8000446:	701a      	strb	r2, [r3, #0]
	if( 1 && stepper[0].di == mind ){
 8000448:	4b13      	ldr	r3, [pc, #76]	; (8000498 <setNextInterruptInterval+0x78>)
 800044a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	429a      	cmp	r2, r3
 8000450:	d107      	bne.n	8000462 <setNextInterruptInterval+0x42>
		nextStepperFlag |= 1;
 8000452:	4b12      	ldr	r3, [pc, #72]	; (800049c <setNextInterruptInterval+0x7c>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	b2da      	uxtb	r2, r3
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <setNextInterruptInterval+0x7c>)
 8000460:	701a      	strb	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);		//mindにコンペアを設定
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <setNextInterruptInterval+0x80>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	635a      	str	r2, [r3, #52]	; 0x34
	if (remainingstepperFlag == 0){
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <setNextInterruptInterval+0x74>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d104      	bne.n	800047c <setNextInterruptInterval+0x5c>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);
 8000472:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <setNextInterruptInterval+0x80>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800047a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <setNextInterruptInterval+0x80>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	635a      	str	r2, [r3, #52]	; 0x34
	//printf("nownompare:%d\r\n",mind);
}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	000f423f 	.word	0x000f423f
 8000494:	200006c8 	.word	0x200006c8
 8000498:	2000067c 	.word	0x2000067c
 800049c:	200006c9 	.word	0x200006c9
 80004a0:	2000008c 	.word	0x2000008c

080004a4 <rotationalprocess>:
void rotationalprocess(){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <rotationalprocess+0x60>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80004b2:	635a      	str	r2, [r3, #52]	; 0x34
//	int32_t current_value = 0;
//	current_value=tmc2209_readInt(&TMC2209, TMC2209_SG_RESULT);	//保持トルクの設定
//	printf("SG_RESULT : %ld\r\n", current_value);
	volatile stepperInfo* s = &stepper[0];
 80004b4:	4b14      	ldr	r3, [pc, #80]	; (8000508 <rotationalprocess+0x64>)
 80004b6:	607b      	str	r3, [r7, #4]
		if( (s->stepCount) < (s->totalSteps) ){		//1周ごとにカウントしたstepCountがabs(steps)より小さかったら==動作が終了するまで
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d21b      	bcs.n	80004fc <rotationalprocess+0x58>
				s->stepFunc();							//stepをOFF ONとする
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	4798      	blx	r3
				s->stepCount++;							//カウント
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004ce:	1c5a      	adds	r2, r3, #1
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	649a      	str	r2, [r3, #72]	; 0x48
				s->stepPosition += s->dir;		//dir(+もしくはー(dirの向き）を加算してstepPositionに格納
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	69da      	ldr	r2, [r3, #28]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	441a      	add	r2, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	619a      	str	r2, [r3, #24]
				if ( (s->stepCount) >= (s->totalSteps) ){	//stepCountがtotalStepsを超えたとき、remainingstepperFlagを
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d306      	bcc.n	80004fc <rotationalprocess+0x58>
					remainingstepperFlag &= ~1;
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <rotationalprocess+0x68>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	f023 0301 	bic.w	r3, r3, #1
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	4b04      	ldr	r3, [pc, #16]	; (800050c <rotationalprocess+0x68>)
 80004fa:	701a      	strb	r2, [r3, #0]
				}
		}
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	2000008c 	.word	0x2000008c
 8000508:	2000067c 	.word	0x2000067c
 800050c:	200006c8 	.word	0x200006c8

08000510 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){      //指定したコンペアを超えた時発火
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
		rotationalprocess();
 8000518:	f7ff ffc4 	bl	80004a4 <rotationalprocess>
		setNextInterruptInterval();
 800051c:	f7ff ff80 	bl	8000420 <setNextInterruptInterval>
		__HAL_TIM_SET_COUNTER(&htim3, 0);			//カウンター0
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <HAL_TIM_OC_DelayElapsedCallback+0x20>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2200      	movs	r2, #0
 8000526:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	2000008c 	.word	0x2000008c

08000534 <runAndWait>:

void runAndWait(){
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	setNextInterruptInterval();
 8000538:	f7ff ff72 	bl	8000420 <setNextInterruptInterval>
	while(remainingstepperFlag);
 800053c:	bf00      	nop
 800053e:	4b03      	ldr	r3, [pc, #12]	; (800054c <runAndWait+0x18>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d1fb      	bne.n	800053e <runAndWait+0xa>
}
 8000546:	bf00      	nop
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	200006c8 	.word	0x200006c8

08000550 <TMCsetup>:
//{
//    if (htim == &htim2){
//		currentcheck();
//    }
//}
void TMCsetup(){
 8000550:	b580      	push	{r7, lr}
 8000552:	b090      	sub	sp, #64	; 0x40
 8000554:	af00      	add	r7, sp, #0
	int32_t mstep_value = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	63fb      	str	r3, [r7, #60]	; 0x3c
		int32_t toff_value = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	63bb      	str	r3, [r7, #56]	; 0x38
		int32_t microstep_value = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	637b      	str	r3, [r7, #52]	; 0x34
		int32_t IRUN_value = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	633b      	str	r3, [r7, #48]	; 0x30
		int32_t IHOLD_value = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	62fb      	str	r3, [r7, #44]	; 0x2c
		int32_t IHOLDDELAY_value= 0;
 800056a:	2300      	movs	r3, #0
 800056c:	62bb      	str	r3, [r7, #40]	; 0x28
		int32_t stallgard_setup_value=0;
 800056e:	2300      	movs	r3, #0
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
		int32_t TCOOLTHRS_value=0;
 8000572:	2300      	movs	r3, #0
 8000574:	623b      	str	r3, [r7, #32]
		int32_t SEMIN_value=0;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
		int32_t SEMAX_value=0;
 800057a:	2300      	movs	r3, #0
 800057c:	61bb      	str	r3, [r7, #24]
		int32_t TBL_value = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
		int32_t stealthChop_value = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
		int32_t autoscale_value = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
		int32_t PWMAuto_value = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
		int32_t PWMAuto_scale = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
		int32_t value = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	603b      	str	r3, [r7, #0]


		IRUN_value = 31;
 8000596:	231f      	movs	r3, #31
 8000598:	633b      	str	r3, [r7, #48]	; 0x30
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, IRUN_value);	//実行電流
 800059a:	2110      	movs	r1, #16
 800059c:	48cb      	ldr	r0, [pc, #812]	; (80008cc <TMCsetup+0x37c>)
 800059e:	f005 fdaa 	bl	80060f6 <tmc2209_readInt>
 80005a2:	4603      	mov	r3, r0
 80005a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80005a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005aa:	021b      	lsls	r3, r3, #8
 80005ac:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80005b0:	4313      	orrs	r3, r2
 80005b2:	461a      	mov	r2, r3
 80005b4:	2110      	movs	r1, #16
 80005b6:	48c5      	ldr	r0, [pc, #788]	; (80008cc <TMCsetup+0x37c>)
 80005b8:	f005 fd4d 	bl	8006056 <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80005bc:	f000 ff4a 	bl	8001454 <HAL_GetTick>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4619      	mov	r1, r3
 80005c4:	48c1      	ldr	r0, [pc, #772]	; (80008cc <TMCsetup+0x37c>)
 80005c6:	f005 fecc 	bl	8006362 <tmc2209_periodicJob>
		HAL_Delay(100);
 80005ca:	2064      	movs	r0, #100	; 0x64
 80005cc:	f000 ff4e 	bl	800146c <HAL_Delay>
		IRUN_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 80005d0:	2110      	movs	r1, #16
 80005d2:	48be      	ldr	r0, [pc, #760]	; (80008cc <TMCsetup+0x37c>)
 80005d4:	f005 fd8f 	bl	80060f6 <tmc2209_readInt>
 80005d8:	4603      	mov	r3, r0
 80005da:	121b      	asrs	r3, r3, #8
 80005dc:	f003 031f 	and.w	r3, r3, #31
 80005e0:	633b      	str	r3, [r7, #48]	; 0x30
		printf("IRUN: %ld\r\n", IRUN_value);
 80005e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80005e4:	48ba      	ldr	r0, [pc, #744]	; (80008d0 <TMCsetup+0x380>)
 80005e6:	f005 ff53 	bl	8006490 <iprintf>

		IHOLD_value= 31;																						//モーター待機時の電流の設定
 80005ea:	231f      	movs	r3, #31
 80005ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, IHOLD_value);
 80005ee:	2110      	movs	r1, #16
 80005f0:	48b6      	ldr	r0, [pc, #728]	; (80008cc <TMCsetup+0x37c>)
 80005f2:	f005 fd80 	bl	80060f6 <tmc2209_readInt>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f023 021f 	bic.w	r2, r3, #31
 80005fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005fe:	f003 031f 	and.w	r3, r3, #31
 8000602:	4313      	orrs	r3, r2
 8000604:	461a      	mov	r2, r3
 8000606:	2110      	movs	r1, #16
 8000608:	48b0      	ldr	r0, [pc, #704]	; (80008cc <TMCsetup+0x37c>)
 800060a:	f005 fd24 	bl	8006056 <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800060e:	f000 ff21 	bl	8001454 <HAL_GetTick>
 8000612:	4603      	mov	r3, r0
 8000614:	4619      	mov	r1, r3
 8000616:	48ad      	ldr	r0, [pc, #692]	; (80008cc <TMCsetup+0x37c>)
 8000618:	f005 fea3 	bl	8006362 <tmc2209_periodicJob>
		HAL_Delay(100);
 800061c:	2064      	movs	r0, #100	; 0x64
 800061e:	f000 ff25 	bl	800146c <HAL_Delay>
		IHOLD_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//保持電流
 8000622:	2110      	movs	r1, #16
 8000624:	48a9      	ldr	r0, [pc, #676]	; (80008cc <TMCsetup+0x37c>)
 8000626:	f005 fd66 	bl	80060f6 <tmc2209_readInt>
 800062a:	4603      	mov	r3, r0
 800062c:	f003 031f 	and.w	r3, r3, #31
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c
		printf("IHOLD: %ld\r\n", IHOLD_value);
 8000632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000634:	48a7      	ldr	r0, [pc, #668]	; (80008d4 <TMCsetup+0x384>)
 8000636:	f005 ff2b 	bl	8006490 <iprintf>

		value=0;
 800063a:	2300      	movs	r3, #0
 800063c:	603b      	str	r3, [r7, #0]
		value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK,TMC2209_PDN_DISABLE_SHIFT);
 800063e:	2100      	movs	r1, #0
 8000640:	48a2      	ldr	r0, [pc, #648]	; (80008cc <TMCsetup+0x37c>)
 8000642:	f005 fd58 	bl	80060f6 <tmc2209_readInt>
 8000646:	4603      	mov	r3, r0
 8000648:	119b      	asrs	r3, r3, #6
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	603b      	str	r3, [r7, #0]
		printf("pdn_disable : %ld\r\n", value);
 8000650:	6839      	ldr	r1, [r7, #0]
 8000652:	48a1      	ldr	r0, [pc, #644]	; (80008d8 <TMCsetup+0x388>)
 8000654:	f005 ff1c 	bl	8006490 <iprintf>
		value = 1;
 8000658:	2301      	movs	r3, #1
 800065a:	603b      	str	r3, [r7, #0]
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK, TMC2209_PDN_DISABLE_SHIFT, value);
 800065c:	2100      	movs	r1, #0
 800065e:	489b      	ldr	r0, [pc, #620]	; (80008cc <TMCsetup+0x37c>)
 8000660:	f005 fd49 	bl	80060f6 <tmc2209_readInt>
 8000664:	4603      	mov	r3, r0
 8000666:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	019b      	lsls	r3, r3, #6
 800066e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000672:	4313      	orrs	r3, r2
 8000674:	461a      	mov	r2, r3
 8000676:	2100      	movs	r1, #0
 8000678:	4894      	ldr	r0, [pc, #592]	; (80008cc <TMCsetup+0x37c>)
 800067a:	f005 fcec 	bl	8006056 <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800067e:	f000 fee9 	bl	8001454 <HAL_GetTick>
 8000682:	4603      	mov	r3, r0
 8000684:	4619      	mov	r1, r3
 8000686:	4891      	ldr	r0, [pc, #580]	; (80008cc <TMCsetup+0x37c>)
 8000688:	f005 fe6b 	bl	8006362 <tmc2209_periodicJob>
		value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK, TMC2209_PDN_DISABLE_SHIFT);
 800068c:	2100      	movs	r1, #0
 800068e:	488f      	ldr	r0, [pc, #572]	; (80008cc <TMCsetup+0x37c>)
 8000690:	f005 fd31 	bl	80060f6 <tmc2209_readInt>
 8000694:	4603      	mov	r3, r0
 8000696:	119b      	asrs	r3, r3, #6
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	603b      	str	r3, [r7, #0]
		printf("pdn_disable : %ld\r\n", value);
 800069e:	6839      	ldr	r1, [r7, #0]
 80006a0:	488d      	ldr	r0, [pc, #564]	; (80008d8 <TMCsetup+0x388>)
 80006a2:	f005 fef5 	bl	8006490 <iprintf>

		value=0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
		value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK,TMC2209_EN_SPREADCYCLE_SHIFT);
 80006aa:	2100      	movs	r1, #0
 80006ac:	4887      	ldr	r0, [pc, #540]	; (80008cc <TMCsetup+0x37c>)
 80006ae:	f005 fd22 	bl	80060f6 <tmc2209_readInt>
 80006b2:	4603      	mov	r3, r0
 80006b4:	109b      	asrs	r3, r3, #2
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	603b      	str	r3, [r7, #0]
		printf("pdn_disable : %ld\r\n", value);
 80006bc:	6839      	ldr	r1, [r7, #0]
 80006be:	4886      	ldr	r0, [pc, #536]	; (80008d8 <TMCsetup+0x388>)
 80006c0:	f005 fee6 	bl	8006490 <iprintf>
		value = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	603b      	str	r3, [r7, #0]
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK, TMC2209_EN_SPREADCYCLE_SHIFT ,value);
 80006c8:	2100      	movs	r1, #0
 80006ca:	4880      	ldr	r0, [pc, #512]	; (80008cc <TMCsetup+0x37c>)
 80006cc:	f005 fd13 	bl	80060f6 <tmc2209_readInt>
 80006d0:	4603      	mov	r3, r0
 80006d2:	f023 0204 	bic.w	r2, r3, #4
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	4313      	orrs	r3, r2
 80006e0:	461a      	mov	r2, r3
 80006e2:	2100      	movs	r1, #0
 80006e4:	4879      	ldr	r0, [pc, #484]	; (80008cc <TMCsetup+0x37c>)
 80006e6:	f005 fcb6 	bl	8006056 <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80006ea:	f000 feb3 	bl	8001454 <HAL_GetTick>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4619      	mov	r1, r3
 80006f2:	4876      	ldr	r0, [pc, #472]	; (80008cc <TMCsetup+0x37c>)
 80006f4:	f005 fe35 	bl	8006362 <tmc2209_periodicJob>
		value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK, TMC2209_PDN_DISABLE_SHIFT);
 80006f8:	2100      	movs	r1, #0
 80006fa:	4874      	ldr	r0, [pc, #464]	; (80008cc <TMCsetup+0x37c>)
 80006fc:	f005 fcfb 	bl	80060f6 <tmc2209_readInt>
 8000700:	4603      	mov	r3, r0
 8000702:	119b      	asrs	r3, r3, #6
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	603b      	str	r3, [r7, #0]
		printf("pdn_disable : %ld\r\n", value);
 800070a:	6839      	ldr	r1, [r7, #0]
 800070c:	4872      	ldr	r0, [pc, #456]	; (80008d8 <TMCsetup+0x388>)
 800070e:	f005 febf 	bl	8006490 <iprintf>

		value=0;
 8000712:	2300      	movs	r3, #0
 8000714:	603b      	str	r3, [r7, #0]
		value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK,TMC2209_INTERNAL_RSENSE_SHIFT);
 8000716:	2100      	movs	r1, #0
 8000718:	486c      	ldr	r0, [pc, #432]	; (80008cc <TMCsetup+0x37c>)
 800071a:	f005 fcec 	bl	80060f6 <tmc2209_readInt>
 800071e:	4603      	mov	r3, r0
 8000720:	105b      	asrs	r3, r3, #1
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	603b      	str	r3, [r7, #0]
		printf("RSENSE : %ld\r\n", value);
 8000728:	6839      	ldr	r1, [r7, #0]
 800072a:	486c      	ldr	r0, [pc, #432]	; (80008dc <TMCsetup+0x38c>)
 800072c:	f005 feb0 	bl	8006490 <iprintf>
		value = 1;
 8000730:	2301      	movs	r3, #1
 8000732:	603b      	str	r3, [r7, #0]
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK, TMC2209_INTERNAL_RSENSE_SHIFT, value);
 8000734:	2100      	movs	r1, #0
 8000736:	4865      	ldr	r0, [pc, #404]	; (80008cc <TMCsetup+0x37c>)
 8000738:	f005 fcdd 	bl	80060f6 <tmc2209_readInt>
 800073c:	4603      	mov	r3, r0
 800073e:	f023 0202 	bic.w	r2, r3, #2
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	4313      	orrs	r3, r2
 800074c:	461a      	mov	r2, r3
 800074e:	2100      	movs	r1, #0
 8000750:	485e      	ldr	r0, [pc, #376]	; (80008cc <TMCsetup+0x37c>)
 8000752:	f005 fc80 	bl	8006056 <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000756:	f000 fe7d 	bl	8001454 <HAL_GetTick>
 800075a:	4603      	mov	r3, r0
 800075c:	4619      	mov	r1, r3
 800075e:	485b      	ldr	r0, [pc, #364]	; (80008cc <TMCsetup+0x37c>)
 8000760:	f005 fdff 	bl	8006362 <tmc2209_periodicJob>
		value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK, TMC2209_INTERNAL_RSENSE_SHIFT);
 8000764:	2100      	movs	r1, #0
 8000766:	4859      	ldr	r0, [pc, #356]	; (80008cc <TMCsetup+0x37c>)
 8000768:	f005 fcc5 	bl	80060f6 <tmc2209_readInt>
 800076c:	4603      	mov	r3, r0
 800076e:	105b      	asrs	r3, r3, #1
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	603b      	str	r3, [r7, #0]
		printf("RSENSE : %ld\r\n", value);
 8000776:	6839      	ldr	r1, [r7, #0]
 8000778:	4858      	ldr	r0, [pc, #352]	; (80008dc <TMCsetup+0x38c>)
 800077a:	f005 fe89 	bl	8006490 <iprintf>

		mstep_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK,TMC2209_MSTEP_REG_SELECT_SHIFT);	//uartでのmicrostepの有効化
 800077e:	2100      	movs	r1, #0
 8000780:	4852      	ldr	r0, [pc, #328]	; (80008cc <TMCsetup+0x37c>)
 8000782:	f005 fcb8 	bl	80060f6 <tmc2209_readInt>
 8000786:	4603      	mov	r3, r0
 8000788:	11db      	asrs	r3, r3, #7
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
		printf("mstep_before : %ld\r\n", mstep_value);
 8000790:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000792:	4853      	ldr	r0, [pc, #332]	; (80008e0 <TMCsetup+0x390>)
 8000794:	f005 fe7c 	bl	8006490 <iprintf>
		mstep_value = 1;
 8000798:	2301      	movs	r3, #1
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT,mstep_value);
 800079c:	2100      	movs	r1, #0
 800079e:	484b      	ldr	r0, [pc, #300]	; (80008cc <TMCsetup+0x37c>)
 80007a0:	f005 fca9 	bl	80060f6 <tmc2209_readInt>
 80007a4:	4603      	mov	r3, r0
 80007a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80007aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007ac:	01db      	lsls	r3, r3, #7
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4313      	orrs	r3, r2
 80007b2:	461a      	mov	r2, r3
 80007b4:	2100      	movs	r1, #0
 80007b6:	4845      	ldr	r0, [pc, #276]	; (80008cc <TMCsetup+0x37c>)
 80007b8:	f005 fc4d 	bl	8006056 <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80007bc:	f000 fe4a 	bl	8001454 <HAL_GetTick>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4619      	mov	r1, r3
 80007c4:	4841      	ldr	r0, [pc, #260]	; (80008cc <TMCsetup+0x37c>)
 80007c6:	f005 fdcc 	bl	8006362 <tmc2209_periodicJob>
		mstep_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT);
 80007ca:	2100      	movs	r1, #0
 80007cc:	483f      	ldr	r0, [pc, #252]	; (80008cc <TMCsetup+0x37c>)
 80007ce:	f005 fc92 	bl	80060f6 <tmc2209_readInt>
 80007d2:	4603      	mov	r3, r0
 80007d4:	11db      	asrs	r3, r3, #7
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
		printf("mstep_after : %ld\r\n", mstep_value);
 80007dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80007de:	4841      	ldr	r0, [pc, #260]	; (80008e4 <TMCsetup+0x394>)
 80007e0:	f005 fe56 	bl	8006490 <iprintf>

		toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);	//保持トルクの設定
 80007e4:	216c      	movs	r1, #108	; 0x6c
 80007e6:	4839      	ldr	r0, [pc, #228]	; (80008cc <TMCsetup+0x37c>)
 80007e8:	f005 fc85 	bl	80060f6 <tmc2209_readInt>
 80007ec:	4603      	mov	r3, r0
 80007ee:	f003 030f 	and.w	r3, r3, #15
 80007f2:	63bb      	str	r3, [r7, #56]	; 0x38
		printf("toff_before : %ld\r\n", toff_value);
 80007f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80007f6:	483c      	ldr	r0, [pc, #240]	; (80008e8 <TMCsetup+0x398>)
 80007f8:	f005 fe4a 	bl	8006490 <iprintf>
		toff_value = 3;
 80007fc:	2303      	movs	r3, #3
 80007fe:	63bb      	str	r3, [r7, #56]	; 0x38
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,toff_value);
 8000800:	216c      	movs	r1, #108	; 0x6c
 8000802:	4832      	ldr	r0, [pc, #200]	; (80008cc <TMCsetup+0x37c>)
 8000804:	f005 fc77 	bl	80060f6 <tmc2209_readInt>
 8000808:	4603      	mov	r3, r0
 800080a:	f023 020f 	bic.w	r2, r3, #15
 800080e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000810:	f003 030f 	and.w	r3, r3, #15
 8000814:	4313      	orrs	r3, r2
 8000816:	461a      	mov	r2, r3
 8000818:	216c      	movs	r1, #108	; 0x6c
 800081a:	482c      	ldr	r0, [pc, #176]	; (80008cc <TMCsetup+0x37c>)
 800081c:	f005 fc1b 	bl	8006056 <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000820:	f000 fe18 	bl	8001454 <HAL_GetTick>
 8000824:	4603      	mov	r3, r0
 8000826:	4619      	mov	r1, r3
 8000828:	4828      	ldr	r0, [pc, #160]	; (80008cc <TMCsetup+0x37c>)
 800082a:	f005 fd9a 	bl	8006362 <tmc2209_periodicJob>
		toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 800082e:	216c      	movs	r1, #108	; 0x6c
 8000830:	4826      	ldr	r0, [pc, #152]	; (80008cc <TMCsetup+0x37c>)
 8000832:	f005 fc60 	bl	80060f6 <tmc2209_readInt>
 8000836:	4603      	mov	r3, r0
 8000838:	f003 030f 	and.w	r3, r3, #15
 800083c:	63bb      	str	r3, [r7, #56]	; 0x38
		printf("toff_after : %ld\r\n", toff_value);
 800083e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000840:	482a      	ldr	r0, [pc, #168]	; (80008ec <TMCsetup+0x39c>)
 8000842:	f005 fe25 	bl	8006490 <iprintf>

		microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);	//microstepの設定
 8000846:	216c      	movs	r1, #108	; 0x6c
 8000848:	4820      	ldr	r0, [pc, #128]	; (80008cc <TMCsetup+0x37c>)
 800084a:	f005 fc54 	bl	80060f6 <tmc2209_readInt>
 800084e:	4603      	mov	r3, r0
 8000850:	161b      	asrs	r3, r3, #24
 8000852:	f003 030f 	and.w	r3, r3, #15
 8000856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800085a:	fa42 f303 	asr.w	r3, r2, r3
 800085e:	637b      	str	r3, [r7, #52]	; 0x34
		printf("microstep_before : %ld\r\n", microstep_value);
 8000860:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000862:	4823      	ldr	r0, [pc, #140]	; (80008f0 <TMCsetup+0x3a0>)
 8000864:	f005 fe14 	bl	8006490 <iprintf>
		microstep_value = 4;
 8000868:	2304      	movs	r3, #4
 800086a:	637b      	str	r3, [r7, #52]	; 0x34
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT,microstep_value);
 800086c:	216c      	movs	r1, #108	; 0x6c
 800086e:	4817      	ldr	r0, [pc, #92]	; (80008cc <TMCsetup+0x37c>)
 8000870:	f005 fc41 	bl	80060f6 <tmc2209_readInt>
 8000874:	4603      	mov	r3, r0
 8000876:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800087a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800087c:	061b      	lsls	r3, r3, #24
 800087e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000882:	4313      	orrs	r3, r2
 8000884:	461a      	mov	r2, r3
 8000886:	216c      	movs	r1, #108	; 0x6c
 8000888:	4810      	ldr	r0, [pc, #64]	; (80008cc <TMCsetup+0x37c>)
 800088a:	f005 fbe4 	bl	8006056 <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800088e:	f000 fde1 	bl	8001454 <HAL_GetTick>
 8000892:	4603      	mov	r3, r0
 8000894:	4619      	mov	r1, r3
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <TMCsetup+0x37c>)
 8000898:	f005 fd63 	bl	8006362 <tmc2209_periodicJob>
		microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 800089c:	216c      	movs	r1, #108	; 0x6c
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <TMCsetup+0x37c>)
 80008a0:	f005 fc29 	bl	80060f6 <tmc2209_readInt>
 80008a4:	4603      	mov	r3, r0
 80008a6:	161b      	asrs	r3, r3, #24
 80008a8:	f003 030f 	and.w	r3, r3, #15
 80008ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b0:	fa42 f303 	asr.w	r3, r2, r3
 80008b4:	637b      	str	r3, [r7, #52]	; 0x34
		printf("microstep_after : %ld\r\n", microstep_value);
 80008b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80008b8:	480e      	ldr	r0, [pc, #56]	; (80008f4 <TMCsetup+0x3a4>)
 80008ba:	f005 fde9 	bl	8006490 <iprintf>

		IHOLDDELAY_value=4;
 80008be:	2304      	movs	r3, #4
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT, IHOLDDELAY_value);
 80008c2:	2110      	movs	r1, #16
 80008c4:	4801      	ldr	r0, [pc, #4]	; (80008cc <TMCsetup+0x37c>)
 80008c6:	f005 fc16 	bl	80060f6 <tmc2209_readInt>
 80008ca:	e015      	b.n	80008f8 <TMCsetup+0x3a8>
 80008cc:	200001e0 	.word	0x200001e0
 80008d0:	0800767c 	.word	0x0800767c
 80008d4:	08007688 	.word	0x08007688
 80008d8:	08007698 	.word	0x08007698
 80008dc:	080076ac 	.word	0x080076ac
 80008e0:	080076bc 	.word	0x080076bc
 80008e4:	080076d4 	.word	0x080076d4
 80008e8:	080076e8 	.word	0x080076e8
 80008ec:	080076fc 	.word	0x080076fc
 80008f0:	08007710 	.word	0x08007710
 80008f4:	0800772c 	.word	0x0800772c
 80008f8:	4603      	mov	r3, r0
 80008fa:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80008fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000900:	041b      	lsls	r3, r3, #16
 8000902:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000906:	4313      	orrs	r3, r2
 8000908:	461a      	mov	r2, r3
 800090a:	2110      	movs	r1, #16
 800090c:	486c      	ldr	r0, [pc, #432]	; (8000ac0 <TMCsetup+0x570>)
 800090e:	f005 fba2 	bl	8006056 <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000912:	f000 fd9f 	bl	8001454 <HAL_GetTick>
 8000916:	4603      	mov	r3, r0
 8000918:	4619      	mov	r1, r3
 800091a:	4869      	ldr	r0, [pc, #420]	; (8000ac0 <TMCsetup+0x570>)
 800091c:	f005 fd21 	bl	8006362 <tmc2209_periodicJob>
		IHOLDDELAY_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT);
 8000920:	2110      	movs	r1, #16
 8000922:	4867      	ldr	r0, [pc, #412]	; (8000ac0 <TMCsetup+0x570>)
 8000924:	f005 fbe7 	bl	80060f6 <tmc2209_readInt>
 8000928:	4603      	mov	r3, r0
 800092a:	141b      	asrs	r3, r3, #16
 800092c:	f003 030f 	and.w	r3, r3, #15
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
		printf("IHOLDDELAY: %ld\r\n", IHOLDDELAY_value);
 8000932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000934:	4863      	ldr	r0, [pc, #396]	; (8000ac4 <TMCsetup+0x574>)
 8000936:	f005 fdab 	bl	8006490 <iprintf>

		stallgard_setup_value=20;											//SG_RESULTと比較して、
 800093a:	2314      	movs	r3, #20
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
		tmc2209_writeInt(&TMC2209, TMC2209_SGTHRS, stallgard_setup_value);
 800093e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000940:	2140      	movs	r1, #64	; 0x40
 8000942:	485f      	ldr	r0, [pc, #380]	; (8000ac0 <TMCsetup+0x570>)
 8000944:	f005 fb87 	bl	8006056 <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000948:	f000 fd84 	bl	8001454 <HAL_GetTick>
 800094c:	4603      	mov	r3, r0
 800094e:	4619      	mov	r1, r3
 8000950:	485b      	ldr	r0, [pc, #364]	; (8000ac0 <TMCsetup+0x570>)
 8000952:	f005 fd06 	bl	8006362 <tmc2209_periodicJob>
		stallgard_setup_value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
 8000956:	2140      	movs	r1, #64	; 0x40
 8000958:	4859      	ldr	r0, [pc, #356]	; (8000ac0 <TMCsetup+0x570>)
 800095a:	f005 fbcc 	bl	80060f6 <tmc2209_readInt>
 800095e:	6278      	str	r0, [r7, #36]	; 0x24
		printf("SGTHRS: %ld\r\n", stallgard_setup_value);
 8000960:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000962:	4859      	ldr	r0, [pc, #356]	; (8000ac8 <TMCsetup+0x578>)
 8000964:	f005 fd94 	bl	8006490 <iprintf>

		TCOOLTHRS_value=1000;
 8000968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096c:	623b      	str	r3, [r7, #32]

		tmc2209_writeInt(&TMC2209, TMC2209_TCOOLTHRS, TCOOLTHRS_value);
 800096e:	6a3a      	ldr	r2, [r7, #32]
 8000970:	2114      	movs	r1, #20
 8000972:	4853      	ldr	r0, [pc, #332]	; (8000ac0 <TMCsetup+0x570>)
 8000974:	f005 fb6f 	bl	8006056 <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000978:	f000 fd6c 	bl	8001454 <HAL_GetTick>
 800097c:	4603      	mov	r3, r0
 800097e:	4619      	mov	r1, r3
 8000980:	484f      	ldr	r0, [pc, #316]	; (8000ac0 <TMCsetup+0x570>)
 8000982:	f005 fcee 	bl	8006362 <tmc2209_periodicJob>
		printf("TCOOLTHRS: %ld\r\n", TCOOLTHRS_value);
 8000986:	6a39      	ldr	r1, [r7, #32]
 8000988:	4850      	ldr	r0, [pc, #320]	; (8000acc <TMCsetup+0x57c>)
 800098a:	f005 fd81 	bl	8006490 <iprintf>

		SEMIN_value=5;
 800098e:	2305      	movs	r3, #5
 8000990:	61fb      	str	r3, [r7, #28]
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT, SEMIN_value);
 8000992:	2142      	movs	r1, #66	; 0x42
 8000994:	484a      	ldr	r0, [pc, #296]	; (8000ac0 <TMCsetup+0x570>)
 8000996:	f005 fbae 	bl	80060f6 <tmc2209_readInt>
 800099a:	4603      	mov	r3, r0
 800099c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	03db      	lsls	r3, r3, #15
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	4313      	orrs	r3, r2
 80009a8:	461a      	mov	r2, r3
 80009aa:	2142      	movs	r1, #66	; 0x42
 80009ac:	4844      	ldr	r0, [pc, #272]	; (8000ac0 <TMCsetup+0x570>)
 80009ae:	f005 fb52 	bl	8006056 <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80009b2:	f000 fd4f 	bl	8001454 <HAL_GetTick>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4619      	mov	r1, r3
 80009ba:	4841      	ldr	r0, [pc, #260]	; (8000ac0 <TMCsetup+0x570>)
 80009bc:	f005 fcd1 	bl	8006362 <tmc2209_periodicJob>
		printf("SEMIN: %ld\r\n", SEMIN_value);
 80009c0:	69f9      	ldr	r1, [r7, #28]
 80009c2:	4843      	ldr	r0, [pc, #268]	; (8000ad0 <TMCsetup+0x580>)
 80009c4:	f005 fd64 	bl	8006490 <iprintf>

		SEMAX_value = 2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61bb      	str	r3, [r7, #24]
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT, SEMIN_value);
 80009cc:	2142      	movs	r1, #66	; 0x42
 80009ce:	483c      	ldr	r0, [pc, #240]	; (8000ac0 <TMCsetup+0x570>)
 80009d0:	f005 fb91 	bl	80060f6 <tmc2209_readInt>
 80009d4:	4603      	mov	r3, r0
 80009d6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	03db      	lsls	r3, r3, #15
 80009de:	b29b      	uxth	r3, r3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	461a      	mov	r2, r3
 80009e4:	2142      	movs	r1, #66	; 0x42
 80009e6:	4836      	ldr	r0, [pc, #216]	; (8000ac0 <TMCsetup+0x570>)
 80009e8:	f005 fb35 	bl	8006056 <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80009ec:	f000 fd32 	bl	8001454 <HAL_GetTick>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4619      	mov	r1, r3
 80009f4:	4832      	ldr	r0, [pc, #200]	; (8000ac0 <TMCsetup+0x570>)
 80009f6:	f005 fcb4 	bl	8006362 <tmc2209_periodicJob>
		printf("SEMAX: %ld\r\n", SEMAX_value);
 80009fa:	69b9      	ldr	r1, [r7, #24]
 80009fc:	4835      	ldr	r0, [pc, #212]	; (8000ad4 <TMCsetup+0x584>)
 80009fe:	f005 fd47 	bl	8006490 <iprintf>

		TBL_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT);
 8000a02:	216c      	movs	r1, #108	; 0x6c
 8000a04:	482e      	ldr	r0, [pc, #184]	; (8000ac0 <TMCsetup+0x570>)
 8000a06:	f005 fb76 	bl	80060f6 <tmc2209_readInt>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	13db      	asrs	r3, r3, #15
 8000a0e:	f003 0303 	and.w	r3, r3, #3
 8000a12:	617b      	str	r3, [r7, #20]
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000a14:	f000 fd1e 	bl	8001454 <HAL_GetTick>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4828      	ldr	r0, [pc, #160]	; (8000ac0 <TMCsetup+0x570>)
 8000a1e:	f005 fca0 	bl	8006362 <tmc2209_periodicJob>
		printf("TBL: %ld\r\n", TBL_value);
 8000a22:	6979      	ldr	r1, [r7, #20]
 8000a24:	482c      	ldr	r0, [pc, #176]	; (8000ad8 <TMCsetup+0x588>)
 8000a26:	f005 fd33 	bl	8006490 <iprintf>

		stealthChop_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT);
 8000a2a:	2170      	movs	r1, #112	; 0x70
 8000a2c:	4824      	ldr	r0, [pc, #144]	; (8000ac0 <TMCsetup+0x570>)
 8000a2e:	f005 fb62 	bl	80060f6 <tmc2209_readInt>
 8000a32:	4603      	mov	r3, r0
 8000a34:	121b      	asrs	r3, r3, #8
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	613b      	str	r3, [r7, #16]
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000a3a:	f000 fd0b 	bl	8001454 <HAL_GetTick>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4619      	mov	r1, r3
 8000a42:	481f      	ldr	r0, [pc, #124]	; (8000ac0 <TMCsetup+0x570>)
 8000a44:	f005 fc8d 	bl	8006362 <tmc2209_periodicJob>
		printf("stealthChop: %ld\r\n", stealthChop_value);
 8000a48:	6939      	ldr	r1, [r7, #16]
 8000a4a:	4824      	ldr	r0, [pc, #144]	; (8000adc <TMCsetup+0x58c>)
 8000a4c:	f005 fd20 	bl	8006490 <iprintf>

		autoscale_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_AUTOSCALE_MASK, TMC2209_PWM_AUTOSCALE_SHIFT);
 8000a50:	2170      	movs	r1, #112	; 0x70
 8000a52:	481b      	ldr	r0, [pc, #108]	; (8000ac0 <TMCsetup+0x570>)
 8000a54:	f005 fb4f 	bl	80060f6 <tmc2209_readInt>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	149b      	asrs	r3, r3, #18
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000a62:	f000 fcf7 	bl	8001454 <HAL_GetTick>
 8000a66:	4603      	mov	r3, r0
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4815      	ldr	r0, [pc, #84]	; (8000ac0 <TMCsetup+0x570>)
 8000a6c:	f005 fc79 	bl	8006362 <tmc2209_periodicJob>
		printf("autoscale: %ld\r\n", autoscale_value);
 8000a70:	68f9      	ldr	r1, [r7, #12]
 8000a72:	481b      	ldr	r0, [pc, #108]	; (8000ae0 <TMCsetup+0x590>)
 8000a74:	f005 fd0c 	bl	8006490 <iprintf>

		PWMAuto_value = tmc2209_readInt(&TMC2209,TMC2209_PWM_AUTO);
 8000a78:	2172      	movs	r1, #114	; 0x72
 8000a7a:	4811      	ldr	r0, [pc, #68]	; (8000ac0 <TMCsetup+0x570>)
 8000a7c:	f005 fb3b 	bl	80060f6 <tmc2209_readInt>
 8000a80:	60b8      	str	r0, [r7, #8]
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000a82:	f000 fce7 	bl	8001454 <HAL_GetTick>
 8000a86:	4603      	mov	r3, r0
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <TMCsetup+0x570>)
 8000a8c:	f005 fc69 	bl	8006362 <tmc2209_periodicJob>
		printf("PWMAuto: %ld\r\n", PWMAuto_value);
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	4814      	ldr	r0, [pc, #80]	; (8000ae4 <TMCsetup+0x594>)
 8000a94:	f005 fcfc 	bl	8006490 <iprintf>

		PWMAuto_scale = tmc2209_readInt(&TMC2209,TMC2209_PWMSCALE);
 8000a98:	2171      	movs	r1, #113	; 0x71
 8000a9a:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <TMCsetup+0x570>)
 8000a9c:	f005 fb2b 	bl	80060f6 <tmc2209_readInt>
 8000aa0:	6078      	str	r0, [r7, #4]
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000aa2:	f000 fcd7 	bl	8001454 <HAL_GetTick>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <TMCsetup+0x570>)
 8000aac:	f005 fc59 	bl	8006362 <tmc2209_periodicJob>
		printf("PWMSCALE: %ld\r\n", PWMAuto_scale);
 8000ab0:	6879      	ldr	r1, [r7, #4]
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <TMCsetup+0x598>)
 8000ab4:	f005 fcec 	bl	8006490 <iprintf>
}
 8000ab8:	bf00      	nop
 8000aba:	3740      	adds	r7, #64	; 0x40
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200001e0 	.word	0x200001e0
 8000ac4:	08007744 	.word	0x08007744
 8000ac8:	08007758 	.word	0x08007758
 8000acc:	08007768 	.word	0x08007768
 8000ad0:	0800777c 	.word	0x0800777c
 8000ad4:	0800778c 	.word	0x0800778c
 8000ad8:	0800779c 	.word	0x0800779c
 8000adc:	080077a8 	.word	0x080077a8
 8000ae0:	080077bc 	.word	0x080077bc
 8000ae4:	080077d0 	.word	0x080077d0
 8000ae8:	080077e0 	.word	0x080077e0

08000aec <HAL_UART_RxCpltCallback>:

uint8_t uartflag1=0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	//int32_t SGTHRS_value = 0;
	uartflag1 = 1;
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <HAL_UART_RxCpltCallback+0x1c>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
	printf("uart_timer\r\n");
 8000afa:	4804      	ldr	r0, [pc, #16]	; (8000b0c <HAL_UART_RxCpltCallback+0x20>)
 8000afc:	f005 fd4e 	bl	800659c <puts>
	//HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
	//SGTHRS_value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
	//currentdata();
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200006ca 	.word	0x200006ca
 8000b0c:	080077f0 	.word	0x080077f0

08000b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b10:	b5b0      	push	{r4, r5, r7, lr}
 8000b12:	b092      	sub	sp, #72	; 0x48
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000b16:	4b4d      	ldr	r3, [pc, #308]	; (8000c4c <main+0x13c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f005 fd44 	bl	80065ac <setbuf>
	//uint8_t buffer[256];
	//char rxbuf[1];
	char start[] ="1:front,2:back\r\n";
 8000b24:	4b4a      	ldr	r3, [pc, #296]	; (8000c50 <main+0x140>)
 8000b26:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000b2a:	461d      	mov	r5, r3
 8000b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b30:	682b      	ldr	r3, [r5, #0]
 8000b32:	7023      	strb	r3, [r4, #0]
	char front[] ="front turn\r\n";
 8000b34:	4b47      	ldr	r3, [pc, #284]	; (8000c54 <main+0x144>)
 8000b36:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000b3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b3c:	c407      	stmia	r4!, {r0, r1, r2}
 8000b3e:	7023      	strb	r3, [r4, #0]
	char back[] ="back turn\r\n";
 8000b40:	4a45      	ldr	r2, [pc, #276]	; (8000c58 <main+0x148>)
 8000b42:	f107 0318 	add.w	r3, r7, #24
 8000b46:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char nonans[] ="Not Understand \r\n";
 8000b4c:	4b43      	ldr	r3, [pc, #268]	; (8000c5c <main+0x14c>)
 8000b4e:	1d3c      	adds	r4, r7, #4
 8000b50:	461d      	mov	r5, r3
 8000b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b56:	682b      	ldr	r3, [r5, #0]
 8000b58:	8023      	strh	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5a:	f000 fc21 	bl	80013a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5e:	f000 f893 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b62:	f000 f9bf 	bl	8000ee4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b66:	f000 f98d 	bl	8000e84 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000b6a:	f000 f95b 	bl	8000e24 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000b6e:	f000 f8e3 	bl	8000d38 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //int getserial=0;
  TMC2209_INIT();
 8000b72:	f7ff fbc9 	bl	8000308 <TMC2209_INIT>
  TMCsetup();
 8000b76:	f7ff fceb 	bl	8000550 <TMCsetup>
  printf("Hello\r\n");
 8000b7a:	4839      	ldr	r0, [pc, #228]	; (8000c60 <main+0x150>)
 8000b7c:	f005 fd0e 	bl	800659c <puts>
  HAL_UART_Transmit(&huart2,(uint8_t *)start,sizeof(start),3000);
 8000b80:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000b84:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b88:	2211      	movs	r2, #17
 8000b8a:	4836      	ldr	r0, [pc, #216]	; (8000c64 <main+0x154>)
 8000b8c:	f003 fcee 	bl	800456c <HAL_UART_Transmit>
  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000b90:	2100      	movs	r1, #0
 8000b92:	4835      	ldr	r0, [pc, #212]	; (8000c68 <main+0x158>)
 8000b94:	f002 fc16 	bl	80033c4 <HAL_TIM_OC_Start_IT>


  stepper[0].dirFunc = Dir0;
 8000b98:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <main+0x15c>)
 8000b9a:	4a35      	ldr	r2, [pc, #212]	; (8000c70 <main+0x160>)
 8000b9c:	609a      	str	r2, [r3, #8]
  stepper[0].stepFunc = Step0;
 8000b9e:	4b33      	ldr	r3, [pc, #204]	; (8000c6c <main+0x15c>)
 8000ba0:	4a34      	ldr	r2, [pc, #208]	; (8000c74 <main+0x164>)
 8000ba2:	60da      	str	r2, [r3, #12]
  stepper[0].acceleration = 100-1;
 8000ba4:	4b31      	ldr	r3, [pc, #196]	; (8000c6c <main+0x15c>)
 8000ba6:	4a34      	ldr	r2, [pc, #208]	; (8000c78 <main+0x168>)
 8000ba8:	601a      	str	r2, [r3, #0]
  stepper[0].minStepInterval = 100;
 8000baa:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <main+0x15c>)
 8000bac:	2264      	movs	r2, #100	; 0x64
 8000bae:	605a      	str	r2, [r3, #4]
  stepper[0].homing = 0;
 8000bb0:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <main+0x15c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	741a      	strb	r2, [r3, #16]
  stepper[0].dir_inv = 1;
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <main+0x15c>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	621a      	str	r2, [r3, #32]
  stepper[0].seeking_vel = 100;
 8000bbc:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <main+0x15c>)
 8000bbe:	2264      	movs	r2, #100	; 0x64
 8000bc0:	629a      	str	r2, [r3, #40]	; 0x28
  stepper[0].homing_vel = 200;
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <main+0x15c>)
 8000bc4:	22c8      	movs	r2, #200	; 0xc8
 8000bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  stepper[0].pull_off = 100;
 8000bc8:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <main+0x15c>)
 8000bca:	2264      	movs	r2, #100	; 0x64
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
  rxbuf[0]=0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	703b      	strb	r3, [r7, #0]
  uartflag1=0;
 8000bd2:	4b2a      	ldr	r3, [pc, #168]	; (8000c7c <main+0x16c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //example read register value
	  //int32_t value = 0;
	  HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
 8000bd8:	463b      	mov	r3, r7
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4821      	ldr	r0, [pc, #132]	; (8000c64 <main+0x154>)
 8000be0:	f003 fe98 	bl	8004914 <HAL_UART_Receive_IT>
//	  while(uartflag1==0){
//		  ;
//	  }
	  HAL_UART_Transmit_IT(&huart2,(uint8_t *)rxbuf,sizeof(rxbuf));
 8000be4:	463b      	mov	r3, r7
 8000be6:	2201      	movs	r2, #1
 8000be8:	4619      	mov	r1, r3
 8000bea:	481e      	ldr	r0, [pc, #120]	; (8000c64 <main+0x154>)
 8000bec:	f003 fe24 	bl	8004838 <HAL_UART_Transmit_IT>
	  if(uartflag1==1){
 8000bf0:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <main+0x16c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d1ef      	bne.n	8000bd8 <main+0xc8>
		  if (rxbuf[0] != 0){
 8000bf8:	783b      	ldrb	r3, [r7, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0ec      	beq.n	8000bd8 <main+0xc8>
			  if(rxbuf[0] == '1'){
 8000bfe:	783b      	ldrb	r3, [r7, #0]
 8000c00:	2b31      	cmp	r3, #49	; 0x31
 8000c02:	d116      	bne.n	8000c32 <main+0x122>
				  //HAL_UART_Transmit_IT(&huart2,(uint8_t *)front, sizeof(front));
				  printf("1:start\r\n");
 8000c04:	481e      	ldr	r0, [pc, #120]	; (8000c80 <main+0x170>)
 8000c06:	f005 fcc9 	bl	800659c <puts>
				  motorrotate(5000);
 8000c0a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c0e:	f7ff fbc3 	bl	8000398 <motorrotate>
//				  currentcheck();
				  runAndWait();
 8000c12:	f7ff fc8f 	bl	8000534 <runAndWait>
				  motorrotate(0);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff fbbe 	bl	8000398 <motorrotate>
				  runAndWait();
 8000c1c:	f7ff fc8a 	bl	8000534 <runAndWait>
				  HAL_Delay(100);
 8000c20:	2064      	movs	r0, #100	; 0x64
 8000c22:	f000 fc23 	bl	800146c <HAL_Delay>
				  printf("1:end\r\n");
 8000c26:	4817      	ldr	r0, [pc, #92]	; (8000c84 <main+0x174>)
 8000c28:	f005 fcb8 	bl	800659c <puts>
				  rxbuf[0]=0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	703b      	strb	r3, [r7, #0]
 8000c30:	e007      	b.n	8000c42 <main+0x132>

			  }
			  else{
				  HAL_UART_Transmit_IT(&huart2,(uint8_t *)nonans, sizeof(nonans));
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2212      	movs	r2, #18
 8000c36:	4619      	mov	r1, r3
 8000c38:	480a      	ldr	r0, [pc, #40]	; (8000c64 <main+0x154>)
 8000c3a:	f003 fdfd 	bl	8004838 <HAL_UART_Transmit_IT>
				  rxbuf[0]=0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	703b      	strb	r3, [r7, #0]
			  }
			  uartflag1=0;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <main+0x16c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
 8000c48:	e7c6      	b.n	8000bd8 <main+0xc8>
 8000c4a:	bf00      	nop
 8000c4c:	2000000c 	.word	0x2000000c
 8000c50:	08007818 	.word	0x08007818
 8000c54:	0800782c 	.word	0x0800782c
 8000c58:	0800783c 	.word	0x0800783c
 8000c5c:	08007848 	.word	0x08007848
 8000c60:	080077fc 	.word	0x080077fc
 8000c64:	2000015c 	.word	0x2000015c
 8000c68:	2000008c 	.word	0x2000008c
 8000c6c:	2000067c 	.word	0x2000067c
 8000c70:	08000375 	.word	0x08000375
 8000c74:	08000355 	.word	0x08000355
 8000c78:	42c60000 	.word	0x42c60000
 8000c7c:	200006ca 	.word	0x200006ca
 8000c80:	08007804 	.word	0x08007804
 8000c84:	08007810 	.word	0x08007810

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b096      	sub	sp, #88	; 0x58
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c92:	2228      	movs	r2, #40	; 0x28
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f005 fbf2 	bl	8006480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]
 8000cba:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc4:	2310      	movs	r3, #16
 8000cc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000cd0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000cd4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 ff20 	bl	8001b20 <HAL_RCC_OscConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000ce6:	f000 f971 	bl	8000fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cea:	230f      	movs	r3, #15
 8000cec:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	2102      	movs	r1, #2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 ff48 	bl	8002b9c <HAL_RCC_ClockConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d12:	f000 f95b 	bl	8000fcc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d16:	2301      	movs	r3, #1
 8000d18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4618      	mov	r0, r3
 8000d22:	f002 f971 	bl	8003008 <HAL_RCCEx_PeriphCLKConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000d2c:	f000 f94e 	bl	8000fcc <Error_Handler>
  }
}
 8000d30:	bf00      	nop
 8000d32:	3758      	adds	r7, #88	; 0x58
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08e      	sub	sp, #56	; 0x38
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d58:	463b      	mov	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]
 8000d66:	615a      	str	r2, [r3, #20]
 8000d68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d6a:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <MX_TIM3_Init+0xe4>)
 8000d6c:	4a2c      	ldr	r2, [pc, #176]	; (8000e20 <MX_TIM3_Init+0xe8>)
 8000d6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 640-1;
 8000d70:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <MX_TIM3_Init+0xe4>)
 8000d72:	f240 227f 	movw	r2, #639	; 0x27f
 8000d76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d78:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <MX_TIM3_Init+0xe4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d7e:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <MX_TIM3_Init+0xe4>)
 8000d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d86:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <MX_TIM3_Init+0xe4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8c:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <MX_TIM3_Init+0xe4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d92:	4822      	ldr	r0, [pc, #136]	; (8000e1c <MX_TIM3_Init+0xe4>)
 8000d94:	f002 fa5e 	bl	8003254 <HAL_TIM_Base_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000d9e:	f000 f915 	bl	8000fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000da8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dac:	4619      	mov	r1, r3
 8000dae:	481b      	ldr	r0, [pc, #108]	; (8000e1c <MX_TIM3_Init+0xe4>)
 8000db0:	f002 fddc 	bl	800396c <HAL_TIM_ConfigClockSource>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000dba:	f000 f907 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000dbe:	4817      	ldr	r0, [pc, #92]	; (8000e1c <MX_TIM3_Init+0xe4>)
 8000dc0:	f002 fa9f 	bl	8003302 <HAL_TIM_OC_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000dca:	f000 f8ff 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480f      	ldr	r0, [pc, #60]	; (8000e1c <MX_TIM3_Init+0xe4>)
 8000dde:	f003 fa95 	bl	800430c <HAL_TIMEx_MasterConfigSynchronization>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000de8:	f000 f8f0 	bl	8000fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000dec:	2300      	movs	r3, #0
 8000dee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	4806      	ldr	r0, [pc, #24]	; (8000e1c <MX_TIM3_Init+0xe4>)
 8000e04:	f002 fd38 	bl	8003878 <HAL_TIM_OC_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000e0e:	f000 f8dd 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	3738      	adds	r7, #56	; 0x38
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000008c 	.word	0x2000008c
 8000e20:	40000400 	.word	0x40000400

08000e24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <MX_USART1_UART_Init+0x54>)
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_USART1_UART_Init+0x54>)
 8000e30:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <MX_USART1_UART_Init+0x5c>)
 8000e32:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e34:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <MX_USART1_UART_Init+0x54>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_USART1_UART_Init+0x54>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <MX_USART1_UART_Init+0x54>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_USART1_UART_Init+0x54>)
 8000e48:	220c      	movs	r2, #12
 8000e4a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <MX_USART1_UART_Init+0x54>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_USART1_UART_Init+0x54>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <MX_USART1_UART_Init+0x54>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_USART1_UART_Init+0x54>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000e64:	4804      	ldr	r0, [pc, #16]	; (8000e78 <MX_USART1_UART_Init+0x54>)
 8000e66:	f003 fb2b 	bl	80044c0 <HAL_HalfDuplex_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000e70:	f000 f8ac 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200000d8 	.word	0x200000d8
 8000e7c:	40013800 	.word	0x40013800
 8000e80:	0007a120 	.word	0x0007a120

08000e84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000e8a:	4a15      	ldr	r2, [pc, #84]	; (8000ee0 <MX_USART2_UART_Init+0x5c>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000ec8:	f003 faac 	bl	8004424 <HAL_UART_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ed2:	f000 f87b 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000015c 	.word	0x2000015c
 8000ee0:	40004400 	.word	0x40004400

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000efa:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <MX_GPIO_Init+0xb8>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <MX_GPIO_Init+0xb8>)
 8000f00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f04:	6153      	str	r3, [r2, #20]
 8000f06:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <MX_GPIO_Init+0xb8>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <MX_GPIO_Init+0xb8>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <MX_GPIO_Init+0xb8>)
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1c:	6153      	str	r3, [r2, #20]
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <MX_GPIO_Init+0xb8>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <MX_GPIO_Init+0xb8>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <MX_GPIO_Init+0xb8>)
 8000f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f34:	6153      	str	r3, [r2, #20]
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <MX_GPIO_Init+0xb8>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2130      	movs	r1, #48	; 0x30
 8000f46:	4816      	ldr	r0, [pc, #88]	; (8000fa0 <MX_GPIO_Init+0xbc>)
 8000f48:	f000 fdae 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f4c:	2330      	movs	r3, #48	; 0x30
 8000f4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	4619      	mov	r1, r3
 8000f62:	480f      	ldr	r0, [pc, #60]	; (8000fa0 <MX_GPIO_Init+0xbc>)
 8000f64:	f000 fc2e 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f68:	2340      	movs	r3, #64	; 0x40
 8000f6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f6c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <MX_GPIO_Init+0xbc>)
 8000f7e:	f000 fc21 	bl	80017c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2101      	movs	r1, #1
 8000f86:	2017      	movs	r0, #23
 8000f88:	f000 fb6f 	bl	800166a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f8c:	2017      	movs	r0, #23
 8000f8e:	f000 fb88 	bl	80016a2 <HAL_NVIC_EnableIRQ>

}
 8000f92:	bf00      	nop
 8000f94:	3720      	adds	r7, #32
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	48000400 	.word	0x48000400

08000fa4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	68b9      	ldr	r1, [r7, #8]
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <_write+0x24>)
 8000fba:	f003 fad7 	bl	800456c <HAL_UART_Transmit>
//  HAL_UART_Transmit_IT(&huart2,(uint8_t *)ptr,len);

  return len;
 8000fbe:	687b      	ldr	r3, [r7, #4]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2000015c 	.word	0x2000015c

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
}
 8000fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <Error_Handler+0x8>
	...

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_MspInit+0x44>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_MspInit+0x44>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6193      	str	r3, [r2, #24]
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_MspInit+0x44>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_MspInit+0x44>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_MspInit+0x44>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	61d3      	str	r3, [r2, #28]
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_MspInit+0x44>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <HAL_TIM_Base_MspInit+0x44>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d113      	bne.n	800105a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <HAL_TIM_Base_MspInit+0x48>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <HAL_TIM_Base_MspInit+0x48>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	61d3      	str	r3, [r2, #28]
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_TIM_Base_MspInit+0x48>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2102      	movs	r1, #2
 800104e:	201d      	movs	r0, #29
 8001050:	f000 fb0b 	bl	800166a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001054:	201d      	movs	r0, #29
 8001056:	f000 fb24 	bl	80016a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40000400 	.word	0x40000400
 8001068:	40021000 	.word	0x40021000

0800106c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a38      	ldr	r2, [pc, #224]	; (800116c <HAL_UART_MspInit+0x100>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d132      	bne.n	80010f4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800108e:	4b38      	ldr	r3, [pc, #224]	; (8001170 <HAL_UART_MspInit+0x104>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	4a37      	ldr	r2, [pc, #220]	; (8001170 <HAL_UART_MspInit+0x104>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6193      	str	r3, [r2, #24]
 800109a:	4b35      	ldr	r3, [pc, #212]	; (8001170 <HAL_UART_MspInit+0x104>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b32      	ldr	r3, [pc, #200]	; (8001170 <HAL_UART_MspInit+0x104>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	4a31      	ldr	r2, [pc, #196]	; (8001170 <HAL_UART_MspInit+0x104>)
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	6153      	str	r3, [r2, #20]
 80010b2:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <HAL_UART_MspInit+0x104>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c4:	2312      	movs	r3, #18
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010d0:	2307      	movs	r3, #7
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010de:	f000 fb71 	bl	80017c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2101      	movs	r1, #1
 80010e6:	2025      	movs	r0, #37	; 0x25
 80010e8:	f000 fabf 	bl	800166a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010ec:	2025      	movs	r0, #37	; 0x25
 80010ee:	f000 fad8 	bl	80016a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010f2:	e036      	b.n	8001162 <HAL_UART_MspInit+0xf6>
  else if(huart->Instance==USART2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <HAL_UART_MspInit+0x108>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d131      	bne.n	8001162 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <HAL_UART_MspInit+0x104>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	4a1b      	ldr	r2, [pc, #108]	; (8001170 <HAL_UART_MspInit+0x104>)
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	61d3      	str	r3, [r2, #28]
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <HAL_UART_MspInit+0x104>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <HAL_UART_MspInit+0x104>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	4a15      	ldr	r2, [pc, #84]	; (8001170 <HAL_UART_MspInit+0x104>)
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	6153      	str	r3, [r2, #20]
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <HAL_UART_MspInit+0x104>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800112e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001140:	2307      	movs	r3, #7
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114e:	f000 fb39 	bl	80017c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	2026      	movs	r0, #38	; 0x26
 8001158:	f000 fa87 	bl	800166a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800115c:	2026      	movs	r0, #38	; 0x26
 800115e:	f000 faa0 	bl	80016a2 <HAL_NVIC_EnableIRQ>
}
 8001162:	bf00      	nop
 8001164:	3730      	adds	r7, #48	; 0x30
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40013800 	.word	0x40013800
 8001170:	40021000 	.word	0x40021000
 8001174:	40004400 	.word	0x40004400

08001178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800117c:	e7fe      	b.n	800117c <NMI_Handler+0x4>

0800117e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <HardFault_Handler+0x4>

08001184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <MemManage_Handler+0x4>

0800118a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <BusFault_Handler+0x4>

08001190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <UsageFault_Handler+0x4>

08001196 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c4:	f000 f932 	bl	800142c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}

080011cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80011d0:	2040      	movs	r0, #64	; 0x40
 80011d2:	f000 fc81 	bl	8001ad8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <TIM3_IRQHandler+0x10>)
 80011e2:	f002 fa29 	bl	8003638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000008c 	.word	0x2000008c

080011f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <USART1_IRQHandler+0x10>)
 80011f6:	f003 fbdb 	bl	80049b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200000d8 	.word	0x200000d8

08001204 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <USART2_IRQHandler+0x10>)
 800120a:	f003 fbd1 	bl	80049b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000015c 	.word	0x2000015c

08001218 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	e00a      	b.n	8001240 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800122a:	f3af 8000 	nop.w
 800122e:	4601      	mov	r1, r0
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	60ba      	str	r2, [r7, #8]
 8001236:	b2ca      	uxtb	r2, r1
 8001238:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3301      	adds	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	429a      	cmp	r2, r3
 8001246:	dbf0      	blt.n	800122a <_read+0x12>
	}

return len;
 8001248:	687b      	ldr	r3, [r7, #4]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
	return -1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800127a:	605a      	str	r2, [r3, #4]
	return 0;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <_isatty>:

int _isatty(int file)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
	return 1;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
	return 0;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c4:	4a14      	ldr	r2, [pc, #80]	; (8001318 <_sbrk+0x5c>)
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <_sbrk+0x60>)
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <_sbrk+0x64>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <_sbrk+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d207      	bcs.n	80012fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ec:	f005 f89e 	bl	800642c <__errno>
 80012f0:	4603      	mov	r3, r0
 80012f2:	220c      	movs	r2, #12
 80012f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012fa:	e009      	b.n	8001310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <_sbrk+0x64>)
 800130c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20003000 	.word	0x20003000
 800131c:	00000400 	.word	0x00000400
 8001320:	200006cc 	.word	0x200006cc
 8001324:	200008e8 	.word	0x200008e8

08001328 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <SystemInit+0x20>)
 800132e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001332:	4a05      	ldr	r2, [pc, #20]	; (8001348 <SystemInit+0x20>)
 8001334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800134c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001384 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <LoopForever+0x6>)
  ldr r1, =_edata
 8001352:	490e      	ldr	r1, [pc, #56]	; (800138c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001354:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <LoopForever+0xe>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001368:	4c0b      	ldr	r4, [pc, #44]	; (8001398 <LoopForever+0x16>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001376:	f7ff ffd7 	bl	8001328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137a:	f005 f85d 	bl	8006438 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800137e:	f7ff fbc7 	bl	8000b10 <main>

08001382 <LoopForever>:

LoopForever:
    b LoopForever
 8001382:	e7fe      	b.n	8001382 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001384:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001390:	08007bb4 	.word	0x08007bb4
  ldr r2, =_sbss
 8001394:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001398:	200008e8 	.word	0x200008e8

0800139c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC1_2_IRQHandler>
	...

080013a0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_Init+0x28>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_Init+0x28>)
 80013aa:	f043 0310 	orr.w	r3, r3, #16
 80013ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b0:	2003      	movs	r0, #3
 80013b2:	f000 f94f 	bl	8001654 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f000 f808 	bl	80013cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013bc:	f7ff fe0c 	bl	8000fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40022000 	.word	0x40022000

080013cc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x54>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_InitTick+0x58>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f967 	bl	80016be <HAL_SYSTICK_Config>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00e      	b.n	8001418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d80a      	bhi.n	8001416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001400:	2200      	movs	r2, #0
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001408:	f000 f92f 	bl	800166a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800140c:	4a06      	ldr	r2, [pc, #24]	; (8001428 <HAL_InitTick+0x5c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	e000      	b.n	8001418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000000 	.word	0x20000000
 8001424:	20000008 	.word	0x20000008
 8001428:	20000004 	.word	0x20000004

0800142c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x20>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_IncTick+0x24>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <HAL_IncTick+0x24>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000008 	.word	0x20000008
 8001450:	200006d0 	.word	0x200006d0

08001454 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return uwTick;  
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_GetTick+0x14>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	200006d0 	.word	0x200006d0

0800146c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001474:	f7ff ffee 	bl	8001454 <HAL_GetTick>
 8001478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001484:	d005      	beq.n	8001492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_Delay+0x44>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001492:	bf00      	nop
 8001494:	f7ff ffde 	bl	8001454 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d8f7      	bhi.n	8001494 <HAL_Delay+0x28>
  {
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000008 	.word	0x20000008

080014b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d0:	4013      	ands	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <__NVIC_GetPriorityGrouping+0x18>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	f003 0307 	and.w	r3, r3, #7
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	db0b      	blt.n	8001542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f003 021f 	and.w	r2, r3, #31
 8001530:	4907      	ldr	r1, [pc, #28]	; (8001550 <__NVIC_EnableIRQ+0x38>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	2001      	movs	r0, #1
 800153a:	fa00 f202 	lsl.w	r2, r0, r2
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000e100 	.word	0xe000e100

08001554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	2b00      	cmp	r3, #0
 8001566:	db0a      	blt.n	800157e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	b2da      	uxtb	r2, r3
 800156c:	490c      	ldr	r1, [pc, #48]	; (80015a0 <__NVIC_SetPriority+0x4c>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	0112      	lsls	r2, r2, #4
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	440b      	add	r3, r1
 8001578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800157c:	e00a      	b.n	8001594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4908      	ldr	r1, [pc, #32]	; (80015a4 <__NVIC_SetPriority+0x50>)
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	3b04      	subs	r3, #4
 800158c:	0112      	lsls	r2, r2, #4
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	440b      	add	r3, r1
 8001592:	761a      	strb	r2, [r3, #24]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000e100 	.word	0xe000e100
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f1c3 0307 	rsb	r3, r3, #7
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	bf28      	it	cs
 80015c6:	2304      	movcs	r3, #4
 80015c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3304      	adds	r3, #4
 80015ce:	2b06      	cmp	r3, #6
 80015d0:	d902      	bls.n	80015d8 <NVIC_EncodePriority+0x30>
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3b03      	subs	r3, #3
 80015d6:	e000      	b.n	80015da <NVIC_EncodePriority+0x32>
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43da      	mvns	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	401a      	ands	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	43d9      	mvns	r1, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	4313      	orrs	r3, r2
         );
}
 8001602:	4618      	mov	r0, r3
 8001604:	3724      	adds	r7, #36	; 0x24
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001620:	d301      	bcc.n	8001626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001622:	2301      	movs	r3, #1
 8001624:	e00f      	b.n	8001646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <SysTick_Config+0x40>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162e:	210f      	movs	r1, #15
 8001630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001634:	f7ff ff8e 	bl	8001554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <SysTick_Config+0x40>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163e:	4b04      	ldr	r3, [pc, #16]	; (8001650 <SysTick_Config+0x40>)
 8001640:	2207      	movs	r2, #7
 8001642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	e000e010 	.word	0xe000e010

08001654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff29 	bl	80014b4 <__NVIC_SetPriorityGrouping>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800167c:	f7ff ff3e 	bl	80014fc <__NVIC_GetPriorityGrouping>
 8001680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	6978      	ldr	r0, [r7, #20]
 8001688:	f7ff ff8e 	bl	80015a8 <NVIC_EncodePriority>
 800168c:	4602      	mov	r2, r0
 800168e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff5d 	bl	8001554 <__NVIC_SetPriority>
}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff31 	bl	8001518 <__NVIC_EnableIRQ>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ffa2 	bl	8001610 <SysTick_Config>
 80016cc:	4603      	mov	r3, r0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d008      	beq.n	80016fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2204      	movs	r2, #4
 80016ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e020      	b.n	800173c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 020e 	bic.w	r2, r2, #14
 8001708:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0201 	bic.w	r2, r2, #1
 8001718:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001722:	2101      	movs	r1, #1
 8001724:	fa01 f202 	lsl.w	r2, r1, r2
 8001728:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800175a:	2b02      	cmp	r3, #2
 800175c:	d005      	beq.n	800176a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2204      	movs	r2, #4
 8001762:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	e027      	b.n	80017ba <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 020e 	bic.w	r2, r2, #14
 8001778:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0201 	bic.w	r2, r2, #1
 8001788:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001792:	2101      	movs	r1, #1
 8001794:	fa01 f202 	lsl.w	r2, r1, r2
 8001798:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	4798      	blx	r3
    } 
  }
  return status;
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d2:	e14e      	b.n	8001a72 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2101      	movs	r1, #1
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	4013      	ands	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 8140 	beq.w	8001a6c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d005      	beq.n	8001804 <HAL_GPIO_Init+0x40>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d130      	bne.n	8001866 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800183a:	2201      	movs	r2, #1
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	f003 0201 	and.w	r2, r3, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b03      	cmp	r3, #3
 8001870:	d017      	beq.n	80018a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d123      	bne.n	80018f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	08da      	lsrs	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3208      	adds	r2, #8
 80018b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	08da      	lsrs	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3208      	adds	r2, #8
 80018f0:	6939      	ldr	r1, [r7, #16]
 80018f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0203 	and.w	r2, r3, #3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 809a 	beq.w	8001a6c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001938:	4b55      	ldr	r3, [pc, #340]	; (8001a90 <HAL_GPIO_Init+0x2cc>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a54      	ldr	r2, [pc, #336]	; (8001a90 <HAL_GPIO_Init+0x2cc>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b52      	ldr	r3, [pc, #328]	; (8001a90 <HAL_GPIO_Init+0x2cc>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001950:	4a50      	ldr	r2, [pc, #320]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800197a:	d013      	beq.n	80019a4 <HAL_GPIO_Init+0x1e0>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a46      	ldr	r2, [pc, #280]	; (8001a98 <HAL_GPIO_Init+0x2d4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d00d      	beq.n	80019a0 <HAL_GPIO_Init+0x1dc>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a45      	ldr	r2, [pc, #276]	; (8001a9c <HAL_GPIO_Init+0x2d8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d007      	beq.n	800199c <HAL_GPIO_Init+0x1d8>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a44      	ldr	r2, [pc, #272]	; (8001aa0 <HAL_GPIO_Init+0x2dc>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <HAL_GPIO_Init+0x1d4>
 8001994:	2303      	movs	r3, #3
 8001996:	e006      	b.n	80019a6 <HAL_GPIO_Init+0x1e2>
 8001998:	2305      	movs	r3, #5
 800199a:	e004      	b.n	80019a6 <HAL_GPIO_Init+0x1e2>
 800199c:	2302      	movs	r3, #2
 800199e:	e002      	b.n	80019a6 <HAL_GPIO_Init+0x1e2>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <HAL_GPIO_Init+0x1e2>
 80019a4:	2300      	movs	r3, #0
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	f002 0203 	and.w	r2, r2, #3
 80019ac:	0092      	lsls	r2, r2, #2
 80019ae:	4093      	lsls	r3, r2
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019b6:	4937      	ldr	r1, [pc, #220]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3302      	adds	r3, #2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c4:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <HAL_GPIO_Init+0x2e0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019e8:	4a2e      	ldr	r2, [pc, #184]	; (8001aa4 <HAL_GPIO_Init+0x2e0>)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019ee:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <HAL_GPIO_Init+0x2e0>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a12:	4a24      	ldr	r2, [pc, #144]	; (8001aa4 <HAL_GPIO_Init+0x2e0>)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_GPIO_Init+0x2e0>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a3c:	4a19      	ldr	r2, [pc, #100]	; (8001aa4 <HAL_GPIO_Init+0x2e0>)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_GPIO_Init+0x2e0>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a66:	4a0f      	ldr	r2, [pc, #60]	; (8001aa4 <HAL_GPIO_Init+0x2e0>)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f47f aea9 	bne.w	80017d4 <HAL_GPIO_Init+0x10>
  }
}
 8001a82:	bf00      	nop
 8001a84:	bf00      	nop
 8001a86:	371c      	adds	r7, #28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010000 	.word	0x40010000
 8001a98:	48000400 	.word	0x48000400
 8001a9c:	48000800 	.word	0x48000800
 8001aa0:	48000c00 	.word	0x48000c00
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab8:	787b      	ldrb	r3, [r7, #1]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f806 	bl	8001b08 <HAL_GPIO_EXTI_Callback>
  }
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40010400 	.word	0x40010400

08001b08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b30:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	f001 b823 	b.w	8002b8c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 817d 	beq.w	8001e56 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b5c:	4bbc      	ldr	r3, [pc, #752]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d00c      	beq.n	8001b82 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b68:	4bb9      	ldr	r3, [pc, #740]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d15c      	bne.n	8001c2e <HAL_RCC_OscConfig+0x10e>
 8001b74:	4bb6      	ldr	r3, [pc, #728]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b80:	d155      	bne.n	8001c2e <HAL_RCC_OscConfig+0x10e>
 8001b82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b86:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001b8e:	fa93 f3a3 	rbit	r3, r3
 8001b92:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	095b      	lsrs	r3, r3, #5
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d102      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x94>
 8001bae:	4ba8      	ldr	r3, [pc, #672]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	e015      	b.n	8001be0 <HAL_RCC_OscConfig+0xc0>
 8001bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001bc0:	fa93 f3a3 	rbit	r3, r3
 8001bc4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bcc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001bd0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001bd4:	fa93 f3a3 	rbit	r3, r3
 8001bd8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001bdc:	4b9c      	ldr	r3, [pc, #624]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001be4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001be8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001bec:	fa92 f2a2 	rbit	r2, r2
 8001bf0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001bf4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001bf8:	fab2 f282 	clz	r2, r2
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	f042 0220 	orr.w	r2, r2, #32
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	f002 021f 	and.w	r2, r2, #31
 8001c08:	2101      	movs	r1, #1
 8001c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 811f 	beq.w	8001e54 <HAL_RCC_OscConfig+0x334>
 8001c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 8116 	bne.w	8001e54 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f000 bfaf 	b.w	8002b8c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3e:	d106      	bne.n	8001c4e <HAL_RCC_OscConfig+0x12e>
 8001c40:	4b83      	ldr	r3, [pc, #524]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a82      	ldr	r2, [pc, #520]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	e036      	b.n	8001cbc <HAL_RCC_OscConfig+0x19c>
 8001c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x158>
 8001c5e:	4b7c      	ldr	r3, [pc, #496]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a7b      	ldr	r2, [pc, #492]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b79      	ldr	r3, [pc, #484]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a78      	ldr	r2, [pc, #480]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e021      	b.n	8001cbc <HAL_RCC_OscConfig+0x19c>
 8001c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x184>
 8001c8a:	4b71      	ldr	r3, [pc, #452]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a70      	ldr	r2, [pc, #448]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b6e      	ldr	r3, [pc, #440]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a6d      	ldr	r2, [pc, #436]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e00b      	b.n	8001cbc <HAL_RCC_OscConfig+0x19c>
 8001ca4:	4b6a      	ldr	r3, [pc, #424]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a69      	ldr	r2, [pc, #420]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b67      	ldr	r3, [pc, #412]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a66      	ldr	r2, [pc, #408]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cbc:	4b64      	ldr	r3, [pc, #400]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	f023 020f 	bic.w	r2, r3, #15
 8001cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	495f      	ldr	r1, [pc, #380]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d059      	beq.n	8001d9a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce6:	f7ff fbb5 	bl	8001454 <HAL_GetTick>
 8001cea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fbb0 	bl	8001454 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b64      	cmp	r3, #100	; 0x64
 8001cfe:	d902      	bls.n	8001d06 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	f000 bf43 	b.w	8002b8c <HAL_RCC_OscConfig+0x106c>
 8001d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d0a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001d1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	095b      	lsrs	r3, r3, #5
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d102      	bne.n	8001d38 <HAL_RCC_OscConfig+0x218>
 8001d32:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	e015      	b.n	8001d64 <HAL_RCC_OscConfig+0x244>
 8001d38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d3c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d50:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001d60:	4b3b      	ldr	r3, [pc, #236]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d68:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d6c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d70:	fa92 f2a2 	rbit	r2, r2
 8001d74:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001d78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001d7c:	fab2 f282 	clz	r2, r2
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	f042 0220 	orr.w	r2, r2, #32
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	f002 021f 	and.w	r2, r2, #31
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0ab      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x1d0>
 8001d98:	e05d      	b.n	8001e56 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fb5b 	bl	8001454 <HAL_GetTick>
 8001d9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff fb56 	bl	8001454 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b64      	cmp	r3, #100	; 0x64
 8001db2:	d902      	bls.n	8001dba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	f000 bee9 	b.w	8002b8c <HAL_RCC_OscConfig+0x106c>
 8001dba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dbe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001dce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	095b      	lsrs	r3, r3, #5
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d102      	bne.n	8001dec <HAL_RCC_OscConfig+0x2cc>
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	e015      	b.n	8001e18 <HAL_RCC_OscConfig+0x2f8>
 8001dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e04:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e08:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001e14:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e1c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001e20:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e24:	fa92 f2a2 	rbit	r2, r2
 8001e28:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001e2c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001e30:	fab2 f282 	clz	r2, r2
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	f042 0220 	orr.w	r2, r2, #32
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	f002 021f 	and.w	r2, r2, #31
 8001e40:	2101      	movs	r1, #1
 8001e42:	fa01 f202 	lsl.w	r2, r1, r2
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1ab      	bne.n	8001da4 <HAL_RCC_OscConfig+0x284>
 8001e4c:	e003      	b.n	8001e56 <HAL_RCC_OscConfig+0x336>
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 817d 	beq.w	8002166 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e6c:	4ba6      	ldr	r3, [pc, #664]	; (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00b      	beq.n	8001e90 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e78:	4ba3      	ldr	r3, [pc, #652]	; (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d172      	bne.n	8001f6a <HAL_RCC_OscConfig+0x44a>
 8001e84:	4ba0      	ldr	r3, [pc, #640]	; (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d16c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x44a>
 8001e90:	2302      	movs	r3, #2
 8001e92:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001ea2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	095b      	lsrs	r3, r3, #5
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d102      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x3a0>
 8001eba:	4b93      	ldr	r3, [pc, #588]	; (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	e013      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3c8>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ed8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001ee4:	4b88      	ldr	r3, [pc, #544]	; (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	2202      	movs	r2, #2
 8001eea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001eee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ef2:	fa92 f2a2 	rbit	r2, r2
 8001ef6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001efa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001efe:	fab2 f282 	clz	r2, r2
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	f042 0220 	orr.w	r2, r2, #32
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	f002 021f 	and.w	r2, r2, #31
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f202 	lsl.w	r2, r1, r2
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <HAL_RCC_OscConfig+0x410>
 8001f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d002      	beq.n	8001f30 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	f000 be2e 	b.w	8002b8c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f30:	4b75      	ldr	r3, [pc, #468]	; (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	21f8      	movs	r1, #248	; 0xf8
 8001f46:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f4e:	fa91 f1a1 	rbit	r1, r1
 8001f52:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001f56:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001f5a:	fab1 f181 	clz	r1, r1
 8001f5e:	b2c9      	uxtb	r1, r1
 8001f60:	408b      	lsls	r3, r1
 8001f62:	4969      	ldr	r1, [pc, #420]	; (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f68:	e0fd      	b.n	8002166 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8088 	beq.w	800208c <HAL_RCC_OscConfig+0x56c>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001f8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7ff fa54 	bl	8001454 <HAL_GetTick>
 8001fac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	e00a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb2:	f7ff fa4f 	bl	8001454 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d902      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	f000 bde2 	b.w	8002b8c <HAL_RCC_OscConfig+0x106c>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001fd2:	fa93 f3a3 	rbit	r3, r3
 8001fd6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001fda:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	095b      	lsrs	r3, r3, #5
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d102      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x4d8>
 8001ff2:	4b45      	ldr	r3, [pc, #276]	; (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	e013      	b.n	8002020 <HAL_RCC_OscConfig+0x500>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800200a:	2302      	movs	r3, #2
 800200c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002010:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800201c:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <HAL_RCC_OscConfig+0x5e8>)
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	2202      	movs	r2, #2
 8002022:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002026:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800202a:	fa92 f2a2 	rbit	r2, r2
 800202e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002032:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002036:	fab2 f282 	clz	r2, r2
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	f042 0220 	orr.w	r2, r2, #32
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	f002 021f 	and.w	r2, r2, #31
 8002046:	2101      	movs	r1, #1
 8002048:	fa01 f202 	lsl.w	r2, r1, r2
 800204c:	4013      	ands	r3, r2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0af      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	21f8      	movs	r1, #248	; 0xf8
 8002068:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002070:	fa91 f1a1 	rbit	r1, r1
 8002074:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002078:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800207c:	fab1 f181 	clz	r1, r1
 8002080:	b2c9      	uxtb	r1, r1
 8002082:	408b      	lsls	r3, r1
 8002084:	4920      	ldr	r1, [pc, #128]	; (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
 800208a:	e06c      	b.n	8002166 <HAL_RCC_OscConfig+0x646>
 800208c:	2301      	movs	r3, #1
 800208e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800209e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	461a      	mov	r2, r3
 80020b4:	2300      	movs	r3, #0
 80020b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff f9cc 	bl	8001454 <HAL_GetTick>
 80020bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c2:	f7ff f9c7 	bl	8001454 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d902      	bls.n	80020d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	f000 bd5a 	b.w	8002b8c <HAL_RCC_OscConfig+0x106c>
 80020d8:	2302      	movs	r3, #2
 80020da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80020ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d104      	bne.n	800210c <HAL_RCC_OscConfig+0x5ec>
 8002102:	4b01      	ldr	r3, [pc, #4]	; (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	e015      	b.n	8002134 <HAL_RCC_OscConfig+0x614>
 8002108:	40021000 	.word	0x40021000
 800210c:	2302      	movs	r3, #2
 800210e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800211e:	2302      	movs	r3, #2
 8002120:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002124:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002130:	4bc8      	ldr	r3, [pc, #800]	; (8002454 <HAL_RCC_OscConfig+0x934>)
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	2202      	movs	r2, #2
 8002136:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800213a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800213e:	fa92 f2a2 	rbit	r2, r2
 8002142:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002146:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800214a:	fab2 f282 	clz	r2, r2
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	f042 0220 	orr.w	r2, r2, #32
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	f002 021f 	and.w	r2, r2, #31
 800215a:	2101      	movs	r1, #1
 800215c:	fa01 f202 	lsl.w	r2, r1, r2
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1ad      	bne.n	80020c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8110 	beq.w	800239c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800217c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002180:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d079      	beq.n	8002280 <HAL_RCC_OscConfig+0x760>
 800218c:	2301      	movs	r3, #1
 800218e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800219e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	4bab      	ldr	r3, [pc, #684]	; (8002458 <HAL_RCC_OscConfig+0x938>)
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	461a      	mov	r2, r3
 80021b2:	2301      	movs	r3, #1
 80021b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b6:	f7ff f94d 	bl	8001454 <HAL_GetTick>
 80021ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c0:	f7ff f948 	bl	8001454 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d902      	bls.n	80021d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	f000 bcdb 	b.w	8002b8c <HAL_RCC_OscConfig+0x106c>
 80021d6:	2302      	movs	r3, #2
 80021d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80021e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021f0:	2202      	movs	r2, #2
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	fa93 f2a3 	rbit	r2, r3
 8002202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002206:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002214:	2202      	movs	r2, #2
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	fa93 f2a3 	rbit	r2, r3
 8002226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800222e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002230:	4b88      	ldr	r3, [pc, #544]	; (8002454 <HAL_RCC_OscConfig+0x934>)
 8002232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002238:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800223c:	2102      	movs	r1, #2
 800223e:	6019      	str	r1, [r3, #0]
 8002240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002244:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	fa93 f1a3 	rbit	r1, r3
 800224e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002252:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002256:	6019      	str	r1, [r3, #0]
  return result;
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0a0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x6a0>
 800227e:	e08d      	b.n	800239c <HAL_RCC_OscConfig+0x87c>
 8002280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002284:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002288:	2201      	movs	r2, #1
 800228a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002290:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	fa93 f2a3 	rbit	r2, r3
 800229a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022a2:	601a      	str	r2, [r3, #0]
  return result;
 80022a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ae:	fab3 f383 	clz	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b68      	ldr	r3, [pc, #416]	; (8002458 <HAL_RCC_OscConfig+0x938>)
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	461a      	mov	r2, r3
 80022be:	2300      	movs	r3, #0
 80022c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c2:	f7ff f8c7 	bl	8001454 <HAL_GetTick>
 80022c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022cc:	f7ff f8c2 	bl	8001454 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d902      	bls.n	80022e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	f000 bc55 	b.w	8002b8c <HAL_RCC_OscConfig+0x106c>
 80022e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022ea:	2202      	movs	r2, #2
 80022ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	fa93 f2a3 	rbit	r2, r3
 80022fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002300:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800230e:	2202      	movs	r2, #2
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002316:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fa93 f2a3 	rbit	r2, r3
 8002320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002324:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002332:	2202      	movs	r2, #2
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	fa93 f2a3 	rbit	r2, r3
 8002344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002348:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800234c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234e:	4b41      	ldr	r3, [pc, #260]	; (8002454 <HAL_RCC_OscConfig+0x934>)
 8002350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002356:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800235a:	2102      	movs	r1, #2
 800235c:	6019      	str	r1, [r3, #0]
 800235e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002362:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	fa93 f1a3 	rbit	r1, r3
 800236c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002370:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002374:	6019      	str	r1, [r3, #0]
  return result;
 8002376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2101      	movs	r1, #1
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d197      	bne.n	80022cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800239c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 81a1 	beq.w	80026f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b8:	4b26      	ldr	r3, [pc, #152]	; (8002454 <HAL_RCC_OscConfig+0x934>)
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d116      	bne.n	80023f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c4:	4b23      	ldr	r3, [pc, #140]	; (8002454 <HAL_RCC_OscConfig+0x934>)
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	4a22      	ldr	r2, [pc, #136]	; (8002454 <HAL_RCC_OscConfig+0x934>)
 80023ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ce:	61d3      	str	r3, [r2, #28]
 80023d0:	4b20      	ldr	r3, [pc, #128]	; (8002454 <HAL_RCC_OscConfig+0x934>)
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80023d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023dc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80023ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023ec:	2301      	movs	r3, #1
 80023ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <HAL_RCC_OscConfig+0x93c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d11a      	bne.n	8002434 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fe:	4b17      	ldr	r3, [pc, #92]	; (800245c <HAL_RCC_OscConfig+0x93c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a16      	ldr	r2, [pc, #88]	; (800245c <HAL_RCC_OscConfig+0x93c>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240a:	f7ff f823 	bl	8001454 <HAL_GetTick>
 800240e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002412:	e009      	b.n	8002428 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002414:	f7ff f81e 	bl	8001454 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b64      	cmp	r3, #100	; 0x64
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e3b1      	b.n	8002b8c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_RCC_OscConfig+0x93c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0ef      	beq.n	8002414 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002438:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d10d      	bne.n	8002460 <HAL_RCC_OscConfig+0x940>
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <HAL_RCC_OscConfig+0x934>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a02      	ldr	r2, [pc, #8]	; (8002454 <HAL_RCC_OscConfig+0x934>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6213      	str	r3, [r2, #32]
 8002450:	e03c      	b.n	80024cc <HAL_RCC_OscConfig+0x9ac>
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000
 8002458:	10908120 	.word	0x10908120
 800245c:	40007000 	.word	0x40007000
 8002460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002464:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10c      	bne.n	800248a <HAL_RCC_OscConfig+0x96a>
 8002470:	4bc1      	ldr	r3, [pc, #772]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4ac0      	ldr	r2, [pc, #768]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 8002476:	f023 0301 	bic.w	r3, r3, #1
 800247a:	6213      	str	r3, [r2, #32]
 800247c:	4bbe      	ldr	r3, [pc, #760]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4abd      	ldr	r2, [pc, #756]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 8002482:	f023 0304 	bic.w	r3, r3, #4
 8002486:	6213      	str	r3, [r2, #32]
 8002488:	e020      	b.n	80024cc <HAL_RCC_OscConfig+0x9ac>
 800248a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b05      	cmp	r3, #5
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x994>
 800249a:	4bb7      	ldr	r3, [pc, #732]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	4ab6      	ldr	r2, [pc, #728]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	6213      	str	r3, [r2, #32]
 80024a6:	4bb4      	ldr	r3, [pc, #720]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4ab3      	ldr	r2, [pc, #716]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6213      	str	r3, [r2, #32]
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0x9ac>
 80024b4:	4bb0      	ldr	r3, [pc, #704]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4aaf      	ldr	r2, [pc, #700]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 80024ba:	f023 0301 	bic.w	r3, r3, #1
 80024be:	6213      	str	r3, [r2, #32]
 80024c0:	4bad      	ldr	r3, [pc, #692]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4aac      	ldr	r2, [pc, #688]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 80024c6:	f023 0304 	bic.w	r3, r3, #4
 80024ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8081 	beq.w	80025e0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024de:	f7fe ffb9 	bl	8001454 <HAL_GetTick>
 80024e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e8:	f7fe ffb4 	bl	8001454 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e345      	b.n	8002b8c <HAL_RCC_OscConfig+0x106c>
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002508:	2202      	movs	r2, #2
 800250a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002510:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	fa93 f2a3 	rbit	r2, r3
 800251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002528:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800252c:	2202      	movs	r2, #2
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002534:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	fa93 f2a3 	rbit	r2, r3
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002546:	601a      	str	r2, [r3, #0]
  return result;
 8002548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002550:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f043 0302 	orr.w	r3, r3, #2
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d102      	bne.n	800256c <HAL_RCC_OscConfig+0xa4c>
 8002566:	4b84      	ldr	r3, [pc, #528]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	e013      	b.n	8002594 <HAL_RCC_OscConfig+0xa74>
 800256c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002570:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002574:	2202      	movs	r2, #2
 8002576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	fa93 f2a3 	rbit	r2, r3
 8002586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	4b79      	ldr	r3, [pc, #484]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002598:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800259c:	2102      	movs	r1, #2
 800259e:	6011      	str	r1, [r2, #0]
 80025a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	fa92 f1a2 	rbit	r1, r2
 80025ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025b2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80025b6:	6011      	str	r1, [r2, #0]
  return result;
 80025b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025bc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	fab2 f282 	clz	r2, r2
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	f002 021f 	and.w	r2, r2, #31
 80025d2:	2101      	movs	r1, #1
 80025d4:	fa01 f202 	lsl.w	r2, r1, r2
 80025d8:	4013      	ands	r3, r2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d084      	beq.n	80024e8 <HAL_RCC_OscConfig+0x9c8>
 80025de:	e07f      	b.n	80026e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e0:	f7fe ff38 	bl	8001454 <HAL_GetTick>
 80025e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e8:	e00b      	b.n	8002602 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7fe ff33 	bl	8001454 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e2c4      	b.n	8002b8c <HAL_RCC_OscConfig+0x106c>
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800260a:	2202      	movs	r2, #2
 800260c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002612:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fa93 f2a3 	rbit	r2, r3
 800261c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002620:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800262e:	2202      	movs	r2, #2
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002636:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	fa93 f2a3 	rbit	r2, r3
 8002640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002644:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002648:	601a      	str	r2, [r3, #0]
  return result;
 800264a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002652:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f043 0302 	orr.w	r3, r3, #2
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d102      	bne.n	800266e <HAL_RCC_OscConfig+0xb4e>
 8002668:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	e013      	b.n	8002696 <HAL_RCC_OscConfig+0xb76>
 800266e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002672:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002676:	2202      	movs	r2, #2
 8002678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	fa93 f2a3 	rbit	r2, r3
 8002688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	4b39      	ldr	r3, [pc, #228]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800269a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800269e:	2102      	movs	r1, #2
 80026a0:	6011      	str	r1, [r2, #0]
 80026a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	fa92 f1a2 	rbit	r1, r2
 80026b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80026b8:	6011      	str	r1, [r2, #0]
  return result;
 80026ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026be:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	fab2 f282 	clz	r2, r2
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	f002 021f 	and.w	r2, r2, #31
 80026d4:	2101      	movs	r1, #1
 80026d6:	fa01 f202 	lsl.w	r2, r1, r2
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d184      	bne.n	80025ea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d105      	bne.n	80026f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e8:	4b23      	ldr	r3, [pc, #140]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	4a22      	ldr	r2, [pc, #136]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 80026ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 8242 	beq.w	8002b8a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002706:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <HAL_RCC_OscConfig+0xc58>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b08      	cmp	r3, #8
 8002710:	f000 8213 	beq.w	8002b3a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b02      	cmp	r3, #2
 8002722:	f040 8162 	bne.w	80029ea <HAL_RCC_OscConfig+0xeca>
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800272e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002738:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	fa93 f2a3 	rbit	r2, r3
 8002742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002746:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800274a:	601a      	str	r2, [r3, #0]
  return result;
 800274c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002750:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002754:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002760:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	461a      	mov	r2, r3
 8002768:	2300      	movs	r3, #0
 800276a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7fe fe72 	bl	8001454 <HAL_GetTick>
 8002770:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002774:	e00c      	b.n	8002790 <HAL_RCC_OscConfig+0xc70>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe fe6a 	bl	8001454 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e1fd      	b.n	8002b8c <HAL_RCC_OscConfig+0x106c>
 8002790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002794:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002798:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800279c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	fa93 f2a3 	rbit	r2, r3
 80027ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80027b4:	601a      	str	r2, [r3, #0]
  return result;
 80027b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80027be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d102      	bne.n	80027da <HAL_RCC_OscConfig+0xcba>
 80027d4:	4bb0      	ldr	r3, [pc, #704]	; (8002a98 <HAL_RCC_OscConfig+0xf78>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	e027      	b.n	800282a <HAL_RCC_OscConfig+0xd0a>
 80027da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80027e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	fa93 f2a3 	rbit	r2, r3
 80027f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002808:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	fa93 f2a3 	rbit	r2, r3
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	4b9c      	ldr	r3, [pc, #624]	; (8002a98 <HAL_RCC_OscConfig+0xf78>)
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800282e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002832:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002836:	6011      	str	r1, [r2, #0]
 8002838:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800283c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	fa92 f1a2 	rbit	r1, r2
 8002846:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800284a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800284e:	6011      	str	r1, [r2, #0]
  return result;
 8002850:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002854:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	fab2 f282 	clz	r2, r2
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	f042 0220 	orr.w	r2, r2, #32
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	f002 021f 	and.w	r2, r2, #31
 800286a:	2101      	movs	r1, #1
 800286c:	fa01 f202 	lsl.w	r2, r1, r2
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d182      	bne.n	800277c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002876:	4b88      	ldr	r3, [pc, #544]	; (8002a98 <HAL_RCC_OscConfig+0xf78>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800287e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002882:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800288a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	430b      	orrs	r3, r1
 8002898:	497f      	ldr	r1, [pc, #508]	; (8002a98 <HAL_RCC_OscConfig+0xf78>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
 800289e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80028a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	fa93 f2a3 	rbit	r2, r3
 80028ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028c2:	601a      	str	r2, [r3, #0]
  return result;
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	461a      	mov	r2, r3
 80028e0:	2301      	movs	r3, #1
 80028e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe fdb6 	bl	8001454 <HAL_GetTick>
 80028e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ec:	e009      	b.n	8002902 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ee:	f7fe fdb1 	bl	8001454 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e144      	b.n	8002b8c <HAL_RCC_OscConfig+0x106c>
 8002902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002906:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800290a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800290e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002914:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	fa93 f2a3 	rbit	r2, r3
 800291e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002922:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002926:	601a      	str	r2, [r3, #0]
  return result;
 8002928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002930:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b01      	cmp	r3, #1
 8002944:	d102      	bne.n	800294c <HAL_RCC_OscConfig+0xe2c>
 8002946:	4b54      	ldr	r3, [pc, #336]	; (8002a98 <HAL_RCC_OscConfig+0xf78>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	e027      	b.n	800299c <HAL_RCC_OscConfig+0xe7c>
 800294c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002950:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002954:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	fa93 f2a3 	rbit	r2, r3
 8002968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800297a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	fa93 f2a3 	rbit	r2, r3
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	4b3f      	ldr	r3, [pc, #252]	; (8002a98 <HAL_RCC_OscConfig+0xf78>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029a0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80029a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029a8:	6011      	str	r1, [r2, #0]
 80029aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	fa92 f1a2 	rbit	r1, r2
 80029b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029bc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80029c0:	6011      	str	r1, [r2, #0]
  return result;
 80029c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029c6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	fab2 f282 	clz	r2, r2
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	f042 0220 	orr.w	r2, r2, #32
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	f002 021f 	and.w	r2, r2, #31
 80029dc:	2101      	movs	r1, #1
 80029de:	fa01 f202 	lsl.w	r2, r1, r2
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d082      	beq.n	80028ee <HAL_RCC_OscConfig+0xdce>
 80029e8:	e0cf      	b.n	8002b8a <HAL_RCC_OscConfig+0x106a>
 80029ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80029f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	fa93 f2a3 	rbit	r2, r3
 8002a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a0e:	601a      	str	r2, [r3, #0]
  return result;
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fe fd10 	bl	8001454 <HAL_GetTick>
 8002a34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a38:	e009      	b.n	8002a4e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3a:	f7fe fd0b 	bl	8001454 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e09e      	b.n	8002b8c <HAL_RCC_OscConfig+0x106c>
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a60:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	fa93 f2a3 	rbit	r2, r3
 8002a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a72:	601a      	str	r2, [r3, #0]
  return result;
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d104      	bne.n	8002a9c <HAL_RCC_OscConfig+0xf7c>
 8002a92:	4b01      	ldr	r3, [pc, #4]	; (8002a98 <HAL_RCC_OscConfig+0xf78>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	e029      	b.n	8002aec <HAL_RCC_OscConfig+0xfcc>
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	fa93 f2a3 	rbit	r2, r3
 8002ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002aca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	fa93 f2a3 	rbit	r2, r3
 8002ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <HAL_RCC_OscConfig+0x1078>)
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002af0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002af4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002af8:	6011      	str	r1, [r2, #0]
 8002afa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002afe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	fa92 f1a2 	rbit	r1, r2
 8002b08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b0c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b10:	6011      	str	r1, [r2, #0]
  return result;
 8002b12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b16:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	fab2 f282 	clz	r2, r2
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	f042 0220 	orr.w	r2, r2, #32
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	f002 021f 	and.w	r2, r2, #31
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d180      	bne.n	8002a3a <HAL_RCC_OscConfig+0xf1a>
 8002b38:	e027      	b.n	8002b8a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e01e      	b.n	8002b8c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b4e:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <HAL_RCC_OscConfig+0x1078>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b5a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d10b      	bne.n	8002b86 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000

08002b9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b09e      	sub	sp, #120	; 0x78
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e162      	b.n	8002e7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b90      	ldr	r3, [pc, #576]	; (8002df8 <HAL_RCC_ClockConfig+0x25c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d910      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b8d      	ldr	r3, [pc, #564]	; (8002df8 <HAL_RCC_ClockConfig+0x25c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 0207 	bic.w	r2, r3, #7
 8002bca:	498b      	ldr	r1, [pc, #556]	; (8002df8 <HAL_RCC_ClockConfig+0x25c>)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b89      	ldr	r3, [pc, #548]	; (8002df8 <HAL_RCC_ClockConfig+0x25c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e14a      	b.n	8002e7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf0:	4b82      	ldr	r3, [pc, #520]	; (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	497f      	ldr	r1, [pc, #508]	; (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80dc 	beq.w	8002dc8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d13c      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xf6>
 8002c18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c28:	fab3 f383 	clz	r3, r3
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d102      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xa6>
 8002c3c:	4b6f      	ldr	r3, [pc, #444]	; (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	e00f      	b.n	8002c62 <HAL_RCC_ClockConfig+0xc6>
 8002c42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	667b      	str	r3, [r7, #100]	; 0x64
 8002c50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c54:	663b      	str	r3, [r7, #96]	; 0x60
 8002c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c5e:	4b67      	ldr	r3, [pc, #412]	; (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c66:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c6a:	fa92 f2a2 	rbit	r2, r2
 8002c6e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c72:	fab2 f282 	clz	r2, r2
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	f042 0220 	orr.w	r2, r2, #32
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	f002 021f 	and.w	r2, r2, #31
 8002c82:	2101      	movs	r1, #1
 8002c84:	fa01 f202 	lsl.w	r2, r1, r2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d17b      	bne.n	8002d86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0f3      	b.n	8002e7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d13c      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x178>
 8002c9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d102      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x128>
 8002cbe:	4b4f      	ldr	r3, [pc, #316]	; (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	e00f      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x148>
 8002cc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8002cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce0:	4b46      	ldr	r3, [pc, #280]	; (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ce8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002cea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cec:	fa92 f2a2 	rbit	r2, r2
 8002cf0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cf4:	fab2 f282 	clz	r2, r2
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	f042 0220 	orr.w	r2, r2, #32
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	f002 021f 	and.w	r2, r2, #31
 8002d04:	2101      	movs	r1, #1
 8002d06:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d13a      	bne.n	8002d86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0b2      	b.n	8002e7a <HAL_RCC_ClockConfig+0x2de>
 8002d14:	2302      	movs	r3, #2
 8002d16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	095b      	lsrs	r3, r3, #5
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d102      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x1a0>
 8002d36:	4b31      	ldr	r3, [pc, #196]	; (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	e00d      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1bc>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
 8002d48:	2302      	movs	r3, #2
 8002d4a:	623b      	str	r3, [r7, #32]
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	61fb      	str	r3, [r7, #28]
 8002d54:	4b29      	ldr	r3, [pc, #164]	; (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	2202      	movs	r2, #2
 8002d5a:	61ba      	str	r2, [r7, #24]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	fa92 f2a2 	rbit	r2, r2
 8002d62:	617a      	str	r2, [r7, #20]
  return result;
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	fab2 f282 	clz	r2, r2
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	f042 0220 	orr.w	r2, r2, #32
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	f002 021f 	and.w	r2, r2, #31
 8002d76:	2101      	movs	r1, #1
 8002d78:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e079      	b.n	8002e7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d86:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f023 0203 	bic.w	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	491a      	ldr	r1, [pc, #104]	; (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d98:	f7fe fb5c 	bl	8001454 <HAL_GetTick>
 8002d9c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da0:	f7fe fb58 	bl	8001454 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e061      	b.n	8002e7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 020c 	and.w	r2, r3, #12
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d1eb      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCC_ClockConfig+0x25c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d214      	bcs.n	8002e00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <HAL_RCC_ClockConfig+0x25c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 0207 	bic.w	r2, r3, #7
 8002dde:	4906      	ldr	r1, [pc, #24]	; (8002df8 <HAL_RCC_ClockConfig+0x25c>)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <HAL_RCC_ClockConfig+0x25c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e040      	b.n	8002e7a <HAL_RCC_ClockConfig+0x2de>
 8002df8:	40022000 	.word	0x40022000
 8002dfc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <HAL_RCC_ClockConfig+0x2e8>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	491a      	ldr	r1, [pc, #104]	; (8002e84 <HAL_RCC_ClockConfig+0x2e8>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e2a:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <HAL_RCC_ClockConfig+0x2e8>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4912      	ldr	r1, [pc, #72]	; (8002e84 <HAL_RCC_ClockConfig+0x2e8>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e3e:	f000 f829 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 8002e42:	4601      	mov	r1, r0
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <HAL_RCC_ClockConfig+0x2e8>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e4c:	22f0      	movs	r2, #240	; 0xf0
 8002e4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	fa92 f2a2 	rbit	r2, r2
 8002e56:	60fa      	str	r2, [r7, #12]
  return result;
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	fab2 f282 	clz	r2, r2
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	40d3      	lsrs	r3, r2
 8002e62:	4a09      	ldr	r2, [pc, #36]	; (8002e88 <HAL_RCC_ClockConfig+0x2ec>)
 8002e64:	5cd3      	ldrb	r3, [r2, r3]
 8002e66:	fa21 f303 	lsr.w	r3, r1, r3
 8002e6a:	4a08      	ldr	r2, [pc, #32]	; (8002e8c <HAL_RCC_ClockConfig+0x2f0>)
 8002e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <HAL_RCC_ClockConfig+0x2f4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe faaa 	bl	80013cc <HAL_InitTick>
  
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3778      	adds	r7, #120	; 0x78
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	08007a5c 	.word	0x08007a5c
 8002e8c:	20000000 	.word	0x20000000
 8002e90:	20000004 	.word	0x20000004

08002e94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b08b      	sub	sp, #44	; 0x2c
 8002e98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002eae:	4b29      	ldr	r3, [pc, #164]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d002      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x30>
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d003      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0x36>
 8002ec2:	e03c      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ec4:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ec6:	623b      	str	r3, [r7, #32]
      break;
 8002ec8:	e03c      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ed0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ed4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	fa92 f2a2 	rbit	r2, r2
 8002edc:	607a      	str	r2, [r7, #4]
  return result;
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	fab2 f282 	clz	r2, r2
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	40d3      	lsrs	r3, r2
 8002ee8:	4a1c      	ldr	r2, [pc, #112]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002eea:	5cd3      	ldrb	r3, [r2, r3]
 8002eec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002eee:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	220f      	movs	r2, #15
 8002ef8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	fa92 f2a2 	rbit	r2, r2
 8002f00:	60fa      	str	r2, [r7, #12]
  return result;
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	fab2 f282 	clz	r2, r2
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	40d3      	lsrs	r3, r2
 8002f0c:	4a14      	ldr	r2, [pc, #80]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f0e:	5cd3      	ldrb	r3, [r2, r3]
 8002f10:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f1c:	4a0e      	ldr	r2, [pc, #56]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	fb02 f303 	mul.w	r3, r2, r3
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2c:	e004      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	4a0c      	ldr	r2, [pc, #48]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	623b      	str	r3, [r7, #32]
      break;
 8002f3c:	e002      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f40:	623b      	str	r3, [r7, #32]
      break;
 8002f42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f44:	6a3b      	ldr	r3, [r7, #32]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	372c      	adds	r7, #44	; 0x2c
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	007a1200 	.word	0x007a1200
 8002f5c:	08007a74 	.word	0x08007a74
 8002f60:	08007a84 	.word	0x08007a84
 8002f64:	003d0900 	.word	0x003d0900

08002f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f6c:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20000000 	.word	0x20000000

08002f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f86:	f7ff ffef 	bl	8002f68 <HAL_RCC_GetHCLKFreq>
 8002f8a:	4601      	mov	r1, r0
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f94:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	fa92 f2a2 	rbit	r2, r2
 8002fa0:	603a      	str	r2, [r7, #0]
  return result;
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	fab2 f282 	clz	r2, r2
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	40d3      	lsrs	r3, r2
 8002fac:	4a04      	ldr	r2, [pc, #16]	; (8002fc0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002fae:	5cd3      	ldrb	r3, [r2, r3]
 8002fb0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	08007a6c 	.word	0x08007a6c

08002fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002fca:	f7ff ffcd 	bl	8002f68 <HAL_RCC_GetHCLKFreq>
 8002fce:	4601      	mov	r1, r0
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002fd8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002fdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	fa92 f2a2 	rbit	r2, r2
 8002fe4:	603a      	str	r2, [r7, #0]
  return result;
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	fab2 f282 	clz	r2, r2
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	40d3      	lsrs	r3, r2
 8002ff0:	4a04      	ldr	r2, [pc, #16]	; (8003004 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ff2:	5cd3      	ldrb	r3, [r2, r3]
 8002ff4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000
 8003004:	08007a6c 	.word	0x08007a6c

08003008 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b092      	sub	sp, #72	; 0x48
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003018:	2300      	movs	r3, #0
 800301a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 80cd 	beq.w	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800302c:	4b86      	ldr	r3, [pc, #536]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10e      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003038:	4b83      	ldr	r3, [pc, #524]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	4a82      	ldr	r2, [pc, #520]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800303e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003042:	61d3      	str	r3, [r2, #28]
 8003044:	4b80      	ldr	r3, [pc, #512]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003050:	2301      	movs	r3, #1
 8003052:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003056:	4b7d      	ldr	r3, [pc, #500]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d118      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003062:	4b7a      	ldr	r3, [pc, #488]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a79      	ldr	r2, [pc, #484]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306e:	f7fe f9f1 	bl	8001454 <HAL_GetTick>
 8003072:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003074:	e008      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003076:	f7fe f9ed 	bl	8001454 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b64      	cmp	r3, #100	; 0x64
 8003082:	d901      	bls.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e0db      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003088:	4b70      	ldr	r3, [pc, #448]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003094:	4b6c      	ldr	r3, [pc, #432]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800309e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d07d      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d076      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030b2:	4b65      	ldr	r3, [pc, #404]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030c0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	fa93 f3a3 	rbit	r3, r3
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80030ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030cc:	fab3 f383 	clz	r3, r3
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	4b5e      	ldr	r3, [pc, #376]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	461a      	mov	r2, r3
 80030dc:	2301      	movs	r3, #1
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b55      	ldr	r3, [pc, #340]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	461a      	mov	r2, r3
 8003100:	2300      	movs	r3, #0
 8003102:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003104:	4a50      	ldr	r2, [pc, #320]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003108:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800310a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d045      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fe f99e 	bl	8001454 <HAL_GetTick>
 8003118:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311a:	e00a      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311c:	f7fe f99a 	bl	8001454 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e086      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003132:	2302      	movs	r3, #2
 8003134:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
 800313e:	2302      	movs	r3, #2
 8003140:	623b      	str	r3, [r7, #32]
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	61fb      	str	r3, [r7, #28]
  return result;
 800314a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f043 0302 	orr.w	r3, r3, #2
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d102      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003160:	4b39      	ldr	r3, [pc, #228]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	e007      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003166:	2302      	movs	r3, #2
 8003168:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	fa93 f3a3 	rbit	r3, r3
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	4b35      	ldr	r3, [pc, #212]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	2202      	movs	r2, #2
 8003178:	613a      	str	r2, [r7, #16]
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	fa92 f2a2 	rbit	r2, r2
 8003180:	60fa      	str	r2, [r7, #12]
  return result;
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	fab2 f282 	clz	r2, r2
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	f002 021f 	and.w	r2, r2, #31
 8003194:	2101      	movs	r1, #1
 8003196:	fa01 f202 	lsl.w	r2, r1, r2
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0bd      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80031a0:	4b29      	ldr	r3, [pc, #164]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4926      	ldr	r1, [pc, #152]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d105      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ba:	4b23      	ldr	r3, [pc, #140]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4a22      	ldr	r2, [pc, #136]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d008      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031d2:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f023 0203 	bic.w	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	491a      	ldr	r1, [pc, #104]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031f0:	4b15      	ldr	r3, [pc, #84]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	f023 0210 	bic.w	r2, r3, #16
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4912      	ldr	r1, [pc, #72]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320a:	2b00      	cmp	r3, #0
 800320c:	d008      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003212:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	490b      	ldr	r1, [pc, #44]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800321c:	4313      	orrs	r3, r2
 800321e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	4903      	ldr	r1, [pc, #12]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800323a:	4313      	orrs	r3, r2
 800323c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3748      	adds	r7, #72	; 0x48
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000
 800324c:	40007000 	.word	0x40007000
 8003250:	10908100 	.word	0x10908100

08003254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e049      	b.n	80032fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d106      	bne.n	8003280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fd fed0 	bl	8001020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	4619      	mov	r1, r3
 8003292:	4610      	mov	r0, r2
 8003294:	f000 fc5c 	bl	8003b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e049      	b.n	80033a8 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d106      	bne.n	800332e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f841 	bl	80033b0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3304      	adds	r3, #4
 800333e:	4619      	mov	r1, r3
 8003340:	4610      	mov	r0, r2
 8003342:	f000 fc05 	bl	8003b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d109      	bne.n	80033ec <HAL_TIM_OC_Start_IT+0x28>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	bf14      	ite	ne
 80033e4:	2301      	movne	r3, #1
 80033e6:	2300      	moveq	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	e03c      	b.n	8003466 <HAL_TIM_OC_Start_IT+0xa2>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d109      	bne.n	8003406 <HAL_TIM_OC_Start_IT+0x42>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	bf14      	ite	ne
 80033fe:	2301      	movne	r3, #1
 8003400:	2300      	moveq	r3, #0
 8003402:	b2db      	uxtb	r3, r3
 8003404:	e02f      	b.n	8003466 <HAL_TIM_OC_Start_IT+0xa2>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b08      	cmp	r3, #8
 800340a:	d109      	bne.n	8003420 <HAL_TIM_OC_Start_IT+0x5c>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	bf14      	ite	ne
 8003418:	2301      	movne	r3, #1
 800341a:	2300      	moveq	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	e022      	b.n	8003466 <HAL_TIM_OC_Start_IT+0xa2>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b0c      	cmp	r3, #12
 8003424:	d109      	bne.n	800343a <HAL_TIM_OC_Start_IT+0x76>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	bf14      	ite	ne
 8003432:	2301      	movne	r3, #1
 8003434:	2300      	moveq	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	e015      	b.n	8003466 <HAL_TIM_OC_Start_IT+0xa2>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b10      	cmp	r3, #16
 800343e:	d109      	bne.n	8003454 <HAL_TIM_OC_Start_IT+0x90>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	e008      	b.n	8003466 <HAL_TIM_OC_Start_IT+0xa2>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b01      	cmp	r3, #1
 800345e:	bf14      	ite	ne
 8003460:	2301      	movne	r3, #1
 8003462:	2300      	moveq	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0d3      	b.n	8003616 <HAL_TIM_OC_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d104      	bne.n	800347e <HAL_TIM_OC_Start_IT+0xba>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800347c:	e023      	b.n	80034c6 <HAL_TIM_OC_Start_IT+0x102>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b04      	cmp	r3, #4
 8003482:	d104      	bne.n	800348e <HAL_TIM_OC_Start_IT+0xca>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800348c:	e01b      	b.n	80034c6 <HAL_TIM_OC_Start_IT+0x102>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d104      	bne.n	800349e <HAL_TIM_OC_Start_IT+0xda>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800349c:	e013      	b.n	80034c6 <HAL_TIM_OC_Start_IT+0x102>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b0c      	cmp	r3, #12
 80034a2:	d104      	bne.n	80034ae <HAL_TIM_OC_Start_IT+0xea>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034ac:	e00b      	b.n	80034c6 <HAL_TIM_OC_Start_IT+0x102>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b10      	cmp	r3, #16
 80034b2:	d104      	bne.n	80034be <HAL_TIM_OC_Start_IT+0xfa>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034bc:	e003      	b.n	80034c6 <HAL_TIM_OC_Start_IT+0x102>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b0c      	cmp	r3, #12
 80034ca:	d841      	bhi.n	8003550 <HAL_TIM_OC_Start_IT+0x18c>
 80034cc:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <HAL_TIM_OC_Start_IT+0x110>)
 80034ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d2:	bf00      	nop
 80034d4:	08003509 	.word	0x08003509
 80034d8:	08003551 	.word	0x08003551
 80034dc:	08003551 	.word	0x08003551
 80034e0:	08003551 	.word	0x08003551
 80034e4:	0800351b 	.word	0x0800351b
 80034e8:	08003551 	.word	0x08003551
 80034ec:	08003551 	.word	0x08003551
 80034f0:	08003551 	.word	0x08003551
 80034f4:	0800352d 	.word	0x0800352d
 80034f8:	08003551 	.word	0x08003551
 80034fc:	08003551 	.word	0x08003551
 8003500:	08003551 	.word	0x08003551
 8003504:	0800353f 	.word	0x0800353f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0202 	orr.w	r2, r2, #2
 8003516:	60da      	str	r2, [r3, #12]
      break;
 8003518:	e01d      	b.n	8003556 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0204 	orr.w	r2, r2, #4
 8003528:	60da      	str	r2, [r3, #12]
      break;
 800352a:	e014      	b.n	8003556 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0208 	orr.w	r2, r2, #8
 800353a:	60da      	str	r2, [r3, #12]
      break;
 800353c:	e00b      	b.n	8003556 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0210 	orr.w	r2, r2, #16
 800354c:	60da      	str	r2, [r3, #12]
      break;
 800354e:	e002      	b.n	8003556 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
      break;
 8003554:	bf00      	nop
  }

  if (status == HAL_OK)
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d15b      	bne.n	8003614 <HAL_TIM_OC_Start_IT+0x250>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2201      	movs	r2, #1
 8003562:	6839      	ldr	r1, [r7, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f000 feab 	bl	80042c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a2c      	ldr	r2, [pc, #176]	; (8003620 <HAL_TIM_OC_Start_IT+0x25c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00e      	beq.n	8003592 <HAL_TIM_OC_Start_IT+0x1ce>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a2a      	ldr	r2, [pc, #168]	; (8003624 <HAL_TIM_OC_Start_IT+0x260>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d009      	beq.n	8003592 <HAL_TIM_OC_Start_IT+0x1ce>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a29      	ldr	r2, [pc, #164]	; (8003628 <HAL_TIM_OC_Start_IT+0x264>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d004      	beq.n	8003592 <HAL_TIM_OC_Start_IT+0x1ce>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a27      	ldr	r2, [pc, #156]	; (800362c <HAL_TIM_OC_Start_IT+0x268>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <HAL_TIM_OC_Start_IT+0x1d2>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <HAL_TIM_OC_Start_IT+0x1d4>
 8003596:	2300      	movs	r3, #0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d007      	beq.n	80035ac <HAL_TIM_OC_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035aa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1b      	ldr	r2, [pc, #108]	; (8003620 <HAL_TIM_OC_Start_IT+0x25c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00e      	beq.n	80035d4 <HAL_TIM_OC_Start_IT+0x210>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035be:	d009      	beq.n	80035d4 <HAL_TIM_OC_Start_IT+0x210>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a1a      	ldr	r2, [pc, #104]	; (8003630 <HAL_TIM_OC_Start_IT+0x26c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <HAL_TIM_OC_Start_IT+0x210>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a15      	ldr	r2, [pc, #84]	; (8003624 <HAL_TIM_OC_Start_IT+0x260>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d115      	bne.n	8003600 <HAL_TIM_OC_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	4b16      	ldr	r3, [pc, #88]	; (8003634 <HAL_TIM_OC_Start_IT+0x270>)
 80035dc:	4013      	ands	r3, r2
 80035de:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b06      	cmp	r3, #6
 80035e4:	d015      	beq.n	8003612 <HAL_TIM_OC_Start_IT+0x24e>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ec:	d011      	beq.n	8003612 <HAL_TIM_OC_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	e008      	b.n	8003612 <HAL_TIM_OC_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e000      	b.n	8003614 <HAL_TIM_OC_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003612:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003614:	7bfb      	ldrb	r3, [r7, #15]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40014000 	.word	0x40014000
 8003628:	40014400 	.word	0x40014400
 800362c:	40014800 	.word	0x40014800
 8003630:	40000400 	.word	0x40000400
 8003634:	00010007 	.word	0x00010007

08003638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b02      	cmp	r3, #2
 800364c:	d122      	bne.n	8003694 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b02      	cmp	r3, #2
 800365a:	d11b      	bne.n	8003694 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0202 	mvn.w	r2, #2
 8003664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fa49 	bl	8003b12 <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fc ff44 	bl	8000510 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fa4c 	bl	8003b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d122      	bne.n	80036e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d11b      	bne.n	80036e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0204 	mvn.w	r2, #4
 80036b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2202      	movs	r2, #2
 80036be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fa1f 	bl	8003b12 <HAL_TIM_IC_CaptureCallback>
 80036d4:	e005      	b.n	80036e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fc ff1a 	bl	8000510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fa22 	bl	8003b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d122      	bne.n	800373c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b08      	cmp	r3, #8
 8003702:	d11b      	bne.n	800373c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0208 	mvn.w	r2, #8
 800370c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2204      	movs	r2, #4
 8003712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f9f5 	bl	8003b12 <HAL_TIM_IC_CaptureCallback>
 8003728:	e005      	b.n	8003736 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fc fef0 	bl	8000510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f9f8 	bl	8003b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b10      	cmp	r3, #16
 8003748:	d122      	bne.n	8003790 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	2b10      	cmp	r3, #16
 8003756:	d11b      	bne.n	8003790 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0210 	mvn.w	r2, #16
 8003760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2208      	movs	r2, #8
 8003766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f9cb 	bl	8003b12 <HAL_TIM_IC_CaptureCallback>
 800377c:	e005      	b.n	800378a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fc fec6 	bl	8000510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f9ce 	bl	8003b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b01      	cmp	r3, #1
 800379c:	d10e      	bne.n	80037bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d107      	bne.n	80037bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0201 	mvn.w	r2, #1
 80037b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f9a1 	bl	8003afe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c6:	2b80      	cmp	r3, #128	; 0x80
 80037c8:	d10e      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d4:	2b80      	cmp	r3, #128	; 0x80
 80037d6:	d107      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fe0a 	bl	80043fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f6:	d10e      	bne.n	8003816 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b80      	cmp	r3, #128	; 0x80
 8003804:	d107      	bne.n	8003816 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800380e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fdfd 	bl	8004410 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003820:	2b40      	cmp	r3, #64	; 0x40
 8003822:	d10e      	bne.n	8003842 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d107      	bne.n	8003842 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800383a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f97c 	bl	8003b3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f003 0320 	and.w	r3, r3, #32
 800384c:	2b20      	cmp	r3, #32
 800384e:	d10e      	bne.n	800386e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b20      	cmp	r3, #32
 800385c:	d107      	bne.n	800386e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f06f 0220 	mvn.w	r2, #32
 8003866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fdbd 	bl	80043e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003892:	2302      	movs	r3, #2
 8003894:	e066      	b.n	8003964 <HAL_TIM_OC_ConfigChannel+0xec>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b14      	cmp	r3, #20
 80038a2:	d857      	bhi.n	8003954 <HAL_TIM_OC_ConfigChannel+0xdc>
 80038a4:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <HAL_TIM_OC_ConfigChannel+0x34>)
 80038a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038aa:	bf00      	nop
 80038ac:	08003901 	.word	0x08003901
 80038b0:	08003955 	.word	0x08003955
 80038b4:	08003955 	.word	0x08003955
 80038b8:	08003955 	.word	0x08003955
 80038bc:	0800390f 	.word	0x0800390f
 80038c0:	08003955 	.word	0x08003955
 80038c4:	08003955 	.word	0x08003955
 80038c8:	08003955 	.word	0x08003955
 80038cc:	0800391d 	.word	0x0800391d
 80038d0:	08003955 	.word	0x08003955
 80038d4:	08003955 	.word	0x08003955
 80038d8:	08003955 	.word	0x08003955
 80038dc:	0800392b 	.word	0x0800392b
 80038e0:	08003955 	.word	0x08003955
 80038e4:	08003955 	.word	0x08003955
 80038e8:	08003955 	.word	0x08003955
 80038ec:	08003939 	.word	0x08003939
 80038f0:	08003955 	.word	0x08003955
 80038f4:	08003955 	.word	0x08003955
 80038f8:	08003955 	.word	0x08003955
 80038fc:	08003947 	.word	0x08003947
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 f99a 	bl	8003c40 <TIM_OC1_SetConfig>
      break;
 800390c:	e025      	b.n	800395a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fa19 	bl	8003d4c <TIM_OC2_SetConfig>
      break;
 800391a:	e01e      	b.n	800395a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fa92 	bl	8003e4c <TIM_OC3_SetConfig>
      break;
 8003928:	e017      	b.n	800395a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fb09 	bl	8003f48 <TIM_OC4_SetConfig>
      break;
 8003936:	e010      	b.n	800395a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fb66 	bl	8004010 <TIM_OC5_SetConfig>
      break;
 8003944:	e009      	b.n	800395a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fbbd 	bl	80040cc <TIM_OC6_SetConfig>
      break;
 8003952:	e002      	b.n	800395a <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	75fb      	strb	r3, [r7, #23]
      break;
 8003958:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003962:	7dfb      	ldrb	r3, [r7, #23]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_TIM_ConfigClockSource+0x1c>
 8003984:	2302      	movs	r3, #2
 8003986:	e0b6      	b.n	8003af6 <HAL_TIM_ConfigClockSource+0x18a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c4:	d03e      	beq.n	8003a44 <HAL_TIM_ConfigClockSource+0xd8>
 80039c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ca:	f200 8087 	bhi.w	8003adc <HAL_TIM_ConfigClockSource+0x170>
 80039ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d2:	f000 8086 	beq.w	8003ae2 <HAL_TIM_ConfigClockSource+0x176>
 80039d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039da:	d87f      	bhi.n	8003adc <HAL_TIM_ConfigClockSource+0x170>
 80039dc:	2b70      	cmp	r3, #112	; 0x70
 80039de:	d01a      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0xaa>
 80039e0:	2b70      	cmp	r3, #112	; 0x70
 80039e2:	d87b      	bhi.n	8003adc <HAL_TIM_ConfigClockSource+0x170>
 80039e4:	2b60      	cmp	r3, #96	; 0x60
 80039e6:	d050      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0x11e>
 80039e8:	2b60      	cmp	r3, #96	; 0x60
 80039ea:	d877      	bhi.n	8003adc <HAL_TIM_ConfigClockSource+0x170>
 80039ec:	2b50      	cmp	r3, #80	; 0x50
 80039ee:	d03c      	beq.n	8003a6a <HAL_TIM_ConfigClockSource+0xfe>
 80039f0:	2b50      	cmp	r3, #80	; 0x50
 80039f2:	d873      	bhi.n	8003adc <HAL_TIM_ConfigClockSource+0x170>
 80039f4:	2b40      	cmp	r3, #64	; 0x40
 80039f6:	d058      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0x13e>
 80039f8:	2b40      	cmp	r3, #64	; 0x40
 80039fa:	d86f      	bhi.n	8003adc <HAL_TIM_ConfigClockSource+0x170>
 80039fc:	2b30      	cmp	r3, #48	; 0x30
 80039fe:	d064      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x15e>
 8003a00:	2b30      	cmp	r3, #48	; 0x30
 8003a02:	d86b      	bhi.n	8003adc <HAL_TIM_ConfigClockSource+0x170>
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d060      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x15e>
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d867      	bhi.n	8003adc <HAL_TIM_ConfigClockSource+0x170>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d05c      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x15e>
 8003a10:	2b10      	cmp	r3, #16
 8003a12:	d05a      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x15e>
 8003a14:	e062      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6899      	ldr	r1, [r3, #8]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f000 fc2b 	bl	8004280 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	609a      	str	r2, [r3, #8]
      break;
 8003a42:	e04f      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	6899      	ldr	r1, [r3, #8]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f000 fc14 	bl	8004280 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a66:	609a      	str	r2, [r3, #8]
      break;
 8003a68:	e03c      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	6859      	ldr	r1, [r3, #4]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f000 fb88 	bl	800418c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2150      	movs	r1, #80	; 0x50
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 fbe1 	bl	800424a <TIM_ITRx_SetConfig>
      break;
 8003a88:	e02c      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	6859      	ldr	r1, [r3, #4]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	461a      	mov	r2, r3
 8003a98:	f000 fba7 	bl	80041ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2160      	movs	r1, #96	; 0x60
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fbd1 	bl	800424a <TIM_ITRx_SetConfig>
      break;
 8003aa8:	e01c      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	6859      	ldr	r1, [r3, #4]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f000 fb68 	bl	800418c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2140      	movs	r1, #64	; 0x40
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fbc1 	bl	800424a <TIM_ITRx_SetConfig>
      break;
 8003ac8:	e00c      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	f000 fbb8 	bl	800424a <TIM_ITRx_SetConfig>
      break;
 8003ada:	e003      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae0:	e000      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ae2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a32      	ldr	r2, [pc, #200]	; (8003c2c <TIM_Base_SetConfig+0xdc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d007      	beq.n	8003b78 <TIM_Base_SetConfig+0x28>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6e:	d003      	beq.n	8003b78 <TIM_Base_SetConfig+0x28>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a2f      	ldr	r2, [pc, #188]	; (8003c30 <TIM_Base_SetConfig+0xe0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d108      	bne.n	8003b8a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a27      	ldr	r2, [pc, #156]	; (8003c2c <TIM_Base_SetConfig+0xdc>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d013      	beq.n	8003bba <TIM_Base_SetConfig+0x6a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b98:	d00f      	beq.n	8003bba <TIM_Base_SetConfig+0x6a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a24      	ldr	r2, [pc, #144]	; (8003c30 <TIM_Base_SetConfig+0xe0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00b      	beq.n	8003bba <TIM_Base_SetConfig+0x6a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a23      	ldr	r2, [pc, #140]	; (8003c34 <TIM_Base_SetConfig+0xe4>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d007      	beq.n	8003bba <TIM_Base_SetConfig+0x6a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a22      	ldr	r2, [pc, #136]	; (8003c38 <TIM_Base_SetConfig+0xe8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d003      	beq.n	8003bba <TIM_Base_SetConfig+0x6a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a21      	ldr	r2, [pc, #132]	; (8003c3c <TIM_Base_SetConfig+0xec>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d108      	bne.n	8003bcc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a0e      	ldr	r2, [pc, #56]	; (8003c2c <TIM_Base_SetConfig+0xdc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00b      	beq.n	8003c10 <TIM_Base_SetConfig+0xc0>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a0e      	ldr	r2, [pc, #56]	; (8003c34 <TIM_Base_SetConfig+0xe4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d007      	beq.n	8003c10 <TIM_Base_SetConfig+0xc0>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a0d      	ldr	r2, [pc, #52]	; (8003c38 <TIM_Base_SetConfig+0xe8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_Base_SetConfig+0xc0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a0c      	ldr	r2, [pc, #48]	; (8003c3c <TIM_Base_SetConfig+0xec>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d103      	bne.n	8003c18 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	615a      	str	r2, [r3, #20]
}
 8003c1e:	bf00      	nop
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40000400 	.word	0x40000400
 8003c34:	40014000 	.word	0x40014000
 8003c38:	40014400 	.word	0x40014400
 8003c3c:	40014800 	.word	0x40014800

08003c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	f023 0201 	bic.w	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f023 0302 	bic.w	r3, r3, #2
 8003c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a28      	ldr	r2, [pc, #160]	; (8003d3c <TIM_OC1_SetConfig+0xfc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00b      	beq.n	8003cb8 <TIM_OC1_SetConfig+0x78>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a27      	ldr	r2, [pc, #156]	; (8003d40 <TIM_OC1_SetConfig+0x100>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d007      	beq.n	8003cb8 <TIM_OC1_SetConfig+0x78>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a26      	ldr	r2, [pc, #152]	; (8003d44 <TIM_OC1_SetConfig+0x104>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d003      	beq.n	8003cb8 <TIM_OC1_SetConfig+0x78>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a25      	ldr	r2, [pc, #148]	; (8003d48 <TIM_OC1_SetConfig+0x108>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d10c      	bne.n	8003cd2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f023 0308 	bic.w	r3, r3, #8
 8003cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f023 0304 	bic.w	r3, r3, #4
 8003cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a19      	ldr	r2, [pc, #100]	; (8003d3c <TIM_OC1_SetConfig+0xfc>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00b      	beq.n	8003cf2 <TIM_OC1_SetConfig+0xb2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a18      	ldr	r2, [pc, #96]	; (8003d40 <TIM_OC1_SetConfig+0x100>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d007      	beq.n	8003cf2 <TIM_OC1_SetConfig+0xb2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a17      	ldr	r2, [pc, #92]	; (8003d44 <TIM_OC1_SetConfig+0x104>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d003      	beq.n	8003cf2 <TIM_OC1_SetConfig+0xb2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a16      	ldr	r2, [pc, #88]	; (8003d48 <TIM_OC1_SetConfig+0x108>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d111      	bne.n	8003d16 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	621a      	str	r2, [r3, #32]
}
 8003d30:	bf00      	nop
 8003d32:	371c      	adds	r7, #28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	40012c00 	.word	0x40012c00
 8003d40:	40014000 	.word	0x40014000
 8003d44:	40014400 	.word	0x40014400
 8003d48:	40014800 	.word	0x40014800

08003d4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	f023 0210 	bic.w	r2, r3, #16
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	021b      	lsls	r3, r3, #8
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f023 0320 	bic.w	r3, r3, #32
 8003d9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a24      	ldr	r2, [pc, #144]	; (8003e3c <TIM_OC2_SetConfig+0xf0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d10d      	bne.n	8003dcc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a1b      	ldr	r2, [pc, #108]	; (8003e3c <TIM_OC2_SetConfig+0xf0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00b      	beq.n	8003dec <TIM_OC2_SetConfig+0xa0>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a1a      	ldr	r2, [pc, #104]	; (8003e40 <TIM_OC2_SetConfig+0xf4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d007      	beq.n	8003dec <TIM_OC2_SetConfig+0xa0>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a19      	ldr	r2, [pc, #100]	; (8003e44 <TIM_OC2_SetConfig+0xf8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_OC2_SetConfig+0xa0>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a18      	ldr	r2, [pc, #96]	; (8003e48 <TIM_OC2_SetConfig+0xfc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d113      	bne.n	8003e14 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003df2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dfa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	621a      	str	r2, [r3, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40014000 	.word	0x40014000
 8003e44:	40014400 	.word	0x40014400
 8003e48:	40014800 	.word	0x40014800

08003e4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0303 	bic.w	r3, r3, #3
 8003e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a23      	ldr	r2, [pc, #140]	; (8003f38 <TIM_OC3_SetConfig+0xec>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d10d      	bne.n	8003eca <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	021b      	lsls	r3, r3, #8
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ec8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a1a      	ldr	r2, [pc, #104]	; (8003f38 <TIM_OC3_SetConfig+0xec>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00b      	beq.n	8003eea <TIM_OC3_SetConfig+0x9e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a19      	ldr	r2, [pc, #100]	; (8003f3c <TIM_OC3_SetConfig+0xf0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d007      	beq.n	8003eea <TIM_OC3_SetConfig+0x9e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a18      	ldr	r2, [pc, #96]	; (8003f40 <TIM_OC3_SetConfig+0xf4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d003      	beq.n	8003eea <TIM_OC3_SetConfig+0x9e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a17      	ldr	r2, [pc, #92]	; (8003f44 <TIM_OC3_SetConfig+0xf8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d113      	bne.n	8003f12 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	621a      	str	r2, [r3, #32]
}
 8003f2c:	bf00      	nop
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40014000 	.word	0x40014000
 8003f40:	40014400 	.word	0x40014400
 8003f44:	40014800 	.word	0x40014800

08003f48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	021b      	lsls	r3, r3, #8
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	031b      	lsls	r3, r3, #12
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a16      	ldr	r2, [pc, #88]	; (8004000 <TIM_OC4_SetConfig+0xb8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00b      	beq.n	8003fc4 <TIM_OC4_SetConfig+0x7c>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a15      	ldr	r2, [pc, #84]	; (8004004 <TIM_OC4_SetConfig+0xbc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <TIM_OC4_SetConfig+0x7c>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a14      	ldr	r2, [pc, #80]	; (8004008 <TIM_OC4_SetConfig+0xc0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_OC4_SetConfig+0x7c>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a13      	ldr	r2, [pc, #76]	; (800400c <TIM_OC4_SetConfig+0xc4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d109      	bne.n	8003fd8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	019b      	lsls	r3, r3, #6
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	621a      	str	r2, [r3, #32]
}
 8003ff2:	bf00      	nop
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40012c00 	.word	0x40012c00
 8004004:	40014000 	.word	0x40014000
 8004008:	40014400 	.word	0x40014400
 800400c:	40014800 	.word	0x40014800

08004010 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800403e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004054:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	041b      	lsls	r3, r3, #16
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a15      	ldr	r2, [pc, #84]	; (80040bc <TIM_OC5_SetConfig+0xac>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00b      	beq.n	8004082 <TIM_OC5_SetConfig+0x72>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a14      	ldr	r2, [pc, #80]	; (80040c0 <TIM_OC5_SetConfig+0xb0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d007      	beq.n	8004082 <TIM_OC5_SetConfig+0x72>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a13      	ldr	r2, [pc, #76]	; (80040c4 <TIM_OC5_SetConfig+0xb4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d003      	beq.n	8004082 <TIM_OC5_SetConfig+0x72>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a12      	ldr	r2, [pc, #72]	; (80040c8 <TIM_OC5_SetConfig+0xb8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d109      	bne.n	8004096 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004088:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	021b      	lsls	r3, r3, #8
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	621a      	str	r2, [r3, #32]
}
 80040b0:	bf00      	nop
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	40012c00 	.word	0x40012c00
 80040c0:	40014000 	.word	0x40014000
 80040c4:	40014400 	.word	0x40014400
 80040c8:	40014800 	.word	0x40014800

080040cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	021b      	lsls	r3, r3, #8
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	051b      	lsls	r3, r3, #20
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a16      	ldr	r2, [pc, #88]	; (800417c <TIM_OC6_SetConfig+0xb0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00b      	beq.n	8004140 <TIM_OC6_SetConfig+0x74>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a15      	ldr	r2, [pc, #84]	; (8004180 <TIM_OC6_SetConfig+0xb4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d007      	beq.n	8004140 <TIM_OC6_SetConfig+0x74>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a14      	ldr	r2, [pc, #80]	; (8004184 <TIM_OC6_SetConfig+0xb8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_OC6_SetConfig+0x74>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a13      	ldr	r2, [pc, #76]	; (8004188 <TIM_OC6_SetConfig+0xbc>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d109      	bne.n	8004154 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004146:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	029b      	lsls	r3, r3, #10
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40014000 	.word	0x40014000
 8004184:	40014400 	.word	0x40014400
 8004188:	40014800 	.word	0x40014800

0800418c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f023 0201 	bic.w	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f023 030a 	bic.w	r3, r3, #10
 80041c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	621a      	str	r2, [r3, #32]
}
 80041de:	bf00      	nop
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b087      	sub	sp, #28
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	f023 0210 	bic.w	r2, r3, #16
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004214:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	031b      	lsls	r3, r3, #12
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004226:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	621a      	str	r2, [r3, #32]
}
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800424a:	b480      	push	{r7}
 800424c:	b085      	sub	sp, #20
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	f043 0307 	orr.w	r3, r3, #7
 800426c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	609a      	str	r2, [r3, #8]
}
 8004274:	bf00      	nop
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800429a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	021a      	lsls	r2, r3, #8
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	609a      	str	r2, [r3, #8]
}
 80042b4:	bf00      	nop
 80042b6:	371c      	adds	r7, #28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f003 031f 	and.w	r3, r3, #31
 80042d2:	2201      	movs	r2, #1
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a1a      	ldr	r2, [r3, #32]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	43db      	mvns	r3, r3
 80042e2:	401a      	ands	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a1a      	ldr	r2, [r3, #32]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	fa01 f303 	lsl.w	r3, r1, r3
 80042f8:	431a      	orrs	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	621a      	str	r2, [r3, #32]
}
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004320:	2302      	movs	r3, #2
 8004322:	e054      	b.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a24      	ldr	r2, [pc, #144]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d108      	bne.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004354:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a17      	ldr	r2, [pc, #92]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00e      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438c:	d009      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a13      	ldr	r2, [pc, #76]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d004      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a11      	ldr	r2, [pc, #68]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d10c      	bne.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	40000400 	.word	0x40000400
 80043e4:	40014000 	.word	0x40014000

080043e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e040      	b.n	80044b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800443a:	2b00      	cmp	r3, #0
 800443c:	d106      	bne.n	800444c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fc fe10 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2224      	movs	r2, #36	; 0x24
 8004450:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0201 	bic.w	r2, r2, #1
 8004460:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fe46 	bl	80050f4 <UART_SetConfig>
 8004468:	4603      	mov	r3, r0
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e022      	b.n	80044b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 ff70 	bl	8005360 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800448e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800449e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fff7 	bl	80054a4 <UART_CheckIdleState>
 80044b6:	4603      	mov	r3, r0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e048      	b.n	8004564 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fc fdc2 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2224      	movs	r2, #36	; 0x24
 80044ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fdf8 	bl	80050f4 <UART_SetConfig>
 8004504:	4603      	mov	r3, r0
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e02a      	b.n	8004564 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 ff22 	bl	8005360 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800452a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800453a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0208 	orr.w	r2, r2, #8
 800454a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 ffa1 	bl	80054a4 <UART_CheckIdleState>
 8004562:	4603      	mov	r3, r0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08a      	sub	sp, #40	; 0x28
 8004570:	af02      	add	r7, sp, #8
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	4613      	mov	r3, r2
 800457a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004580:	2b20      	cmp	r3, #32
 8004582:	f040 8082 	bne.w	800468a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <HAL_UART_Transmit+0x26>
 800458c:	88fb      	ldrh	r3, [r7, #6]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e07a      	b.n	800468c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_UART_Transmit+0x38>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e073      	b.n	800468c <HAL_UART_Transmit+0x120>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2221      	movs	r2, #33	; 0x21
 80045b8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ba:	f7fc ff4b 	bl	8001454 <HAL_GetTick>
 80045be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	88fa      	ldrh	r2, [r7, #6]
 80045c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	88fa      	ldrh	r2, [r7, #6]
 80045cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d8:	d108      	bne.n	80045ec <HAL_UART_Transmit+0x80>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d104      	bne.n	80045ec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	e003      	b.n	80045f4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80045fc:	e02d      	b.n	800465a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2200      	movs	r2, #0
 8004606:	2180      	movs	r1, #128	; 0x80
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 ff94 	bl	8005536 <UART_WaitOnFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e039      	b.n	800468c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10b      	bne.n	8004636 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	881a      	ldrh	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800462a:	b292      	uxth	r2, r2
 800462c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	3302      	adds	r3, #2
 8004632:	61bb      	str	r3, [r7, #24]
 8004634:	e008      	b.n	8004648 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	b292      	uxth	r2, r2
 8004640:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	3301      	adds	r3, #1
 8004646:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1cb      	bne.n	80045fe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2200      	movs	r2, #0
 800466e:	2140      	movs	r1, #64	; 0x40
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 ff60 	bl	8005536 <UART_WaitOnFlagUntilTimeout>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e005      	b.n	800468c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	e000      	b.n	800468c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800468a:	2302      	movs	r3, #2
  }
}
 800468c:	4618      	mov	r0, r3
 800468e:	3720      	adds	r7, #32
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	; 0x28
 8004698:	af02      	add	r7, sp, #8
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	f040 80bf 	bne.w	800482c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_UART_Receive+0x26>
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e0b7      	b.n	800482e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_UART_Receive+0x38>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e0b0      	b.n	800482e <HAL_UART_Receive+0x19a>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2222      	movs	r2, #34	; 0x22
 80046e0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046e8:	f7fc feb4 	bl	8001454 <HAL_GetTick>
 80046ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	88fa      	ldrh	r2, [r7, #6]
 80046f2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	88fa      	ldrh	r2, [r7, #6]
 80046fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004706:	d10e      	bne.n	8004726 <HAL_UART_Receive+0x92>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d105      	bne.n	800471c <HAL_UART_Receive+0x88>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004716:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800471a:	e02d      	b.n	8004778 <HAL_UART_Receive+0xe4>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	22ff      	movs	r2, #255	; 0xff
 8004720:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004724:	e028      	b.n	8004778 <HAL_UART_Receive+0xe4>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10d      	bne.n	800474a <HAL_UART_Receive+0xb6>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d104      	bne.n	8004740 <HAL_UART_Receive+0xac>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	22ff      	movs	r2, #255	; 0xff
 800473a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800473e:	e01b      	b.n	8004778 <HAL_UART_Receive+0xe4>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	227f      	movs	r2, #127	; 0x7f
 8004744:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004748:	e016      	b.n	8004778 <HAL_UART_Receive+0xe4>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004752:	d10d      	bne.n	8004770 <HAL_UART_Receive+0xdc>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d104      	bne.n	8004766 <HAL_UART_Receive+0xd2>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	227f      	movs	r2, #127	; 0x7f
 8004760:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004764:	e008      	b.n	8004778 <HAL_UART_Receive+0xe4>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	223f      	movs	r2, #63	; 0x3f
 800476a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800476e:	e003      	b.n	8004778 <HAL_UART_Receive+0xe4>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800477e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004788:	d108      	bne.n	800479c <HAL_UART_Receive+0x108>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d104      	bne.n	800479c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	e003      	b.n	80047a4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80047ac:	e033      	b.n	8004816 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2200      	movs	r2, #0
 80047b6:	2120      	movs	r1, #32
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 febc 	bl	8005536 <UART_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e032      	b.n	800482e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10c      	bne.n	80047e8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	8a7b      	ldrh	r3, [r7, #18]
 80047d8:	4013      	ands	r3, r2
 80047da:	b29a      	uxth	r2, r3
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	3302      	adds	r3, #2
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	e00d      	b.n	8004804 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	8a7b      	ldrh	r3, [r7, #18]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	4013      	ands	r3, r2
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	3301      	adds	r3, #1
 8004802:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1c5      	bne.n	80047ae <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2220      	movs	r2, #32
 8004826:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004828:	2300      	movs	r3, #0
 800482a:	e000      	b.n	800482e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800482c:	2302      	movs	r3, #2
  }
}
 800482e:	4618      	mov	r0, r3
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004838:	b480      	push	{r7}
 800483a:	b08b      	sub	sp, #44	; 0x2c
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	4613      	mov	r3, r2
 8004844:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800484a:	2b20      	cmp	r3, #32
 800484c:	d156      	bne.n	80048fc <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_UART_Transmit_IT+0x22>
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e04f      	b.n	80048fe <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_UART_Transmit_IT+0x34>
 8004868:	2302      	movs	r3, #2
 800486a:	e048      	b.n	80048fe <HAL_UART_Transmit_IT+0xc6>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	88fa      	ldrh	r2, [r7, #6]
 800487e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	88fa      	ldrh	r2, [r7, #6]
 8004886:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2221      	movs	r2, #33	; 0x21
 800489c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a6:	d107      	bne.n	80048b8 <HAL_UART_Transmit_IT+0x80>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d103      	bne.n	80048b8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4a16      	ldr	r2, [pc, #88]	; (800490c <HAL_UART_Transmit_IT+0xd4>)
 80048b4:	669a      	str	r2, [r3, #104]	; 0x68
 80048b6:	e002      	b.n	80048be <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4a15      	ldr	r2, [pc, #84]	; (8004910 <HAL_UART_Transmit_IT+0xd8>)
 80048bc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	613b      	str	r3, [r7, #16]
   return(result);
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	461a      	mov	r2, r3
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	623b      	str	r3, [r7, #32]
 80048e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	69f9      	ldr	r1, [r7, #28]
 80048ea:	6a3a      	ldr	r2, [r7, #32]
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e6      	bne.n	80048c6 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	e000      	b.n	80048fe <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80048fc:	2302      	movs	r3, #2
  }
}
 80048fe:	4618      	mov	r0, r3
 8004900:	372c      	adds	r7, #44	; 0x2c
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	080059c3 	.word	0x080059c3
 8004910:	0800590b 	.word	0x0800590b

08004914 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08a      	sub	sp, #40	; 0x28
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	4613      	mov	r3, r2
 8004920:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004926:	2b20      	cmp	r3, #32
 8004928:	d13d      	bne.n	80049a6 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_UART_Receive_IT+0x22>
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e036      	b.n	80049a8 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_UART_Receive_IT+0x34>
 8004944:	2302      	movs	r3, #2
 8004946:	e02f      	b.n	80049a8 <HAL_UART_Receive_IT+0x94>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d018      	beq.n	8004996 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	613b      	str	r3, [r7, #16]
   return(result);
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	623b      	str	r3, [r7, #32]
 8004984:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	69f9      	ldr	r1, [r7, #28]
 8004988:	6a3a      	ldr	r2, [r7, #32]
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e6      	bne.n	8004964 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004996:	88fb      	ldrh	r3, [r7, #6]
 8004998:	461a      	mov	r2, r3
 800499a:	68b9      	ldr	r1, [r7, #8]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 fe8f 	bl	80056c0 <UART_Start_Receive_IT>
 80049a2:	4603      	mov	r3, r0
 80049a4:	e000      	b.n	80049a8 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049a6:	2302      	movs	r3, #2
  }
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3728      	adds	r7, #40	; 0x28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b0ba      	sub	sp, #232	; 0xe8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80049da:	f640 030f 	movw	r3, #2063	; 0x80f
 80049de:	4013      	ands	r3, r2
 80049e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80049e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d115      	bne.n	8004a18 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80049ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00f      	beq.n	8004a18 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d009      	beq.n	8004a18 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 82a3 	beq.w	8004f54 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	4798      	blx	r3
      }
      return;
 8004a16:	e29d      	b.n	8004f54 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8117 	beq.w	8004c50 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a32:	4b85      	ldr	r3, [pc, #532]	; (8004c48 <HAL_UART_IRQHandler+0x298>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 810a 	beq.w	8004c50 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d011      	beq.n	8004a6c <HAL_UART_IRQHandler+0xbc>
 8004a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00b      	beq.n	8004a6c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a62:	f043 0201 	orr.w	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d011      	beq.n	8004a9c <HAL_UART_IRQHandler+0xec>
 8004a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00b      	beq.n	8004a9c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a92:	f043 0204 	orr.w	r2, r3, #4
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d011      	beq.n	8004acc <HAL_UART_IRQHandler+0x11c>
 8004aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00b      	beq.n	8004acc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2204      	movs	r2, #4
 8004aba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ac2:	f043 0202 	orr.w	r2, r3, #2
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d017      	beq.n	8004b08 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d105      	bne.n	8004af0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ae8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00b      	beq.n	8004b08 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2208      	movs	r2, #8
 8004af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004afe:	f043 0208 	orr.w	r2, r3, #8
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d012      	beq.n	8004b3a <HAL_UART_IRQHandler+0x18a>
 8004b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00c      	beq.n	8004b3a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b30:	f043 0220 	orr.w	r2, r3, #32
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8209 	beq.w	8004f58 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00d      	beq.n	8004b6e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d007      	beq.n	8004b6e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b82:	2b40      	cmp	r3, #64	; 0x40
 8004b84:	d005      	beq.n	8004b92 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d04f      	beq.n	8004c32 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fe40 	bl	8005818 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba2:	2b40      	cmp	r3, #64	; 0x40
 8004ba4:	d141      	bne.n	8004c2a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3308      	adds	r3, #8
 8004bac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3308      	adds	r3, #8
 8004bce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004be2:	e841 2300 	strex	r3, r2, [r1]
 8004be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1d9      	bne.n	8004ba6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d013      	beq.n	8004c22 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	4a13      	ldr	r2, [pc, #76]	; (8004c4c <HAL_UART_IRQHandler+0x29c>)
 8004c00:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fc fd9e 	bl	8001748 <HAL_DMA_Abort_IT>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d017      	beq.n	8004c42 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c20:	e00f      	b.n	8004c42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f9ac 	bl	8004f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c28:	e00b      	b.n	8004c42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f9a8 	bl	8004f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c30:	e007      	b.n	8004c42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f9a4 	bl	8004f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004c40:	e18a      	b.n	8004f58 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c42:	bf00      	nop
    return;
 8004c44:	e188      	b.n	8004f58 <HAL_UART_IRQHandler+0x5a8>
 8004c46:	bf00      	nop
 8004c48:	04000120 	.word	0x04000120
 8004c4c:	080058df 	.word	0x080058df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	f040 8143 	bne.w	8004ee0 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 813c 	beq.w	8004ee0 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8135 	beq.w	8004ee0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2210      	movs	r2, #16
 8004c7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c88:	2b40      	cmp	r3, #64	; 0x40
 8004c8a:	f040 80b1 	bne.w	8004df0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 815c 	beq.w	8004f5c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	f080 8154 	bcs.w	8004f5c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	f000 8085 	beq.w	8004dd4 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ce2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cf8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d00:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1da      	bne.n	8004cca <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3308      	adds	r3, #8
 8004d1a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d1e:	e853 3f00 	ldrex	r3, [r3]
 8004d22:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3308      	adds	r3, #8
 8004d34:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d38:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d3c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d44:	e841 2300 	strex	r3, r2, [r1]
 8004d48:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1e1      	bne.n	8004d14 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3308      	adds	r3, #8
 8004d56:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3308      	adds	r3, #8
 8004d70:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d74:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e3      	bne.n	8004d50 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9c:	e853 3f00 	ldrex	r3, [r3]
 8004da0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da4:	f023 0310 	bic.w	r3, r3, #16
 8004da8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004db6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004db8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1e4      	bne.n	8004d94 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fc fc81 	bl	80016d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	4619      	mov	r1, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f8d3 	bl	8004f94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dee:	e0b5      	b.n	8004f5c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 80a7 	beq.w	8004f60 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004e12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 80a2 	beq.w	8004f60 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e4      	bne.n	8004e1c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3308      	adds	r3, #8
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	623b      	str	r3, [r7, #32]
   return(result);
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3308      	adds	r3, #8
 8004e72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e76:	633a      	str	r2, [r7, #48]	; 0x30
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e3      	bne.n	8004e52 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f023 0310 	bic.w	r3, r3, #16
 8004eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ebe:	61fb      	str	r3, [r7, #28]
 8004ec0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	69b9      	ldr	r1, [r7, #24]
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	617b      	str	r3, [r7, #20]
   return(result);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e4      	bne.n	8004e9c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ed2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f85b 	bl	8004f94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ede:	e03f      	b.n	8004f60 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00e      	beq.n	8004f0a <HAL_UART_IRQHandler+0x55a>
 8004eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 ff43 	bl	8005d8e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f08:	e02d      	b.n	8004f66 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00e      	beq.n	8004f34 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d008      	beq.n	8004f34 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d01c      	beq.n	8004f64 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	4798      	blx	r3
    }
    return;
 8004f32:	e017      	b.n	8004f64 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d012      	beq.n	8004f66 <HAL_UART_IRQHandler+0x5b6>
 8004f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00c      	beq.n	8004f66 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fd98 	bl	8005a82 <UART_EndTransmit_IT>
    return;
 8004f52:	e008      	b.n	8004f66 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004f54:	bf00      	nop
 8004f56:	e006      	b.n	8004f66 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004f58:	bf00      	nop
 8004f5a:	e004      	b.n	8004f66 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004f5c:	bf00      	nop
 8004f5e:	e002      	b.n	8004f66 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004f60:	bf00      	nop
 8004f62:	e000      	b.n	8004f66 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004f64:	bf00      	nop
  }

}
 8004f66:	37e8      	adds	r7, #232	; 0xe8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b08f      	sub	sp, #60	; 0x3c
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d101      	bne.n	8004fc2 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e040      	b.n	8005044 <HAL_HalfDuplex_EnableTransmitter+0x98>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2224      	movs	r2, #36	; 0x24
 8004fce:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	f023 030c 	bic.w	r3, r3, #12
 8004fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ff0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e6      	bne.n	8004fd0 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f043 0308 	orr.w	r3, r3, #8
 8005016:	633b      	str	r3, [r7, #48]	; 0x30
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	461a      	mov	r2, r3
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	6979      	ldr	r1, [r7, #20]
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	e841 2300 	strex	r3, r2, [r1]
 800502c:	613b      	str	r3, [r7, #16]
   return(result);
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e6      	bne.n	8005002 <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	373c      	adds	r7, #60	; 0x3c
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8005050:	b480      	push	{r7}
 8005052:	b08f      	sub	sp, #60	; 0x3c
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <HAL_HalfDuplex_EnableReceiver+0x16>
 8005062:	2302      	movs	r3, #2
 8005064:	e040      	b.n	80050e8 <HAL_HalfDuplex_EnableReceiver+0x98>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2224      	movs	r2, #36	; 0x24
 8005072:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	61fb      	str	r3, [r7, #28]
   return(result);
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f023 030c 	bic.w	r3, r3, #12
 8005088:	637b      	str	r3, [r7, #52]	; 0x34
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005094:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e6      	bne.n	8005074 <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	e853 3f00 	ldrex	r3, [r3]
 80050b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f043 0304 	orr.w	r3, r3, #4
 80050ba:	633b      	str	r3, [r7, #48]	; 0x30
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	6979      	ldr	r1, [r7, #20]
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	613b      	str	r3, [r7, #16]
   return(result);
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e6      	bne.n	80050a6 <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	373c      	adds	r7, #60	; 0x3c
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b8a      	ldr	r3, [pc, #552]	; (8005348 <UART_SetConfig+0x254>)
 8005120:	4013      	ands	r3, r2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6812      	ldr	r2, [r2, #0]
 8005126:	6979      	ldr	r1, [r7, #20]
 8005128:	430b      	orrs	r3, r1
 800512a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	430a      	orrs	r2, r1
 8005164:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a78      	ldr	r2, [pc, #480]	; (800534c <UART_SetConfig+0x258>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d120      	bne.n	80051b2 <UART_SetConfig+0xbe>
 8005170:	4b77      	ldr	r3, [pc, #476]	; (8005350 <UART_SetConfig+0x25c>)
 8005172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005174:	f003 0303 	and.w	r3, r3, #3
 8005178:	2b03      	cmp	r3, #3
 800517a:	d817      	bhi.n	80051ac <UART_SetConfig+0xb8>
 800517c:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <UART_SetConfig+0x90>)
 800517e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005182:	bf00      	nop
 8005184:	08005195 	.word	0x08005195
 8005188:	080051a1 	.word	0x080051a1
 800518c:	080051a7 	.word	0x080051a7
 8005190:	0800519b 	.word	0x0800519b
 8005194:	2300      	movs	r3, #0
 8005196:	77fb      	strb	r3, [r7, #31]
 8005198:	e01d      	b.n	80051d6 <UART_SetConfig+0xe2>
 800519a:	2302      	movs	r3, #2
 800519c:	77fb      	strb	r3, [r7, #31]
 800519e:	e01a      	b.n	80051d6 <UART_SetConfig+0xe2>
 80051a0:	2304      	movs	r3, #4
 80051a2:	77fb      	strb	r3, [r7, #31]
 80051a4:	e017      	b.n	80051d6 <UART_SetConfig+0xe2>
 80051a6:	2308      	movs	r3, #8
 80051a8:	77fb      	strb	r3, [r7, #31]
 80051aa:	e014      	b.n	80051d6 <UART_SetConfig+0xe2>
 80051ac:	2310      	movs	r3, #16
 80051ae:	77fb      	strb	r3, [r7, #31]
 80051b0:	e011      	b.n	80051d6 <UART_SetConfig+0xe2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a67      	ldr	r2, [pc, #412]	; (8005354 <UART_SetConfig+0x260>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d102      	bne.n	80051c2 <UART_SetConfig+0xce>
 80051bc:	2300      	movs	r3, #0
 80051be:	77fb      	strb	r3, [r7, #31]
 80051c0:	e009      	b.n	80051d6 <UART_SetConfig+0xe2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a64      	ldr	r2, [pc, #400]	; (8005358 <UART_SetConfig+0x264>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d102      	bne.n	80051d2 <UART_SetConfig+0xde>
 80051cc:	2300      	movs	r3, #0
 80051ce:	77fb      	strb	r3, [r7, #31]
 80051d0:	e001      	b.n	80051d6 <UART_SetConfig+0xe2>
 80051d2:	2310      	movs	r3, #16
 80051d4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051de:	d15b      	bne.n	8005298 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80051e0:	7ffb      	ldrb	r3, [r7, #31]
 80051e2:	2b08      	cmp	r3, #8
 80051e4:	d827      	bhi.n	8005236 <UART_SetConfig+0x142>
 80051e6:	a201      	add	r2, pc, #4	; (adr r2, 80051ec <UART_SetConfig+0xf8>)
 80051e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ec:	08005211 	.word	0x08005211
 80051f0:	08005219 	.word	0x08005219
 80051f4:	08005221 	.word	0x08005221
 80051f8:	08005237 	.word	0x08005237
 80051fc:	08005227 	.word	0x08005227
 8005200:	08005237 	.word	0x08005237
 8005204:	08005237 	.word	0x08005237
 8005208:	08005237 	.word	0x08005237
 800520c:	0800522f 	.word	0x0800522f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005210:	f7fd feb6 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 8005214:	61b8      	str	r0, [r7, #24]
        break;
 8005216:	e013      	b.n	8005240 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005218:	f7fd fed4 	bl	8002fc4 <HAL_RCC_GetPCLK2Freq>
 800521c:	61b8      	str	r0, [r7, #24]
        break;
 800521e:	e00f      	b.n	8005240 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005220:	4b4e      	ldr	r3, [pc, #312]	; (800535c <UART_SetConfig+0x268>)
 8005222:	61bb      	str	r3, [r7, #24]
        break;
 8005224:	e00c      	b.n	8005240 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005226:	f7fd fe35 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 800522a:	61b8      	str	r0, [r7, #24]
        break;
 800522c:	e008      	b.n	8005240 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800522e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005232:	61bb      	str	r3, [r7, #24]
        break;
 8005234:	e004      	b.n	8005240 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	77bb      	strb	r3, [r7, #30]
        break;
 800523e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d074      	beq.n	8005330 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	005a      	lsls	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	085b      	lsrs	r3, r3, #1
 8005250:	441a      	add	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	fbb2 f3f3 	udiv	r3, r2, r3
 800525a:	b29b      	uxth	r3, r3
 800525c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	2b0f      	cmp	r3, #15
 8005262:	d916      	bls.n	8005292 <UART_SetConfig+0x19e>
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526a:	d212      	bcs.n	8005292 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	b29b      	uxth	r3, r3
 8005270:	f023 030f 	bic.w	r3, r3, #15
 8005274:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	085b      	lsrs	r3, r3, #1
 800527a:	b29b      	uxth	r3, r3
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	b29a      	uxth	r2, r3
 8005282:	89fb      	ldrh	r3, [r7, #14]
 8005284:	4313      	orrs	r3, r2
 8005286:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	89fa      	ldrh	r2, [r7, #14]
 800528e:	60da      	str	r2, [r3, #12]
 8005290:	e04e      	b.n	8005330 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	77bb      	strb	r3, [r7, #30]
 8005296:	e04b      	b.n	8005330 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005298:	7ffb      	ldrb	r3, [r7, #31]
 800529a:	2b08      	cmp	r3, #8
 800529c:	d827      	bhi.n	80052ee <UART_SetConfig+0x1fa>
 800529e:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <UART_SetConfig+0x1b0>)
 80052a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a4:	080052c9 	.word	0x080052c9
 80052a8:	080052d1 	.word	0x080052d1
 80052ac:	080052d9 	.word	0x080052d9
 80052b0:	080052ef 	.word	0x080052ef
 80052b4:	080052df 	.word	0x080052df
 80052b8:	080052ef 	.word	0x080052ef
 80052bc:	080052ef 	.word	0x080052ef
 80052c0:	080052ef 	.word	0x080052ef
 80052c4:	080052e7 	.word	0x080052e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c8:	f7fd fe5a 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 80052cc:	61b8      	str	r0, [r7, #24]
        break;
 80052ce:	e013      	b.n	80052f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d0:	f7fd fe78 	bl	8002fc4 <HAL_RCC_GetPCLK2Freq>
 80052d4:	61b8      	str	r0, [r7, #24]
        break;
 80052d6:	e00f      	b.n	80052f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d8:	4b20      	ldr	r3, [pc, #128]	; (800535c <UART_SetConfig+0x268>)
 80052da:	61bb      	str	r3, [r7, #24]
        break;
 80052dc:	e00c      	b.n	80052f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052de:	f7fd fdd9 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 80052e2:	61b8      	str	r0, [r7, #24]
        break;
 80052e4:	e008      	b.n	80052f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ea:	61bb      	str	r3, [r7, #24]
        break;
 80052ec:	e004      	b.n	80052f8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	77bb      	strb	r3, [r7, #30]
        break;
 80052f6:	bf00      	nop
    }

    if (pclk != 0U)
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d018      	beq.n	8005330 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	085a      	lsrs	r2, r3, #1
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	441a      	add	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005310:	b29b      	uxth	r3, r3
 8005312:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2b0f      	cmp	r3, #15
 8005318:	d908      	bls.n	800532c <UART_SetConfig+0x238>
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005320:	d204      	bcs.n	800532c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	60da      	str	r2, [r3, #12]
 800532a:	e001      	b.n	8005330 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800533c:	7fbb      	ldrb	r3, [r7, #30]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3720      	adds	r7, #32
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	efff69f3 	.word	0xefff69f3
 800534c:	40013800 	.word	0x40013800
 8005350:	40021000 	.word	0x40021000
 8005354:	40004400 	.word	0x40004400
 8005358:	40004800 	.word	0x40004800
 800535c:	007a1200 	.word	0x007a1200

08005360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01a      	beq.n	8005476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800545e:	d10a      	bne.n	8005476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	605a      	str	r2, [r3, #4]
  }
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054b4:	f7fb ffce 	bl	8001454 <HAL_GetTick>
 80054b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d10e      	bne.n	80054e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f82d 	bl	8005536 <UART_WaitOnFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e023      	b.n	800552e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d10e      	bne.n	8005512 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f817 	bl	8005536 <UART_WaitOnFlagUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e00d      	b.n	800552e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2220      	movs	r2, #32
 8005516:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b09c      	sub	sp, #112	; 0x70
 800553a:	af00      	add	r7, sp, #0
 800553c:	60f8      	str	r0, [r7, #12]
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	603b      	str	r3, [r7, #0]
 8005542:	4613      	mov	r3, r2
 8005544:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005546:	e0a5      	b.n	8005694 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800554a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800554e:	f000 80a1 	beq.w	8005694 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005552:	f7fb ff7f 	bl	8001454 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800555e:	429a      	cmp	r2, r3
 8005560:	d302      	bcc.n	8005568 <UART_WaitOnFlagUntilTimeout+0x32>
 8005562:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005564:	2b00      	cmp	r3, #0
 8005566:	d13e      	bne.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005578:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800557c:	667b      	str	r3, [r7, #100]	; 0x64
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005586:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005588:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800558c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e6      	bne.n	8005568 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3308      	adds	r3, #8
 80055a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ac:	f023 0301 	bic.w	r3, r3, #1
 80055b0:	663b      	str	r3, [r7, #96]	; 0x60
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3308      	adds	r3, #8
 80055b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80055bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e5      	bne.n	800559a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2220      	movs	r2, #32
 80055d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2220      	movs	r2, #32
 80055d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e067      	b.n	80056b6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d04f      	beq.n	8005694 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005602:	d147      	bne.n	8005694 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800560c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	e853 3f00 	ldrex	r3, [r3]
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005622:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	461a      	mov	r2, r3
 800562a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562c:	637b      	str	r3, [r7, #52]	; 0x34
 800562e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005630:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005634:	e841 2300 	strex	r3, r2, [r1]
 8005638:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800563a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e6      	bne.n	800560e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3308      	adds	r3, #8
 8005646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	e853 3f00 	ldrex	r3, [r3]
 800564e:	613b      	str	r3, [r7, #16]
   return(result);
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f023 0301 	bic.w	r3, r3, #1
 8005656:	66bb      	str	r3, [r7, #104]	; 0x68
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3308      	adds	r3, #8
 800565e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005660:	623a      	str	r2, [r7, #32]
 8005662:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005664:	69f9      	ldr	r1, [r7, #28]
 8005666:	6a3a      	ldr	r2, [r7, #32]
 8005668:	e841 2300 	strex	r3, r2, [r1]
 800566c:	61bb      	str	r3, [r7, #24]
   return(result);
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1e5      	bne.n	8005640 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2220      	movs	r2, #32
 8005678:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2220      	movs	r2, #32
 8005684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e010      	b.n	80056b6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69da      	ldr	r2, [r3, #28]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	4013      	ands	r3, r2
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	bf0c      	ite	eq
 80056a4:	2301      	moveq	r3, #1
 80056a6:	2300      	movne	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	461a      	mov	r2, r3
 80056ac:	79fb      	ldrb	r3, [r7, #7]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	f43f af4a 	beq.w	8005548 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3770      	adds	r7, #112	; 0x70
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b091      	sub	sp, #68	; 0x44
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	4613      	mov	r3, r2
 80056cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	88fa      	ldrh	r2, [r7, #6]
 80056d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	88fa      	ldrh	r2, [r7, #6]
 80056e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f2:	d10e      	bne.n	8005712 <UART_Start_Receive_IT+0x52>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d105      	bne.n	8005708 <UART_Start_Receive_IT+0x48>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005702:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005706:	e02d      	b.n	8005764 <UART_Start_Receive_IT+0xa4>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	22ff      	movs	r2, #255	; 0xff
 800570c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005710:	e028      	b.n	8005764 <UART_Start_Receive_IT+0xa4>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10d      	bne.n	8005736 <UART_Start_Receive_IT+0x76>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d104      	bne.n	800572c <UART_Start_Receive_IT+0x6c>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	22ff      	movs	r2, #255	; 0xff
 8005726:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800572a:	e01b      	b.n	8005764 <UART_Start_Receive_IT+0xa4>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	227f      	movs	r2, #127	; 0x7f
 8005730:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005734:	e016      	b.n	8005764 <UART_Start_Receive_IT+0xa4>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800573e:	d10d      	bne.n	800575c <UART_Start_Receive_IT+0x9c>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d104      	bne.n	8005752 <UART_Start_Receive_IT+0x92>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	227f      	movs	r2, #127	; 0x7f
 800574c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005750:	e008      	b.n	8005764 <UART_Start_Receive_IT+0xa4>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	223f      	movs	r2, #63	; 0x3f
 8005756:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800575a:	e003      	b.n	8005764 <UART_Start_Receive_IT+0xa4>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2222      	movs	r2, #34	; 0x22
 8005770:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3308      	adds	r3, #8
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	f043 0301 	orr.w	r3, r3, #1
 8005788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3308      	adds	r3, #8
 8005790:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005792:	637a      	str	r2, [r7, #52]	; 0x34
 8005794:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800579a:	e841 2300 	strex	r3, r2, [r1]
 800579e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e5      	bne.n	8005772 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ae:	d107      	bne.n	80057c0 <UART_Start_Receive_IT+0x100>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d103      	bne.n	80057c0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4a15      	ldr	r2, [pc, #84]	; (8005810 <UART_Start_Receive_IT+0x150>)
 80057bc:	665a      	str	r2, [r3, #100]	; 0x64
 80057be:	e002      	b.n	80057c6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4a14      	ldr	r2, [pc, #80]	; (8005814 <UART_Start_Receive_IT+0x154>)
 80057c4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	613b      	str	r3, [r7, #16]
   return(result);
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80057e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	623b      	str	r3, [r7, #32]
 80057ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	69f9      	ldr	r1, [r7, #28]
 80057f2:	6a3a      	ldr	r2, [r7, #32]
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e6      	bne.n	80057ce <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3744      	adds	r7, #68	; 0x44
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	08005c33 	.word	0x08005c33
 8005814:	08005ad7 	.word	0x08005ad7

08005818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005818:	b480      	push	{r7}
 800581a:	b095      	sub	sp, #84	; 0x54
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005828:	e853 3f00 	ldrex	r3, [r3]
 800582c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005834:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800583e:	643b      	str	r3, [r7, #64]	; 0x40
 8005840:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005842:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005844:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005846:	e841 2300 	strex	r3, r2, [r1]
 800584a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1e6      	bne.n	8005820 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3308      	adds	r3, #8
 8005858:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	e853 3f00 	ldrex	r3, [r3]
 8005860:	61fb      	str	r3, [r7, #28]
   return(result);
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	f023 0301 	bic.w	r3, r3, #1
 8005868:	64bb      	str	r3, [r7, #72]	; 0x48
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3308      	adds	r3, #8
 8005870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005872:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005874:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1e5      	bne.n	8005852 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800588a:	2b01      	cmp	r3, #1
 800588c:	d118      	bne.n	80058c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	60bb      	str	r3, [r7, #8]
   return(result);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f023 0310 	bic.w	r3, r3, #16
 80058a2:	647b      	str	r3, [r7, #68]	; 0x44
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	461a      	mov	r2, r3
 80058aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	6979      	ldr	r1, [r7, #20]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	613b      	str	r3, [r7, #16]
   return(result);
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e6      	bne.n	800588e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80058d2:	bf00      	nop
 80058d4:	3754      	adds	r7, #84	; 0x54
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f7ff fb3f 	bl	8004f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800590a:	b480      	push	{r7}
 800590c:	b08f      	sub	sp, #60	; 0x3c
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005916:	2b21      	cmp	r3, #33	; 0x21
 8005918:	d14d      	bne.n	80059b6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d132      	bne.n	800598c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	e853 3f00 	ldrex	r3, [r3]
 8005932:	61fb      	str	r3, [r7, #28]
   return(result);
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800593a:	637b      	str	r3, [r7, #52]	; 0x34
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	461a      	mov	r2, r3
 8005942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005946:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800594a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800594c:	e841 2300 	strex	r3, r2, [r1]
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e6      	bne.n	8005926 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	60bb      	str	r3, [r7, #8]
   return(result);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800596c:	633b      	str	r3, [r7, #48]	; 0x30
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005976:	61bb      	str	r3, [r7, #24]
 8005978:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	6979      	ldr	r1, [r7, #20]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	613b      	str	r3, [r7, #16]
   return(result);
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e6      	bne.n	8005958 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800598a:	e014      	b.n	80059b6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005990:	781a      	ldrb	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	b292      	uxth	r2, r2
 8005998:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80059b6:	bf00      	nop
 80059b8:	373c      	adds	r7, #60	; 0x3c
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b091      	sub	sp, #68	; 0x44
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ce:	2b21      	cmp	r3, #33	; 0x21
 80059d0:	d151      	bne.n	8005a76 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d132      	bne.n	8005a44 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	623b      	str	r3, [r7, #32]
   return(result);
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fc:	633b      	str	r3, [r7, #48]	; 0x30
 80059fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e6      	bne.n	80059de <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a24:	637b      	str	r3, [r7, #52]	; 0x34
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2e:	61fb      	str	r3, [r7, #28]
 8005a30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	69b9      	ldr	r1, [r7, #24]
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	617b      	str	r3, [r7, #20]
   return(result);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1e6      	bne.n	8005a10 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005a42:	e018      	b.n	8005a76 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a48:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4c:	881a      	ldrh	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a56:	b292      	uxth	r2, r2
 8005a58:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a5e:	1c9a      	adds	r2, r3, #2
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005a76:	bf00      	nop
 8005a78:	3744      	adds	r7, #68	; 0x44
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b088      	sub	sp, #32
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	e853 3f00 	ldrex	r3, [r3]
 8005a96:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	61bb      	str	r3, [r7, #24]
 8005aaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	6979      	ldr	r1, [r7, #20]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	e841 2300 	strex	r3, r2, [r1]
 8005ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e6      	bne.n	8005a8a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff fa4f 	bl	8004f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ace:	bf00      	nop
 8005ad0:	3720      	adds	r7, #32
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b096      	sub	sp, #88	; 0x58
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ae4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aec:	2b22      	cmp	r3, #34	; 0x22
 8005aee:	f040 8094 	bne.w	8005c1a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005af8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005afc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005b00:	b2d9      	uxtb	r1, r3
 8005b02:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0c:	400a      	ands	r2, r1
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d177      	bne.n	8005c2a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b4e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b58:	647b      	str	r3, [r7, #68]	; 0x44
 8005b5a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e6      	bne.n	8005b3a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3308      	adds	r3, #8
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	623b      	str	r3, [r7, #32]
   return(result);
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	f023 0301 	bic.w	r3, r3, #1
 8005b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3308      	adds	r3, #8
 8005b8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b8c:	633a      	str	r2, [r7, #48]	; 0x30
 8005b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e5      	bne.n	8005b6c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d12e      	bne.n	8005c12 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
 8005bc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0310 	bic.w	r3, r3, #16
 8005bce:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	69b9      	ldr	r1, [r7, #24]
 8005bde:	69fa      	ldr	r2, [r7, #28]
 8005be0:	e841 2300 	strex	r3, r2, [r1]
 8005be4:	617b      	str	r3, [r7, #20]
   return(result);
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e6      	bne.n	8005bba <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	f003 0310 	and.w	r3, r3, #16
 8005bf6:	2b10      	cmp	r3, #16
 8005bf8:	d103      	bne.n	8005c02 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2210      	movs	r2, #16
 8005c00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff f9c2 	bl	8004f94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c10:	e00b      	b.n	8005c2a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fa ff6a 	bl	8000aec <HAL_UART_RxCpltCallback>
}
 8005c18:	e007      	b.n	8005c2a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	699a      	ldr	r2, [r3, #24]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0208 	orr.w	r2, r2, #8
 8005c28:	619a      	str	r2, [r3, #24]
}
 8005c2a:	bf00      	nop
 8005c2c:	3758      	adds	r7, #88	; 0x58
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b096      	sub	sp, #88	; 0x58
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c48:	2b22      	cmp	r3, #34	; 0x22
 8005c4a:	f040 8094 	bne.w	8005d76 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c54:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c5e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005c62:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005c66:	4013      	ands	r3, r2
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c72:	1c9a      	adds	r2, r3, #2
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d177      	bne.n	8005d86 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9e:	e853 3f00 	ldrex	r3, [r3]
 8005ca2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb4:	643b      	str	r3, [r7, #64]	; 0x40
 8005cb6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cbc:	e841 2300 	strex	r3, r2, [r1]
 8005cc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e6      	bne.n	8005c96 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3308      	adds	r3, #8
 8005cce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	f023 0301 	bic.w	r3, r3, #1
 8005cde:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ce8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e5      	bne.n	8005cc8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d12e      	bne.n	8005d6e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f023 0310 	bic.w	r3, r3, #16
 8005d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d34:	61bb      	str	r3, [r7, #24]
 8005d36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6979      	ldr	r1, [r7, #20]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	613b      	str	r3, [r7, #16]
   return(result);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e6      	bne.n	8005d16 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	f003 0310 	and.w	r3, r3, #16
 8005d52:	2b10      	cmp	r3, #16
 8005d54:	d103      	bne.n	8005d5e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2210      	movs	r2, #16
 8005d5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff f914 	bl	8004f94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d6c:	e00b      	b.n	8005d86 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fa febc 	bl	8000aec <HAL_UART_RxCpltCallback>
}
 8005d74:	e007      	b.n	8005d86 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	699a      	ldr	r2, [r3, #24]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0208 	orr.w	r2, r2, #8
 8005d84:	619a      	str	r2, [r3, #24]
}
 8005d86:	bf00      	nop
 8005d88:	3758      	adds	r7, #88	; 0x58
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
	...

08005da4 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	4603      	mov	r3, r0
 8005dac:	71fb      	strb	r3, [r7, #7]
 8005dae:	460b      	mov	r3, r1
 8005db0:	71bb      	strb	r3, [r7, #6]
 8005db2:	4613      	mov	r3, r2
 8005db4:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8005db6:	797b      	ldrb	r3, [r7, #5]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d901      	bls.n	8005dc0 <tmc_fillCRC8Table+0x1c>
		return 0;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	e09e      	b.n	8005efe <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 8005dc0:	797a      	ldrb	r2, [r7, #5]
 8005dc2:	4951      	ldr	r1, [pc, #324]	; (8005f08 <tmc_fillCRC8Table+0x164>)
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	01db      	lsls	r3, r3, #7
 8005dc8:	4413      	add	r3, r2
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	440b      	add	r3, r1
 8005dce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005dd2:	79fa      	ldrb	r2, [r7, #7]
 8005dd4:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8005dd6:	797a      	ldrb	r2, [r7, #5]
 8005dd8:	494b      	ldr	r1, [pc, #300]	; (8005f08 <tmc_fillCRC8Table+0x164>)
 8005dda:	4613      	mov	r3, r2
 8005ddc:	01db      	lsls	r3, r3, #7
 8005dde:	4413      	add	r3, r2
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	440b      	add	r3, r1
 8005de4:	f203 1301 	addw	r3, r3, #257	; 0x101
 8005de8:	79ba      	ldrb	r2, [r7, #6]
 8005dea:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 8005dec:	797a      	ldrb	r2, [r7, #5]
 8005dee:	4613      	mov	r3, r2
 8005df0:	01db      	lsls	r3, r3, #7
 8005df2:	4413      	add	r3, r2
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	4a44      	ldr	r2, [pc, #272]	; (8005f08 <tmc_fillCRC8Table+0x164>)
 8005df8:	4413      	add	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e02:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8005e04:	4b41      	ldr	r3, [pc, #260]	; (8005f0c <tmc_fillCRC8Table+0x168>)
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	e074      	b.n	8005ef4 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 8005e0a:	79bb      	ldrb	r3, [r7, #6]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d004      	beq.n	8005e1a <tmc_fillCRC8Table+0x76>
 8005e10:	6978      	ldr	r0, [r7, #20]
 8005e12:	f000 f8f7 	bl	8006004 <flipBitsInBytes>
 8005e16:	4603      	mov	r3, r0
 8005e18:	e000      	b.n	8005e1c <tmc_fillCRC8Table+0x78>
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 8005e1e:	2300      	movs	r3, #0
 8005e20:	613b      	str	r3, [r7, #16]
 8005e22:	e035      	b.n	8005e90 <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	0fdb      	lsrs	r3, r3, #31
 8005e28:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <tmc_fillCRC8Table+0x9a>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	e000      	b.n	8005e40 <tmc_fillCRC8Table+0x9c>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	4053      	eors	r3, r2
 8005e44:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <tmc_fillCRC8Table+0xb2>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	e000      	b.n	8005e58 <tmc_fillCRC8Table+0xb4>
 8005e56:	2300      	movs	r3, #0
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	4053      	eors	r3, r2
 8005e5c:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <tmc_fillCRC8Table+0xca>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	041b      	lsls	r3, r3, #16
 8005e6c:	e000      	b.n	8005e70 <tmc_fillCRC8Table+0xcc>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	4053      	eors	r3, r2
 8005e74:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 8005e76:	7afb      	ldrb	r3, [r7, #11]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <tmc_fillCRC8Table+0xde>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	061b      	lsls	r3, r3, #24
 8005e80:	e000      	b.n	8005e84 <tmc_fillCRC8Table+0xe0>
 8005e82:	2300      	movs	r3, #0
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	4053      	eors	r3, r2
 8005e88:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	613b      	str	r3, [r7, #16]
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	2b07      	cmp	r3, #7
 8005e94:	ddc6      	ble.n	8005e24 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 8005e96:	79bb      	ldrb	r3, [r7, #6]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d004      	beq.n	8005ea6 <tmc_fillCRC8Table+0x102>
 8005e9c:	69f8      	ldr	r0, [r7, #28]
 8005e9e:	f000 f8b1 	bl	8006004 <flipBitsInBytes>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	e000      	b.n	8005ea8 <tmc_fillCRC8Table+0x104>
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	61ba      	str	r2, [r7, #24]
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	0a1b      	lsrs	r3, r3, #8
 8005eba:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	61ba      	str	r2, [r7, #24]
 8005ec2:	69fa      	ldr	r2, [r7, #28]
 8005ec4:	b2d2      	uxtb	r2, r2
 8005ec6:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	0a1b      	lsrs	r3, r3, #8
 8005ecc:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	61ba      	str	r2, [r7, #24]
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	0a1b      	lsrs	r3, r3, #8
 8005ede:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	61ba      	str	r2, [r7, #24]
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	4a06      	ldr	r2, [pc, #24]	; (8005f10 <tmc_fillCRC8Table+0x16c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d186      	bne.n	8005e0a <tmc_fillCRC8Table+0x66>
	}

	return 1;
 8005efc:	2301      	movs	r3, #1
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3720      	adds	r7, #32
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	200006d4 	.word	0x200006d4
 8005f0c:	03020100 	.word	0x03020100
 8005f10:	04030200 	.word	0x04030200

08005f14 <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8005f26:	79fb      	ldrb	r3, [r7, #7]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d901      	bls.n	8005f30 <tmc_CRC8+0x1c>
		return 0;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	e02c      	b.n	8005f8a <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 8005f30:	79fa      	ldrb	r2, [r7, #7]
 8005f32:	4613      	mov	r3, r2
 8005f34:	01db      	lsls	r3, r3, #7
 8005f36:	4413      	add	r3, r2
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	4a16      	ldr	r2, [pc, #88]	; (8005f94 <tmc_CRC8+0x80>)
 8005f3c:	4413      	add	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]

	while(bytes--)
 8005f40:	e00b      	b.n	8005f5a <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	60fa      	str	r2, [r7, #12]
 8005f48:	781a      	ldrb	r2, [r3, #0]
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
 8005f4c:	4053      	eors	r3, r2
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	4413      	add	r3, r2
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	1e5a      	subs	r2, r3, #1
 8005f5e:	60ba      	str	r2, [r7, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1ee      	bne.n	8005f42 <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 8005f64:	79fa      	ldrb	r2, [r7, #7]
 8005f66:	490b      	ldr	r1, [pc, #44]	; (8005f94 <tmc_CRC8+0x80>)
 8005f68:	4613      	mov	r3, r2
 8005f6a:	01db      	lsls	r3, r3, #7
 8005f6c:	4413      	add	r3, r2
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	440b      	add	r3, r1
 8005f72:	f203 1301 	addw	r3, r3, #257	; 0x101
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <tmc_CRC8+0x74>
 8005f7c:	7dfb      	ldrb	r3, [r7, #23]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 f80a 	bl	8005f98 <flipByte>
 8005f84:	4603      	mov	r3, r0
 8005f86:	e000      	b.n	8005f8a <tmc_CRC8+0x76>
 8005f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	200006d4 	.word	0x200006d4

08005f98 <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
 8005fa4:	085b      	lsrs	r3, r3, #1
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	b25b      	sxtb	r3, r3
 8005faa:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8005fae:	b25a      	sxtb	r2, r3
 8005fb0:	79fb      	ldrb	r3, [r7, #7]
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	b25b      	sxtb	r3, r3
 8005fb6:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8005fba:	b25b      	sxtb	r3, r3
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	b25b      	sxtb	r3, r3
 8005fc0:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	089b      	lsrs	r3, r3, #2
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	b25b      	sxtb	r3, r3
 8005fca:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8005fce:	b25a      	sxtb	r2, r3
 8005fd0:	79fb      	ldrb	r3, [r7, #7]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	b25b      	sxtb	r3, r3
 8005fd6:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8005fda:	b25b      	sxtb	r3, r3
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	b25b      	sxtb	r3, r3
 8005fe0:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 8005fe2:	79fb      	ldrb	r3, [r7, #7]
 8005fe4:	091b      	lsrs	r3, r3, #4
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	b25a      	sxtb	r2, r3
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	b25b      	sxtb	r3, r3
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	b25b      	sxtb	r3, r3
 8005ff4:	71fb      	strb	r3, [r7, #7]

	return value;
 8005ff6:	79fb      	ldrb	r3, [r7, #7]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	085b      	lsrs	r3, r3, #1
 8006010:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800601c:	4313      	orrs	r3, r2
 800601e:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	089b      	lsrs	r3, r3, #2
 8006024:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 8006030:	4313      	orrs	r3, r2
 8006032:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	091b      	lsrs	r3, r3, #4
 8006038:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8006044:	4313      	orrs	r3, r2
 8006046:	607b      	str	r3, [r7, #4]

	return value;
 8006048:	687b      	ldr	r3, [r7, #4]
}
 800604a:	4618      	mov	r0, r3
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b086      	sub	sp, #24
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	460b      	mov	r3, r1
 8006060:	607a      	str	r2, [r7, #4]
 8006062:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 8006064:	2305      	movs	r3, #5
 8006066:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 800606e:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 8006070:	7afb      	ldrb	r3, [r7, #11]
 8006072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006076:	b2db      	uxtb	r3, r3
 8006078:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	0e1b      	lsrs	r3, r3, #24
 800607e:	b2db      	uxtb	r3, r3
 8006080:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	141b      	asrs	r3, r3, #16
 8006086:	b2db      	uxtb	r3, r3
 8006088:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	121b      	asrs	r3, r3, #8
 800608e:	b2db      	uxtb	r3, r3
 8006090:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	b2db      	uxtb	r3, r3
 8006096:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 8006098:	f107 0310 	add.w	r3, r7, #16
 800609c:	2107      	movs	r1, #7
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fa f90e 	bl	80002c0 <tmc2209_CRC8>
 80060a4:	4603      	mov	r3, r0
 80060a6:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 80060b0:	f107 0110 	add.w	r1, r7, #16
 80060b4:	2300      	movs	r3, #0
 80060b6:	2208      	movs	r2, #8
 80060b8:	f7fa f8da 	bl	8000270 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 80060bc:	7afb      	ldrb	r3, [r7, #11]
 80060be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060c2:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	7afb      	ldrb	r3, [r7, #11]
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 80060d2:	7afb      	ldrb	r3, [r7, #11]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 80060dc:	7afb      	ldrb	r3, [r7, #11]
 80060de:	f042 0208 	orr.w	r2, r2, #8
 80060e2:	b2d1      	uxtb	r1, r2
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4413      	add	r3, r2
 80060e8:	460a      	mov	r2, r1
 80060ea:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 80060ee:	bf00      	nop
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 80060f6:	b590      	push	{r4, r7, lr}
 80060f8:	b085      	sub	sp, #20
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	460b      	mov	r3, r1
 8006100:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 8006102:	2300      	movs	r3, #0
 8006104:	60bb      	str	r3, [r7, #8]
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006110:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 8006112:	78fb      	ldrb	r3, [r7, #3]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	4413      	add	r3, r2
 8006118:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b00      	cmp	r3, #0
 8006122:	d106      	bne.n	8006132 <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	e03f      	b.n	80061b2 <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 8006132:	2305      	movs	r3, #5
 8006134:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 800613c:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 800613e:	78fb      	ldrb	r3, [r7, #3]
 8006140:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 8006142:	f107 0308 	add.w	r3, r7, #8
 8006146:	2103      	movs	r1, #3
 8006148:	4618      	mov	r0, r3
 800614a:	f7fa f8b9 	bl	80002c0 <tmc2209_CRC8>
 800614e:	4603      	mov	r3, r0
 8006150:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 800615a:	f107 0108 	add.w	r1, r7, #8
 800615e:	2308      	movs	r3, #8
 8006160:	2204      	movs	r2, #4
 8006162:	f7fa f885 	bl	8000270 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 8006166:	7a3b      	ldrb	r3, [r7, #8]
 8006168:	2b05      	cmp	r3, #5
 800616a:	d001      	beq.n	8006170 <tmc2209_readInt+0x7a>
		return 0;
 800616c:	2300      	movs	r3, #0
 800616e:	e020      	b.n	80061b2 <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 8006170:	7a7b      	ldrb	r3, [r7, #9]
 8006172:	2bff      	cmp	r3, #255	; 0xff
 8006174:	d001      	beq.n	800617a <tmc2209_readInt+0x84>
		return 0;
 8006176:	2300      	movs	r3, #0
 8006178:	e01b      	b.n	80061b2 <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 800617a:	7abb      	ldrb	r3, [r7, #10]
 800617c:	78fa      	ldrb	r2, [r7, #3]
 800617e:	429a      	cmp	r2, r3
 8006180:	d001      	beq.n	8006186 <tmc2209_readInt+0x90>
		return 0;
 8006182:	2300      	movs	r3, #0
 8006184:	e015      	b.n	80061b2 <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 8006186:	7bfc      	ldrb	r4, [r7, #15]
 8006188:	f107 0308 	add.w	r3, r7, #8
 800618c:	2107      	movs	r1, #7
 800618e:	4618      	mov	r0, r3
 8006190:	f7fa f896 	bl	80002c0 <tmc2209_CRC8>
 8006194:	4603      	mov	r3, r0
 8006196:	429c      	cmp	r4, r3
 8006198:	d001      	beq.n	800619e <tmc2209_readInt+0xa8>
		return 0;
 800619a:	2300      	movs	r3, #0
 800619c:	e009      	b.n	80061b2 <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 800619e:	7afb      	ldrb	r3, [r7, #11]
 80061a0:	061a      	lsls	r2, r3, #24
 80061a2:	7b3b      	ldrb	r3, [r7, #12]
 80061a4:	041b      	lsls	r3, r3, #16
 80061a6:	4313      	orrs	r3, r2
 80061a8:	7b7a      	ldrb	r2, [r7, #13]
 80061aa:	0212      	lsls	r2, r2, #8
 80061ac:	4313      	orrs	r3, r2
 80061ae:	7bba      	ldrb	r2, [r7, #14]
 80061b0:	4313      	orrs	r3, r2
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd90      	pop	{r4, r7, pc}
	...

080061bc <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	607b      	str	r3, [r7, #4]
 80061c6:	460b      	mov	r3, r1
 80061c8:	72fb      	strb	r3, [r7, #11]
 80061ca:	4613      	mov	r3, r2
 80061cc:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	7aba      	ldrb	r2, [r7, #10]
 80061d2:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	7afa      	ldrb	r2, [r7, #11]
 80061ec:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2200      	movs	r2, #0
 80061f6:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2200      	movs	r2, #0
 80061fe:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8006200:	2300      	movs	r3, #0
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	e017      	b.n	8006236 <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 8006206:	4a11      	ldr	r2, [pc, #68]	; (800624c <tmc2209_init+0x90>)
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	4413      	add	r3, r2
 800620c:	7819      	ldrb	r1, [r3, #0]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	4413      	add	r3, r2
 8006214:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006218:	460a      	mov	r2, r1
 800621a:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	6a3a      	ldr	r2, [r7, #32]
 8006222:	4413      	add	r3, r2
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68f9      	ldr	r1, [r7, #12]
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	440b      	add	r3, r1
 800622e:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	3301      	adds	r3, #1
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b7f      	cmp	r3, #127	; 0x7f
 800623a:	d9e4      	bls.n	8006206 <tmc2209_init+0x4a>
	}
}
 800623c:	bf00      	nop
 800623e:	bf00      	nop
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	08007a94 	.word	0x08007a94

08006250 <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3301      	adds	r3, #1
 800625e:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b02      	cmp	r3, #2
 8006268:	d131      	bne.n	80062ce <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3304      	adds	r3, #4
 8006270:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8006272:	e005      	b.n	8006280 <writeConfiguration+0x30>
		{
			(*ptr)++;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	3301      	adds	r3, #1
 800627a:	b2da      	uxtb	r2, r3
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	b25b      	sxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	db3b      	blt.n	8006302 <writeConfiguration+0xb2>
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4413      	add	r3, r2
 8006294:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0e9      	beq.n	8006274 <writeConfiguration+0x24>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4413      	add	r3, r2
 80062aa:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80062ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d025      	beq.n	8006302 <writeConfiguration+0xb2>
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4413      	add	r3, r2
 80062c0:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d0d3      	beq.n	8006274 <writeConfiguration+0x24>
 80062cc:	e019      	b.n	8006302 <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3304      	adds	r3, #4
 80062d2:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 80062d4:	e005      	b.n	80062e2 <writeConfiguration+0x92>
		{
			(*ptr)++;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	3301      	adds	r3, #1
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	b25b      	sxtb	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	db0a      	blt.n	8006302 <writeConfiguration+0xb2>
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	461a      	mov	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4413      	add	r3, r2
 80062f6:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80062fa:	f003 0342 	and.w	r3, r3, #66	; 0x42
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d1e9      	bne.n	80062d6 <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	b25b      	sxtb	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	db12      	blt.n	8006332 <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	7819      	ldrb	r1, [r3, #0]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4413      	add	r3, r2
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	461a      	mov	r2, r3
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7ff fe99 	bl	8006056 <tmc2209_writeInt>
		(*ptr)++;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	3301      	adds	r3, #1
 800632a:	b2da      	uxtb	r2, r3
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 8006330:	e013      	b.n	800635a <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800633a:	2b00      	cmp	r3, #0
 800633c:	d009      	beq.n	8006352 <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6812      	ldr	r2, [r2, #0]
 800634a:	7812      	ldrb	r2, [r2, #0]
 800634c:	4611      	mov	r1, r2
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
}
 800635a:	bf00      	nop
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b082      	sub	sp, #8
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff ff6a 	bl	8006250 <writeConfiguration>
		return;
 800637c:	bf00      	nop
	}
}
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <tmc2209_reset+0x16>
		return false;
 8006396:	2300      	movs	r3, #0
 8006398:	e028      	b.n	80063ec <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	e019      	b.n	80063d4 <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	f023 0308 	bic.w	r3, r3, #8
 80063b0:	b2d9      	uxtb	r1, r3
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80063bc:	460a      	mov	r2, r1
 80063be:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	2200      	movs	r2, #0
 80063cc:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	3301      	adds	r3, #1
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b7f      	cmp	r3, #127	; 0x7f
 80063d8:	d9e2      	bls.n	80063a0 <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2201      	movs	r2, #1
 80063e0:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2200      	movs	r2, #0
 80063e8:	705a      	strb	r2, [r3, #1]

	return true;
 80063ea:	2301      	movs	r3, #1
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <tmc2209_restore+0x16>
		return false;
 800640a:	2300      	movs	r3, #0
 800640c:	e008      	b.n	8006420 <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2202      	movs	r2, #2
 8006414:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2200      	movs	r2, #0
 800641c:	705a      	strb	r2, [r3, #1]

	return true;
 800641e:	2301      	movs	r3, #1
}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <__errno>:
 800642c:	4b01      	ldr	r3, [pc, #4]	; (8006434 <__errno+0x8>)
 800642e:	6818      	ldr	r0, [r3, #0]
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	2000000c 	.word	0x2000000c

08006438 <__libc_init_array>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	4d0d      	ldr	r5, [pc, #52]	; (8006470 <__libc_init_array+0x38>)
 800643c:	4c0d      	ldr	r4, [pc, #52]	; (8006474 <__libc_init_array+0x3c>)
 800643e:	1b64      	subs	r4, r4, r5
 8006440:	10a4      	asrs	r4, r4, #2
 8006442:	2600      	movs	r6, #0
 8006444:	42a6      	cmp	r6, r4
 8006446:	d109      	bne.n	800645c <__libc_init_array+0x24>
 8006448:	4d0b      	ldr	r5, [pc, #44]	; (8006478 <__libc_init_array+0x40>)
 800644a:	4c0c      	ldr	r4, [pc, #48]	; (800647c <__libc_init_array+0x44>)
 800644c:	f001 f8fa 	bl	8007644 <_init>
 8006450:	1b64      	subs	r4, r4, r5
 8006452:	10a4      	asrs	r4, r4, #2
 8006454:	2600      	movs	r6, #0
 8006456:	42a6      	cmp	r6, r4
 8006458:	d105      	bne.n	8006466 <__libc_init_array+0x2e>
 800645a:	bd70      	pop	{r4, r5, r6, pc}
 800645c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006460:	4798      	blx	r3
 8006462:	3601      	adds	r6, #1
 8006464:	e7ee      	b.n	8006444 <__libc_init_array+0xc>
 8006466:	f855 3b04 	ldr.w	r3, [r5], #4
 800646a:	4798      	blx	r3
 800646c:	3601      	adds	r6, #1
 800646e:	e7f2      	b.n	8006456 <__libc_init_array+0x1e>
 8006470:	08007bac 	.word	0x08007bac
 8006474:	08007bac 	.word	0x08007bac
 8006478:	08007bac 	.word	0x08007bac
 800647c:	08007bb0 	.word	0x08007bb0

08006480 <memset>:
 8006480:	4402      	add	r2, r0
 8006482:	4603      	mov	r3, r0
 8006484:	4293      	cmp	r3, r2
 8006486:	d100      	bne.n	800648a <memset+0xa>
 8006488:	4770      	bx	lr
 800648a:	f803 1b01 	strb.w	r1, [r3], #1
 800648e:	e7f9      	b.n	8006484 <memset+0x4>

08006490 <iprintf>:
 8006490:	b40f      	push	{r0, r1, r2, r3}
 8006492:	4b0a      	ldr	r3, [pc, #40]	; (80064bc <iprintf+0x2c>)
 8006494:	b513      	push	{r0, r1, r4, lr}
 8006496:	681c      	ldr	r4, [r3, #0]
 8006498:	b124      	cbz	r4, 80064a4 <iprintf+0x14>
 800649a:	69a3      	ldr	r3, [r4, #24]
 800649c:	b913      	cbnz	r3, 80064a4 <iprintf+0x14>
 800649e:	4620      	mov	r0, r4
 80064a0:	f000 fb2c 	bl	8006afc <__sinit>
 80064a4:	ab05      	add	r3, sp, #20
 80064a6:	9a04      	ldr	r2, [sp, #16]
 80064a8:	68a1      	ldr	r1, [r4, #8]
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	4620      	mov	r0, r4
 80064ae:	f000 fd3d 	bl	8006f2c <_vfiprintf_r>
 80064b2:	b002      	add	sp, #8
 80064b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b8:	b004      	add	sp, #16
 80064ba:	4770      	bx	lr
 80064bc:	2000000c 	.word	0x2000000c

080064c0 <_puts_r>:
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	460e      	mov	r6, r1
 80064c4:	4605      	mov	r5, r0
 80064c6:	b118      	cbz	r0, 80064d0 <_puts_r+0x10>
 80064c8:	6983      	ldr	r3, [r0, #24]
 80064ca:	b90b      	cbnz	r3, 80064d0 <_puts_r+0x10>
 80064cc:	f000 fb16 	bl	8006afc <__sinit>
 80064d0:	69ab      	ldr	r3, [r5, #24]
 80064d2:	68ac      	ldr	r4, [r5, #8]
 80064d4:	b913      	cbnz	r3, 80064dc <_puts_r+0x1c>
 80064d6:	4628      	mov	r0, r5
 80064d8:	f000 fb10 	bl	8006afc <__sinit>
 80064dc:	4b2c      	ldr	r3, [pc, #176]	; (8006590 <_puts_r+0xd0>)
 80064de:	429c      	cmp	r4, r3
 80064e0:	d120      	bne.n	8006524 <_puts_r+0x64>
 80064e2:	686c      	ldr	r4, [r5, #4]
 80064e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064e6:	07db      	lsls	r3, r3, #31
 80064e8:	d405      	bmi.n	80064f6 <_puts_r+0x36>
 80064ea:	89a3      	ldrh	r3, [r4, #12]
 80064ec:	0598      	lsls	r0, r3, #22
 80064ee:	d402      	bmi.n	80064f6 <_puts_r+0x36>
 80064f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064f2:	f000 fba1 	bl	8006c38 <__retarget_lock_acquire_recursive>
 80064f6:	89a3      	ldrh	r3, [r4, #12]
 80064f8:	0719      	lsls	r1, r3, #28
 80064fa:	d51d      	bpl.n	8006538 <_puts_r+0x78>
 80064fc:	6923      	ldr	r3, [r4, #16]
 80064fe:	b1db      	cbz	r3, 8006538 <_puts_r+0x78>
 8006500:	3e01      	subs	r6, #1
 8006502:	68a3      	ldr	r3, [r4, #8]
 8006504:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006508:	3b01      	subs	r3, #1
 800650a:	60a3      	str	r3, [r4, #8]
 800650c:	bb39      	cbnz	r1, 800655e <_puts_r+0x9e>
 800650e:	2b00      	cmp	r3, #0
 8006510:	da38      	bge.n	8006584 <_puts_r+0xc4>
 8006512:	4622      	mov	r2, r4
 8006514:	210a      	movs	r1, #10
 8006516:	4628      	mov	r0, r5
 8006518:	f000 f916 	bl	8006748 <__swbuf_r>
 800651c:	3001      	adds	r0, #1
 800651e:	d011      	beq.n	8006544 <_puts_r+0x84>
 8006520:	250a      	movs	r5, #10
 8006522:	e011      	b.n	8006548 <_puts_r+0x88>
 8006524:	4b1b      	ldr	r3, [pc, #108]	; (8006594 <_puts_r+0xd4>)
 8006526:	429c      	cmp	r4, r3
 8006528:	d101      	bne.n	800652e <_puts_r+0x6e>
 800652a:	68ac      	ldr	r4, [r5, #8]
 800652c:	e7da      	b.n	80064e4 <_puts_r+0x24>
 800652e:	4b1a      	ldr	r3, [pc, #104]	; (8006598 <_puts_r+0xd8>)
 8006530:	429c      	cmp	r4, r3
 8006532:	bf08      	it	eq
 8006534:	68ec      	ldreq	r4, [r5, #12]
 8006536:	e7d5      	b.n	80064e4 <_puts_r+0x24>
 8006538:	4621      	mov	r1, r4
 800653a:	4628      	mov	r0, r5
 800653c:	f000 f956 	bl	80067ec <__swsetup_r>
 8006540:	2800      	cmp	r0, #0
 8006542:	d0dd      	beq.n	8006500 <_puts_r+0x40>
 8006544:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006548:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800654a:	07da      	lsls	r2, r3, #31
 800654c:	d405      	bmi.n	800655a <_puts_r+0x9a>
 800654e:	89a3      	ldrh	r3, [r4, #12]
 8006550:	059b      	lsls	r3, r3, #22
 8006552:	d402      	bmi.n	800655a <_puts_r+0x9a>
 8006554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006556:	f000 fb70 	bl	8006c3a <__retarget_lock_release_recursive>
 800655a:	4628      	mov	r0, r5
 800655c:	bd70      	pop	{r4, r5, r6, pc}
 800655e:	2b00      	cmp	r3, #0
 8006560:	da04      	bge.n	800656c <_puts_r+0xac>
 8006562:	69a2      	ldr	r2, [r4, #24]
 8006564:	429a      	cmp	r2, r3
 8006566:	dc06      	bgt.n	8006576 <_puts_r+0xb6>
 8006568:	290a      	cmp	r1, #10
 800656a:	d004      	beq.n	8006576 <_puts_r+0xb6>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	1c5a      	adds	r2, r3, #1
 8006570:	6022      	str	r2, [r4, #0]
 8006572:	7019      	strb	r1, [r3, #0]
 8006574:	e7c5      	b.n	8006502 <_puts_r+0x42>
 8006576:	4622      	mov	r2, r4
 8006578:	4628      	mov	r0, r5
 800657a:	f000 f8e5 	bl	8006748 <__swbuf_r>
 800657e:	3001      	adds	r0, #1
 8006580:	d1bf      	bne.n	8006502 <_puts_r+0x42>
 8006582:	e7df      	b.n	8006544 <_puts_r+0x84>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	250a      	movs	r5, #10
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	6022      	str	r2, [r4, #0]
 800658c:	701d      	strb	r5, [r3, #0]
 800658e:	e7db      	b.n	8006548 <_puts_r+0x88>
 8006590:	08007b38 	.word	0x08007b38
 8006594:	08007b58 	.word	0x08007b58
 8006598:	08007b18 	.word	0x08007b18

0800659c <puts>:
 800659c:	4b02      	ldr	r3, [pc, #8]	; (80065a8 <puts+0xc>)
 800659e:	4601      	mov	r1, r0
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	f7ff bf8d 	b.w	80064c0 <_puts_r>
 80065a6:	bf00      	nop
 80065a8:	2000000c 	.word	0x2000000c

080065ac <setbuf>:
 80065ac:	2900      	cmp	r1, #0
 80065ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065b2:	bf0c      	ite	eq
 80065b4:	2202      	moveq	r2, #2
 80065b6:	2200      	movne	r2, #0
 80065b8:	f000 b800 	b.w	80065bc <setvbuf>

080065bc <setvbuf>:
 80065bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065c0:	461d      	mov	r5, r3
 80065c2:	4b5d      	ldr	r3, [pc, #372]	; (8006738 <setvbuf+0x17c>)
 80065c4:	681f      	ldr	r7, [r3, #0]
 80065c6:	4604      	mov	r4, r0
 80065c8:	460e      	mov	r6, r1
 80065ca:	4690      	mov	r8, r2
 80065cc:	b127      	cbz	r7, 80065d8 <setvbuf+0x1c>
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	b913      	cbnz	r3, 80065d8 <setvbuf+0x1c>
 80065d2:	4638      	mov	r0, r7
 80065d4:	f000 fa92 	bl	8006afc <__sinit>
 80065d8:	4b58      	ldr	r3, [pc, #352]	; (800673c <setvbuf+0x180>)
 80065da:	429c      	cmp	r4, r3
 80065dc:	d167      	bne.n	80066ae <setvbuf+0xf2>
 80065de:	687c      	ldr	r4, [r7, #4]
 80065e0:	f1b8 0f02 	cmp.w	r8, #2
 80065e4:	d006      	beq.n	80065f4 <setvbuf+0x38>
 80065e6:	f1b8 0f01 	cmp.w	r8, #1
 80065ea:	f200 809f 	bhi.w	800672c <setvbuf+0x170>
 80065ee:	2d00      	cmp	r5, #0
 80065f0:	f2c0 809c 	blt.w	800672c <setvbuf+0x170>
 80065f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065f6:	07db      	lsls	r3, r3, #31
 80065f8:	d405      	bmi.n	8006606 <setvbuf+0x4a>
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	0598      	lsls	r0, r3, #22
 80065fe:	d402      	bmi.n	8006606 <setvbuf+0x4a>
 8006600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006602:	f000 fb19 	bl	8006c38 <__retarget_lock_acquire_recursive>
 8006606:	4621      	mov	r1, r4
 8006608:	4638      	mov	r0, r7
 800660a:	f000 f9e3 	bl	80069d4 <_fflush_r>
 800660e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006610:	b141      	cbz	r1, 8006624 <setvbuf+0x68>
 8006612:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006616:	4299      	cmp	r1, r3
 8006618:	d002      	beq.n	8006620 <setvbuf+0x64>
 800661a:	4638      	mov	r0, r7
 800661c:	f000 fb7c 	bl	8006d18 <_free_r>
 8006620:	2300      	movs	r3, #0
 8006622:	6363      	str	r3, [r4, #52]	; 0x34
 8006624:	2300      	movs	r3, #0
 8006626:	61a3      	str	r3, [r4, #24]
 8006628:	6063      	str	r3, [r4, #4]
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	0619      	lsls	r1, r3, #24
 800662e:	d503      	bpl.n	8006638 <setvbuf+0x7c>
 8006630:	6921      	ldr	r1, [r4, #16]
 8006632:	4638      	mov	r0, r7
 8006634:	f000 fb70 	bl	8006d18 <_free_r>
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800663e:	f023 0303 	bic.w	r3, r3, #3
 8006642:	f1b8 0f02 	cmp.w	r8, #2
 8006646:	81a3      	strh	r3, [r4, #12]
 8006648:	d06c      	beq.n	8006724 <setvbuf+0x168>
 800664a:	ab01      	add	r3, sp, #4
 800664c:	466a      	mov	r2, sp
 800664e:	4621      	mov	r1, r4
 8006650:	4638      	mov	r0, r7
 8006652:	f000 faf3 	bl	8006c3c <__swhatbuf_r>
 8006656:	89a3      	ldrh	r3, [r4, #12]
 8006658:	4318      	orrs	r0, r3
 800665a:	81a0      	strh	r0, [r4, #12]
 800665c:	2d00      	cmp	r5, #0
 800665e:	d130      	bne.n	80066c2 <setvbuf+0x106>
 8006660:	9d00      	ldr	r5, [sp, #0]
 8006662:	4628      	mov	r0, r5
 8006664:	f000 fb50 	bl	8006d08 <malloc>
 8006668:	4606      	mov	r6, r0
 800666a:	2800      	cmp	r0, #0
 800666c:	d155      	bne.n	800671a <setvbuf+0x15e>
 800666e:	f8dd 9000 	ldr.w	r9, [sp]
 8006672:	45a9      	cmp	r9, r5
 8006674:	d14a      	bne.n	800670c <setvbuf+0x150>
 8006676:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800667a:	2200      	movs	r2, #0
 800667c:	60a2      	str	r2, [r4, #8]
 800667e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006682:	6022      	str	r2, [r4, #0]
 8006684:	6122      	str	r2, [r4, #16]
 8006686:	2201      	movs	r2, #1
 8006688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800668c:	6162      	str	r2, [r4, #20]
 800668e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006690:	f043 0302 	orr.w	r3, r3, #2
 8006694:	07d2      	lsls	r2, r2, #31
 8006696:	81a3      	strh	r3, [r4, #12]
 8006698:	d405      	bmi.n	80066a6 <setvbuf+0xea>
 800669a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800669e:	d102      	bne.n	80066a6 <setvbuf+0xea>
 80066a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066a2:	f000 faca 	bl	8006c3a <__retarget_lock_release_recursive>
 80066a6:	4628      	mov	r0, r5
 80066a8:	b003      	add	sp, #12
 80066aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066ae:	4b24      	ldr	r3, [pc, #144]	; (8006740 <setvbuf+0x184>)
 80066b0:	429c      	cmp	r4, r3
 80066b2:	d101      	bne.n	80066b8 <setvbuf+0xfc>
 80066b4:	68bc      	ldr	r4, [r7, #8]
 80066b6:	e793      	b.n	80065e0 <setvbuf+0x24>
 80066b8:	4b22      	ldr	r3, [pc, #136]	; (8006744 <setvbuf+0x188>)
 80066ba:	429c      	cmp	r4, r3
 80066bc:	bf08      	it	eq
 80066be:	68fc      	ldreq	r4, [r7, #12]
 80066c0:	e78e      	b.n	80065e0 <setvbuf+0x24>
 80066c2:	2e00      	cmp	r6, #0
 80066c4:	d0cd      	beq.n	8006662 <setvbuf+0xa6>
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	b913      	cbnz	r3, 80066d0 <setvbuf+0x114>
 80066ca:	4638      	mov	r0, r7
 80066cc:	f000 fa16 	bl	8006afc <__sinit>
 80066d0:	f1b8 0f01 	cmp.w	r8, #1
 80066d4:	bf08      	it	eq
 80066d6:	89a3      	ldrheq	r3, [r4, #12]
 80066d8:	6026      	str	r6, [r4, #0]
 80066da:	bf04      	itt	eq
 80066dc:	f043 0301 	orreq.w	r3, r3, #1
 80066e0:	81a3      	strheq	r3, [r4, #12]
 80066e2:	89a2      	ldrh	r2, [r4, #12]
 80066e4:	f012 0308 	ands.w	r3, r2, #8
 80066e8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80066ec:	d01c      	beq.n	8006728 <setvbuf+0x16c>
 80066ee:	07d3      	lsls	r3, r2, #31
 80066f0:	bf41      	itttt	mi
 80066f2:	2300      	movmi	r3, #0
 80066f4:	426d      	negmi	r5, r5
 80066f6:	60a3      	strmi	r3, [r4, #8]
 80066f8:	61a5      	strmi	r5, [r4, #24]
 80066fa:	bf58      	it	pl
 80066fc:	60a5      	strpl	r5, [r4, #8]
 80066fe:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006700:	f015 0501 	ands.w	r5, r5, #1
 8006704:	d115      	bne.n	8006732 <setvbuf+0x176>
 8006706:	f412 7f00 	tst.w	r2, #512	; 0x200
 800670a:	e7c8      	b.n	800669e <setvbuf+0xe2>
 800670c:	4648      	mov	r0, r9
 800670e:	f000 fafb 	bl	8006d08 <malloc>
 8006712:	4606      	mov	r6, r0
 8006714:	2800      	cmp	r0, #0
 8006716:	d0ae      	beq.n	8006676 <setvbuf+0xba>
 8006718:	464d      	mov	r5, r9
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006720:	81a3      	strh	r3, [r4, #12]
 8006722:	e7d0      	b.n	80066c6 <setvbuf+0x10a>
 8006724:	2500      	movs	r5, #0
 8006726:	e7a8      	b.n	800667a <setvbuf+0xbe>
 8006728:	60a3      	str	r3, [r4, #8]
 800672a:	e7e8      	b.n	80066fe <setvbuf+0x142>
 800672c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006730:	e7b9      	b.n	80066a6 <setvbuf+0xea>
 8006732:	2500      	movs	r5, #0
 8006734:	e7b7      	b.n	80066a6 <setvbuf+0xea>
 8006736:	bf00      	nop
 8006738:	2000000c 	.word	0x2000000c
 800673c:	08007b38 	.word	0x08007b38
 8006740:	08007b58 	.word	0x08007b58
 8006744:	08007b18 	.word	0x08007b18

08006748 <__swbuf_r>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	460e      	mov	r6, r1
 800674c:	4614      	mov	r4, r2
 800674e:	4605      	mov	r5, r0
 8006750:	b118      	cbz	r0, 800675a <__swbuf_r+0x12>
 8006752:	6983      	ldr	r3, [r0, #24]
 8006754:	b90b      	cbnz	r3, 800675a <__swbuf_r+0x12>
 8006756:	f000 f9d1 	bl	8006afc <__sinit>
 800675a:	4b21      	ldr	r3, [pc, #132]	; (80067e0 <__swbuf_r+0x98>)
 800675c:	429c      	cmp	r4, r3
 800675e:	d12b      	bne.n	80067b8 <__swbuf_r+0x70>
 8006760:	686c      	ldr	r4, [r5, #4]
 8006762:	69a3      	ldr	r3, [r4, #24]
 8006764:	60a3      	str	r3, [r4, #8]
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	071a      	lsls	r2, r3, #28
 800676a:	d52f      	bpl.n	80067cc <__swbuf_r+0x84>
 800676c:	6923      	ldr	r3, [r4, #16]
 800676e:	b36b      	cbz	r3, 80067cc <__swbuf_r+0x84>
 8006770:	6923      	ldr	r3, [r4, #16]
 8006772:	6820      	ldr	r0, [r4, #0]
 8006774:	1ac0      	subs	r0, r0, r3
 8006776:	6963      	ldr	r3, [r4, #20]
 8006778:	b2f6      	uxtb	r6, r6
 800677a:	4283      	cmp	r3, r0
 800677c:	4637      	mov	r7, r6
 800677e:	dc04      	bgt.n	800678a <__swbuf_r+0x42>
 8006780:	4621      	mov	r1, r4
 8006782:	4628      	mov	r0, r5
 8006784:	f000 f926 	bl	80069d4 <_fflush_r>
 8006788:	bb30      	cbnz	r0, 80067d8 <__swbuf_r+0x90>
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	3b01      	subs	r3, #1
 800678e:	60a3      	str	r3, [r4, #8]
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	6022      	str	r2, [r4, #0]
 8006796:	701e      	strb	r6, [r3, #0]
 8006798:	6963      	ldr	r3, [r4, #20]
 800679a:	3001      	adds	r0, #1
 800679c:	4283      	cmp	r3, r0
 800679e:	d004      	beq.n	80067aa <__swbuf_r+0x62>
 80067a0:	89a3      	ldrh	r3, [r4, #12]
 80067a2:	07db      	lsls	r3, r3, #31
 80067a4:	d506      	bpl.n	80067b4 <__swbuf_r+0x6c>
 80067a6:	2e0a      	cmp	r6, #10
 80067a8:	d104      	bne.n	80067b4 <__swbuf_r+0x6c>
 80067aa:	4621      	mov	r1, r4
 80067ac:	4628      	mov	r0, r5
 80067ae:	f000 f911 	bl	80069d4 <_fflush_r>
 80067b2:	b988      	cbnz	r0, 80067d8 <__swbuf_r+0x90>
 80067b4:	4638      	mov	r0, r7
 80067b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b8:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <__swbuf_r+0x9c>)
 80067ba:	429c      	cmp	r4, r3
 80067bc:	d101      	bne.n	80067c2 <__swbuf_r+0x7a>
 80067be:	68ac      	ldr	r4, [r5, #8]
 80067c0:	e7cf      	b.n	8006762 <__swbuf_r+0x1a>
 80067c2:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <__swbuf_r+0xa0>)
 80067c4:	429c      	cmp	r4, r3
 80067c6:	bf08      	it	eq
 80067c8:	68ec      	ldreq	r4, [r5, #12]
 80067ca:	e7ca      	b.n	8006762 <__swbuf_r+0x1a>
 80067cc:	4621      	mov	r1, r4
 80067ce:	4628      	mov	r0, r5
 80067d0:	f000 f80c 	bl	80067ec <__swsetup_r>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d0cb      	beq.n	8006770 <__swbuf_r+0x28>
 80067d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80067dc:	e7ea      	b.n	80067b4 <__swbuf_r+0x6c>
 80067de:	bf00      	nop
 80067e0:	08007b38 	.word	0x08007b38
 80067e4:	08007b58 	.word	0x08007b58
 80067e8:	08007b18 	.word	0x08007b18

080067ec <__swsetup_r>:
 80067ec:	4b32      	ldr	r3, [pc, #200]	; (80068b8 <__swsetup_r+0xcc>)
 80067ee:	b570      	push	{r4, r5, r6, lr}
 80067f0:	681d      	ldr	r5, [r3, #0]
 80067f2:	4606      	mov	r6, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	b125      	cbz	r5, 8006802 <__swsetup_r+0x16>
 80067f8:	69ab      	ldr	r3, [r5, #24]
 80067fa:	b913      	cbnz	r3, 8006802 <__swsetup_r+0x16>
 80067fc:	4628      	mov	r0, r5
 80067fe:	f000 f97d 	bl	8006afc <__sinit>
 8006802:	4b2e      	ldr	r3, [pc, #184]	; (80068bc <__swsetup_r+0xd0>)
 8006804:	429c      	cmp	r4, r3
 8006806:	d10f      	bne.n	8006828 <__swsetup_r+0x3c>
 8006808:	686c      	ldr	r4, [r5, #4]
 800680a:	89a3      	ldrh	r3, [r4, #12]
 800680c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006810:	0719      	lsls	r1, r3, #28
 8006812:	d42c      	bmi.n	800686e <__swsetup_r+0x82>
 8006814:	06dd      	lsls	r5, r3, #27
 8006816:	d411      	bmi.n	800683c <__swsetup_r+0x50>
 8006818:	2309      	movs	r3, #9
 800681a:	6033      	str	r3, [r6, #0]
 800681c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006820:	81a3      	strh	r3, [r4, #12]
 8006822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006826:	e03e      	b.n	80068a6 <__swsetup_r+0xba>
 8006828:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <__swsetup_r+0xd4>)
 800682a:	429c      	cmp	r4, r3
 800682c:	d101      	bne.n	8006832 <__swsetup_r+0x46>
 800682e:	68ac      	ldr	r4, [r5, #8]
 8006830:	e7eb      	b.n	800680a <__swsetup_r+0x1e>
 8006832:	4b24      	ldr	r3, [pc, #144]	; (80068c4 <__swsetup_r+0xd8>)
 8006834:	429c      	cmp	r4, r3
 8006836:	bf08      	it	eq
 8006838:	68ec      	ldreq	r4, [r5, #12]
 800683a:	e7e6      	b.n	800680a <__swsetup_r+0x1e>
 800683c:	0758      	lsls	r0, r3, #29
 800683e:	d512      	bpl.n	8006866 <__swsetup_r+0x7a>
 8006840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006842:	b141      	cbz	r1, 8006856 <__swsetup_r+0x6a>
 8006844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006848:	4299      	cmp	r1, r3
 800684a:	d002      	beq.n	8006852 <__swsetup_r+0x66>
 800684c:	4630      	mov	r0, r6
 800684e:	f000 fa63 	bl	8006d18 <_free_r>
 8006852:	2300      	movs	r3, #0
 8006854:	6363      	str	r3, [r4, #52]	; 0x34
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800685c:	81a3      	strh	r3, [r4, #12]
 800685e:	2300      	movs	r3, #0
 8006860:	6063      	str	r3, [r4, #4]
 8006862:	6923      	ldr	r3, [r4, #16]
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	f043 0308 	orr.w	r3, r3, #8
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	6923      	ldr	r3, [r4, #16]
 8006870:	b94b      	cbnz	r3, 8006886 <__swsetup_r+0x9a>
 8006872:	89a3      	ldrh	r3, [r4, #12]
 8006874:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800687c:	d003      	beq.n	8006886 <__swsetup_r+0x9a>
 800687e:	4621      	mov	r1, r4
 8006880:	4630      	mov	r0, r6
 8006882:	f000 fa01 	bl	8006c88 <__smakebuf_r>
 8006886:	89a0      	ldrh	r0, [r4, #12]
 8006888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800688c:	f010 0301 	ands.w	r3, r0, #1
 8006890:	d00a      	beq.n	80068a8 <__swsetup_r+0xbc>
 8006892:	2300      	movs	r3, #0
 8006894:	60a3      	str	r3, [r4, #8]
 8006896:	6963      	ldr	r3, [r4, #20]
 8006898:	425b      	negs	r3, r3
 800689a:	61a3      	str	r3, [r4, #24]
 800689c:	6923      	ldr	r3, [r4, #16]
 800689e:	b943      	cbnz	r3, 80068b2 <__swsetup_r+0xc6>
 80068a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068a4:	d1ba      	bne.n	800681c <__swsetup_r+0x30>
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	0781      	lsls	r1, r0, #30
 80068aa:	bf58      	it	pl
 80068ac:	6963      	ldrpl	r3, [r4, #20]
 80068ae:	60a3      	str	r3, [r4, #8]
 80068b0:	e7f4      	b.n	800689c <__swsetup_r+0xb0>
 80068b2:	2000      	movs	r0, #0
 80068b4:	e7f7      	b.n	80068a6 <__swsetup_r+0xba>
 80068b6:	bf00      	nop
 80068b8:	2000000c 	.word	0x2000000c
 80068bc:	08007b38 	.word	0x08007b38
 80068c0:	08007b58 	.word	0x08007b58
 80068c4:	08007b18 	.word	0x08007b18

080068c8 <__sflush_r>:
 80068c8:	898a      	ldrh	r2, [r1, #12]
 80068ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ce:	4605      	mov	r5, r0
 80068d0:	0710      	lsls	r0, r2, #28
 80068d2:	460c      	mov	r4, r1
 80068d4:	d458      	bmi.n	8006988 <__sflush_r+0xc0>
 80068d6:	684b      	ldr	r3, [r1, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	dc05      	bgt.n	80068e8 <__sflush_r+0x20>
 80068dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	dc02      	bgt.n	80068e8 <__sflush_r+0x20>
 80068e2:	2000      	movs	r0, #0
 80068e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068ea:	2e00      	cmp	r6, #0
 80068ec:	d0f9      	beq.n	80068e2 <__sflush_r+0x1a>
 80068ee:	2300      	movs	r3, #0
 80068f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068f4:	682f      	ldr	r7, [r5, #0]
 80068f6:	602b      	str	r3, [r5, #0]
 80068f8:	d032      	beq.n	8006960 <__sflush_r+0x98>
 80068fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	075a      	lsls	r2, r3, #29
 8006900:	d505      	bpl.n	800690e <__sflush_r+0x46>
 8006902:	6863      	ldr	r3, [r4, #4]
 8006904:	1ac0      	subs	r0, r0, r3
 8006906:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006908:	b10b      	cbz	r3, 800690e <__sflush_r+0x46>
 800690a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800690c:	1ac0      	subs	r0, r0, r3
 800690e:	2300      	movs	r3, #0
 8006910:	4602      	mov	r2, r0
 8006912:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006914:	6a21      	ldr	r1, [r4, #32]
 8006916:	4628      	mov	r0, r5
 8006918:	47b0      	blx	r6
 800691a:	1c43      	adds	r3, r0, #1
 800691c:	89a3      	ldrh	r3, [r4, #12]
 800691e:	d106      	bne.n	800692e <__sflush_r+0x66>
 8006920:	6829      	ldr	r1, [r5, #0]
 8006922:	291d      	cmp	r1, #29
 8006924:	d82c      	bhi.n	8006980 <__sflush_r+0xb8>
 8006926:	4a2a      	ldr	r2, [pc, #168]	; (80069d0 <__sflush_r+0x108>)
 8006928:	40ca      	lsrs	r2, r1
 800692a:	07d6      	lsls	r6, r2, #31
 800692c:	d528      	bpl.n	8006980 <__sflush_r+0xb8>
 800692e:	2200      	movs	r2, #0
 8006930:	6062      	str	r2, [r4, #4]
 8006932:	04d9      	lsls	r1, r3, #19
 8006934:	6922      	ldr	r2, [r4, #16]
 8006936:	6022      	str	r2, [r4, #0]
 8006938:	d504      	bpl.n	8006944 <__sflush_r+0x7c>
 800693a:	1c42      	adds	r2, r0, #1
 800693c:	d101      	bne.n	8006942 <__sflush_r+0x7a>
 800693e:	682b      	ldr	r3, [r5, #0]
 8006940:	b903      	cbnz	r3, 8006944 <__sflush_r+0x7c>
 8006942:	6560      	str	r0, [r4, #84]	; 0x54
 8006944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006946:	602f      	str	r7, [r5, #0]
 8006948:	2900      	cmp	r1, #0
 800694a:	d0ca      	beq.n	80068e2 <__sflush_r+0x1a>
 800694c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006950:	4299      	cmp	r1, r3
 8006952:	d002      	beq.n	800695a <__sflush_r+0x92>
 8006954:	4628      	mov	r0, r5
 8006956:	f000 f9df 	bl	8006d18 <_free_r>
 800695a:	2000      	movs	r0, #0
 800695c:	6360      	str	r0, [r4, #52]	; 0x34
 800695e:	e7c1      	b.n	80068e4 <__sflush_r+0x1c>
 8006960:	6a21      	ldr	r1, [r4, #32]
 8006962:	2301      	movs	r3, #1
 8006964:	4628      	mov	r0, r5
 8006966:	47b0      	blx	r6
 8006968:	1c41      	adds	r1, r0, #1
 800696a:	d1c7      	bne.n	80068fc <__sflush_r+0x34>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0c4      	beq.n	80068fc <__sflush_r+0x34>
 8006972:	2b1d      	cmp	r3, #29
 8006974:	d001      	beq.n	800697a <__sflush_r+0xb2>
 8006976:	2b16      	cmp	r3, #22
 8006978:	d101      	bne.n	800697e <__sflush_r+0xb6>
 800697a:	602f      	str	r7, [r5, #0]
 800697c:	e7b1      	b.n	80068e2 <__sflush_r+0x1a>
 800697e:	89a3      	ldrh	r3, [r4, #12]
 8006980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006984:	81a3      	strh	r3, [r4, #12]
 8006986:	e7ad      	b.n	80068e4 <__sflush_r+0x1c>
 8006988:	690f      	ldr	r7, [r1, #16]
 800698a:	2f00      	cmp	r7, #0
 800698c:	d0a9      	beq.n	80068e2 <__sflush_r+0x1a>
 800698e:	0793      	lsls	r3, r2, #30
 8006990:	680e      	ldr	r6, [r1, #0]
 8006992:	bf08      	it	eq
 8006994:	694b      	ldreq	r3, [r1, #20]
 8006996:	600f      	str	r7, [r1, #0]
 8006998:	bf18      	it	ne
 800699a:	2300      	movne	r3, #0
 800699c:	eba6 0807 	sub.w	r8, r6, r7
 80069a0:	608b      	str	r3, [r1, #8]
 80069a2:	f1b8 0f00 	cmp.w	r8, #0
 80069a6:	dd9c      	ble.n	80068e2 <__sflush_r+0x1a>
 80069a8:	6a21      	ldr	r1, [r4, #32]
 80069aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069ac:	4643      	mov	r3, r8
 80069ae:	463a      	mov	r2, r7
 80069b0:	4628      	mov	r0, r5
 80069b2:	47b0      	blx	r6
 80069b4:	2800      	cmp	r0, #0
 80069b6:	dc06      	bgt.n	80069c6 <__sflush_r+0xfe>
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069be:	81a3      	strh	r3, [r4, #12]
 80069c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069c4:	e78e      	b.n	80068e4 <__sflush_r+0x1c>
 80069c6:	4407      	add	r7, r0
 80069c8:	eba8 0800 	sub.w	r8, r8, r0
 80069cc:	e7e9      	b.n	80069a2 <__sflush_r+0xda>
 80069ce:	bf00      	nop
 80069d0:	20400001 	.word	0x20400001

080069d4 <_fflush_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	690b      	ldr	r3, [r1, #16]
 80069d8:	4605      	mov	r5, r0
 80069da:	460c      	mov	r4, r1
 80069dc:	b913      	cbnz	r3, 80069e4 <_fflush_r+0x10>
 80069de:	2500      	movs	r5, #0
 80069e0:	4628      	mov	r0, r5
 80069e2:	bd38      	pop	{r3, r4, r5, pc}
 80069e4:	b118      	cbz	r0, 80069ee <_fflush_r+0x1a>
 80069e6:	6983      	ldr	r3, [r0, #24]
 80069e8:	b90b      	cbnz	r3, 80069ee <_fflush_r+0x1a>
 80069ea:	f000 f887 	bl	8006afc <__sinit>
 80069ee:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <_fflush_r+0x6c>)
 80069f0:	429c      	cmp	r4, r3
 80069f2:	d11b      	bne.n	8006a2c <_fflush_r+0x58>
 80069f4:	686c      	ldr	r4, [r5, #4]
 80069f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0ef      	beq.n	80069de <_fflush_r+0xa>
 80069fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a00:	07d0      	lsls	r0, r2, #31
 8006a02:	d404      	bmi.n	8006a0e <_fflush_r+0x3a>
 8006a04:	0599      	lsls	r1, r3, #22
 8006a06:	d402      	bmi.n	8006a0e <_fflush_r+0x3a>
 8006a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a0a:	f000 f915 	bl	8006c38 <__retarget_lock_acquire_recursive>
 8006a0e:	4628      	mov	r0, r5
 8006a10:	4621      	mov	r1, r4
 8006a12:	f7ff ff59 	bl	80068c8 <__sflush_r>
 8006a16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a18:	07da      	lsls	r2, r3, #31
 8006a1a:	4605      	mov	r5, r0
 8006a1c:	d4e0      	bmi.n	80069e0 <_fflush_r+0xc>
 8006a1e:	89a3      	ldrh	r3, [r4, #12]
 8006a20:	059b      	lsls	r3, r3, #22
 8006a22:	d4dd      	bmi.n	80069e0 <_fflush_r+0xc>
 8006a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a26:	f000 f908 	bl	8006c3a <__retarget_lock_release_recursive>
 8006a2a:	e7d9      	b.n	80069e0 <_fflush_r+0xc>
 8006a2c:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <_fflush_r+0x70>)
 8006a2e:	429c      	cmp	r4, r3
 8006a30:	d101      	bne.n	8006a36 <_fflush_r+0x62>
 8006a32:	68ac      	ldr	r4, [r5, #8]
 8006a34:	e7df      	b.n	80069f6 <_fflush_r+0x22>
 8006a36:	4b04      	ldr	r3, [pc, #16]	; (8006a48 <_fflush_r+0x74>)
 8006a38:	429c      	cmp	r4, r3
 8006a3a:	bf08      	it	eq
 8006a3c:	68ec      	ldreq	r4, [r5, #12]
 8006a3e:	e7da      	b.n	80069f6 <_fflush_r+0x22>
 8006a40:	08007b38 	.word	0x08007b38
 8006a44:	08007b58 	.word	0x08007b58
 8006a48:	08007b18 	.word	0x08007b18

08006a4c <std>:
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	b510      	push	{r4, lr}
 8006a50:	4604      	mov	r4, r0
 8006a52:	e9c0 3300 	strd	r3, r3, [r0]
 8006a56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a5a:	6083      	str	r3, [r0, #8]
 8006a5c:	8181      	strh	r1, [r0, #12]
 8006a5e:	6643      	str	r3, [r0, #100]	; 0x64
 8006a60:	81c2      	strh	r2, [r0, #14]
 8006a62:	6183      	str	r3, [r0, #24]
 8006a64:	4619      	mov	r1, r3
 8006a66:	2208      	movs	r2, #8
 8006a68:	305c      	adds	r0, #92	; 0x5c
 8006a6a:	f7ff fd09 	bl	8006480 <memset>
 8006a6e:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <std+0x38>)
 8006a70:	6263      	str	r3, [r4, #36]	; 0x24
 8006a72:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <std+0x3c>)
 8006a74:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a76:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <std+0x40>)
 8006a78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a7a:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <std+0x44>)
 8006a7c:	6224      	str	r4, [r4, #32]
 8006a7e:	6323      	str	r3, [r4, #48]	; 0x30
 8006a80:	bd10      	pop	{r4, pc}
 8006a82:	bf00      	nop
 8006a84:	080074d5 	.word	0x080074d5
 8006a88:	080074f7 	.word	0x080074f7
 8006a8c:	0800752f 	.word	0x0800752f
 8006a90:	08007553 	.word	0x08007553

08006a94 <_cleanup_r>:
 8006a94:	4901      	ldr	r1, [pc, #4]	; (8006a9c <_cleanup_r+0x8>)
 8006a96:	f000 b8af 	b.w	8006bf8 <_fwalk_reent>
 8006a9a:	bf00      	nop
 8006a9c:	080069d5 	.word	0x080069d5

08006aa0 <__sfmoreglue>:
 8006aa0:	b570      	push	{r4, r5, r6, lr}
 8006aa2:	2268      	movs	r2, #104	; 0x68
 8006aa4:	1e4d      	subs	r5, r1, #1
 8006aa6:	4355      	muls	r5, r2
 8006aa8:	460e      	mov	r6, r1
 8006aaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006aae:	f000 f99f 	bl	8006df0 <_malloc_r>
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	b140      	cbz	r0, 8006ac8 <__sfmoreglue+0x28>
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	e9c0 1600 	strd	r1, r6, [r0]
 8006abc:	300c      	adds	r0, #12
 8006abe:	60a0      	str	r0, [r4, #8]
 8006ac0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ac4:	f7ff fcdc 	bl	8006480 <memset>
 8006ac8:	4620      	mov	r0, r4
 8006aca:	bd70      	pop	{r4, r5, r6, pc}

08006acc <__sfp_lock_acquire>:
 8006acc:	4801      	ldr	r0, [pc, #4]	; (8006ad4 <__sfp_lock_acquire+0x8>)
 8006ace:	f000 b8b3 	b.w	8006c38 <__retarget_lock_acquire_recursive>
 8006ad2:	bf00      	nop
 8006ad4:	200008d9 	.word	0x200008d9

08006ad8 <__sfp_lock_release>:
 8006ad8:	4801      	ldr	r0, [pc, #4]	; (8006ae0 <__sfp_lock_release+0x8>)
 8006ada:	f000 b8ae 	b.w	8006c3a <__retarget_lock_release_recursive>
 8006ade:	bf00      	nop
 8006ae0:	200008d9 	.word	0x200008d9

08006ae4 <__sinit_lock_acquire>:
 8006ae4:	4801      	ldr	r0, [pc, #4]	; (8006aec <__sinit_lock_acquire+0x8>)
 8006ae6:	f000 b8a7 	b.w	8006c38 <__retarget_lock_acquire_recursive>
 8006aea:	bf00      	nop
 8006aec:	200008da 	.word	0x200008da

08006af0 <__sinit_lock_release>:
 8006af0:	4801      	ldr	r0, [pc, #4]	; (8006af8 <__sinit_lock_release+0x8>)
 8006af2:	f000 b8a2 	b.w	8006c3a <__retarget_lock_release_recursive>
 8006af6:	bf00      	nop
 8006af8:	200008da 	.word	0x200008da

08006afc <__sinit>:
 8006afc:	b510      	push	{r4, lr}
 8006afe:	4604      	mov	r4, r0
 8006b00:	f7ff fff0 	bl	8006ae4 <__sinit_lock_acquire>
 8006b04:	69a3      	ldr	r3, [r4, #24]
 8006b06:	b11b      	cbz	r3, 8006b10 <__sinit+0x14>
 8006b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b0c:	f7ff bff0 	b.w	8006af0 <__sinit_lock_release>
 8006b10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b14:	6523      	str	r3, [r4, #80]	; 0x50
 8006b16:	4b13      	ldr	r3, [pc, #76]	; (8006b64 <__sinit+0x68>)
 8006b18:	4a13      	ldr	r2, [pc, #76]	; (8006b68 <__sinit+0x6c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b1e:	42a3      	cmp	r3, r4
 8006b20:	bf04      	itt	eq
 8006b22:	2301      	moveq	r3, #1
 8006b24:	61a3      	streq	r3, [r4, #24]
 8006b26:	4620      	mov	r0, r4
 8006b28:	f000 f820 	bl	8006b6c <__sfp>
 8006b2c:	6060      	str	r0, [r4, #4]
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f000 f81c 	bl	8006b6c <__sfp>
 8006b34:	60a0      	str	r0, [r4, #8]
 8006b36:	4620      	mov	r0, r4
 8006b38:	f000 f818 	bl	8006b6c <__sfp>
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	60e0      	str	r0, [r4, #12]
 8006b40:	2104      	movs	r1, #4
 8006b42:	6860      	ldr	r0, [r4, #4]
 8006b44:	f7ff ff82 	bl	8006a4c <std>
 8006b48:	68a0      	ldr	r0, [r4, #8]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	2109      	movs	r1, #9
 8006b4e:	f7ff ff7d 	bl	8006a4c <std>
 8006b52:	68e0      	ldr	r0, [r4, #12]
 8006b54:	2202      	movs	r2, #2
 8006b56:	2112      	movs	r1, #18
 8006b58:	f7ff ff78 	bl	8006a4c <std>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	61a3      	str	r3, [r4, #24]
 8006b60:	e7d2      	b.n	8006b08 <__sinit+0xc>
 8006b62:	bf00      	nop
 8006b64:	08007b14 	.word	0x08007b14
 8006b68:	08006a95 	.word	0x08006a95

08006b6c <__sfp>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	4607      	mov	r7, r0
 8006b70:	f7ff ffac 	bl	8006acc <__sfp_lock_acquire>
 8006b74:	4b1e      	ldr	r3, [pc, #120]	; (8006bf0 <__sfp+0x84>)
 8006b76:	681e      	ldr	r6, [r3, #0]
 8006b78:	69b3      	ldr	r3, [r6, #24]
 8006b7a:	b913      	cbnz	r3, 8006b82 <__sfp+0x16>
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	f7ff ffbd 	bl	8006afc <__sinit>
 8006b82:	3648      	adds	r6, #72	; 0x48
 8006b84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	d503      	bpl.n	8006b94 <__sfp+0x28>
 8006b8c:	6833      	ldr	r3, [r6, #0]
 8006b8e:	b30b      	cbz	r3, 8006bd4 <__sfp+0x68>
 8006b90:	6836      	ldr	r6, [r6, #0]
 8006b92:	e7f7      	b.n	8006b84 <__sfp+0x18>
 8006b94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b98:	b9d5      	cbnz	r5, 8006bd0 <__sfp+0x64>
 8006b9a:	4b16      	ldr	r3, [pc, #88]	; (8006bf4 <__sfp+0x88>)
 8006b9c:	60e3      	str	r3, [r4, #12]
 8006b9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ba2:	6665      	str	r5, [r4, #100]	; 0x64
 8006ba4:	f000 f847 	bl	8006c36 <__retarget_lock_init_recursive>
 8006ba8:	f7ff ff96 	bl	8006ad8 <__sfp_lock_release>
 8006bac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006bb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bb4:	6025      	str	r5, [r4, #0]
 8006bb6:	61a5      	str	r5, [r4, #24]
 8006bb8:	2208      	movs	r2, #8
 8006bba:	4629      	mov	r1, r5
 8006bbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bc0:	f7ff fc5e 	bl	8006480 <memset>
 8006bc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006bc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006bcc:	4620      	mov	r0, r4
 8006bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bd0:	3468      	adds	r4, #104	; 0x68
 8006bd2:	e7d9      	b.n	8006b88 <__sfp+0x1c>
 8006bd4:	2104      	movs	r1, #4
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	f7ff ff62 	bl	8006aa0 <__sfmoreglue>
 8006bdc:	4604      	mov	r4, r0
 8006bde:	6030      	str	r0, [r6, #0]
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d1d5      	bne.n	8006b90 <__sfp+0x24>
 8006be4:	f7ff ff78 	bl	8006ad8 <__sfp_lock_release>
 8006be8:	230c      	movs	r3, #12
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	e7ee      	b.n	8006bcc <__sfp+0x60>
 8006bee:	bf00      	nop
 8006bf0:	08007b14 	.word	0x08007b14
 8006bf4:	ffff0001 	.word	0xffff0001

08006bf8 <_fwalk_reent>:
 8006bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	4688      	mov	r8, r1
 8006c00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c04:	2700      	movs	r7, #0
 8006c06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c0a:	f1b9 0901 	subs.w	r9, r9, #1
 8006c0e:	d505      	bpl.n	8006c1c <_fwalk_reent+0x24>
 8006c10:	6824      	ldr	r4, [r4, #0]
 8006c12:	2c00      	cmp	r4, #0
 8006c14:	d1f7      	bne.n	8006c06 <_fwalk_reent+0xe>
 8006c16:	4638      	mov	r0, r7
 8006c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c1c:	89ab      	ldrh	r3, [r5, #12]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d907      	bls.n	8006c32 <_fwalk_reent+0x3a>
 8006c22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c26:	3301      	adds	r3, #1
 8006c28:	d003      	beq.n	8006c32 <_fwalk_reent+0x3a>
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	47c0      	blx	r8
 8006c30:	4307      	orrs	r7, r0
 8006c32:	3568      	adds	r5, #104	; 0x68
 8006c34:	e7e9      	b.n	8006c0a <_fwalk_reent+0x12>

08006c36 <__retarget_lock_init_recursive>:
 8006c36:	4770      	bx	lr

08006c38 <__retarget_lock_acquire_recursive>:
 8006c38:	4770      	bx	lr

08006c3a <__retarget_lock_release_recursive>:
 8006c3a:	4770      	bx	lr

08006c3c <__swhatbuf_r>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	460e      	mov	r6, r1
 8006c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c44:	2900      	cmp	r1, #0
 8006c46:	b096      	sub	sp, #88	; 0x58
 8006c48:	4614      	mov	r4, r2
 8006c4a:	461d      	mov	r5, r3
 8006c4c:	da08      	bge.n	8006c60 <__swhatbuf_r+0x24>
 8006c4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	602a      	str	r2, [r5, #0]
 8006c56:	061a      	lsls	r2, r3, #24
 8006c58:	d410      	bmi.n	8006c7c <__swhatbuf_r+0x40>
 8006c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c5e:	e00e      	b.n	8006c7e <__swhatbuf_r+0x42>
 8006c60:	466a      	mov	r2, sp
 8006c62:	f000 fc9d 	bl	80075a0 <_fstat_r>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	dbf1      	blt.n	8006c4e <__swhatbuf_r+0x12>
 8006c6a:	9a01      	ldr	r2, [sp, #4]
 8006c6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c74:	425a      	negs	r2, r3
 8006c76:	415a      	adcs	r2, r3
 8006c78:	602a      	str	r2, [r5, #0]
 8006c7a:	e7ee      	b.n	8006c5a <__swhatbuf_r+0x1e>
 8006c7c:	2340      	movs	r3, #64	; 0x40
 8006c7e:	2000      	movs	r0, #0
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	b016      	add	sp, #88	; 0x58
 8006c84:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c88 <__smakebuf_r>:
 8006c88:	898b      	ldrh	r3, [r1, #12]
 8006c8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c8c:	079d      	lsls	r5, r3, #30
 8006c8e:	4606      	mov	r6, r0
 8006c90:	460c      	mov	r4, r1
 8006c92:	d507      	bpl.n	8006ca4 <__smakebuf_r+0x1c>
 8006c94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	6123      	str	r3, [r4, #16]
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	6163      	str	r3, [r4, #20]
 8006ca0:	b002      	add	sp, #8
 8006ca2:	bd70      	pop	{r4, r5, r6, pc}
 8006ca4:	ab01      	add	r3, sp, #4
 8006ca6:	466a      	mov	r2, sp
 8006ca8:	f7ff ffc8 	bl	8006c3c <__swhatbuf_r>
 8006cac:	9900      	ldr	r1, [sp, #0]
 8006cae:	4605      	mov	r5, r0
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f000 f89d 	bl	8006df0 <_malloc_r>
 8006cb6:	b948      	cbnz	r0, 8006ccc <__smakebuf_r+0x44>
 8006cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cbc:	059a      	lsls	r2, r3, #22
 8006cbe:	d4ef      	bmi.n	8006ca0 <__smakebuf_r+0x18>
 8006cc0:	f023 0303 	bic.w	r3, r3, #3
 8006cc4:	f043 0302 	orr.w	r3, r3, #2
 8006cc8:	81a3      	strh	r3, [r4, #12]
 8006cca:	e7e3      	b.n	8006c94 <__smakebuf_r+0xc>
 8006ccc:	4b0d      	ldr	r3, [pc, #52]	; (8006d04 <__smakebuf_r+0x7c>)
 8006cce:	62b3      	str	r3, [r6, #40]	; 0x28
 8006cd0:	89a3      	ldrh	r3, [r4, #12]
 8006cd2:	6020      	str	r0, [r4, #0]
 8006cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd8:	81a3      	strh	r3, [r4, #12]
 8006cda:	9b00      	ldr	r3, [sp, #0]
 8006cdc:	6163      	str	r3, [r4, #20]
 8006cde:	9b01      	ldr	r3, [sp, #4]
 8006ce0:	6120      	str	r0, [r4, #16]
 8006ce2:	b15b      	cbz	r3, 8006cfc <__smakebuf_r+0x74>
 8006ce4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f000 fc6b 	bl	80075c4 <_isatty_r>
 8006cee:	b128      	cbz	r0, 8006cfc <__smakebuf_r+0x74>
 8006cf0:	89a3      	ldrh	r3, [r4, #12]
 8006cf2:	f023 0303 	bic.w	r3, r3, #3
 8006cf6:	f043 0301 	orr.w	r3, r3, #1
 8006cfa:	81a3      	strh	r3, [r4, #12]
 8006cfc:	89a0      	ldrh	r0, [r4, #12]
 8006cfe:	4305      	orrs	r5, r0
 8006d00:	81a5      	strh	r5, [r4, #12]
 8006d02:	e7cd      	b.n	8006ca0 <__smakebuf_r+0x18>
 8006d04:	08006a95 	.word	0x08006a95

08006d08 <malloc>:
 8006d08:	4b02      	ldr	r3, [pc, #8]	; (8006d14 <malloc+0xc>)
 8006d0a:	4601      	mov	r1, r0
 8006d0c:	6818      	ldr	r0, [r3, #0]
 8006d0e:	f000 b86f 	b.w	8006df0 <_malloc_r>
 8006d12:	bf00      	nop
 8006d14:	2000000c 	.word	0x2000000c

08006d18 <_free_r>:
 8006d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d1a:	2900      	cmp	r1, #0
 8006d1c:	d044      	beq.n	8006da8 <_free_r+0x90>
 8006d1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d22:	9001      	str	r0, [sp, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f1a1 0404 	sub.w	r4, r1, #4
 8006d2a:	bfb8      	it	lt
 8006d2c:	18e4      	addlt	r4, r4, r3
 8006d2e:	f000 fc6b 	bl	8007608 <__malloc_lock>
 8006d32:	4a1e      	ldr	r2, [pc, #120]	; (8006dac <_free_r+0x94>)
 8006d34:	9801      	ldr	r0, [sp, #4]
 8006d36:	6813      	ldr	r3, [r2, #0]
 8006d38:	b933      	cbnz	r3, 8006d48 <_free_r+0x30>
 8006d3a:	6063      	str	r3, [r4, #4]
 8006d3c:	6014      	str	r4, [r2, #0]
 8006d3e:	b003      	add	sp, #12
 8006d40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d44:	f000 bc66 	b.w	8007614 <__malloc_unlock>
 8006d48:	42a3      	cmp	r3, r4
 8006d4a:	d908      	bls.n	8006d5e <_free_r+0x46>
 8006d4c:	6825      	ldr	r5, [r4, #0]
 8006d4e:	1961      	adds	r1, r4, r5
 8006d50:	428b      	cmp	r3, r1
 8006d52:	bf01      	itttt	eq
 8006d54:	6819      	ldreq	r1, [r3, #0]
 8006d56:	685b      	ldreq	r3, [r3, #4]
 8006d58:	1949      	addeq	r1, r1, r5
 8006d5a:	6021      	streq	r1, [r4, #0]
 8006d5c:	e7ed      	b.n	8006d3a <_free_r+0x22>
 8006d5e:	461a      	mov	r2, r3
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	b10b      	cbz	r3, 8006d68 <_free_r+0x50>
 8006d64:	42a3      	cmp	r3, r4
 8006d66:	d9fa      	bls.n	8006d5e <_free_r+0x46>
 8006d68:	6811      	ldr	r1, [r2, #0]
 8006d6a:	1855      	adds	r5, r2, r1
 8006d6c:	42a5      	cmp	r5, r4
 8006d6e:	d10b      	bne.n	8006d88 <_free_r+0x70>
 8006d70:	6824      	ldr	r4, [r4, #0]
 8006d72:	4421      	add	r1, r4
 8006d74:	1854      	adds	r4, r2, r1
 8006d76:	42a3      	cmp	r3, r4
 8006d78:	6011      	str	r1, [r2, #0]
 8006d7a:	d1e0      	bne.n	8006d3e <_free_r+0x26>
 8006d7c:	681c      	ldr	r4, [r3, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	6053      	str	r3, [r2, #4]
 8006d82:	4421      	add	r1, r4
 8006d84:	6011      	str	r1, [r2, #0]
 8006d86:	e7da      	b.n	8006d3e <_free_r+0x26>
 8006d88:	d902      	bls.n	8006d90 <_free_r+0x78>
 8006d8a:	230c      	movs	r3, #12
 8006d8c:	6003      	str	r3, [r0, #0]
 8006d8e:	e7d6      	b.n	8006d3e <_free_r+0x26>
 8006d90:	6825      	ldr	r5, [r4, #0]
 8006d92:	1961      	adds	r1, r4, r5
 8006d94:	428b      	cmp	r3, r1
 8006d96:	bf04      	itt	eq
 8006d98:	6819      	ldreq	r1, [r3, #0]
 8006d9a:	685b      	ldreq	r3, [r3, #4]
 8006d9c:	6063      	str	r3, [r4, #4]
 8006d9e:	bf04      	itt	eq
 8006da0:	1949      	addeq	r1, r1, r5
 8006da2:	6021      	streq	r1, [r4, #0]
 8006da4:	6054      	str	r4, [r2, #4]
 8006da6:	e7ca      	b.n	8006d3e <_free_r+0x26>
 8006da8:	b003      	add	sp, #12
 8006daa:	bd30      	pop	{r4, r5, pc}
 8006dac:	200008dc 	.word	0x200008dc

08006db0 <sbrk_aligned>:
 8006db0:	b570      	push	{r4, r5, r6, lr}
 8006db2:	4e0e      	ldr	r6, [pc, #56]	; (8006dec <sbrk_aligned+0x3c>)
 8006db4:	460c      	mov	r4, r1
 8006db6:	6831      	ldr	r1, [r6, #0]
 8006db8:	4605      	mov	r5, r0
 8006dba:	b911      	cbnz	r1, 8006dc2 <sbrk_aligned+0x12>
 8006dbc:	f000 fb7a 	bl	80074b4 <_sbrk_r>
 8006dc0:	6030      	str	r0, [r6, #0]
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f000 fb75 	bl	80074b4 <_sbrk_r>
 8006dca:	1c43      	adds	r3, r0, #1
 8006dcc:	d00a      	beq.n	8006de4 <sbrk_aligned+0x34>
 8006dce:	1cc4      	adds	r4, r0, #3
 8006dd0:	f024 0403 	bic.w	r4, r4, #3
 8006dd4:	42a0      	cmp	r0, r4
 8006dd6:	d007      	beq.n	8006de8 <sbrk_aligned+0x38>
 8006dd8:	1a21      	subs	r1, r4, r0
 8006dda:	4628      	mov	r0, r5
 8006ddc:	f000 fb6a 	bl	80074b4 <_sbrk_r>
 8006de0:	3001      	adds	r0, #1
 8006de2:	d101      	bne.n	8006de8 <sbrk_aligned+0x38>
 8006de4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006de8:	4620      	mov	r0, r4
 8006dea:	bd70      	pop	{r4, r5, r6, pc}
 8006dec:	200008e0 	.word	0x200008e0

08006df0 <_malloc_r>:
 8006df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df4:	1ccd      	adds	r5, r1, #3
 8006df6:	f025 0503 	bic.w	r5, r5, #3
 8006dfa:	3508      	adds	r5, #8
 8006dfc:	2d0c      	cmp	r5, #12
 8006dfe:	bf38      	it	cc
 8006e00:	250c      	movcc	r5, #12
 8006e02:	2d00      	cmp	r5, #0
 8006e04:	4607      	mov	r7, r0
 8006e06:	db01      	blt.n	8006e0c <_malloc_r+0x1c>
 8006e08:	42a9      	cmp	r1, r5
 8006e0a:	d905      	bls.n	8006e18 <_malloc_r+0x28>
 8006e0c:	230c      	movs	r3, #12
 8006e0e:	603b      	str	r3, [r7, #0]
 8006e10:	2600      	movs	r6, #0
 8006e12:	4630      	mov	r0, r6
 8006e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e18:	4e2e      	ldr	r6, [pc, #184]	; (8006ed4 <_malloc_r+0xe4>)
 8006e1a:	f000 fbf5 	bl	8007608 <__malloc_lock>
 8006e1e:	6833      	ldr	r3, [r6, #0]
 8006e20:	461c      	mov	r4, r3
 8006e22:	bb34      	cbnz	r4, 8006e72 <_malloc_r+0x82>
 8006e24:	4629      	mov	r1, r5
 8006e26:	4638      	mov	r0, r7
 8006e28:	f7ff ffc2 	bl	8006db0 <sbrk_aligned>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	4604      	mov	r4, r0
 8006e30:	d14d      	bne.n	8006ece <_malloc_r+0xde>
 8006e32:	6834      	ldr	r4, [r6, #0]
 8006e34:	4626      	mov	r6, r4
 8006e36:	2e00      	cmp	r6, #0
 8006e38:	d140      	bne.n	8006ebc <_malloc_r+0xcc>
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4638      	mov	r0, r7
 8006e40:	eb04 0803 	add.w	r8, r4, r3
 8006e44:	f000 fb36 	bl	80074b4 <_sbrk_r>
 8006e48:	4580      	cmp	r8, r0
 8006e4a:	d13a      	bne.n	8006ec2 <_malloc_r+0xd2>
 8006e4c:	6821      	ldr	r1, [r4, #0]
 8006e4e:	3503      	adds	r5, #3
 8006e50:	1a6d      	subs	r5, r5, r1
 8006e52:	f025 0503 	bic.w	r5, r5, #3
 8006e56:	3508      	adds	r5, #8
 8006e58:	2d0c      	cmp	r5, #12
 8006e5a:	bf38      	it	cc
 8006e5c:	250c      	movcc	r5, #12
 8006e5e:	4629      	mov	r1, r5
 8006e60:	4638      	mov	r0, r7
 8006e62:	f7ff ffa5 	bl	8006db0 <sbrk_aligned>
 8006e66:	3001      	adds	r0, #1
 8006e68:	d02b      	beq.n	8006ec2 <_malloc_r+0xd2>
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	442b      	add	r3, r5
 8006e6e:	6023      	str	r3, [r4, #0]
 8006e70:	e00e      	b.n	8006e90 <_malloc_r+0xa0>
 8006e72:	6822      	ldr	r2, [r4, #0]
 8006e74:	1b52      	subs	r2, r2, r5
 8006e76:	d41e      	bmi.n	8006eb6 <_malloc_r+0xc6>
 8006e78:	2a0b      	cmp	r2, #11
 8006e7a:	d916      	bls.n	8006eaa <_malloc_r+0xba>
 8006e7c:	1961      	adds	r1, r4, r5
 8006e7e:	42a3      	cmp	r3, r4
 8006e80:	6025      	str	r5, [r4, #0]
 8006e82:	bf18      	it	ne
 8006e84:	6059      	strne	r1, [r3, #4]
 8006e86:	6863      	ldr	r3, [r4, #4]
 8006e88:	bf08      	it	eq
 8006e8a:	6031      	streq	r1, [r6, #0]
 8006e8c:	5162      	str	r2, [r4, r5]
 8006e8e:	604b      	str	r3, [r1, #4]
 8006e90:	4638      	mov	r0, r7
 8006e92:	f104 060b 	add.w	r6, r4, #11
 8006e96:	f000 fbbd 	bl	8007614 <__malloc_unlock>
 8006e9a:	f026 0607 	bic.w	r6, r6, #7
 8006e9e:	1d23      	adds	r3, r4, #4
 8006ea0:	1af2      	subs	r2, r6, r3
 8006ea2:	d0b6      	beq.n	8006e12 <_malloc_r+0x22>
 8006ea4:	1b9b      	subs	r3, r3, r6
 8006ea6:	50a3      	str	r3, [r4, r2]
 8006ea8:	e7b3      	b.n	8006e12 <_malloc_r+0x22>
 8006eaa:	6862      	ldr	r2, [r4, #4]
 8006eac:	42a3      	cmp	r3, r4
 8006eae:	bf0c      	ite	eq
 8006eb0:	6032      	streq	r2, [r6, #0]
 8006eb2:	605a      	strne	r2, [r3, #4]
 8006eb4:	e7ec      	b.n	8006e90 <_malloc_r+0xa0>
 8006eb6:	4623      	mov	r3, r4
 8006eb8:	6864      	ldr	r4, [r4, #4]
 8006eba:	e7b2      	b.n	8006e22 <_malloc_r+0x32>
 8006ebc:	4634      	mov	r4, r6
 8006ebe:	6876      	ldr	r6, [r6, #4]
 8006ec0:	e7b9      	b.n	8006e36 <_malloc_r+0x46>
 8006ec2:	230c      	movs	r3, #12
 8006ec4:	603b      	str	r3, [r7, #0]
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	f000 fba4 	bl	8007614 <__malloc_unlock>
 8006ecc:	e7a1      	b.n	8006e12 <_malloc_r+0x22>
 8006ece:	6025      	str	r5, [r4, #0]
 8006ed0:	e7de      	b.n	8006e90 <_malloc_r+0xa0>
 8006ed2:	bf00      	nop
 8006ed4:	200008dc 	.word	0x200008dc

08006ed8 <__sfputc_r>:
 8006ed8:	6893      	ldr	r3, [r2, #8]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	b410      	push	{r4}
 8006ee0:	6093      	str	r3, [r2, #8]
 8006ee2:	da08      	bge.n	8006ef6 <__sfputc_r+0x1e>
 8006ee4:	6994      	ldr	r4, [r2, #24]
 8006ee6:	42a3      	cmp	r3, r4
 8006ee8:	db01      	blt.n	8006eee <__sfputc_r+0x16>
 8006eea:	290a      	cmp	r1, #10
 8006eec:	d103      	bne.n	8006ef6 <__sfputc_r+0x1e>
 8006eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ef2:	f7ff bc29 	b.w	8006748 <__swbuf_r>
 8006ef6:	6813      	ldr	r3, [r2, #0]
 8006ef8:	1c58      	adds	r0, r3, #1
 8006efa:	6010      	str	r0, [r2, #0]
 8006efc:	7019      	strb	r1, [r3, #0]
 8006efe:	4608      	mov	r0, r1
 8006f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <__sfputs_r>:
 8006f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f08:	4606      	mov	r6, r0
 8006f0a:	460f      	mov	r7, r1
 8006f0c:	4614      	mov	r4, r2
 8006f0e:	18d5      	adds	r5, r2, r3
 8006f10:	42ac      	cmp	r4, r5
 8006f12:	d101      	bne.n	8006f18 <__sfputs_r+0x12>
 8006f14:	2000      	movs	r0, #0
 8006f16:	e007      	b.n	8006f28 <__sfputs_r+0x22>
 8006f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1c:	463a      	mov	r2, r7
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f7ff ffda 	bl	8006ed8 <__sfputc_r>
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	d1f3      	bne.n	8006f10 <__sfputs_r+0xa>
 8006f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f2c <_vfiprintf_r>:
 8006f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f30:	460d      	mov	r5, r1
 8006f32:	b09d      	sub	sp, #116	; 0x74
 8006f34:	4614      	mov	r4, r2
 8006f36:	4698      	mov	r8, r3
 8006f38:	4606      	mov	r6, r0
 8006f3a:	b118      	cbz	r0, 8006f44 <_vfiprintf_r+0x18>
 8006f3c:	6983      	ldr	r3, [r0, #24]
 8006f3e:	b90b      	cbnz	r3, 8006f44 <_vfiprintf_r+0x18>
 8006f40:	f7ff fddc 	bl	8006afc <__sinit>
 8006f44:	4b89      	ldr	r3, [pc, #548]	; (800716c <_vfiprintf_r+0x240>)
 8006f46:	429d      	cmp	r5, r3
 8006f48:	d11b      	bne.n	8006f82 <_vfiprintf_r+0x56>
 8006f4a:	6875      	ldr	r5, [r6, #4]
 8006f4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f4e:	07d9      	lsls	r1, r3, #31
 8006f50:	d405      	bmi.n	8006f5e <_vfiprintf_r+0x32>
 8006f52:	89ab      	ldrh	r3, [r5, #12]
 8006f54:	059a      	lsls	r2, r3, #22
 8006f56:	d402      	bmi.n	8006f5e <_vfiprintf_r+0x32>
 8006f58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f5a:	f7ff fe6d 	bl	8006c38 <__retarget_lock_acquire_recursive>
 8006f5e:	89ab      	ldrh	r3, [r5, #12]
 8006f60:	071b      	lsls	r3, r3, #28
 8006f62:	d501      	bpl.n	8006f68 <_vfiprintf_r+0x3c>
 8006f64:	692b      	ldr	r3, [r5, #16]
 8006f66:	b9eb      	cbnz	r3, 8006fa4 <_vfiprintf_r+0x78>
 8006f68:	4629      	mov	r1, r5
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f7ff fc3e 	bl	80067ec <__swsetup_r>
 8006f70:	b1c0      	cbz	r0, 8006fa4 <_vfiprintf_r+0x78>
 8006f72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f74:	07dc      	lsls	r4, r3, #31
 8006f76:	d50e      	bpl.n	8006f96 <_vfiprintf_r+0x6a>
 8006f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f7c:	b01d      	add	sp, #116	; 0x74
 8006f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f82:	4b7b      	ldr	r3, [pc, #492]	; (8007170 <_vfiprintf_r+0x244>)
 8006f84:	429d      	cmp	r5, r3
 8006f86:	d101      	bne.n	8006f8c <_vfiprintf_r+0x60>
 8006f88:	68b5      	ldr	r5, [r6, #8]
 8006f8a:	e7df      	b.n	8006f4c <_vfiprintf_r+0x20>
 8006f8c:	4b79      	ldr	r3, [pc, #484]	; (8007174 <_vfiprintf_r+0x248>)
 8006f8e:	429d      	cmp	r5, r3
 8006f90:	bf08      	it	eq
 8006f92:	68f5      	ldreq	r5, [r6, #12]
 8006f94:	e7da      	b.n	8006f4c <_vfiprintf_r+0x20>
 8006f96:	89ab      	ldrh	r3, [r5, #12]
 8006f98:	0598      	lsls	r0, r3, #22
 8006f9a:	d4ed      	bmi.n	8006f78 <_vfiprintf_r+0x4c>
 8006f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f9e:	f7ff fe4c 	bl	8006c3a <__retarget_lock_release_recursive>
 8006fa2:	e7e9      	b.n	8006f78 <_vfiprintf_r+0x4c>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8006fa8:	2320      	movs	r3, #32
 8006faa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fae:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fb2:	2330      	movs	r3, #48	; 0x30
 8006fb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007178 <_vfiprintf_r+0x24c>
 8006fb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fbc:	f04f 0901 	mov.w	r9, #1
 8006fc0:	4623      	mov	r3, r4
 8006fc2:	469a      	mov	sl, r3
 8006fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fc8:	b10a      	cbz	r2, 8006fce <_vfiprintf_r+0xa2>
 8006fca:	2a25      	cmp	r2, #37	; 0x25
 8006fcc:	d1f9      	bne.n	8006fc2 <_vfiprintf_r+0x96>
 8006fce:	ebba 0b04 	subs.w	fp, sl, r4
 8006fd2:	d00b      	beq.n	8006fec <_vfiprintf_r+0xc0>
 8006fd4:	465b      	mov	r3, fp
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	4630      	mov	r0, r6
 8006fdc:	f7ff ff93 	bl	8006f06 <__sfputs_r>
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	f000 80aa 	beq.w	800713a <_vfiprintf_r+0x20e>
 8006fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fe8:	445a      	add	r2, fp
 8006fea:	9209      	str	r2, [sp, #36]	; 0x24
 8006fec:	f89a 3000 	ldrb.w	r3, [sl]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 80a2 	beq.w	800713a <_vfiprintf_r+0x20e>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007000:	f10a 0a01 	add.w	sl, sl, #1
 8007004:	9304      	str	r3, [sp, #16]
 8007006:	9307      	str	r3, [sp, #28]
 8007008:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800700c:	931a      	str	r3, [sp, #104]	; 0x68
 800700e:	4654      	mov	r4, sl
 8007010:	2205      	movs	r2, #5
 8007012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007016:	4858      	ldr	r0, [pc, #352]	; (8007178 <_vfiprintf_r+0x24c>)
 8007018:	f7f9 f8da 	bl	80001d0 <memchr>
 800701c:	9a04      	ldr	r2, [sp, #16]
 800701e:	b9d8      	cbnz	r0, 8007058 <_vfiprintf_r+0x12c>
 8007020:	06d1      	lsls	r1, r2, #27
 8007022:	bf44      	itt	mi
 8007024:	2320      	movmi	r3, #32
 8007026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800702a:	0713      	lsls	r3, r2, #28
 800702c:	bf44      	itt	mi
 800702e:	232b      	movmi	r3, #43	; 0x2b
 8007030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007034:	f89a 3000 	ldrb.w	r3, [sl]
 8007038:	2b2a      	cmp	r3, #42	; 0x2a
 800703a:	d015      	beq.n	8007068 <_vfiprintf_r+0x13c>
 800703c:	9a07      	ldr	r2, [sp, #28]
 800703e:	4654      	mov	r4, sl
 8007040:	2000      	movs	r0, #0
 8007042:	f04f 0c0a 	mov.w	ip, #10
 8007046:	4621      	mov	r1, r4
 8007048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800704c:	3b30      	subs	r3, #48	; 0x30
 800704e:	2b09      	cmp	r3, #9
 8007050:	d94e      	bls.n	80070f0 <_vfiprintf_r+0x1c4>
 8007052:	b1b0      	cbz	r0, 8007082 <_vfiprintf_r+0x156>
 8007054:	9207      	str	r2, [sp, #28]
 8007056:	e014      	b.n	8007082 <_vfiprintf_r+0x156>
 8007058:	eba0 0308 	sub.w	r3, r0, r8
 800705c:	fa09 f303 	lsl.w	r3, r9, r3
 8007060:	4313      	orrs	r3, r2
 8007062:	9304      	str	r3, [sp, #16]
 8007064:	46a2      	mov	sl, r4
 8007066:	e7d2      	b.n	800700e <_vfiprintf_r+0xe2>
 8007068:	9b03      	ldr	r3, [sp, #12]
 800706a:	1d19      	adds	r1, r3, #4
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	9103      	str	r1, [sp, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	bfbb      	ittet	lt
 8007074:	425b      	neglt	r3, r3
 8007076:	f042 0202 	orrlt.w	r2, r2, #2
 800707a:	9307      	strge	r3, [sp, #28]
 800707c:	9307      	strlt	r3, [sp, #28]
 800707e:	bfb8      	it	lt
 8007080:	9204      	strlt	r2, [sp, #16]
 8007082:	7823      	ldrb	r3, [r4, #0]
 8007084:	2b2e      	cmp	r3, #46	; 0x2e
 8007086:	d10c      	bne.n	80070a2 <_vfiprintf_r+0x176>
 8007088:	7863      	ldrb	r3, [r4, #1]
 800708a:	2b2a      	cmp	r3, #42	; 0x2a
 800708c:	d135      	bne.n	80070fa <_vfiprintf_r+0x1ce>
 800708e:	9b03      	ldr	r3, [sp, #12]
 8007090:	1d1a      	adds	r2, r3, #4
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	9203      	str	r2, [sp, #12]
 8007096:	2b00      	cmp	r3, #0
 8007098:	bfb8      	it	lt
 800709a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800709e:	3402      	adds	r4, #2
 80070a0:	9305      	str	r3, [sp, #20]
 80070a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007188 <_vfiprintf_r+0x25c>
 80070a6:	7821      	ldrb	r1, [r4, #0]
 80070a8:	2203      	movs	r2, #3
 80070aa:	4650      	mov	r0, sl
 80070ac:	f7f9 f890 	bl	80001d0 <memchr>
 80070b0:	b140      	cbz	r0, 80070c4 <_vfiprintf_r+0x198>
 80070b2:	2340      	movs	r3, #64	; 0x40
 80070b4:	eba0 000a 	sub.w	r0, r0, sl
 80070b8:	fa03 f000 	lsl.w	r0, r3, r0
 80070bc:	9b04      	ldr	r3, [sp, #16]
 80070be:	4303      	orrs	r3, r0
 80070c0:	3401      	adds	r4, #1
 80070c2:	9304      	str	r3, [sp, #16]
 80070c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070c8:	482c      	ldr	r0, [pc, #176]	; (800717c <_vfiprintf_r+0x250>)
 80070ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070ce:	2206      	movs	r2, #6
 80070d0:	f7f9 f87e 	bl	80001d0 <memchr>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d03f      	beq.n	8007158 <_vfiprintf_r+0x22c>
 80070d8:	4b29      	ldr	r3, [pc, #164]	; (8007180 <_vfiprintf_r+0x254>)
 80070da:	bb1b      	cbnz	r3, 8007124 <_vfiprintf_r+0x1f8>
 80070dc:	9b03      	ldr	r3, [sp, #12]
 80070de:	3307      	adds	r3, #7
 80070e0:	f023 0307 	bic.w	r3, r3, #7
 80070e4:	3308      	adds	r3, #8
 80070e6:	9303      	str	r3, [sp, #12]
 80070e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ea:	443b      	add	r3, r7
 80070ec:	9309      	str	r3, [sp, #36]	; 0x24
 80070ee:	e767      	b.n	8006fc0 <_vfiprintf_r+0x94>
 80070f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80070f4:	460c      	mov	r4, r1
 80070f6:	2001      	movs	r0, #1
 80070f8:	e7a5      	b.n	8007046 <_vfiprintf_r+0x11a>
 80070fa:	2300      	movs	r3, #0
 80070fc:	3401      	adds	r4, #1
 80070fe:	9305      	str	r3, [sp, #20]
 8007100:	4619      	mov	r1, r3
 8007102:	f04f 0c0a 	mov.w	ip, #10
 8007106:	4620      	mov	r0, r4
 8007108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800710c:	3a30      	subs	r2, #48	; 0x30
 800710e:	2a09      	cmp	r2, #9
 8007110:	d903      	bls.n	800711a <_vfiprintf_r+0x1ee>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0c5      	beq.n	80070a2 <_vfiprintf_r+0x176>
 8007116:	9105      	str	r1, [sp, #20]
 8007118:	e7c3      	b.n	80070a2 <_vfiprintf_r+0x176>
 800711a:	fb0c 2101 	mla	r1, ip, r1, r2
 800711e:	4604      	mov	r4, r0
 8007120:	2301      	movs	r3, #1
 8007122:	e7f0      	b.n	8007106 <_vfiprintf_r+0x1da>
 8007124:	ab03      	add	r3, sp, #12
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	462a      	mov	r2, r5
 800712a:	4b16      	ldr	r3, [pc, #88]	; (8007184 <_vfiprintf_r+0x258>)
 800712c:	a904      	add	r1, sp, #16
 800712e:	4630      	mov	r0, r6
 8007130:	f3af 8000 	nop.w
 8007134:	4607      	mov	r7, r0
 8007136:	1c78      	adds	r0, r7, #1
 8007138:	d1d6      	bne.n	80070e8 <_vfiprintf_r+0x1bc>
 800713a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800713c:	07d9      	lsls	r1, r3, #31
 800713e:	d405      	bmi.n	800714c <_vfiprintf_r+0x220>
 8007140:	89ab      	ldrh	r3, [r5, #12]
 8007142:	059a      	lsls	r2, r3, #22
 8007144:	d402      	bmi.n	800714c <_vfiprintf_r+0x220>
 8007146:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007148:	f7ff fd77 	bl	8006c3a <__retarget_lock_release_recursive>
 800714c:	89ab      	ldrh	r3, [r5, #12]
 800714e:	065b      	lsls	r3, r3, #25
 8007150:	f53f af12 	bmi.w	8006f78 <_vfiprintf_r+0x4c>
 8007154:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007156:	e711      	b.n	8006f7c <_vfiprintf_r+0x50>
 8007158:	ab03      	add	r3, sp, #12
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	462a      	mov	r2, r5
 800715e:	4b09      	ldr	r3, [pc, #36]	; (8007184 <_vfiprintf_r+0x258>)
 8007160:	a904      	add	r1, sp, #16
 8007162:	4630      	mov	r0, r6
 8007164:	f000 f880 	bl	8007268 <_printf_i>
 8007168:	e7e4      	b.n	8007134 <_vfiprintf_r+0x208>
 800716a:	bf00      	nop
 800716c:	08007b38 	.word	0x08007b38
 8007170:	08007b58 	.word	0x08007b58
 8007174:	08007b18 	.word	0x08007b18
 8007178:	08007b78 	.word	0x08007b78
 800717c:	08007b82 	.word	0x08007b82
 8007180:	00000000 	.word	0x00000000
 8007184:	08006f07 	.word	0x08006f07
 8007188:	08007b7e 	.word	0x08007b7e

0800718c <_printf_common>:
 800718c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007190:	4616      	mov	r6, r2
 8007192:	4699      	mov	r9, r3
 8007194:	688a      	ldr	r2, [r1, #8]
 8007196:	690b      	ldr	r3, [r1, #16]
 8007198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800719c:	4293      	cmp	r3, r2
 800719e:	bfb8      	it	lt
 80071a0:	4613      	movlt	r3, r2
 80071a2:	6033      	str	r3, [r6, #0]
 80071a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071a8:	4607      	mov	r7, r0
 80071aa:	460c      	mov	r4, r1
 80071ac:	b10a      	cbz	r2, 80071b2 <_printf_common+0x26>
 80071ae:	3301      	adds	r3, #1
 80071b0:	6033      	str	r3, [r6, #0]
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	0699      	lsls	r1, r3, #26
 80071b6:	bf42      	ittt	mi
 80071b8:	6833      	ldrmi	r3, [r6, #0]
 80071ba:	3302      	addmi	r3, #2
 80071bc:	6033      	strmi	r3, [r6, #0]
 80071be:	6825      	ldr	r5, [r4, #0]
 80071c0:	f015 0506 	ands.w	r5, r5, #6
 80071c4:	d106      	bne.n	80071d4 <_printf_common+0x48>
 80071c6:	f104 0a19 	add.w	sl, r4, #25
 80071ca:	68e3      	ldr	r3, [r4, #12]
 80071cc:	6832      	ldr	r2, [r6, #0]
 80071ce:	1a9b      	subs	r3, r3, r2
 80071d0:	42ab      	cmp	r3, r5
 80071d2:	dc26      	bgt.n	8007222 <_printf_common+0x96>
 80071d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071d8:	1e13      	subs	r3, r2, #0
 80071da:	6822      	ldr	r2, [r4, #0]
 80071dc:	bf18      	it	ne
 80071de:	2301      	movne	r3, #1
 80071e0:	0692      	lsls	r2, r2, #26
 80071e2:	d42b      	bmi.n	800723c <_printf_common+0xb0>
 80071e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071e8:	4649      	mov	r1, r9
 80071ea:	4638      	mov	r0, r7
 80071ec:	47c0      	blx	r8
 80071ee:	3001      	adds	r0, #1
 80071f0:	d01e      	beq.n	8007230 <_printf_common+0xa4>
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	68e5      	ldr	r5, [r4, #12]
 80071f6:	6832      	ldr	r2, [r6, #0]
 80071f8:	f003 0306 	and.w	r3, r3, #6
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	bf08      	it	eq
 8007200:	1aad      	subeq	r5, r5, r2
 8007202:	68a3      	ldr	r3, [r4, #8]
 8007204:	6922      	ldr	r2, [r4, #16]
 8007206:	bf0c      	ite	eq
 8007208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800720c:	2500      	movne	r5, #0
 800720e:	4293      	cmp	r3, r2
 8007210:	bfc4      	itt	gt
 8007212:	1a9b      	subgt	r3, r3, r2
 8007214:	18ed      	addgt	r5, r5, r3
 8007216:	2600      	movs	r6, #0
 8007218:	341a      	adds	r4, #26
 800721a:	42b5      	cmp	r5, r6
 800721c:	d11a      	bne.n	8007254 <_printf_common+0xc8>
 800721e:	2000      	movs	r0, #0
 8007220:	e008      	b.n	8007234 <_printf_common+0xa8>
 8007222:	2301      	movs	r3, #1
 8007224:	4652      	mov	r2, sl
 8007226:	4649      	mov	r1, r9
 8007228:	4638      	mov	r0, r7
 800722a:	47c0      	blx	r8
 800722c:	3001      	adds	r0, #1
 800722e:	d103      	bne.n	8007238 <_printf_common+0xac>
 8007230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007238:	3501      	adds	r5, #1
 800723a:	e7c6      	b.n	80071ca <_printf_common+0x3e>
 800723c:	18e1      	adds	r1, r4, r3
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	2030      	movs	r0, #48	; 0x30
 8007242:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007246:	4422      	add	r2, r4
 8007248:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800724c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007250:	3302      	adds	r3, #2
 8007252:	e7c7      	b.n	80071e4 <_printf_common+0x58>
 8007254:	2301      	movs	r3, #1
 8007256:	4622      	mov	r2, r4
 8007258:	4649      	mov	r1, r9
 800725a:	4638      	mov	r0, r7
 800725c:	47c0      	blx	r8
 800725e:	3001      	adds	r0, #1
 8007260:	d0e6      	beq.n	8007230 <_printf_common+0xa4>
 8007262:	3601      	adds	r6, #1
 8007264:	e7d9      	b.n	800721a <_printf_common+0x8e>
	...

08007268 <_printf_i>:
 8007268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800726c:	7e0f      	ldrb	r7, [r1, #24]
 800726e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007270:	2f78      	cmp	r7, #120	; 0x78
 8007272:	4691      	mov	r9, r2
 8007274:	4680      	mov	r8, r0
 8007276:	460c      	mov	r4, r1
 8007278:	469a      	mov	sl, r3
 800727a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800727e:	d807      	bhi.n	8007290 <_printf_i+0x28>
 8007280:	2f62      	cmp	r7, #98	; 0x62
 8007282:	d80a      	bhi.n	800729a <_printf_i+0x32>
 8007284:	2f00      	cmp	r7, #0
 8007286:	f000 80d8 	beq.w	800743a <_printf_i+0x1d2>
 800728a:	2f58      	cmp	r7, #88	; 0x58
 800728c:	f000 80a3 	beq.w	80073d6 <_printf_i+0x16e>
 8007290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007298:	e03a      	b.n	8007310 <_printf_i+0xa8>
 800729a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800729e:	2b15      	cmp	r3, #21
 80072a0:	d8f6      	bhi.n	8007290 <_printf_i+0x28>
 80072a2:	a101      	add	r1, pc, #4	; (adr r1, 80072a8 <_printf_i+0x40>)
 80072a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072a8:	08007301 	.word	0x08007301
 80072ac:	08007315 	.word	0x08007315
 80072b0:	08007291 	.word	0x08007291
 80072b4:	08007291 	.word	0x08007291
 80072b8:	08007291 	.word	0x08007291
 80072bc:	08007291 	.word	0x08007291
 80072c0:	08007315 	.word	0x08007315
 80072c4:	08007291 	.word	0x08007291
 80072c8:	08007291 	.word	0x08007291
 80072cc:	08007291 	.word	0x08007291
 80072d0:	08007291 	.word	0x08007291
 80072d4:	08007421 	.word	0x08007421
 80072d8:	08007345 	.word	0x08007345
 80072dc:	08007403 	.word	0x08007403
 80072e0:	08007291 	.word	0x08007291
 80072e4:	08007291 	.word	0x08007291
 80072e8:	08007443 	.word	0x08007443
 80072ec:	08007291 	.word	0x08007291
 80072f0:	08007345 	.word	0x08007345
 80072f4:	08007291 	.word	0x08007291
 80072f8:	08007291 	.word	0x08007291
 80072fc:	0800740b 	.word	0x0800740b
 8007300:	682b      	ldr	r3, [r5, #0]
 8007302:	1d1a      	adds	r2, r3, #4
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	602a      	str	r2, [r5, #0]
 8007308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800730c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007310:	2301      	movs	r3, #1
 8007312:	e0a3      	b.n	800745c <_printf_i+0x1f4>
 8007314:	6820      	ldr	r0, [r4, #0]
 8007316:	6829      	ldr	r1, [r5, #0]
 8007318:	0606      	lsls	r6, r0, #24
 800731a:	f101 0304 	add.w	r3, r1, #4
 800731e:	d50a      	bpl.n	8007336 <_printf_i+0xce>
 8007320:	680e      	ldr	r6, [r1, #0]
 8007322:	602b      	str	r3, [r5, #0]
 8007324:	2e00      	cmp	r6, #0
 8007326:	da03      	bge.n	8007330 <_printf_i+0xc8>
 8007328:	232d      	movs	r3, #45	; 0x2d
 800732a:	4276      	negs	r6, r6
 800732c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007330:	485e      	ldr	r0, [pc, #376]	; (80074ac <_printf_i+0x244>)
 8007332:	230a      	movs	r3, #10
 8007334:	e019      	b.n	800736a <_printf_i+0x102>
 8007336:	680e      	ldr	r6, [r1, #0]
 8007338:	602b      	str	r3, [r5, #0]
 800733a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800733e:	bf18      	it	ne
 8007340:	b236      	sxthne	r6, r6
 8007342:	e7ef      	b.n	8007324 <_printf_i+0xbc>
 8007344:	682b      	ldr	r3, [r5, #0]
 8007346:	6820      	ldr	r0, [r4, #0]
 8007348:	1d19      	adds	r1, r3, #4
 800734a:	6029      	str	r1, [r5, #0]
 800734c:	0601      	lsls	r1, r0, #24
 800734e:	d501      	bpl.n	8007354 <_printf_i+0xec>
 8007350:	681e      	ldr	r6, [r3, #0]
 8007352:	e002      	b.n	800735a <_printf_i+0xf2>
 8007354:	0646      	lsls	r6, r0, #25
 8007356:	d5fb      	bpl.n	8007350 <_printf_i+0xe8>
 8007358:	881e      	ldrh	r6, [r3, #0]
 800735a:	4854      	ldr	r0, [pc, #336]	; (80074ac <_printf_i+0x244>)
 800735c:	2f6f      	cmp	r7, #111	; 0x6f
 800735e:	bf0c      	ite	eq
 8007360:	2308      	moveq	r3, #8
 8007362:	230a      	movne	r3, #10
 8007364:	2100      	movs	r1, #0
 8007366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800736a:	6865      	ldr	r5, [r4, #4]
 800736c:	60a5      	str	r5, [r4, #8]
 800736e:	2d00      	cmp	r5, #0
 8007370:	bfa2      	ittt	ge
 8007372:	6821      	ldrge	r1, [r4, #0]
 8007374:	f021 0104 	bicge.w	r1, r1, #4
 8007378:	6021      	strge	r1, [r4, #0]
 800737a:	b90e      	cbnz	r6, 8007380 <_printf_i+0x118>
 800737c:	2d00      	cmp	r5, #0
 800737e:	d04d      	beq.n	800741c <_printf_i+0x1b4>
 8007380:	4615      	mov	r5, r2
 8007382:	fbb6 f1f3 	udiv	r1, r6, r3
 8007386:	fb03 6711 	mls	r7, r3, r1, r6
 800738a:	5dc7      	ldrb	r7, [r0, r7]
 800738c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007390:	4637      	mov	r7, r6
 8007392:	42bb      	cmp	r3, r7
 8007394:	460e      	mov	r6, r1
 8007396:	d9f4      	bls.n	8007382 <_printf_i+0x11a>
 8007398:	2b08      	cmp	r3, #8
 800739a:	d10b      	bne.n	80073b4 <_printf_i+0x14c>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	07de      	lsls	r6, r3, #31
 80073a0:	d508      	bpl.n	80073b4 <_printf_i+0x14c>
 80073a2:	6923      	ldr	r3, [r4, #16]
 80073a4:	6861      	ldr	r1, [r4, #4]
 80073a6:	4299      	cmp	r1, r3
 80073a8:	bfde      	ittt	le
 80073aa:	2330      	movle	r3, #48	; 0x30
 80073ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80073b4:	1b52      	subs	r2, r2, r5
 80073b6:	6122      	str	r2, [r4, #16]
 80073b8:	f8cd a000 	str.w	sl, [sp]
 80073bc:	464b      	mov	r3, r9
 80073be:	aa03      	add	r2, sp, #12
 80073c0:	4621      	mov	r1, r4
 80073c2:	4640      	mov	r0, r8
 80073c4:	f7ff fee2 	bl	800718c <_printf_common>
 80073c8:	3001      	adds	r0, #1
 80073ca:	d14c      	bne.n	8007466 <_printf_i+0x1fe>
 80073cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073d0:	b004      	add	sp, #16
 80073d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d6:	4835      	ldr	r0, [pc, #212]	; (80074ac <_printf_i+0x244>)
 80073d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073dc:	6829      	ldr	r1, [r5, #0]
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80073e4:	6029      	str	r1, [r5, #0]
 80073e6:	061d      	lsls	r5, r3, #24
 80073e8:	d514      	bpl.n	8007414 <_printf_i+0x1ac>
 80073ea:	07df      	lsls	r7, r3, #31
 80073ec:	bf44      	itt	mi
 80073ee:	f043 0320 	orrmi.w	r3, r3, #32
 80073f2:	6023      	strmi	r3, [r4, #0]
 80073f4:	b91e      	cbnz	r6, 80073fe <_printf_i+0x196>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	f023 0320 	bic.w	r3, r3, #32
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	2310      	movs	r3, #16
 8007400:	e7b0      	b.n	8007364 <_printf_i+0xfc>
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	f043 0320 	orr.w	r3, r3, #32
 8007408:	6023      	str	r3, [r4, #0]
 800740a:	2378      	movs	r3, #120	; 0x78
 800740c:	4828      	ldr	r0, [pc, #160]	; (80074b0 <_printf_i+0x248>)
 800740e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007412:	e7e3      	b.n	80073dc <_printf_i+0x174>
 8007414:	0659      	lsls	r1, r3, #25
 8007416:	bf48      	it	mi
 8007418:	b2b6      	uxthmi	r6, r6
 800741a:	e7e6      	b.n	80073ea <_printf_i+0x182>
 800741c:	4615      	mov	r5, r2
 800741e:	e7bb      	b.n	8007398 <_printf_i+0x130>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	6826      	ldr	r6, [r4, #0]
 8007424:	6961      	ldr	r1, [r4, #20]
 8007426:	1d18      	adds	r0, r3, #4
 8007428:	6028      	str	r0, [r5, #0]
 800742a:	0635      	lsls	r5, r6, #24
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	d501      	bpl.n	8007434 <_printf_i+0x1cc>
 8007430:	6019      	str	r1, [r3, #0]
 8007432:	e002      	b.n	800743a <_printf_i+0x1d2>
 8007434:	0670      	lsls	r0, r6, #25
 8007436:	d5fb      	bpl.n	8007430 <_printf_i+0x1c8>
 8007438:	8019      	strh	r1, [r3, #0]
 800743a:	2300      	movs	r3, #0
 800743c:	6123      	str	r3, [r4, #16]
 800743e:	4615      	mov	r5, r2
 8007440:	e7ba      	b.n	80073b8 <_printf_i+0x150>
 8007442:	682b      	ldr	r3, [r5, #0]
 8007444:	1d1a      	adds	r2, r3, #4
 8007446:	602a      	str	r2, [r5, #0]
 8007448:	681d      	ldr	r5, [r3, #0]
 800744a:	6862      	ldr	r2, [r4, #4]
 800744c:	2100      	movs	r1, #0
 800744e:	4628      	mov	r0, r5
 8007450:	f7f8 febe 	bl	80001d0 <memchr>
 8007454:	b108      	cbz	r0, 800745a <_printf_i+0x1f2>
 8007456:	1b40      	subs	r0, r0, r5
 8007458:	6060      	str	r0, [r4, #4]
 800745a:	6863      	ldr	r3, [r4, #4]
 800745c:	6123      	str	r3, [r4, #16]
 800745e:	2300      	movs	r3, #0
 8007460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007464:	e7a8      	b.n	80073b8 <_printf_i+0x150>
 8007466:	6923      	ldr	r3, [r4, #16]
 8007468:	462a      	mov	r2, r5
 800746a:	4649      	mov	r1, r9
 800746c:	4640      	mov	r0, r8
 800746e:	47d0      	blx	sl
 8007470:	3001      	adds	r0, #1
 8007472:	d0ab      	beq.n	80073cc <_printf_i+0x164>
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	079b      	lsls	r3, r3, #30
 8007478:	d413      	bmi.n	80074a2 <_printf_i+0x23a>
 800747a:	68e0      	ldr	r0, [r4, #12]
 800747c:	9b03      	ldr	r3, [sp, #12]
 800747e:	4298      	cmp	r0, r3
 8007480:	bfb8      	it	lt
 8007482:	4618      	movlt	r0, r3
 8007484:	e7a4      	b.n	80073d0 <_printf_i+0x168>
 8007486:	2301      	movs	r3, #1
 8007488:	4632      	mov	r2, r6
 800748a:	4649      	mov	r1, r9
 800748c:	4640      	mov	r0, r8
 800748e:	47d0      	blx	sl
 8007490:	3001      	adds	r0, #1
 8007492:	d09b      	beq.n	80073cc <_printf_i+0x164>
 8007494:	3501      	adds	r5, #1
 8007496:	68e3      	ldr	r3, [r4, #12]
 8007498:	9903      	ldr	r1, [sp, #12]
 800749a:	1a5b      	subs	r3, r3, r1
 800749c:	42ab      	cmp	r3, r5
 800749e:	dcf2      	bgt.n	8007486 <_printf_i+0x21e>
 80074a0:	e7eb      	b.n	800747a <_printf_i+0x212>
 80074a2:	2500      	movs	r5, #0
 80074a4:	f104 0619 	add.w	r6, r4, #25
 80074a8:	e7f5      	b.n	8007496 <_printf_i+0x22e>
 80074aa:	bf00      	nop
 80074ac:	08007b89 	.word	0x08007b89
 80074b0:	08007b9a 	.word	0x08007b9a

080074b4 <_sbrk_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4d06      	ldr	r5, [pc, #24]	; (80074d0 <_sbrk_r+0x1c>)
 80074b8:	2300      	movs	r3, #0
 80074ba:	4604      	mov	r4, r0
 80074bc:	4608      	mov	r0, r1
 80074be:	602b      	str	r3, [r5, #0]
 80074c0:	f7f9 fefc 	bl	80012bc <_sbrk>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d102      	bne.n	80074ce <_sbrk_r+0x1a>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	b103      	cbz	r3, 80074ce <_sbrk_r+0x1a>
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	200008e4 	.word	0x200008e4

080074d4 <__sread>:
 80074d4:	b510      	push	{r4, lr}
 80074d6:	460c      	mov	r4, r1
 80074d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074dc:	f000 f8a0 	bl	8007620 <_read_r>
 80074e0:	2800      	cmp	r0, #0
 80074e2:	bfab      	itete	ge
 80074e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074e6:	89a3      	ldrhlt	r3, [r4, #12]
 80074e8:	181b      	addge	r3, r3, r0
 80074ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074ee:	bfac      	ite	ge
 80074f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80074f2:	81a3      	strhlt	r3, [r4, #12]
 80074f4:	bd10      	pop	{r4, pc}

080074f6 <__swrite>:
 80074f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074fa:	461f      	mov	r7, r3
 80074fc:	898b      	ldrh	r3, [r1, #12]
 80074fe:	05db      	lsls	r3, r3, #23
 8007500:	4605      	mov	r5, r0
 8007502:	460c      	mov	r4, r1
 8007504:	4616      	mov	r6, r2
 8007506:	d505      	bpl.n	8007514 <__swrite+0x1e>
 8007508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800750c:	2302      	movs	r3, #2
 800750e:	2200      	movs	r2, #0
 8007510:	f000 f868 	bl	80075e4 <_lseek_r>
 8007514:	89a3      	ldrh	r3, [r4, #12]
 8007516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800751a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800751e:	81a3      	strh	r3, [r4, #12]
 8007520:	4632      	mov	r2, r6
 8007522:	463b      	mov	r3, r7
 8007524:	4628      	mov	r0, r5
 8007526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800752a:	f000 b817 	b.w	800755c <_write_r>

0800752e <__sseek>:
 800752e:	b510      	push	{r4, lr}
 8007530:	460c      	mov	r4, r1
 8007532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007536:	f000 f855 	bl	80075e4 <_lseek_r>
 800753a:	1c43      	adds	r3, r0, #1
 800753c:	89a3      	ldrh	r3, [r4, #12]
 800753e:	bf15      	itete	ne
 8007540:	6560      	strne	r0, [r4, #84]	; 0x54
 8007542:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007546:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800754a:	81a3      	strheq	r3, [r4, #12]
 800754c:	bf18      	it	ne
 800754e:	81a3      	strhne	r3, [r4, #12]
 8007550:	bd10      	pop	{r4, pc}

08007552 <__sclose>:
 8007552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007556:	f000 b813 	b.w	8007580 <_close_r>
	...

0800755c <_write_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	4d07      	ldr	r5, [pc, #28]	; (800757c <_write_r+0x20>)
 8007560:	4604      	mov	r4, r0
 8007562:	4608      	mov	r0, r1
 8007564:	4611      	mov	r1, r2
 8007566:	2200      	movs	r2, #0
 8007568:	602a      	str	r2, [r5, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	f7f9 fd1a 	bl	8000fa4 <_write>
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d102      	bne.n	800757a <_write_r+0x1e>
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	b103      	cbz	r3, 800757a <_write_r+0x1e>
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	bd38      	pop	{r3, r4, r5, pc}
 800757c:	200008e4 	.word	0x200008e4

08007580 <_close_r>:
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	4d06      	ldr	r5, [pc, #24]	; (800759c <_close_r+0x1c>)
 8007584:	2300      	movs	r3, #0
 8007586:	4604      	mov	r4, r0
 8007588:	4608      	mov	r0, r1
 800758a:	602b      	str	r3, [r5, #0]
 800758c:	f7f9 fe61 	bl	8001252 <_close>
 8007590:	1c43      	adds	r3, r0, #1
 8007592:	d102      	bne.n	800759a <_close_r+0x1a>
 8007594:	682b      	ldr	r3, [r5, #0]
 8007596:	b103      	cbz	r3, 800759a <_close_r+0x1a>
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	bd38      	pop	{r3, r4, r5, pc}
 800759c:	200008e4 	.word	0x200008e4

080075a0 <_fstat_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4d07      	ldr	r5, [pc, #28]	; (80075c0 <_fstat_r+0x20>)
 80075a4:	2300      	movs	r3, #0
 80075a6:	4604      	mov	r4, r0
 80075a8:	4608      	mov	r0, r1
 80075aa:	4611      	mov	r1, r2
 80075ac:	602b      	str	r3, [r5, #0]
 80075ae:	f7f9 fe5c 	bl	800126a <_fstat>
 80075b2:	1c43      	adds	r3, r0, #1
 80075b4:	d102      	bne.n	80075bc <_fstat_r+0x1c>
 80075b6:	682b      	ldr	r3, [r5, #0]
 80075b8:	b103      	cbz	r3, 80075bc <_fstat_r+0x1c>
 80075ba:	6023      	str	r3, [r4, #0]
 80075bc:	bd38      	pop	{r3, r4, r5, pc}
 80075be:	bf00      	nop
 80075c0:	200008e4 	.word	0x200008e4

080075c4 <_isatty_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	4d06      	ldr	r5, [pc, #24]	; (80075e0 <_isatty_r+0x1c>)
 80075c8:	2300      	movs	r3, #0
 80075ca:	4604      	mov	r4, r0
 80075cc:	4608      	mov	r0, r1
 80075ce:	602b      	str	r3, [r5, #0]
 80075d0:	f7f9 fe5b 	bl	800128a <_isatty>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d102      	bne.n	80075de <_isatty_r+0x1a>
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	b103      	cbz	r3, 80075de <_isatty_r+0x1a>
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	bd38      	pop	{r3, r4, r5, pc}
 80075e0:	200008e4 	.word	0x200008e4

080075e4 <_lseek_r>:
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	4d07      	ldr	r5, [pc, #28]	; (8007604 <_lseek_r+0x20>)
 80075e8:	4604      	mov	r4, r0
 80075ea:	4608      	mov	r0, r1
 80075ec:	4611      	mov	r1, r2
 80075ee:	2200      	movs	r2, #0
 80075f0:	602a      	str	r2, [r5, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	f7f9 fe54 	bl	80012a0 <_lseek>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_lseek_r+0x1e>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_lseek_r+0x1e>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	200008e4 	.word	0x200008e4

08007608 <__malloc_lock>:
 8007608:	4801      	ldr	r0, [pc, #4]	; (8007610 <__malloc_lock+0x8>)
 800760a:	f7ff bb15 	b.w	8006c38 <__retarget_lock_acquire_recursive>
 800760e:	bf00      	nop
 8007610:	200008d8 	.word	0x200008d8

08007614 <__malloc_unlock>:
 8007614:	4801      	ldr	r0, [pc, #4]	; (800761c <__malloc_unlock+0x8>)
 8007616:	f7ff bb10 	b.w	8006c3a <__retarget_lock_release_recursive>
 800761a:	bf00      	nop
 800761c:	200008d8 	.word	0x200008d8

08007620 <_read_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4d07      	ldr	r5, [pc, #28]	; (8007640 <_read_r+0x20>)
 8007624:	4604      	mov	r4, r0
 8007626:	4608      	mov	r0, r1
 8007628:	4611      	mov	r1, r2
 800762a:	2200      	movs	r2, #0
 800762c:	602a      	str	r2, [r5, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	f7f9 fdf2 	bl	8001218 <_read>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d102      	bne.n	800763e <_read_r+0x1e>
 8007638:	682b      	ldr	r3, [r5, #0]
 800763a:	b103      	cbz	r3, 800763e <_read_r+0x1e>
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	bd38      	pop	{r3, r4, r5, pc}
 8007640:	200008e4 	.word	0x200008e4

08007644 <_init>:
 8007644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007646:	bf00      	nop
 8007648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764a:	bc08      	pop	{r3}
 800764c:	469e      	mov	lr, r3
 800764e:	4770      	bx	lr

08007650 <_fini>:
 8007650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007652:	bf00      	nop
 8007654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007656:	bc08      	pop	{r3}
 8007658:	469e      	mov	lr, r3
 800765a:	4770      	bx	lr
