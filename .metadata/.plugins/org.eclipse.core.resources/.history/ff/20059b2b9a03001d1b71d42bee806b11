
STMF446_BLDCMotor_CAN_UART_Command.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000871c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  080088f0  080088f0  000188f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e68  08008e68  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008e68  08008e68  00018e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e70  08008e70  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e70  08008e70  00018e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e74  08008e74  00018e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200001dc  08009054  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08009054  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3c3  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eeb  00000000  00000000  0002c5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002e4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002eec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000332b  00000000  00000000  0002f7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c724  00000000  00000000  00032b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd09f  00000000  00000000  0003f247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c2e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b40  00000000  00000000  0010c338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080088d4 	.word	0x080088d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080088d4 	.word	0x080088d4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <Zero>:
typedef struct {
	uint16_t rxMsg;
	uint16_t txMsg;
}CANMessage;

void Zero(){
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
	data[0] = 0xFF;
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <Zero+0x40>)
 8000f92:	22ff      	movs	r2, #255	; 0xff
 8000f94:	701a      	strb	r2, [r3, #0]
    data[1] = 0xFF;
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <Zero+0x40>)
 8000f98:	22ff      	movs	r2, #255	; 0xff
 8000f9a:	705a      	strb	r2, [r3, #1]
    data[2] = 0xFF;
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <Zero+0x40>)
 8000f9e:	22ff      	movs	r2, #255	; 0xff
 8000fa0:	709a      	strb	r2, [r3, #2]
    data[3] = 0xFF;
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <Zero+0x40>)
 8000fa4:	22ff      	movs	r2, #255	; 0xff
 8000fa6:	70da      	strb	r2, [r3, #3]
    data[4] = 0xFF;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <Zero+0x40>)
 8000faa:	22ff      	movs	r2, #255	; 0xff
 8000fac:	711a      	strb	r2, [r3, #4]
    data[5] = 0xFF;
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <Zero+0x40>)
 8000fb0:	22ff      	movs	r2, #255	; 0xff
 8000fb2:	715a      	strb	r2, [r3, #5]
    data[6] = 0xFF;
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <Zero+0x40>)
 8000fb6:	22ff      	movs	r2, #255	; 0xff
 8000fb8:	719a      	strb	r2, [r3, #6]
    data[7] = 0xFE;
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <Zero+0x40>)
 8000fbc:	22fe      	movs	r2, #254	; 0xfe
 8000fbe:	71da      	strb	r2, [r3, #7]
    //WriteAll();
    }
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	200002f0 	.word	0x200002f0

08000fd0 <EnterMotorMode>:

void EnterMotorMode(){
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
	data[0] = 0xFF;
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <EnterMotorMode+0x40>)
 8000fd6:	22ff      	movs	r2, #255	; 0xff
 8000fd8:	701a      	strb	r2, [r3, #0]
    data[1] = 0xFF;
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <EnterMotorMode+0x40>)
 8000fdc:	22ff      	movs	r2, #255	; 0xff
 8000fde:	705a      	strb	r2, [r3, #1]
    data[2] = 0xFF;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <EnterMotorMode+0x40>)
 8000fe2:	22ff      	movs	r2, #255	; 0xff
 8000fe4:	709a      	strb	r2, [r3, #2]
    data[3] = 0xFF;
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <EnterMotorMode+0x40>)
 8000fe8:	22ff      	movs	r2, #255	; 0xff
 8000fea:	70da      	strb	r2, [r3, #3]
    data[4] = 0xFF;
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <EnterMotorMode+0x40>)
 8000fee:	22ff      	movs	r2, #255	; 0xff
 8000ff0:	711a      	strb	r2, [r3, #4]
    data[5] = 0xFF;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <EnterMotorMode+0x40>)
 8000ff4:	22ff      	movs	r2, #255	; 0xff
 8000ff6:	715a      	strb	r2, [r3, #5]
    data[6] = 0xFF;
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <EnterMotorMode+0x40>)
 8000ffa:	22ff      	movs	r2, #255	; 0xff
 8000ffc:	719a      	strb	r2, [r3, #6]
    data[7] = 0xFC;
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <EnterMotorMode+0x40>)
 8001000:	22fc      	movs	r2, #252	; 0xfc
 8001002:	71da      	strb	r2, [r3, #7]
    //WriteAll();
    }
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200002f0 	.word	0x200002f0

08001014 <ExitMotorMode>:

void ExitMotorMode(){
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
	data[0] = 0xFF;
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <ExitMotorMode+0x40>)
 800101a:	22ff      	movs	r2, #255	; 0xff
 800101c:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <ExitMotorMode+0x40>)
 8001020:	22ff      	movs	r2, #255	; 0xff
 8001022:	705a      	strb	r2, [r3, #1]
	data[2] = 0xFF;
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <ExitMotorMode+0x40>)
 8001026:	22ff      	movs	r2, #255	; 0xff
 8001028:	709a      	strb	r2, [r3, #2]
	data[3] = 0xFF;
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <ExitMotorMode+0x40>)
 800102c:	22ff      	movs	r2, #255	; 0xff
 800102e:	70da      	strb	r2, [r3, #3]
	data[4] = 0xFF;
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <ExitMotorMode+0x40>)
 8001032:	22ff      	movs	r2, #255	; 0xff
 8001034:	711a      	strb	r2, [r3, #4]
	data[5] = 0xFF;
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <ExitMotorMode+0x40>)
 8001038:	22ff      	movs	r2, #255	; 0xff
 800103a:	715a      	strb	r2, [r3, #5]
	data[6] = 0xFF;
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <ExitMotorMode+0x40>)
 800103e:	22ff      	movs	r2, #255	; 0xff
 8001040:	719a      	strb	r2, [r3, #6]
	data[7] = 0xFD;
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <ExitMotorMode+0x40>)
 8001044:	22fd      	movs	r2, #253	; 0xfd
 8001046:	71da      	strb	r2, [r3, #7]
    //WriteAll();
    }
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200002f0 	.word	0x200002f0

08001058 <pack_cmd>:


void pack_cmd(float _p_des, float _v_des, float _kp, float _kd, float _t_ff){
 8001058:	b580      	push	{r7, lr}
 800105a:	b08e      	sub	sp, #56	; 0x38
 800105c:	af00      	add	r7, sp, #0
 800105e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001062:	edc7 0a04 	vstr	s1, [r7, #16]
 8001066:	ed87 1a03 	vstr	s2, [r7, #12]
 800106a:	edc7 1a02 	vstr	s3, [r7, #8]
 800106e:	ed87 2a01 	vstr	s4, [r7, #4]
	/// limit data to be within bounds ///
	float p_des = fminf(fmaxf(P_MIN, _p_des), P_MAX);
 8001072:	edd7 0a05 	vldr	s1, [r7, #20]
 8001076:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800107a:	f000 fff4 	bl	8002066 <fmaxf>
 800107e:	eef0 7a40 	vmov.f32	s15, s0
 8001082:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8001086:	eeb0 0a67 	vmov.f32	s0, s15
 800108a:	f001 f808 	bl	800209e <fminf>
 800108e:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float v_des = fminf(fmaxf(V_MIN, _v_des), V_MAX);
 8001092:	edd7 0a04 	vldr	s1, [r7, #16]
 8001096:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80011f4 <pack_cmd+0x19c>
 800109a:	f000 ffe4 	bl	8002066 <fmaxf>
 800109e:	eef0 7a40 	vmov.f32	s15, s0
 80010a2:	eddf 0a55 	vldr	s1, [pc, #340]	; 80011f8 <pack_cmd+0x1a0>
 80010a6:	eeb0 0a67 	vmov.f32	s0, s15
 80010aa:	f000 fff8 	bl	800209e <fminf>
 80010ae:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float kp = fminf(fmaxf(KP_MIN, _kp), KP_MAX);
 80010b2:	edd7 0a03 	vldr	s1, [r7, #12]
 80010b6:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80011fc <pack_cmd+0x1a4>
 80010ba:	f000 ffd4 	bl	8002066 <fmaxf>
 80010be:	eef0 7a40 	vmov.f32	s15, s0
 80010c2:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8001200 <pack_cmd+0x1a8>
 80010c6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ca:	f000 ffe8 	bl	800209e <fminf>
 80010ce:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float kd = fminf(fmaxf(KD_MIN, _kd), KD_MAX);
 80010d2:	edd7 0a02 	vldr	s1, [r7, #8]
 80010d6:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80011fc <pack_cmd+0x1a4>
 80010da:	f000 ffc4 	bl	8002066 <fmaxf>
 80010de:	eef0 7a40 	vmov.f32	s15, s0
 80010e2:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80010e6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ea:	f000 ffd8 	bl	800209e <fminf>
 80010ee:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	float t_ff = fminf(fmaxf(T_MIN, _t_ff), T_MAX);
 80010f2:	edd7 0a01 	vldr	s1, [r7, #4]
 80010f6:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 80010fa:	f000 ffb4 	bl	8002066 <fmaxf>
 80010fe:	eef0 7a40 	vmov.f32	s15, s0
 8001102:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 8001106:	eeb0 0a67 	vmov.f32	s0, s15
 800110a:	f000 ffc8 	bl	800209e <fminf>
 800110e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	/// convert floats to unsigned ints ///
	uint16_t p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 8001112:	2010      	movs	r0, #16
 8001114:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 8001118:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 800111c:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001120:	f000 ffd9 	bl	80020d6 <float_to_uint>
 8001124:	4603      	mov	r3, r0
 8001126:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 8001128:	200c      	movs	r0, #12
 800112a:	ed9f 1a33 	vldr	s2, [pc, #204]	; 80011f8 <pack_cmd+0x1a0>
 800112e:	eddf 0a31 	vldr	s1, [pc, #196]	; 80011f4 <pack_cmd+0x19c>
 8001132:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001136:	f000 ffce 	bl	80020d6 <float_to_uint>
 800113a:	4603      	mov	r3, r0
 800113c:	843b      	strh	r3, [r7, #32]
	uint16_t kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
 800113e:	200c      	movs	r0, #12
 8001140:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8001200 <pack_cmd+0x1a8>
 8001144:	eddf 0a2d 	vldr	s1, [pc, #180]	; 80011fc <pack_cmd+0x1a4>
 8001148:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800114c:	f000 ffc3 	bl	80020d6 <float_to_uint>
 8001150:	4603      	mov	r3, r0
 8001152:	83fb      	strh	r3, [r7, #30]
	uint16_t kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
 8001154:	200c      	movs	r0, #12
 8001156:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 800115a:	eddf 0a28 	vldr	s1, [pc, #160]	; 80011fc <pack_cmd+0x1a4>
 800115e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001162:	f000 ffb8 	bl	80020d6 <float_to_uint>
 8001166:	4603      	mov	r3, r0
 8001168:	83bb      	strh	r3, [r7, #28]
	uint16_t t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
 800116a:	200c      	movs	r0, #12
 800116c:	eeb3 1a02 	vmov.f32	s2, #50	; 0x41900000  18.0
 8001170:	eefb 0a02 	vmov.f32	s1, #178	; 0xc1900000 -18.0
 8001174:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001178:	f000 ffad 	bl	80020d6 <float_to_uint>
 800117c:	4603      	mov	r3, r0
 800117e:	837b      	strh	r3, [r7, #26]
	/// pack ints into the can buffer ///
	data[0] = p_int>>8;
 8001180:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	b29b      	uxth	r3, r3
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <pack_cmd+0x1ac>)
 800118a:	701a      	strb	r2, [r3, #0]
	data[1] = p_int&0xFF;
 800118c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <pack_cmd+0x1ac>)
 8001192:	705a      	strb	r2, [r3, #1]
	data[2] = v_int>>4;
 8001194:	8c3b      	ldrh	r3, [r7, #32]
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	b29b      	uxth	r3, r3
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <pack_cmd+0x1ac>)
 800119e:	709a      	strb	r2, [r3, #2]
	data[3] = ((v_int&0xF)<<4)|(kp_int>>8);
 80011a0:	8c3b      	ldrh	r3, [r7, #32]
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	b25a      	sxtb	r2, r3
 80011a6:	8bfb      	ldrh	r3, [r7, #30]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <pack_cmd+0x1ac>)
 80011b6:	70da      	strb	r2, [r3, #3]
	data[4] = kp_int&0xFF;
 80011b8:	8bfb      	ldrh	r3, [r7, #30]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <pack_cmd+0x1ac>)
 80011be:	711a      	strb	r2, [r3, #4]
	data[5] = kd_int>>4;
 80011c0:	8bbb      	ldrh	r3, [r7, #28]
 80011c2:	091b      	lsrs	r3, r3, #4
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <pack_cmd+0x1ac>)
 80011ca:	715a      	strb	r2, [r3, #5]
	data[6] = ((kd_int&0xF)<<4)|(t_int>>8);
 80011cc:	8bbb      	ldrh	r3, [r7, #28]
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	b25a      	sxtb	r2, r3
 80011d2:	8b7b      	ldrh	r3, [r7, #26]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <pack_cmd+0x1ac>)
 80011e2:	719a      	strb	r2, [r3, #6]
	data[7] = t_int&0xFF;
 80011e4:	8b7b      	ldrh	r3, [r7, #26]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <pack_cmd+0x1ac>)
 80011ea:	71da      	strb	r2, [r3, #7]
//	printf("Velocity : %lf\r\n",v_des);
//	printf("Kp : %lf\r\n",kp);
//	printf("Kd : %lf\r\n",kd);
//	printf("current : %lf\r\n",t_ff);
//	printf("\r\n");
}
 80011ec:	bf00      	nop
 80011ee:	3738      	adds	r7, #56	; 0x38
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	c2820000 	.word	0xc2820000
 80011f8:	42820000 	.word	0x42820000
 80011fc:	00000000 	.word	0x00000000
 8001200:	43fa0000 	.word	0x43fa0000
 8001204:	200002f0 	.word	0x200002f0

08001208 <BLDC_CANTx>:
void BLDC_CANTx(){
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
	TxHeader.StdId=0x1;
 800120e:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <BLDC_CANTx+0xc8>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 8001214:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <BLDC_CANTx+0xc8>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 800121a:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <BLDC_CANTx+0xc8>)
 800121c:	2208      	movs	r2, #8
 800121e:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8001220:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <BLDC_CANTx+0xc8>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001226:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <BLDC_CANTx+0xc8>)
 8001228:	2200      	movs	r2, #0
 800122a:	751a      	strb	r2, [r3, #20]
//	HAL_CAN_AddTxMessage(&hcan1,&TxHeader,data,&TxMailbox);
//	HAL_Delay(10);

//	int i = 0;
	int count=0;
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan2) ){
 8001230:	4828      	ldr	r0, [pc, #160]	; (80012d4 <BLDC_CANTx+0xcc>)
 8001232:	f001 fe2d 	bl	8002e90 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d039      	beq.n	80012b0 <BLDC_CANTx+0xa8>
		HAL_CAN_AddTxMessage(&hcan2,&TxHeader,data,&TxMailbox);
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <BLDC_CANTx+0xd0>)
 800123e:	4a27      	ldr	r2, [pc, #156]	; (80012dc <BLDC_CANTx+0xd4>)
 8001240:	4923      	ldr	r1, [pc, #140]	; (80012d0 <BLDC_CANTx+0xc8>)
 8001242:	4824      	ldr	r0, [pc, #144]	; (80012d4 <BLDC_CANTx+0xcc>)
 8001244:	f001 fd49 	bl	8002cda <HAL_CAN_AddTxMessage>
		HAL_Delay(10);
 8001248:	200a      	movs	r0, #10
 800124a:	f001 fab9 	bl	80027c0 <HAL_Delay>
//		printf("Can Send\r\n"3);
		while(!nextcan_flag){
 800124e:	e025      	b.n	800129c <BLDC_CANTx+0x94>
			printf("Mailboxes: %d\r\n",HAL_CAN_GetTxMailboxesFreeLevel(&hcan2));
 8001250:	4820      	ldr	r0, [pc, #128]	; (80012d4 <BLDC_CANTx+0xcc>)
 8001252:	f001 fe1d 	bl	8002e90 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001256:	4603      	mov	r3, r0
 8001258:	4619      	mov	r1, r3
 800125a:	4821      	ldr	r0, [pc, #132]	; (80012e0 <BLDC_CANTx+0xd8>)
 800125c:	f004 fff8 	bl	8006250 <iprintf>
			HAL_CAN_AddTxMessage(&hcan2,&TxHeader,data,&TxMailbox);
 8001260:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <BLDC_CANTx+0xd0>)
 8001262:	4a1e      	ldr	r2, [pc, #120]	; (80012dc <BLDC_CANTx+0xd4>)
 8001264:	491a      	ldr	r1, [pc, #104]	; (80012d0 <BLDC_CANTx+0xc8>)
 8001266:	481b      	ldr	r0, [pc, #108]	; (80012d4 <BLDC_CANTx+0xcc>)
 8001268:	f001 fd37 	bl	8002cda <HAL_CAN_AddTxMessage>
			HAL_Delay(1);
 800126c:	2001      	movs	r0, #1
 800126e:	f001 faa7 	bl	80027c0 <HAL_Delay>
			count++;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3301      	adds	r3, #1
 8001276:	607b      	str	r3, [r7, #4]
			if(count==10){
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b0a      	cmp	r3, #10
 800127c:	d10e      	bne.n	800129c <BLDC_CANTx+0x94>
				nextcan_flag=1;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <BLDC_CANTx+0xdc>)
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
				get_can_flag=1;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <BLDC_CANTx+0xe0>)
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
				HAL_CAN_Stop (&hcan2);
 800128a:	4812      	ldr	r0, [pc, #72]	; (80012d4 <BLDC_CANTx+0xcc>)
 800128c:	f001 fcdc 	bl	8002c48 <HAL_CAN_Stop>
				//HAL_CAN_AbortTxRequest(&hcan1,TxMailbox);
				HAL_CAN_Start(&hcan2);
 8001290:	4810      	ldr	r0, [pc, #64]	; (80012d4 <BLDC_CANTx+0xcc>)
 8001292:	f001 fc95 	bl	8002bc0 <HAL_CAN_Start>
				printf("CAN RESET\r\n");
 8001296:	4815      	ldr	r0, [pc, #84]	; (80012ec <BLDC_CANTx+0xe4>)
 8001298:	f005 f860 	bl	800635c <puts>
		while(!nextcan_flag){
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <BLDC_CANTx+0xdc>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0d5      	beq.n	8001250 <BLDC_CANTx+0x48>
			}
		}
		nextcan_flag=0;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <BLDC_CANTx+0xdc>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
		count=0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	e008      	b.n	80012c2 <BLDC_CANTx+0xba>
	}else{
		printf("Mailbox_congestion\r\n");
 80012b0:	480f      	ldr	r0, [pc, #60]	; (80012f0 <BLDC_CANTx+0xe8>)
 80012b2:	f005 f853 	bl	800635c <puts>
		nextcan_flag=0;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <BLDC_CANTx+0xdc>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
		get_can_flag=1;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <BLDC_CANTx+0xe0>)
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(10);
 80012c2:	200a      	movs	r0, #10
 80012c4:	f001 fa7c 	bl	80027c0 <HAL_Delay>
//	for(i=0;i < 8;i++){
//		printf("data[%d] :",i);
//		printf("0x%x\r\n",data[i]);
//	}
//	printf("\r\n");
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200002b4 	.word	0x200002b4
 80012d4:	20000220 	.word	0x20000220
 80012d8:	200002f8 	.word	0x200002f8
 80012dc:	200002f0 	.word	0x200002f0
 80012e0:	080088f0 	.word	0x080088f0
 80012e4:	200002fe 	.word	0x200002fe
 80012e8:	200002fd 	.word	0x200002fd
 80012ec:	08008900 	.word	0x08008900
 80012f0:	0800890c 	.word	0x0800890c

080012f4 <unpack_reply>:

void unpack_reply(){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
    /// unpack ints from can buffer ///
    uint16_t id = data[0];
 80012fa:	4b38      	ldr	r3, [pc, #224]	; (80013dc <unpack_reply+0xe8>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	82fb      	strh	r3, [r7, #22]
    uint16_t p_int = (data[1]<<8)|data[2];
 8001300:	4b36      	ldr	r3, [pc, #216]	; (80013dc <unpack_reply+0xe8>)
 8001302:	785b      	ldrb	r3, [r3, #1]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21a      	sxth	r2, r3
 8001308:	4b34      	ldr	r3, [pc, #208]	; (80013dc <unpack_reply+0xe8>)
 800130a:	789b      	ldrb	r3, [r3, #2]
 800130c:	b21b      	sxth	r3, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	b21b      	sxth	r3, r3
 8001312:	82bb      	strh	r3, [r7, #20]
    uint16_t v_int = (data[3]<<4)|(data[4]>>4);
 8001314:	4b31      	ldr	r3, [pc, #196]	; (80013dc <unpack_reply+0xe8>)
 8001316:	78db      	ldrb	r3, [r3, #3]
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	b21a      	sxth	r2, r3
 800131c:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <unpack_reply+0xe8>)
 800131e:	791b      	ldrb	r3, [r3, #4]
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	b2db      	uxtb	r3, r3
 8001324:	b21b      	sxth	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	b21b      	sxth	r3, r3
 800132a:	827b      	strh	r3, [r7, #18]
    uint16_t i_int = ((data[4]&0xF)<<8)|data[5];
 800132c:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <unpack_reply+0xe8>)
 800132e:	791b      	ldrb	r3, [r3, #4]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	b21b      	sxth	r3, r3
 8001334:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001338:	b21a      	sxth	r2, r3
 800133a:	4b28      	ldr	r3, [pc, #160]	; (80013dc <unpack_reply+0xe8>)
 800133c:	795b      	ldrb	r3, [r3, #5]
 800133e:	b21b      	sxth	r3, r3
 8001340:	4313      	orrs	r3, r2
 8001342:	b21b      	sxth	r3, r3
 8001344:	823b      	strh	r3, [r7, #16]
    /// convert uints to floats ///
    float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001346:	8abb      	ldrh	r3, [r7, #20]
 8001348:	2110      	movs	r1, #16
 800134a:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 800134e:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fef2 	bl	800213c <uint_to_float>
 8001358:	ed87 0a03 	vstr	s0, [r7, #12]
    float v = uint_to_float(v_int, V_MIN, V_MAX, 12);
 800135c:	8a7b      	ldrh	r3, [r7, #18]
 800135e:	210c      	movs	r1, #12
 8001360:	eddf 0a1f 	vldr	s1, [pc, #124]	; 80013e0 <unpack_reply+0xec>
 8001364:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80013e4 <unpack_reply+0xf0>
 8001368:	4618      	mov	r0, r3
 800136a:	f000 fee7 	bl	800213c <uint_to_float>
 800136e:	ed87 0a02 	vstr	s0, [r7, #8]
    float t = uint_to_float(i_int, -T_MAX, T_MAX, 12);
 8001372:	8a3b      	ldrh	r3, [r7, #16]
 8001374:	210c      	movs	r1, #12
 8001376:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 800137a:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fedc 	bl	800213c <uint_to_float>
 8001384:	ed87 0a01 	vstr	s0, [r7, #4]
    p_getdata=p;
 8001388:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <unpack_reply+0xf4>)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6013      	str	r3, [r2, #0]
    //printf(" get data \r\n");
    printf("GetUnpackCanData\r\n");
 800138e:	4817      	ldr	r0, [pc, #92]	; (80013ec <unpack_reply+0xf8>)
 8001390:	f004 ffe4 	bl	800635c <puts>
    printf("ID : %x\r\n",id);
 8001394:	8afb      	ldrh	r3, [r7, #22]
 8001396:	4619      	mov	r1, r3
 8001398:	4815      	ldr	r0, [pc, #84]	; (80013f0 <unpack_reply+0xfc>)
 800139a:	f004 ff59 	bl	8006250 <iprintf>
    printf("Position : %lf\r\n",p);
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f7ff f8f2 	bl	8000588 <__aeabi_f2d>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4812      	ldr	r0, [pc, #72]	; (80013f4 <unpack_reply+0x100>)
 80013aa:	f004 ff51 	bl	8006250 <iprintf>
    printf("Velocity : %lf\r\n",v);
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f7ff f8ea 	bl	8000588 <__aeabi_f2d>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	480f      	ldr	r0, [pc, #60]	; (80013f8 <unpack_reply+0x104>)
 80013ba:	f004 ff49 	bl	8006250 <iprintf>
    printf("Current : %lf\r\n",t);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff f8e2 	bl	8000588 <__aeabi_f2d>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	480c      	ldr	r0, [pc, #48]	; (80013fc <unpack_reply+0x108>)
 80013ca:	f004 ff41 	bl	8006250 <iprintf>
	printf("\r\n");
 80013ce:	480c      	ldr	r0, [pc, #48]	; (8001400 <unpack_reply+0x10c>)
 80013d0:	f004 ffc4 	bl	800635c <puts>

}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200002f0 	.word	0x200002f0
 80013e0:	42820000 	.word	0x42820000
 80013e4:	c2820000 	.word	0xc2820000
 80013e8:	20000300 	.word	0x20000300
 80013ec:	08008920 	.word	0x08008920
 80013f0:	08008934 	.word	0x08008934
 80013f4:	08008940 	.word	0x08008940
 80013f8:	08008954 	.word	0x08008954
 80013fc:	08008968 	.word	0x08008968
 8001400:	08008978 	.word	0x08008978

08001404 <BLDC_CANRx>:


void BLDC_CANRx(){
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
	uint16_t RxBitshift[4];

	RxBitshift[0]=RxData[0];
 800140a:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <BLDC_CANRx+0xac>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	803b      	strh	r3, [r7, #0]
	RxBitshift[1]=RxData[1]<<8;
 8001412:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <BLDC_CANRx+0xac>)
 8001414:	785b      	ldrb	r3, [r3, #1]
 8001416:	b29b      	uxth	r3, r3
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	b29b      	uxth	r3, r3
 800141c:	807b      	strh	r3, [r7, #2]
	RxBitshift[1]+=RxData[2];
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <BLDC_CANRx+0xac>)
 8001422:	789b      	ldrb	r3, [r3, #2]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4413      	add	r3, r2
 8001428:	b29b      	uxth	r3, r3
 800142a:	807b      	strh	r3, [r7, #2]
	RxBitshift[2]=RxData[3]<<4;
 800142c:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <BLDC_CANRx+0xac>)
 800142e:	78db      	ldrb	r3, [r3, #3]
 8001430:	b29b      	uxth	r3, r3
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	b29b      	uxth	r3, r3
 8001436:	80bb      	strh	r3, [r7, #4]
	RxBitshift[2]+=RxData[4]>>4;
 8001438:	88ba      	ldrh	r2, [r7, #4]
 800143a:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <BLDC_CANRx+0xac>)
 800143c:	791b      	ldrb	r3, [r3, #4]
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	b2db      	uxtb	r3, r3
 8001442:	b29b      	uxth	r3, r3
 8001444:	4413      	add	r3, r2
 8001446:	b29b      	uxth	r3, r3
 8001448:	80bb      	strh	r3, [r7, #4]
	RxBitshift[3]=RxData[4]<<8;
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <BLDC_CANRx+0xac>)
 800144c:	791b      	ldrb	r3, [r3, #4]
 800144e:	b29b      	uxth	r3, r3
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	b29b      	uxth	r3, r3
 8001454:	80fb      	strh	r3, [r7, #6]
	RxBitshift[3]+=RxData[5];
 8001456:	88fa      	ldrh	r2, [r7, #6]
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <BLDC_CANRx+0xac>)
 800145a:	795b      	ldrb	r3, [r3, #5]
 800145c:	b29b      	uxth	r3, r3
 800145e:	4413      	add	r3, r2
 8001460:	b29b      	uxth	r3, r3
 8001462:	80fb      	strh	r3, [r7, #6]
//	printf("ID : 0x%x\r\n",RxBitshift[0]);
//	printf("Position : 0x%x\r\n",RxBitshift[1]);
//	printf("Velocity : 0x%x\r\n",RxBitshift[2]);
//	printf("Current : 0x%x\r\n",RxBitshift[3]);
//	printf("\r\n");
	data[0] = RxData[0];
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <BLDC_CANRx+0xac>)
 8001466:	781a      	ldrb	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <BLDC_CANRx+0xb0>)
 800146a:	701a      	strb	r2, [r3, #0]
	data[1] = RxData[1];
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <BLDC_CANRx+0xac>)
 800146e:	785a      	ldrb	r2, [r3, #1]
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <BLDC_CANRx+0xb0>)
 8001472:	705a      	strb	r2, [r3, #1]
	data[2] = RxData[2];
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <BLDC_CANRx+0xac>)
 8001476:	789a      	ldrb	r2, [r3, #2]
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <BLDC_CANRx+0xb0>)
 800147a:	709a      	strb	r2, [r3, #2]
	data[3] = RxData[3];
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <BLDC_CANRx+0xac>)
 800147e:	78da      	ldrb	r2, [r3, #3]
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <BLDC_CANRx+0xb0>)
 8001482:	70da      	strb	r2, [r3, #3]
	data[4] = RxData[4];
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <BLDC_CANRx+0xac>)
 8001486:	791a      	ldrb	r2, [r3, #4]
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <BLDC_CANRx+0xb0>)
 800148a:	711a      	strb	r2, [r3, #4]
	data[5] = RxData[5];
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <BLDC_CANRx+0xac>)
 800148e:	795a      	ldrb	r2, [r3, #5]
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <BLDC_CANRx+0xb0>)
 8001492:	715a      	strb	r2, [r3, #5]
	data[6] = RxData[6];
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <BLDC_CANRx+0xac>)
 8001496:	799a      	ldrb	r2, [r3, #6]
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <BLDC_CANRx+0xb0>)
 800149a:	719a      	strb	r2, [r3, #6]
	data[7] = RxData[7];
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <BLDC_CANRx+0xac>)
 800149e:	79da      	ldrb	r2, [r3, #7]
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <BLDC_CANRx+0xb0>)
 80014a2:	71da      	strb	r2, [r3, #7]
	unpack_reply();
 80014a4:	f7ff ff26 	bl	80012f4 <unpack_reply>

}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200002e8 	.word	0x200002e8
 80014b4:	200002f0 	.word	0x200002f0

080014b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b8:	b5b0      	push	{r4, r5, r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014be:	f001 f90d 	bl	80026dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c2:	f000 fbe5 	bl	8001c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c6:	f000 fce9 	bl	8001e9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014ca:	f000 fcbd 	bl	8001e48 <MX_USART2_UART_Init>
  MX_CAN2_Init();
 80014ce:	f000 fc83 	bl	8001dd8 <MX_CAN2_Init>
  MX_CAN1_Init();
 80014d2:	f000 fc49 	bl	8001d68 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

sFilterConfig.FilterBank = 14;
 80014d6:	4bd8      	ldr	r3, [pc, #864]	; (8001838 <main+0x380>)
 80014d8:	220e      	movs	r2, #14
 80014da:	615a      	str	r2, [r3, #20]
sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80014dc:	4bd6      	ldr	r3, [pc, #856]	; (8001838 <main+0x380>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80014e2:	4bd5      	ldr	r3, [pc, #852]	; (8001838 <main+0x380>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	61da      	str	r2, [r3, #28]
sFilterConfig.FilterIdHigh = 0x0000;
 80014e8:	4bd3      	ldr	r3, [pc, #844]	; (8001838 <main+0x380>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
sFilterConfig.FilterIdLow = 0x0000;
 80014ee:	4bd2      	ldr	r3, [pc, #840]	; (8001838 <main+0x380>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
sFilterConfig.FilterMaskIdHigh = 0x0000;
 80014f4:	4bd0      	ldr	r3, [pc, #832]	; (8001838 <main+0x380>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
sFilterConfig.FilterMaskIdLow = 0x0000;
 80014fa:	4bcf      	ldr	r3, [pc, #828]	; (8001838 <main+0x380>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001500:	4bcd      	ldr	r3, [pc, #820]	; (8001838 <main+0x380>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
//	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
sFilterConfig.FilterActivation=ENABLE;
 8001506:	4bcc      	ldr	r3, [pc, #816]	; (8001838 <main+0x380>)
 8001508:	2201      	movs	r2, #1
 800150a:	621a      	str	r2, [r3, #32]
sFilterConfig.SlaveStartFilterBank=14;
 800150c:	4bca      	ldr	r3, [pc, #808]	; (8001838 <main+0x380>)
 800150e:	220e      	movs	r2, #14
 8001510:	625a      	str	r2, [r3, #36]	; 0x24

if(HAL_CAN_ConfigFilter(&hcan2,&sFilterConfig) != HAL_OK)
 8001512:	49c9      	ldr	r1, [pc, #804]	; (8001838 <main+0x380>)
 8001514:	48c9      	ldr	r0, [pc, #804]	; (800183c <main+0x384>)
 8001516:	f001 fa73 	bl	8002a00 <HAL_CAN_ConfigFilter>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <main+0x6c>
{
	Error_Handler();
 8001520:	f000 fd9c 	bl	800205c <Error_Handler>
}
if(HAL_CAN_Start(&hcan2)!=HAL_OK)
 8001524:	48c5      	ldr	r0, [pc, #788]	; (800183c <main+0x384>)
 8001526:	f001 fb4b 	bl	8002bc0 <HAL_CAN_Start>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <main+0x7c>
{
	Error_Handler();
 8001530:	f000 fd94 	bl	800205c <Error_Handler>
}

if(HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8001534:	2103      	movs	r1, #3
 8001536:	48c1      	ldr	r0, [pc, #772]	; (800183c <main+0x384>)
 8001538:	f001 fdf1 	bl	800311e <HAL_CAN_ActivateNotification>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <main+0x8e>
{
	Error_Handler();
 8001542:	f000 fd8b 	bl	800205c <Error_Handler>
float t_position;
float Kp_change;
float Kp_change_seki;
float Kp_change_exp;
char KeyCommand[1];
KeyCommand[0]=0;
 8001546:	2300      	movs	r3, #0
 8001548:	703b      	strb	r3, [r7, #0]
//int RxBitshift[4];
//int TxBitshift[4];
//int current=0;
//int current_range=0;
printf("BLDC Start\r\n");
 800154a:	48bd      	ldr	r0, [pc, #756]	; (8001840 <main+0x388>)
 800154c:	f004 ff06 	bl	800635c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_uart_flag=0;
 8001550:	4bbc      	ldr	r3, [pc, #752]	; (8001844 <main+0x38c>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, 1);
 8001556:	463b      	mov	r3, r7
 8001558:	2201      	movs	r2, #1
 800155a:	4619      	mov	r1, r3
 800155c:	48ba      	ldr	r0, [pc, #744]	; (8001848 <main+0x390>)
 800155e:	f003 fa42 	bl	80049e6 <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart2, (uint8_t *)KeyCommand, 1,300);
 8001562:	4639      	mov	r1, r7
 8001564:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001568:	2201      	movs	r2, #1
 800156a:	48b7      	ldr	r0, [pc, #732]	; (8001848 <main+0x390>)
 800156c:	f003 f9a9 	bl	80048c2 <HAL_UART_Transmit>
	  //受信するまで待つ
	  while(!get_uart_flag){}
 8001570:	bf00      	nop
 8001572:	4bb4      	ldr	r3, [pc, #720]	; (8001844 <main+0x38c>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0fb      	beq.n	8001572 <main+0xba>
	  get_can_flag=0;
 800157a:	4bb4      	ldr	r3, [pc, #720]	; (800184c <main+0x394>)
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
	  //canデータ受信用のフラグを0に
	  if(KeyCommand[0]!=0 ){
 8001580:	783b      	ldrb	r3, [r7, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0e4      	beq.n	8001550 <main+0x98>
		  switch(KeyCommand[0]){
 8001586:	783b      	ldrb	r3, [r7, #0]
 8001588:	3b1b      	subs	r3, #27
 800158a:	2b5f      	cmp	r3, #95	; 0x5f
 800158c:	f200 8369 	bhi.w	8001c62 <main+0x7aa>
 8001590:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <main+0xe0>)
 8001592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001596:	bf00      	nop
 8001598:	08001b4b 	.word	0x08001b4b
 800159c:	08001c63 	.word	0x08001c63
 80015a0:	08001c63 	.word	0x08001c63
 80015a4:	08001c63 	.word	0x08001c63
 80015a8:	08001c63 	.word	0x08001c63
 80015ac:	08001c63 	.word	0x08001c63
 80015b0:	08001c63 	.word	0x08001c63
 80015b4:	08001c63 	.word	0x08001c63
 80015b8:	08001c63 	.word	0x08001c63
 80015bc:	08001c63 	.word	0x08001c63
 80015c0:	08001c63 	.word	0x08001c63
 80015c4:	08001c63 	.word	0x08001c63
 80015c8:	08001c63 	.word	0x08001c63
 80015cc:	08001c63 	.word	0x08001c63
 80015d0:	08001c63 	.word	0x08001c63
 80015d4:	08001c63 	.word	0x08001c63
 80015d8:	08001c63 	.word	0x08001c63
 80015dc:	08001c63 	.word	0x08001c63
 80015e0:	08001c63 	.word	0x08001c63
 80015e4:	08001c63 	.word	0x08001c63
 80015e8:	08001c63 	.word	0x08001c63
 80015ec:	08001c63 	.word	0x08001c63
 80015f0:	08001719 	.word	0x08001719
 80015f4:	0800174b 	.word	0x0800174b
 80015f8:	08001865 	.word	0x08001865
 80015fc:	0800197b 	.word	0x0800197b
 8001600:	08001c63 	.word	0x08001c63
 8001604:	08001c63 	.word	0x08001c63
 8001608:	08001c63 	.word	0x08001c63
 800160c:	08001c63 	.word	0x08001c63
 8001610:	08001c63 	.word	0x08001c63
 8001614:	08001c63 	.word	0x08001c63
 8001618:	08001c63 	.word	0x08001c63
 800161c:	08001c63 	.word	0x08001c63
 8001620:	08001c63 	.word	0x08001c63
 8001624:	08001c63 	.word	0x08001c63
 8001628:	08001c63 	.word	0x08001c63
 800162c:	08001c63 	.word	0x08001c63
 8001630:	08001c63 	.word	0x08001c63
 8001634:	08001c63 	.word	0x08001c63
 8001638:	08001c63 	.word	0x08001c63
 800163c:	08001c63 	.word	0x08001c63
 8001640:	08001c63 	.word	0x08001c63
 8001644:	08001c63 	.word	0x08001c63
 8001648:	08001c63 	.word	0x08001c63
 800164c:	08001c63 	.word	0x08001c63
 8001650:	08001c63 	.word	0x08001c63
 8001654:	08001c63 	.word	0x08001c63
 8001658:	08001c63 	.word	0x08001c63
 800165c:	08001c63 	.word	0x08001c63
 8001660:	08001c63 	.word	0x08001c63
 8001664:	08001c63 	.word	0x08001c63
 8001668:	08001c63 	.word	0x08001c63
 800166c:	08001c63 	.word	0x08001c63
 8001670:	08001c63 	.word	0x08001c63
 8001674:	08001c63 	.word	0x08001c63
 8001678:	08001c63 	.word	0x08001c63
 800167c:	08001c63 	.word	0x08001c63
 8001680:	08001c63 	.word	0x08001c63
 8001684:	08001c63 	.word	0x08001c63
 8001688:	08001c63 	.word	0x08001c63
 800168c:	08001c63 	.word	0x08001c63
 8001690:	08001c63 	.word	0x08001c63
 8001694:	08001c63 	.word	0x08001c63
 8001698:	08001c63 	.word	0x08001c63
 800169c:	08001c63 	.word	0x08001c63
 80016a0:	08001c63 	.word	0x08001c63
 80016a4:	08001c63 	.word	0x08001c63
 80016a8:	08001c63 	.word	0x08001c63
 80016ac:	08001c63 	.word	0x08001c63
 80016b0:	08001b7d 	.word	0x08001b7d
 80016b4:	08001bab 	.word	0x08001bab
 80016b8:	08001c35 	.word	0x08001c35
 80016bc:	08001c63 	.word	0x08001c63
 80016c0:	08001c63 	.word	0x08001c63
 80016c4:	08001c63 	.word	0x08001c63
 80016c8:	08001c63 	.word	0x08001c63
 80016cc:	08001c63 	.word	0x08001c63
 80016d0:	08001c63 	.word	0x08001c63
 80016d4:	08001c63 	.word	0x08001c63
 80016d8:	08001c63 	.word	0x08001c63
 80016dc:	08001c63 	.word	0x08001c63
 80016e0:	08001b31 	.word	0x08001b31
 80016e4:	08001c63 	.word	0x08001c63
 80016e8:	08001c63 	.word	0x08001c63
 80016ec:	08001ac7 	.word	0x08001ac7
 80016f0:	08001c63 	.word	0x08001c63
 80016f4:	08001c63 	.word	0x08001c63
 80016f8:	08001c63 	.word	0x08001c63
 80016fc:	08001af9 	.word	0x08001af9
 8001700:	08001c63 	.word	0x08001c63
 8001704:	08001c63 	.word	0x08001c63
 8001708:	08001c63 	.word	0x08001c63
 800170c:	08001c63 	.word	0x08001c63
 8001710:	08001c63 	.word	0x08001c63
 8001714:	08001b65 	.word	0x08001b65
		  //void pack_cmd(float _p_des, float _v_des, float _kp, float _kd, float _t_ff)
		  case '1':
			  printf("case : 1\r\n");
 8001718:	484d      	ldr	r0, [pc, #308]	; (8001850 <main+0x398>)
 800171a:	f004 fe1f 	bl	800635c <puts>
			  pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);
 800171e:	ed9f 2a4d 	vldr	s4, [pc, #308]	; 8001854 <main+0x39c>
 8001722:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001726:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 8001854 <main+0x39c>
 800172a:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8001854 <main+0x39c>
 800172e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8001854 <main+0x39c>
 8001732:	f7ff fc91 	bl	8001058 <pack_cmd>
			  BLDC_CANTx();
 8001736:	f7ff fd67 	bl	8001208 <BLDC_CANTx>
			  HAL_Delay(10);
 800173a:	200a      	movs	r0, #10
 800173c:	f001 f840 	bl	80027c0 <HAL_Delay>
			  BLDC_CANRx();
 8001740:	f7ff fe60 	bl	8001404 <BLDC_CANRx>
			  KeyCommand[0]=0;
 8001744:	2300      	movs	r3, #0
 8001746:	703b      	strb	r3, [r7, #0]
			  break;
 8001748:	e294      	b.n	8001c74 <main+0x7bc>
		  case'2':
			  printf("case : 2\r\n");
 800174a:	4843      	ldr	r0, [pc, #268]	; (8001858 <main+0x3a0>)
 800174c:	f004 fe06 	bl	800635c <puts>
			  pack_cmd(0.0, 0.0, 0.0, 2.0, 0.0);	//現在の場所の所得
 8001750:	ed9f 2a40 	vldr	s4, [pc, #256]	; 8001854 <main+0x39c>
 8001754:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001758:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 8001854 <main+0x39c>
 800175c:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8001854 <main+0x39c>
 8001760:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8001854 <main+0x39c>
 8001764:	f7ff fc78 	bl	8001058 <pack_cmd>
			  BLDC_CANTx();
 8001768:	f7ff fd4e 	bl	8001208 <BLDC_CANTx>
			  HAL_Delay(10);
 800176c:	200a      	movs	r0, #10
 800176e:	f001 f827 	bl	80027c0 <HAL_Delay>
			  BLDC_CANRx();
 8001772:	f7ff fe47 	bl	8001404 <BLDC_CANRx>
			  Kp_change=fabsf(t_position-p_getdata);	//目標地点ー現在の地点＝移動距離
 8001776:	4b39      	ldr	r3, [pc, #228]	; (800185c <main+0x3a4>)
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001784:	eef0 7ae7 	vabs.f32	s15, s15
 8001788:	edc7 7a02 	vstr	s15, [r7, #8]
			  for(float i = 0.0;i<=Kp_change;i+=0.05){
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e02a      	b.n	80017ea <main+0x332>
				  pack_cmd(t_position, 0.0, 100*i/Kp_change, 3.0, 0.0);
 8001794:	edd7 7a05 	vldr	s15, [r7, #20]
 8001798:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001860 <main+0x3a8>
 800179c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017a8:	ed9f 2a2a 	vldr	s4, [pc, #168]	; 8001854 <main+0x39c>
 80017ac:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 80017b0:	eeb0 1a66 	vmov.f32	s2, s13
 80017b4:	eddf 0a27 	vldr	s1, [pc, #156]	; 8001854 <main+0x39c>
 80017b8:	ed97 0a07 	vldr	s0, [r7, #28]
 80017bc:	f7ff fc4c 	bl	8001058 <pack_cmd>
				  BLDC_CANTx();
 80017c0:	f7ff fd22 	bl	8001208 <BLDC_CANTx>
				  HAL_Delay(10);
 80017c4:	200a      	movs	r0, #10
 80017c6:	f000 fffb 	bl	80027c0 <HAL_Delay>
			  for(float i = 0.0;i<=Kp_change;i+=0.05){
 80017ca:	6978      	ldr	r0, [r7, #20]
 80017cc:	f7fe fedc 	bl	8000588 <__aeabi_f2d>
 80017d0:	a317      	add	r3, pc, #92	; (adr r3, 8001830 <main+0x378>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	f7fe fd79 	bl	80002cc <__adddf3>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff fa01 	bl	8000be8 <__aeabi_d2f>
 80017e6:	4603      	mov	r3, r0
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80017ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80017f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fa:	d9cb      	bls.n	8001794 <main+0x2dc>
			  }
			  pack_cmd(t_position, 0.0, 100.0 , 3.0, 0.0);
 80017fc:	ed9f 2a15 	vldr	s4, [pc, #84]	; 8001854 <main+0x39c>
 8001800:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001804:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8001860 <main+0x3a8>
 8001808:	eddf 0a12 	vldr	s1, [pc, #72]	; 8001854 <main+0x39c>
 800180c:	ed97 0a07 	vldr	s0, [r7, #28]
 8001810:	f7ff fc22 	bl	8001058 <pack_cmd>
			  BLDC_CANTx();
 8001814:	f7ff fcf8 	bl	8001208 <BLDC_CANTx>
			  HAL_Delay(10);
 8001818:	200a      	movs	r0, #10
 800181a:	f000 ffd1 	bl	80027c0 <HAL_Delay>
			  BLDC_CANRx();
 800181e:	f7ff fdf1 	bl	8001404 <BLDC_CANRx>
			  BLDC_CANRx();
 8001822:	f7ff fdef 	bl	8001404 <BLDC_CANRx>
			  KeyCommand[0]=0;
 8001826:	2300      	movs	r3, #0
 8001828:	703b      	strb	r3, [r7, #0]
			  break;
 800182a:	e223      	b.n	8001c74 <main+0x7bc>
 800182c:	f3af 8000 	nop.w
 8001830:	9999999a 	.word	0x9999999a
 8001834:	3fa99999 	.word	0x3fa99999
 8001838:	2000028c 	.word	0x2000028c
 800183c:	20000220 	.word	0x20000220
 8001840:	0800897c 	.word	0x0800897c
 8001844:	200002fc 	.word	0x200002fc
 8001848:	20000248 	.word	0x20000248
 800184c:	200002fd 	.word	0x200002fd
 8001850:	08008988 	.word	0x08008988
 8001854:	00000000 	.word	0x00000000
 8001858:	08008994 	.word	0x08008994
 800185c:	20000300 	.word	0x20000300
 8001860:	42c80000 	.word	0x42c80000
		  case'3':
			  printf("case : 3\r\n");
 8001864:	48e0      	ldr	r0, [pc, #896]	; (8001be8 <main+0x730>)
 8001866:	f004 fd79 	bl	800635c <puts>
			  pack_cmd(0.0, 0.0, 0.0, 2.0, 0.0);	//現在の場所の所得
 800186a:	ed9f 2ae0 	vldr	s4, [pc, #896]	; 8001bec <main+0x734>
 800186e:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001872:	ed9f 1ade 	vldr	s2, [pc, #888]	; 8001bec <main+0x734>
 8001876:	eddf 0add 	vldr	s1, [pc, #884]	; 8001bec <main+0x734>
 800187a:	ed9f 0adc 	vldr	s0, [pc, #880]	; 8001bec <main+0x734>
 800187e:	f7ff fbeb 	bl	8001058 <pack_cmd>
			  BLDC_CANTx();
 8001882:	f7ff fcc1 	bl	8001208 <BLDC_CANTx>
			  HAL_Delay(10);
 8001886:	200a      	movs	r0, #10
 8001888:	f000 ff9a 	bl	80027c0 <HAL_Delay>
			  BLDC_CANRx();
 800188c:	f7ff fdba 	bl	8001404 <BLDC_CANRx>
			  Kp_change=fabsf(t_position-p_getdata);	//目標地点ー現在の地点＝移動距離
 8001890:	4bd7      	ldr	r3, [pc, #860]	; (8001bf0 <main+0x738>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	ed97 7a07 	vldr	s14, [r7, #28]
 800189a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800189e:	eef0 7ae7 	vabs.f32	s15, s15
 80018a2:	edc7 7a02 	vstr	s15, [r7, #8]
			  Kp_change_seki=(1+Kp_change)*(1+Kp_change);
 80018a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80018aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80018b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80018be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c2:	edc7 7a01 	vstr	s15, [r7, #4]
			  for(float i = 0.0;i<=Kp_change;i+=0.05){
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	e036      	b.n	800193c <main+0x484>
				  pack_cmd(t_position, 0.0, 100*(1+i)*(1+i)/Kp_change_seki, 3.0, 0.0);
 80018ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80018d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018da:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 8001bf4 <main+0x73c>
 80018de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80018e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80018ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80018fa:	ed9f 2abc 	vldr	s4, [pc, #752]	; 8001bec <main+0x734>
 80018fe:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001902:	eeb0 1a66 	vmov.f32	s2, s13
 8001906:	eddf 0ab9 	vldr	s1, [pc, #740]	; 8001bec <main+0x734>
 800190a:	ed97 0a07 	vldr	s0, [r7, #28]
 800190e:	f7ff fba3 	bl	8001058 <pack_cmd>
				  BLDC_CANTx();
 8001912:	f7ff fc79 	bl	8001208 <BLDC_CANTx>
				  HAL_Delay(10);
 8001916:	200a      	movs	r0, #10
 8001918:	f000 ff52 	bl	80027c0 <HAL_Delay>
			  for(float i = 0.0;i<=Kp_change;i+=0.05){
 800191c:	6938      	ldr	r0, [r7, #16]
 800191e:	f7fe fe33 	bl	8000588 <__aeabi_f2d>
 8001922:	a3ad      	add	r3, pc, #692	; (adr r3, 8001bd8 <main+0x720>)
 8001924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001928:	f7fe fcd0 	bl	80002cc <__adddf3>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff f958 	bl	8000be8 <__aeabi_d2f>
 8001938:	4603      	mov	r3, r0
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001940:	edd7 7a02 	vldr	s15, [r7, #8]
 8001944:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194c:	d9bf      	bls.n	80018ce <main+0x416>
			  }
			  pack_cmd(t_position, 0.0, 100.0 , 3.0, 0.0);
 800194e:	ed9f 2aa7 	vldr	s4, [pc, #668]	; 8001bec <main+0x734>
 8001952:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001956:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 8001bf4 <main+0x73c>
 800195a:	eddf 0aa4 	vldr	s1, [pc, #656]	; 8001bec <main+0x734>
 800195e:	ed97 0a07 	vldr	s0, [r7, #28]
 8001962:	f7ff fb79 	bl	8001058 <pack_cmd>
			  BLDC_CANTx();
 8001966:	f7ff fc4f 	bl	8001208 <BLDC_CANTx>
			  HAL_Delay(10);
 800196a:	200a      	movs	r0, #10
 800196c:	f000 ff28 	bl	80027c0 <HAL_Delay>
			  BLDC_CANRx();
 8001970:	f7ff fd48 	bl	8001404 <BLDC_CANRx>
			  KeyCommand[0]=0;
 8001974:	2300      	movs	r3, #0
 8001976:	703b      	strb	r3, [r7, #0]
			  break;
 8001978:	e17c      	b.n	8001c74 <main+0x7bc>
		  case'4':
			  printf("case : 4\r\n");
 800197a:	489f      	ldr	r0, [pc, #636]	; (8001bf8 <main+0x740>)
 800197c:	f004 fcee 	bl	800635c <puts>
			  pack_cmd(0.0, 0.0, 0.0, 2.0, 0.0);	//現在の場所の所得
 8001980:	ed9f 2a9a 	vldr	s4, [pc, #616]	; 8001bec <main+0x734>
 8001984:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001988:	ed9f 1a98 	vldr	s2, [pc, #608]	; 8001bec <main+0x734>
 800198c:	eddf 0a97 	vldr	s1, [pc, #604]	; 8001bec <main+0x734>
 8001990:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8001bec <main+0x734>
 8001994:	f7ff fb60 	bl	8001058 <pack_cmd>
			  BLDC_CANTx();
 8001998:	f7ff fc36 	bl	8001208 <BLDC_CANTx>
			  HAL_Delay(10);
 800199c:	200a      	movs	r0, #10
 800199e:	f000 ff0f 	bl	80027c0 <HAL_Delay>
			  BLDC_CANRx();
 80019a2:	f7ff fd2f 	bl	8001404 <BLDC_CANRx>
			  Kp_change=fabsf(t_position-p_getdata);	//目標地点ー現在の地点＝移動距離
 80019a6:	4b92      	ldr	r3, [pc, #584]	; (8001bf0 <main+0x738>)
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80019b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b4:	eef0 7ae7 	vabs.f32	s15, s15
 80019b8:	edc7 7a02 	vstr	s15, [r7, #8]
			  Kp_change_exp=0.0;
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
			  for(float i = -5.0 ;i<=2.0 ;i+=7.0/(20.0 * Kp_change)){
 80019c2:	4b8e      	ldr	r3, [pc, #568]	; (8001bfc <main+0x744>)
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	e053      	b.n	8001a70 <main+0x5b8>
				  Kp_change_exp=100.0*(exp(i)/exp(2.0));
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f7fe fddd 	bl	8000588 <__aeabi_f2d>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	ec43 2b10 	vmov	d0, r2, r3
 80019d6:	f006 fd77 	bl	80084c8 <exp>
 80019da:	ec51 0b10 	vmov	r0, r1, d0
 80019de:	a380      	add	r3, pc, #512	; (adr r3, 8001be0 <main+0x728>)
 80019e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e4:	f7fe ff52 	bl	800088c <__aeabi_ddiv>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	4b82      	ldr	r3, [pc, #520]	; (8001c00 <main+0x748>)
 80019f6:	f7fe fe1f 	bl	8000638 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f7ff f8f1 	bl	8000be8 <__aeabi_d2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	61bb      	str	r3, [r7, #24]
				  pack_cmd(t_position, 0.0, Kp_change_exp, 3.0, 0.0);
 8001a0a:	ed9f 2a78 	vldr	s4, [pc, #480]	; 8001bec <main+0x734>
 8001a0e:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001a12:	ed97 1a06 	vldr	s2, [r7, #24]
 8001a16:	eddf 0a75 	vldr	s1, [pc, #468]	; 8001bec <main+0x734>
 8001a1a:	ed97 0a07 	vldr	s0, [r7, #28]
 8001a1e:	f7ff fb1b 	bl	8001058 <pack_cmd>
				  BLDC_CANTx();
 8001a22:	f7ff fbf1 	bl	8001208 <BLDC_CANTx>
				  HAL_Delay(10);
 8001a26:	200a      	movs	r0, #10
 8001a28:	f000 feca 	bl	80027c0 <HAL_Delay>
			  for(float i = -5.0 ;i<=2.0 ;i+=7.0/(20.0 * Kp_change)){
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f7fe fdab 	bl	8000588 <__aeabi_f2d>
 8001a32:	4604      	mov	r4, r0
 8001a34:	460d      	mov	r5, r1
 8001a36:	68b8      	ldr	r0, [r7, #8]
 8001a38:	f7fe fda6 	bl	8000588 <__aeabi_f2d>
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	4b70      	ldr	r3, [pc, #448]	; (8001c04 <main+0x74c>)
 8001a42:	f7fe fdf9 	bl	8000638 <__aeabi_dmul>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	f04f 0000 	mov.w	r0, #0
 8001a4e:	496e      	ldr	r1, [pc, #440]	; (8001c08 <main+0x750>)
 8001a50:	f7fe ff1c 	bl	800088c <__aeabi_ddiv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4620      	mov	r0, r4
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	f7fe fc36 	bl	80002cc <__adddf3>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f8be 	bl	8000be8 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a74:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a80:	d9a2      	bls.n	80019c8 <main+0x510>
			  }
			  if(Kp_change_exp!=100.0){
 8001a82:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a86:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001bf4 <main+0x73c>
 8001a8a:	eef4 7a47 	vcmp.f32	s15, s14
 8001a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a92:	d013      	beq.n	8001abc <main+0x604>
				  pack_cmd(t_position, 0.0, 100.0 , 3.0, 0.0);
 8001a94:	ed9f 2a55 	vldr	s4, [pc, #340]	; 8001bec <main+0x734>
 8001a98:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001a9c:	ed9f 1a55 	vldr	s2, [pc, #340]	; 8001bf4 <main+0x73c>
 8001aa0:	eddf 0a52 	vldr	s1, [pc, #328]	; 8001bec <main+0x734>
 8001aa4:	ed97 0a07 	vldr	s0, [r7, #28]
 8001aa8:	f7ff fad6 	bl	8001058 <pack_cmd>
				  BLDC_CANTx();
 8001aac:	f7ff fbac 	bl	8001208 <BLDC_CANTx>
 				  HAL_Delay(10);
 8001ab0:	200a      	movs	r0, #10
 8001ab2:	f000 fe85 	bl	80027c0 <HAL_Delay>
 				  printf("Kp_hosei\r\n");
 8001ab6:	4855      	ldr	r0, [pc, #340]	; (8001c0c <main+0x754>)
 8001ab8:	f004 fc50 	bl	800635c <puts>
			  }
			  BLDC_CANRx();
 8001abc:	f7ff fca2 	bl	8001404 <BLDC_CANRx>
			  KeyCommand[0]=0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	703b      	strb	r3, [r7, #0]
			  break;
 8001ac4:	e0d6      	b.n	8001c74 <main+0x7bc>
		  case'p':
			  printf("case : p\r\n");
 8001ac6:	4852      	ldr	r0, [pc, #328]	; (8001c10 <main+0x758>)
 8001ac8:	f004 fc48 	bl	800635c <puts>
			  pack_cmd(t_position, 0.0, 5.0, 4.0, 0.0);
 8001acc:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8001bec <main+0x734>
 8001ad0:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001ad4:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001ad8:	eddf 0a44 	vldr	s1, [pc, #272]	; 8001bec <main+0x734>
 8001adc:	ed97 0a07 	vldr	s0, [r7, #28]
 8001ae0:	f7ff faba 	bl	8001058 <pack_cmd>
			  BLDC_CANTx();
 8001ae4:	f7ff fb90 	bl	8001208 <BLDC_CANTx>
			  HAL_Delay(10);
 8001ae8:	200a      	movs	r0, #10
 8001aea:	f000 fe69 	bl	80027c0 <HAL_Delay>
			  BLDC_CANRx();
 8001aee:	f7ff fc89 	bl	8001404 <BLDC_CANRx>
			  KeyCommand[0]=0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	703b      	strb	r3, [r7, #0]
			  break;
 8001af6:	e0bd      	b.n	8001c74 <main+0x7bc>
		  case't':
			  printf("case : t\r\n");
 8001af8:	4846      	ldr	r0, [pc, #280]	; (8001c14 <main+0x75c>)
 8001afa:	f004 fc2f 	bl	800635c <puts>
			  pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);
 8001afe:	ed9f 2a3b 	vldr	s4, [pc, #236]	; 8001bec <main+0x734>
 8001b02:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001b06:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8001bec <main+0x734>
 8001b0a:	eddf 0a38 	vldr	s1, [pc, #224]	; 8001bec <main+0x734>
 8001b0e:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8001bec <main+0x734>
 8001b12:	f7ff faa1 	bl	8001058 <pack_cmd>
			  BLDC_CANTx();
 8001b16:	f7ff fb77 	bl	8001208 <BLDC_CANTx>
			  HAL_Delay(10);
 8001b1a:	200a      	movs	r0, #10
 8001b1c:	f000 fe50 	bl	80027c0 <HAL_Delay>
			  BLDC_CANRx();
 8001b20:	f7ff fc70 	bl	8001404 <BLDC_CANRx>
			  t_position=p_getdata;
 8001b24:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <main+0x738>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61fb      	str	r3, [r7, #28]
			  KeyCommand[0]=0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	703b      	strb	r3, [r7, #0]
			  break;
 8001b2e:	e0a1      	b.n	8001c74 <main+0x7bc>
		  case'm':
			  printf("case : m\r\n");
 8001b30:	4839      	ldr	r0, [pc, #228]	; (8001c18 <main+0x760>)
 8001b32:	f004 fc13 	bl	800635c <puts>
			  EnterMotorMode();
 8001b36:	f7ff fa4b 	bl	8000fd0 <EnterMotorMode>
			  BLDC_CANTx();
 8001b3a:	f7ff fb65 	bl	8001208 <BLDC_CANTx>
			  HAL_Delay(10);
 8001b3e:	200a      	movs	r0, #10
 8001b40:	f000 fe3e 	bl	80027c0 <HAL_Delay>
			  KeyCommand[0]=0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	703b      	strb	r3, [r7, #0]

			  break;
 8001b48:	e094      	b.n	8001c74 <main+0x7bc>
		  case 27:
			  printf("case : esc\r\n");
 8001b4a:	4834      	ldr	r0, [pc, #208]	; (8001c1c <main+0x764>)
 8001b4c:	f004 fc06 	bl	800635c <puts>
			  ExitMotorMode();
 8001b50:	f7ff fa60 	bl	8001014 <ExitMotorMode>
			  BLDC_CANTx();
 8001b54:	f7ff fb58 	bl	8001208 <BLDC_CANTx>
			  HAL_Delay(10);
 8001b58:	200a      	movs	r0, #10
 8001b5a:	f000 fe31 	bl	80027c0 <HAL_Delay>
			  KeyCommand[0]=0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	703b      	strb	r3, [r7, #0]

			  break;
 8001b62:	e087      	b.n	8001c74 <main+0x7bc>
		  case'z':
			  printf("case : z\r\n");
 8001b64:	482e      	ldr	r0, [pc, #184]	; (8001c20 <main+0x768>)
 8001b66:	f004 fbf9 	bl	800635c <puts>
			  Zero();
 8001b6a:	f7ff fa0f 	bl	8000f8c <Zero>
			  BLDC_CANTx();
 8001b6e:	f7ff fb4b 	bl	8001208 <BLDC_CANTx>
			  HAL_Delay(10);
 8001b72:	200a      	movs	r0, #10
 8001b74:	f000 fe24 	bl	80027c0 <HAL_Delay>
			  KeyCommand[0]=0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	703b      	strb	r3, [r7, #0]
		  case'a':
			  printf("case : a\r\n");
 8001b7c:	4829      	ldr	r0, [pc, #164]	; (8001c24 <main+0x76c>)
 8001b7e:	f004 fbed 	bl	800635c <puts>
			  pack_cmd(-PI, 0.0, 5.0, 4.0, 0.0);
 8001b82:	ed9f 2a1a 	vldr	s4, [pc, #104]	; 8001bec <main+0x734>
 8001b86:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001b8a:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001b8e:	eddf 0a17 	vldr	s1, [pc, #92]	; 8001bec <main+0x734>
 8001b92:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001c28 <main+0x770>
 8001b96:	f7ff fa5f 	bl	8001058 <pack_cmd>
			  BLDC_CANTx();
 8001b9a:	f7ff fb35 	bl	8001208 <BLDC_CANTx>
			  HAL_Delay(10);
 8001b9e:	200a      	movs	r0, #10
 8001ba0:	f000 fe0e 	bl	80027c0 <HAL_Delay>
			  KeyCommand[0]=0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	703b      	strb	r3, [r7, #0]
			  break;
 8001ba8:	e064      	b.n	8001c74 <main+0x7bc>
		  case'b':
			  printf("case : b\r\n");
 8001baa:	4820      	ldr	r0, [pc, #128]	; (8001c2c <main+0x774>)
 8001bac:	f004 fbd6 	bl	800635c <puts>
			  pack_cmd(PI, 0.0, 5.0, 4.0, 0.0);
 8001bb0:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 8001bec <main+0x734>
 8001bb4:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001bb8:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001bbc:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001bec <main+0x734>
 8001bc0:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8001c30 <main+0x778>
 8001bc4:	f7ff fa48 	bl	8001058 <pack_cmd>
			  BLDC_CANTx();
 8001bc8:	f7ff fb1e 	bl	8001208 <BLDC_CANTx>
			  HAL_Delay(10);
 8001bcc:	200a      	movs	r0, #10
 8001bce:	f000 fdf7 	bl	80027c0 <HAL_Delay>
			  KeyCommand[0]=0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	703b      	strb	r3, [r7, #0]
			  break;
 8001bd6:	e04d      	b.n	8001c74 <main+0x7bc>
 8001bd8:	9999999a 	.word	0x9999999a
 8001bdc:	3fa99999 	.word	0x3fa99999
 8001be0:	b8d4ddae 	.word	0xb8d4ddae
 8001be4:	401d8e64 	.word	0x401d8e64
 8001be8:	080089a0 	.word	0x080089a0
 8001bec:	00000000 	.word	0x00000000
 8001bf0:	20000300 	.word	0x20000300
 8001bf4:	42c80000 	.word	0x42c80000
 8001bf8:	080089ac 	.word	0x080089ac
 8001bfc:	c0a00000 	.word	0xc0a00000
 8001c00:	40590000 	.word	0x40590000
 8001c04:	40340000 	.word	0x40340000
 8001c08:	401c0000 	.word	0x401c0000
 8001c0c:	080089b8 	.word	0x080089b8
 8001c10:	080089c4 	.word	0x080089c4
 8001c14:	080089d0 	.word	0x080089d0
 8001c18:	080089dc 	.word	0x080089dc
 8001c1c:	080089e8 	.word	0x080089e8
 8001c20:	080089f4 	.word	0x080089f4
 8001c24:	08008a00 	.word	0x08008a00
 8001c28:	c0490fdb 	.word	0xc0490fdb
 8001c2c:	08008a0c 	.word	0x08008a0c
 8001c30:	40490fdb 	.word	0x40490fdb
		  case'c':
			  printf("case : c\r\n");
 8001c34:	4812      	ldr	r0, [pc, #72]	; (8001c80 <main+0x7c8>)
 8001c36:	f004 fb91 	bl	800635c <puts>
			  pack_cmd(0.0, 0.0, 5.0, 4.0, 0.0);
 8001c3a:	ed9f 2a12 	vldr	s4, [pc, #72]	; 8001c84 <main+0x7cc>
 8001c3e:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001c42:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001c46:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001c84 <main+0x7cc>
 8001c4a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001c84 <main+0x7cc>
 8001c4e:	f7ff fa03 	bl	8001058 <pack_cmd>
			  BLDC_CANTx();
 8001c52:	f7ff fad9 	bl	8001208 <BLDC_CANTx>
			  HAL_Delay(10);
 8001c56:	200a      	movs	r0, #10
 8001c58:	f000 fdb2 	bl	80027c0 <HAL_Delay>
			  KeyCommand[0]=0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	703b      	strb	r3, [r7, #0]
			  break;
 8001c60:	e008      	b.n	8001c74 <main+0x7bc>

		  default:
			  printf("NoCommand\r\n");
 8001c62:	4809      	ldr	r0, [pc, #36]	; (8001c88 <main+0x7d0>)
 8001c64:	f004 fb7a 	bl	800635c <puts>
			  KeyCommand[0]=0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	703b      	strb	r3, [r7, #0]
			  get_can_flag=1;
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <main+0x7d4>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
			  break;
 8001c72:	bf00      	nop
		  }
		  while(!get_can_flag){}
 8001c74:	bf00      	nop
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <main+0x7d4>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0fb      	beq.n	8001c76 <main+0x7be>
	  get_uart_flag=0;
 8001c7e:	e467      	b.n	8001550 <main+0x98>
 8001c80:	08008a18 	.word	0x08008a18
 8001c84:	00000000 	.word	0x00000000
 8001c88:	08008a24 	.word	0x08008a24
 8001c8c:	200002fd 	.word	0x200002fd

08001c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b094      	sub	sp, #80	; 0x50
 8001c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	2234      	movs	r2, #52	; 0x34
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 fe64 	bl	800596c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca4:	f107 0308 	add.w	r3, r7, #8
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <SystemClock_Config+0xd0>)
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	4a28      	ldr	r2, [pc, #160]	; (8001d60 <SystemClock_Config+0xd0>)
 8001cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc4:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <SystemClock_Config+0xd0>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <SystemClock_Config+0xd4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a22      	ldr	r2, [pc, #136]	; (8001d64 <SystemClock_Config+0xd4>)
 8001cda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <SystemClock_Config+0xd4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cec:	2302      	movs	r3, #2
 8001cee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cf4:	2310      	movs	r3, #16
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d00:	2308      	movs	r3, #8
 8001d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001d04:	23a0      	movs	r3, #160	; 0xa0
 8001d06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d10:	2302      	movs	r3, #2
 8001d12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d14:	f107 031c 	add.w	r3, r7, #28
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f002 fae7 	bl	80042ec <HAL_RCC_OscConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d24:	f000 f99a 	bl	800205c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d28:	230f      	movs	r3, #15
 8001d2a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	2105      	movs	r1, #5
 8001d46:	4618      	mov	r0, r3
 8001d48:	f001 ff86 	bl	8003c58 <HAL_RCC_ClockConfig>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001d52:	f000 f983 	bl	800205c <Error_Handler>
  }
}
 8001d56:	bf00      	nop
 8001d58:	3750      	adds	r7, #80	; 0x50
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40007000 	.word	0x40007000

08001d68 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001d6c:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <MX_CAN1_Init+0x68>)
 8001d6e:	4a19      	ldr	r2, [pc, #100]	; (8001dd4 <MX_CAN1_Init+0x6c>)
 8001d70:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <MX_CAN1_Init+0x68>)
 8001d74:	2204      	movs	r2, #4
 8001d76:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d78:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <MX_CAN1_Init+0x68>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <MX_CAN1_Init+0x68>)
 8001d80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d84:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <MX_CAN1_Init+0x68>)
 8001d88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d8c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <MX_CAN1_Init+0x68>)
 8001d90:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8001d94:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <MX_CAN1_Init+0x68>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <MX_CAN1_Init+0x68>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <MX_CAN1_Init+0x68>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <MX_CAN1_Init+0x68>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <MX_CAN1_Init+0x68>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <MX_CAN1_Init+0x68>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001dba:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_CAN1_Init+0x68>)
 8001dbc:	f000 fd24 	bl	8002808 <HAL_CAN_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001dc6:	f000 f949 	bl	800205c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200001f8 	.word	0x200001f8
 8001dd4:	40006400 	.word	0x40006400

08001dd8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <MX_CAN2_Init+0x68>)
 8001dde:	4a19      	ldr	r2, [pc, #100]	; (8001e44 <MX_CAN2_Init+0x6c>)
 8001de0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <MX_CAN2_Init+0x68>)
 8001de4:	2204      	movs	r2, #4
 8001de6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <MX_CAN2_Init+0x68>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <MX_CAN2_Init+0x68>)
 8001df0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001df4:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <MX_CAN2_Init+0x68>)
 8001df8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dfc:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_7TQ;
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <MX_CAN2_Init+0x68>)
 8001e00:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8001e04:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <MX_CAN2_Init+0x68>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_CAN2_Init+0x68>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <MX_CAN2_Init+0x68>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <MX_CAN2_Init+0x68>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <MX_CAN2_Init+0x68>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <MX_CAN2_Init+0x68>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_CAN2_Init+0x68>)
 8001e2c:	f000 fcec 	bl	8002808 <HAL_CAN_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8001e36:	f000 f911 	bl	800205c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000220 	.word	0x20000220
 8001e44:	40006800 	.word	0x40006800

08001e48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <MX_USART2_UART_Init+0x4c>)
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <MX_USART2_UART_Init+0x50>)
 8001e50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <MX_USART2_UART_Init+0x4c>)
 8001e54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MX_USART2_UART_Init+0x4c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MX_USART2_UART_Init+0x4c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <MX_USART2_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <MX_USART2_UART_Init+0x4c>)
 8001e6e:	220c      	movs	r2, #12
 8001e70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <MX_USART2_UART_Init+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_USART2_UART_Init+0x4c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <MX_USART2_UART_Init+0x4c>)
 8001e80:	f002 fcd2 	bl	8004828 <HAL_UART_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e8a:	f000 f8e7 	bl	800205c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000248 	.word	0x20000248
 8001e98:	40004400 	.word	0x40004400

08001e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
 8001eb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <MX_GPIO_Init+0xf8>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a36      	ldr	r2, [pc, #216]	; (8001f94 <MX_GPIO_Init+0xf8>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b34      	ldr	r3, [pc, #208]	; (8001f94 <MX_GPIO_Init+0xf8>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <MX_GPIO_Init+0xf8>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a2f      	ldr	r2, [pc, #188]	; (8001f94 <MX_GPIO_Init+0xf8>)
 8001ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <MX_GPIO_Init+0xf8>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <MX_GPIO_Init+0xf8>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a28      	ldr	r2, [pc, #160]	; (8001f94 <MX_GPIO_Init+0xf8>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <MX_GPIO_Init+0xf8>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <MX_GPIO_Init+0xf8>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <MX_GPIO_Init+0xf8>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <MX_GPIO_Init+0xf8>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2120      	movs	r1, #32
 8001f26:	481c      	ldr	r0, [pc, #112]	; (8001f98 <MX_GPIO_Init+0xfc>)
 8001f28:	f001 fe7c 	bl	8003c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2110      	movs	r1, #16
 8001f30:	481a      	ldr	r0, [pc, #104]	; (8001f9c <MX_GPIO_Init+0x100>)
 8001f32:	f001 fe77 	bl	8003c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f3c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4814      	ldr	r0, [pc, #80]	; (8001fa0 <MX_GPIO_Init+0x104>)
 8001f4e:	f001 fcd5 	bl	80038fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f52:	2320      	movs	r3, #32
 8001f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f56:	2301      	movs	r3, #1
 8001f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	480b      	ldr	r0, [pc, #44]	; (8001f98 <MX_GPIO_Init+0xfc>)
 8001f6a:	f001 fcc7 	bl	80038fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f6e:	2310      	movs	r3, #16
 8001f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f72:	2301      	movs	r3, #1
 8001f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_GPIO_Init+0x100>)
 8001f86:	f001 fcb9 	bl	80038fc <HAL_GPIO_Init>

}
 8001f8a:	bf00      	nop
 8001f8c:	3728      	adds	r7, #40	; 0x28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	40020400 	.word	0x40020400
 8001fa0:	40020800 	.word	0x40020800

08001fa4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)	//printfに必要
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	230a      	movs	r3, #10
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <_write+0x24>)
 8001fba:	f002 fc82 	bl	80048c2 <HAL_UART_Transmit>
  return len;
 8001fbe:	687b      	ldr	r3, [r7, #4]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000248 	.word	0x20000248

08001fcc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*UartHandle)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart2,UART1_Data,6,1000);
//	printf("UART_START\r\n");
//if(get_can_flag==0){
	get_uart_flag=1;
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <HAL_UART_RxCpltCallback+0x1c>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
//	printf("UART_GET\r\n");
//}

}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	200002fc 	.word	0x200002fc

08001fec <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
	  printf("TxCan\r\n");
 8001ff4:	4804      	ldr	r0, [pc, #16]	; (8002008 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8001ff6:	f004 f9b1 	bl	800635c <puts>
	  nextcan_flag=1;
 8001ffa:	4b04      	ldr	r3, [pc, #16]	; (800200c <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]

}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	08008a30 	.word	0x08008a30
 800200c:	200002fe 	.word	0x200002fe

08002010 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	get_can_flag=1;
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
	printf("RxCan\r\n");
 800201e:	480a      	ldr	r0, [pc, #40]	; (8002048 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002020:	f004 f99c 	bl	800635c <puts>
	HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO0, &RxHeader,RxData);
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8002028:	2100      	movs	r1, #0
 800202a:	480a      	ldr	r0, [pc, #40]	; (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800202c:	f000 ff65 	bl	8002efa <HAL_CAN_GetRxMessage>
	HAL_UART_Transmit(&huart2,RxData,sizeof(RxData),100);//受け取ったデータを送信
 8002030:	2364      	movs	r3, #100	; 0x64
 8002032:	2208      	movs	r2, #8
 8002034:	4905      	ldr	r1, [pc, #20]	; (800204c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002036:	4808      	ldr	r0, [pc, #32]	; (8002058 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8002038:	f002 fc43 	bl	80048c2 <HAL_UART_Transmit>
//  if(flag >0){
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
//  }else{
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
//  }
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200002fd 	.word	0x200002fd
 8002048:	08008a38 	.word	0x08008a38
 800204c:	200002e8 	.word	0x200002e8
 8002050:	200002cc 	.word	0x200002cc
 8002054:	20000220 	.word	0x20000220
 8002058:	20000248 	.word	0x20000248

0800205c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002060:	b672      	cpsid	i
}
 8002062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002064:	e7fe      	b.n	8002064 <Error_Handler+0x8>

08002066 <fmaxf>:
#include "math_ops.h"


float fmaxf(float x, float y){
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	ed87 0a01 	vstr	s0, [r7, #4]
 8002070:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8002074:	ed97 7a01 	vldr	s14, [r7, #4]
 8002078:	edd7 7a00 	vldr	s15, [r7]
 800207c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002084:	dd01      	ble.n	800208a <fmaxf+0x24>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	e000      	b.n	800208c <fmaxf+0x26>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	ee07 3a90 	vmov	s15, r3
    }
 8002090:	eeb0 0a67 	vmov.f32	s0, s15
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <fminf>:

float fminf(float x, float y){
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	ed87 0a01 	vstr	s0, [r7, #4]
 80020a8:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 80020ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80020b0:	edd7 7a00 	vldr	s15, [r7]
 80020b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020bc:	d501      	bpl.n	80020c2 <fminf+0x24>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	e000      	b.n	80020c4 <fminf+0x26>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	ee07 3a90 	vmov	s15, r3
    }
 80020c8:	eeb0 0a67 	vmov.f32	s0, s15
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <float_to_uint>:
        *y = *y * limit/norm;
        }
    }


int float_to_uint(float x, float x_min, float x_max, int bits){
 80020d6:	b480      	push	{r7}
 80020d8:	b087      	sub	sp, #28
 80020da:	af00      	add	r7, sp, #0
 80020dc:	ed87 0a03 	vstr	s0, [r7, #12]
 80020e0:	edc7 0a02 	vstr	s1, [r7, #8]
 80020e4:	ed87 1a01 	vstr	s2, [r7, #4]
 80020e8:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 80020ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80020ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80020f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f6:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 80020fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8002102:	edd7 7a04 	vldr	s15, [r7, #16]
 8002106:	ee37 7a67 	vsub.f32	s14, s14, s15
 800210a:	2201      	movs	r2, #1
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	3b01      	subs	r3, #1
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800211c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002120:	ed97 7a05 	vldr	s14, [r7, #20]
 8002124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800212c:	ee17 3a90 	vmov	r3, s15
    }
 8002130:	4618      	mov	r0, r3
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <uint_to_float>:


float uint_to_float(int x_int, float x_min, float x_max, int bits){
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	ed87 0a02 	vstr	s0, [r7, #8]
 8002148:	edc7 0a01 	vstr	s1, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 800214e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002152:	edd7 7a02 	vldr	s15, [r7, #8]
 8002156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800215a:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	ee07 3a90 	vmov	s15, r3
 8002168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800216c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002170:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002174:	2201      	movs	r2, #1
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	ee07 3a90 	vmov	s15, r3
 8002182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800218a:	edd7 7a04 	vldr	s15, [r7, #16]
 800218e:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8002192:	eeb0 0a67 	vmov.f32	s0, s15
 8002196:	371c      	adds	r7, #28
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_MspInit+0x4c>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	4a0f      	ldr	r2, [pc, #60]	; (80021ec <HAL_MspInit+0x4c>)
 80021b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b4:	6453      	str	r3, [r2, #68]	; 0x44
 80021b6:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <HAL_MspInit+0x4c>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	4b09      	ldr	r3, [pc, #36]	; (80021ec <HAL_MspInit+0x4c>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a08      	ldr	r2, [pc, #32]	; (80021ec <HAL_MspInit+0x4c>)
 80021cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_MspInit+0x4c>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800

080021f0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08c      	sub	sp, #48	; 0x30
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 031c 	add.w	r3, r7, #28
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a64      	ldr	r2, [pc, #400]	; (80023a0 <HAL_CAN_MspInit+0x1b0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d157      	bne.n	80022c2 <HAL_CAN_MspInit+0xd2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002212:	4b64      	ldr	r3, [pc, #400]	; (80023a4 <HAL_CAN_MspInit+0x1b4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	3301      	adds	r3, #1
 8002218:	4a62      	ldr	r2, [pc, #392]	; (80023a4 <HAL_CAN_MspInit+0x1b4>)
 800221a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800221c:	4b61      	ldr	r3, [pc, #388]	; (80023a4 <HAL_CAN_MspInit+0x1b4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d10d      	bne.n	8002240 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002224:	2300      	movs	r3, #0
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	4b5f      	ldr	r3, [pc, #380]	; (80023a8 <HAL_CAN_MspInit+0x1b8>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	4a5e      	ldr	r2, [pc, #376]	; (80023a8 <HAL_CAN_MspInit+0x1b8>)
 800222e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002232:	6413      	str	r3, [r2, #64]	; 0x40
 8002234:	4b5c      	ldr	r3, [pc, #368]	; (80023a8 <HAL_CAN_MspInit+0x1b8>)
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	4b58      	ldr	r3, [pc, #352]	; (80023a8 <HAL_CAN_MspInit+0x1b8>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	4a57      	ldr	r2, [pc, #348]	; (80023a8 <HAL_CAN_MspInit+0x1b8>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6313      	str	r3, [r2, #48]	; 0x30
 8002250:	4b55      	ldr	r3, [pc, #340]	; (80023a8 <HAL_CAN_MspInit+0x1b8>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800225c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226a:	2303      	movs	r3, #3
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800226e:	2309      	movs	r3, #9
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002272:	f107 031c 	add.w	r3, r7, #28
 8002276:	4619      	mov	r1, r3
 8002278:	484c      	ldr	r0, [pc, #304]	; (80023ac <HAL_CAN_MspInit+0x1bc>)
 800227a:	f001 fb3f 	bl	80038fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800227e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002288:	2301      	movs	r3, #1
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228c:	2303      	movs	r3, #3
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002290:	2309      	movs	r3, #9
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002294:	f107 031c 	add.w	r3, r7, #28
 8002298:	4619      	mov	r1, r3
 800229a:	4844      	ldr	r0, [pc, #272]	; (80023ac <HAL_CAN_MspInit+0x1bc>)
 800229c:	f001 fb2e 	bl	80038fc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2100      	movs	r1, #0
 80022a4:	2013      	movs	r0, #19
 80022a6:	f001 fa60 	bl	800376a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80022aa:	2013      	movs	r0, #19
 80022ac:	f001 fa79 	bl	80037a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2100      	movs	r1, #0
 80022b4:	2014      	movs	r0, #20
 80022b6:	f001 fa58 	bl	800376a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80022ba:	2014      	movs	r0, #20
 80022bc:	f001 fa71 	bl	80037a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80022c0:	e069      	b.n	8002396 <HAL_CAN_MspInit+0x1a6>
  else if(hcan->Instance==CAN2)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a3a      	ldr	r2, [pc, #232]	; (80023b0 <HAL_CAN_MspInit+0x1c0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d164      	bne.n	8002396 <HAL_CAN_MspInit+0x1a6>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <HAL_CAN_MspInit+0x1b8>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	4a34      	ldr	r2, [pc, #208]	; (80023a8 <HAL_CAN_MspInit+0x1b8>)
 80022d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022da:	6413      	str	r3, [r2, #64]	; 0x40
 80022dc:	4b32      	ldr	r3, [pc, #200]	; (80023a8 <HAL_CAN_MspInit+0x1b8>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80022e8:	4b2e      	ldr	r3, [pc, #184]	; (80023a4 <HAL_CAN_MspInit+0x1b4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	3301      	adds	r3, #1
 80022ee:	4a2d      	ldr	r2, [pc, #180]	; (80023a4 <HAL_CAN_MspInit+0x1b4>)
 80022f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80022f2:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <HAL_CAN_MspInit+0x1b4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d10d      	bne.n	8002316 <HAL_CAN_MspInit+0x126>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <HAL_CAN_MspInit+0x1b8>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a29      	ldr	r2, [pc, #164]	; (80023a8 <HAL_CAN_MspInit+0x1b8>)
 8002304:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <HAL_CAN_MspInit+0x1b8>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <HAL_CAN_MspInit+0x1b8>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a22      	ldr	r2, [pc, #136]	; (80023a8 <HAL_CAN_MspInit+0x1b8>)
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <HAL_CAN_MspInit+0x1b8>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002340:	2303      	movs	r3, #3
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002344:	2309      	movs	r3, #9
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002348:	f107 031c 	add.w	r3, r7, #28
 800234c:	4619      	mov	r1, r3
 800234e:	4819      	ldr	r0, [pc, #100]	; (80023b4 <HAL_CAN_MspInit+0x1c4>)
 8002350:	f001 fad4 	bl	80038fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800235e:	2301      	movs	r3, #1
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002362:	2303      	movs	r3, #3
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002366:	2309      	movs	r3, #9
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236a:	f107 031c 	add.w	r3, r7, #28
 800236e:	4619      	mov	r1, r3
 8002370:	4810      	ldr	r0, [pc, #64]	; (80023b4 <HAL_CAN_MspInit+0x1c4>)
 8002372:	f001 fac3 	bl	80038fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	203f      	movs	r0, #63	; 0x3f
 800237c:	f001 f9f5 	bl	800376a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8002380:	203f      	movs	r0, #63	; 0x3f
 8002382:	f001 fa0e 	bl	80037a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	2040      	movs	r0, #64	; 0x40
 800238c:	f001 f9ed 	bl	800376a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002390:	2040      	movs	r0, #64	; 0x40
 8002392:	f001 fa06 	bl	80037a2 <HAL_NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3730      	adds	r7, #48	; 0x30
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40006400 	.word	0x40006400
 80023a4:	20000304 	.word	0x20000304
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020000 	.word	0x40020000
 80023b0:	40006800 	.word	0x40006800
 80023b4:	40020400 	.word	0x40020400

080023b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	; 0x28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1d      	ldr	r2, [pc, #116]	; (800244c <HAL_UART_MspInit+0x94>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d133      	bne.n	8002442 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <HAL_UART_MspInit+0x98>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	4a1b      	ldr	r2, [pc, #108]	; (8002450 <HAL_UART_MspInit+0x98>)
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ea:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_UART_MspInit+0x98>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_UART_MspInit+0x98>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a14      	ldr	r2, [pc, #80]	; (8002450 <HAL_UART_MspInit+0x98>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_UART_MspInit+0x98>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002412:	230c      	movs	r3, #12
 8002414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002416:	2302      	movs	r3, #2
 8002418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241e:	2303      	movs	r3, #3
 8002420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002422:	2307      	movs	r3, #7
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4619      	mov	r1, r3
 800242c:	4809      	ldr	r0, [pc, #36]	; (8002454 <HAL_UART_MspInit+0x9c>)
 800242e:	f001 fa65 	bl	80038fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	2100      	movs	r1, #0
 8002436:	2026      	movs	r0, #38	; 0x26
 8002438:	f001 f997 	bl	800376a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800243c:	2026      	movs	r0, #38	; 0x26
 800243e:	f001 f9b0 	bl	80037a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002442:	bf00      	nop
 8002444:	3728      	adds	r7, #40	; 0x28
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40004400 	.word	0x40004400
 8002450:	40023800 	.word	0x40023800
 8002454:	40020000 	.word	0x40020000

08002458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800245c:	e7fe      	b.n	800245c <NMI_Handler+0x4>

0800245e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002462:	e7fe      	b.n	8002462 <HardFault_Handler+0x4>

08002464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002468:	e7fe      	b.n	8002468 <MemManage_Handler+0x4>

0800246a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800246e:	e7fe      	b.n	800246e <BusFault_Handler+0x4>

08002470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002474:	e7fe      	b.n	8002474 <UsageFault_Handler+0x4>

08002476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a4:	f000 f96c 	bl	8002780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}

080024ac <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <CAN1_TX_IRQHandler+0x10>)
 80024b2:	f000 fe5a 	bl	800316a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200001f8 	.word	0x200001f8

080024c0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <CAN1_RX0_IRQHandler+0x10>)
 80024c6:	f000 fe50 	bl	800316a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200001f8 	.word	0x200001f8

080024d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <USART2_IRQHandler+0x10>)
 80024da:	f002 fab5 	bl	8004a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000248 	.word	0x20000248

080024e8 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <CAN2_TX_IRQHandler+0x10>)
 80024ee:	f000 fe3c 	bl	800316a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000220 	.word	0x20000220

080024fc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <CAN2_RX0_IRQHandler+0x10>)
 8002502:	f000 fe32 	bl	800316a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000220 	.word	0x20000220

08002510 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
	return 1;
 8002514:	2301      	movs	r3, #1
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <_kill>:

int _kill(int pid, int sig)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800252a:	f003 f9f5 	bl	8005918 <__errno>
 800252e:	4603      	mov	r3, r0
 8002530:	2216      	movs	r2, #22
 8002532:	601a      	str	r2, [r3, #0]
	return -1;
 8002534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <_exit>:

void _exit (int status)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002548:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ffe7 	bl	8002520 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002552:	e7fe      	b.n	8002552 <_exit+0x12>

08002554 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	e00a      	b.n	800257c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002566:	f3af 8000 	nop.w
 800256a:	4601      	mov	r1, r0
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	60ba      	str	r2, [r7, #8]
 8002572:	b2ca      	uxtb	r2, r1
 8002574:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	3301      	adds	r3, #1
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	dbf0      	blt.n	8002566 <_read+0x12>
	}

return len;
 8002584:	687b      	ldr	r3, [r7, #4]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_close>:
	}
	return len;
}

int _close(int file)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
	return -1;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025b6:	605a      	str	r2, [r3, #4]
	return 0;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <_isatty>:

int _isatty(int file)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
	return 1;
 80025ce:	2301      	movs	r3, #1
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
	return 0;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002600:	4a14      	ldr	r2, [pc, #80]	; (8002654 <_sbrk+0x5c>)
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <_sbrk+0x60>)
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800260c:	4b13      	ldr	r3, [pc, #76]	; (800265c <_sbrk+0x64>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d102      	bne.n	800261a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <_sbrk+0x64>)
 8002616:	4a12      	ldr	r2, [pc, #72]	; (8002660 <_sbrk+0x68>)
 8002618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <_sbrk+0x64>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	429a      	cmp	r2, r3
 8002626:	d207      	bcs.n	8002638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002628:	f003 f976 	bl	8005918 <__errno>
 800262c:	4603      	mov	r3, r0
 800262e:	220c      	movs	r2, #12
 8002630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002636:	e009      	b.n	800264c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <_sbrk+0x64>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <_sbrk+0x64>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	4a05      	ldr	r2, [pc, #20]	; (800265c <_sbrk+0x64>)
 8002648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800264a:	68fb      	ldr	r3, [r7, #12]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20020000 	.word	0x20020000
 8002658:	00000400 	.word	0x00000400
 800265c:	20000308 	.word	0x20000308
 8002660:	20000320 	.word	0x20000320

08002664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <SystemInit+0x20>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	4a05      	ldr	r2, [pc, #20]	; (8002684 <SystemInit+0x20>)
 8002670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800268c:	480d      	ldr	r0, [pc, #52]	; (80026c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800268e:	490e      	ldr	r1, [pc, #56]	; (80026c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002690:	4a0e      	ldr	r2, [pc, #56]	; (80026cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002694:	e002      	b.n	800269c <LoopCopyDataInit>

08002696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800269a:	3304      	adds	r3, #4

0800269c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800269c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800269e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a0:	d3f9      	bcc.n	8002696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026a2:	4a0b      	ldr	r2, [pc, #44]	; (80026d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026a4:	4c0b      	ldr	r4, [pc, #44]	; (80026d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a8:	e001      	b.n	80026ae <LoopFillZerobss>

080026aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026ac:	3204      	adds	r2, #4

080026ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b0:	d3fb      	bcc.n	80026aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026b2:	f7ff ffd7 	bl	8002664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026b6:	f003 f935 	bl	8005924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ba:	f7fe fefd 	bl	80014b8 <main>
  bx  lr    
 80026be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80026cc:	08008e78 	.word	0x08008e78
  ldr r2, =_sbss
 80026d0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80026d4:	20000320 	.word	0x20000320

080026d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026d8:	e7fe      	b.n	80026d8 <ADC_IRQHandler>
	...

080026dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <HAL_Init+0x40>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0d      	ldr	r2, [pc, #52]	; (800271c <HAL_Init+0x40>)
 80026e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_Init+0x40>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0a      	ldr	r2, [pc, #40]	; (800271c <HAL_Init+0x40>)
 80026f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <HAL_Init+0x40>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a07      	ldr	r2, [pc, #28]	; (800271c <HAL_Init+0x40>)
 80026fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002704:	2003      	movs	r0, #3
 8002706:	f001 f825 	bl	8003754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800270a:	2000      	movs	r0, #0
 800270c:	f000 f808 	bl	8002720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002710:	f7ff fd46 	bl	80021a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023c00 	.word	0x40023c00

08002720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_InitTick+0x54>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_InitTick+0x58>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	4619      	mov	r1, r3
 8002732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002736:	fbb3 f3f1 	udiv	r3, r3, r1
 800273a:	fbb2 f3f3 	udiv	r3, r2, r3
 800273e:	4618      	mov	r0, r3
 8002740:	f001 f83d 	bl	80037be <HAL_SYSTICK_Config>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e00e      	b.n	800276c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b0f      	cmp	r3, #15
 8002752:	d80a      	bhi.n	800276a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002754:	2200      	movs	r2, #0
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800275c:	f001 f805 	bl	800376a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002760:	4a06      	ldr	r2, [pc, #24]	; (800277c <HAL_InitTick+0x5c>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	e000      	b.n	800276c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000000 	.word	0x20000000
 8002778:	20000008 	.word	0x20000008
 800277c:	20000004 	.word	0x20000004

08002780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_IncTick+0x20>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_IncTick+0x24>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4413      	add	r3, r2
 8002790:	4a04      	ldr	r2, [pc, #16]	; (80027a4 <HAL_IncTick+0x24>)
 8002792:	6013      	str	r3, [r2, #0]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000008 	.word	0x20000008
 80027a4:	2000030c 	.word	0x2000030c

080027a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return uwTick;
 80027ac:	4b03      	ldr	r3, [pc, #12]	; (80027bc <HAL_GetTick+0x14>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	2000030c 	.word	0x2000030c

080027c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c8:	f7ff ffee 	bl	80027a8 <HAL_GetTick>
 80027cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d8:	d005      	beq.n	80027e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <HAL_Delay+0x44>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4413      	add	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027e6:	bf00      	nop
 80027e8:	f7ff ffde 	bl	80027a8 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d8f7      	bhi.n	80027e8 <HAL_Delay+0x28>
  {
  }
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000008 	.word	0x20000008

08002808 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e0ed      	b.n	80029f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d102      	bne.n	800282c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff fce2 	bl	80021f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800283c:	f7ff ffb4 	bl	80027a8 <HAL_GetTick>
 8002840:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002842:	e012      	b.n	800286a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002844:	f7ff ffb0 	bl	80027a8 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b0a      	cmp	r3, #10
 8002850:	d90b      	bls.n	800286a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2205      	movs	r2, #5
 8002862:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0c5      	b.n	80029f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0e5      	beq.n	8002844 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0202 	bic.w	r2, r2, #2
 8002886:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002888:	f7ff ff8e 	bl	80027a8 <HAL_GetTick>
 800288c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800288e:	e012      	b.n	80028b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002890:	f7ff ff8a 	bl	80027a8 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b0a      	cmp	r3, #10
 800289c:	d90b      	bls.n	80028b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2205      	movs	r2, #5
 80028ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e09f      	b.n	80029f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1e5      	bne.n	8002890 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	7e1b      	ldrb	r3, [r3, #24]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d108      	bne.n	80028de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	e007      	b.n	80028ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7e5b      	ldrb	r3, [r3, #25]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d108      	bne.n	8002908 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	e007      	b.n	8002918 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002916:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	7e9b      	ldrb	r3, [r3, #26]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d108      	bne.n	8002932 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0220 	orr.w	r2, r2, #32
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	e007      	b.n	8002942 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0220 	bic.w	r2, r2, #32
 8002940:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7edb      	ldrb	r3, [r3, #27]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d108      	bne.n	800295c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0210 	bic.w	r2, r2, #16
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e007      	b.n	800296c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0210 	orr.w	r2, r2, #16
 800296a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7f1b      	ldrb	r3, [r3, #28]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d108      	bne.n	8002986 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0208 	orr.w	r2, r2, #8
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	e007      	b.n	8002996 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0208 	bic.w	r2, r2, #8
 8002994:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	7f5b      	ldrb	r3, [r3, #29]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d108      	bne.n	80029b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0204 	orr.w	r2, r2, #4
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	e007      	b.n	80029c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0204 	bic.w	r2, r2, #4
 80029be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	ea42 0103 	orr.w	r1, r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	1e5a      	subs	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a16:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a18:	7cfb      	ldrb	r3, [r7, #19]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d003      	beq.n	8002a26 <HAL_CAN_ConfigFilter+0x26>
 8002a1e:	7cfb      	ldrb	r3, [r7, #19]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	f040 80be 	bne.w	8002ba2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002a26:	4b65      	ldr	r3, [pc, #404]	; (8002bbc <HAL_CAN_ConfigFilter+0x1bc>)
 8002a28:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a30:	f043 0201 	orr.w	r2, r3, #1
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a40:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	431a      	orrs	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f003 031f 	and.w	r3, r3, #31
 8002a66:	2201      	movs	r2, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	43db      	mvns	r3, r3
 8002a78:	401a      	ands	r2, r3
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d123      	bne.n	8002ad0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	401a      	ands	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002aaa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	3248      	adds	r2, #72	; 0x48
 8002ab0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ac4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ac6:	6979      	ldr	r1, [r7, #20]
 8002ac8:	3348      	adds	r3, #72	; 0x48
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d122      	bne.n	8002b1e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002af8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3248      	adds	r2, #72	; 0x48
 8002afe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b12:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b14:	6979      	ldr	r1, [r7, #20]
 8002b16:	3348      	adds	r3, #72	; 0x48
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	401a      	ands	r2, r3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002b38:	e007      	b.n	8002b4a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	401a      	ands	r2, r3
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002b64:	e007      	b.n	8002b76 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d107      	bne.n	8002b8e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b94:	f023 0201 	bic.w	r2, r3, #1
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e006      	b.n	8002bb0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
  }
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	40006400 	.word	0x40006400

08002bc0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d12e      	bne.n	8002c32 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bec:	f7ff fddc 	bl	80027a8 <HAL_GetTick>
 8002bf0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002bf2:	e012      	b.n	8002c1a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bf4:	f7ff fdd8 	bl	80027a8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b0a      	cmp	r3, #10
 8002c00:	d90b      	bls.n	8002c1a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2205      	movs	r2, #5
 8002c12:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e012      	b.n	8002c40 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1e5      	bne.n	8002bf4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e006      	b.n	8002c40 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
  }
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d133      	bne.n	8002cc4 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c6c:	f7ff fd9c 	bl	80027a8 <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c72:	e012      	b.n	8002c9a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c74:	f7ff fd98 	bl	80027a8 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b0a      	cmp	r3, #10
 8002c80:	d90b      	bls.n	8002c9a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2205      	movs	r2, #5
 8002c92:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e01b      	b.n	8002cd2 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0e5      	beq.n	8002c74 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0202 	bic.w	r2, r2, #2
 8002cb6:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e006      	b.n	8002cd2 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
  }
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b089      	sub	sp, #36	; 0x24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cee:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cf8:	7ffb      	ldrb	r3, [r7, #31]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d003      	beq.n	8002d06 <HAL_CAN_AddTxMessage+0x2c>
 8002cfe:	7ffb      	ldrb	r3, [r7, #31]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	f040 80b8 	bne.w	8002e76 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d105      	bne.n	8002d26 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80a0 	beq.w	8002e66 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	0e1b      	lsrs	r3, r3, #24
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d907      	bls.n	8002d46 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e09e      	b.n	8002e84 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002d46:	2201      	movs	r2, #1
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10d      	bne.n	8002d74 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d62:	68f9      	ldr	r1, [r7, #12]
 8002d64:	6809      	ldr	r1, [r1, #0]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	3318      	adds	r3, #24
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	440b      	add	r3, r1
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	e00f      	b.n	8002d94 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d7e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d84:	68f9      	ldr	r1, [r7, #12]
 8002d86:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d88:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	3318      	adds	r3, #24
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	440b      	add	r3, r1
 8002d92:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6819      	ldr	r1, [r3, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	3318      	adds	r3, #24
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	440b      	add	r3, r1
 8002da4:	3304      	adds	r3, #4
 8002da6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	7d1b      	ldrb	r3, [r3, #20]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d111      	bne.n	8002dd4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	3318      	adds	r3, #24
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	4413      	add	r3, r2
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	6811      	ldr	r1, [r2, #0]
 8002dc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3318      	adds	r3, #24
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	440b      	add	r3, r1
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3307      	adds	r3, #7
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	061a      	lsls	r2, r3, #24
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3306      	adds	r3, #6
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	041b      	lsls	r3, r3, #16
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3305      	adds	r3, #5
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	021b      	lsls	r3, r3, #8
 8002dee:	4313      	orrs	r3, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	3204      	adds	r2, #4
 8002df4:	7812      	ldrb	r2, [r2, #0]
 8002df6:	4610      	mov	r0, r2
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	6811      	ldr	r1, [r2, #0]
 8002dfc:	ea43 0200 	orr.w	r2, r3, r0
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	440b      	add	r3, r1
 8002e06:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002e0a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3303      	adds	r3, #3
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	061a      	lsls	r2, r3, #24
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3302      	adds	r3, #2
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	041b      	lsls	r3, r3, #16
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3301      	adds	r3, #1
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	4313      	orrs	r3, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	7812      	ldrb	r2, [r2, #0]
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	6811      	ldr	r1, [r2, #0]
 8002e32:	ea43 0200 	orr.w	r2, r3, r0
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002e40:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	3318      	adds	r3, #24
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	4413      	add	r3, r2
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	6811      	ldr	r1, [r2, #0]
 8002e54:	f043 0201 	orr.w	r2, r3, #1
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	3318      	adds	r3, #24
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	440b      	add	r3, r1
 8002e60:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e00e      	b.n	8002e84 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e006      	b.n	8002e84 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
  }
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3724      	adds	r7, #36	; 0x24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ea2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ea4:	7afb      	ldrb	r3, [r7, #11]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d002      	beq.n	8002eb0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002eaa:	7afb      	ldrb	r3, [r7, #11]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d11d      	bne.n	8002eec <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002eec:	68fb      	ldr	r3, [r7, #12]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002efa:	b480      	push	{r7}
 8002efc:	b087      	sub	sp, #28
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f0e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f10:	7dfb      	ldrb	r3, [r7, #23]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d003      	beq.n	8002f1e <HAL_CAN_GetRxMessage+0x24>
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	f040 80f3 	bne.w	8003104 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10e      	bne.n	8002f42 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d116      	bne.n	8002f60 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0e7      	b.n	8003112 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d107      	bne.n	8002f60 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0d8      	b.n	8003112 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	331b      	adds	r3, #27
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	4413      	add	r3, r2
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0204 	and.w	r2, r3, #4
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10c      	bne.n	8002f98 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	331b      	adds	r3, #27
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	4413      	add	r3, r2
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	0d5b      	lsrs	r3, r3, #21
 8002f8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e00b      	b.n	8002fb0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	331b      	adds	r3, #27
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	4413      	add	r3, r2
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	08db      	lsrs	r3, r3, #3
 8002fa8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	331b      	adds	r3, #27
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	4413      	add	r3, r2
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0202 	and.w	r2, r3, #2
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	331b      	adds	r3, #27
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 020f 	and.w	r2, r3, #15
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	331b      	adds	r3, #27
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	4413      	add	r3, r2
 8002fea:	3304      	adds	r3, #4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	331b      	adds	r3, #27
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	4413      	add	r3, r2
 8003002:	3304      	adds	r3, #4
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	0c1b      	lsrs	r3, r3, #16
 8003008:	b29a      	uxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	4413      	add	r3, r2
 8003018:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	b2da      	uxtb	r2, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	4413      	add	r3, r2
 800302e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	0a1a      	lsrs	r2, r3, #8
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	4413      	add	r3, r2
 8003048:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	0c1a      	lsrs	r2, r3, #16
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	3302      	adds	r3, #2
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	4413      	add	r3, r2
 8003062:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	0e1a      	lsrs	r2, r3, #24
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	3303      	adds	r3, #3
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	4413      	add	r3, r2
 800307c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	3304      	adds	r3, #4
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	4413      	add	r3, r2
 8003094:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	0a1a      	lsrs	r2, r3, #8
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	3305      	adds	r3, #5
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	0c1a      	lsrs	r2, r3, #16
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	3306      	adds	r3, #6
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	0e1a      	lsrs	r2, r3, #24
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	3307      	adds	r3, #7
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d108      	bne.n	80030f0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0220 	orr.w	r2, r2, #32
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	e007      	b.n	8003100 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691a      	ldr	r2, [r3, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0220 	orr.w	r2, r2, #32
 80030fe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	e006      	b.n	8003112 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
  }
}
 8003112:	4618      	mov	r0, r3
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800311e:	b480      	push	{r7}
 8003120:	b085      	sub	sp, #20
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800312e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d002      	beq.n	800313c <HAL_CAN_ActivateNotification+0x1e>
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d109      	bne.n	8003150 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6959      	ldr	r1, [r3, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	e006      	b.n	800315e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
  }
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b08a      	sub	sp, #40	; 0x28
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003172:	2300      	movs	r3, #0
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d07c      	beq.n	80032aa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d023      	beq.n	8003202 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2201      	movs	r2, #1
 80031c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7fe ff0d 	bl	8001fec <HAL_CAN_TxMailbox0CompleteCallback>
 80031d2:	e016      	b.n	8003202 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d004      	beq.n	80031e8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
 80031e6:	e00c      	b.n	8003202 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d004      	beq.n	80031fc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
 80031fa:	e002      	b.n	8003202 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f97f 	bl	8003500 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d024      	beq.n	8003256 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003214:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f959 	bl	80034d8 <HAL_CAN_TxMailbox1CompleteCallback>
 8003226:	e016      	b.n	8003256 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322e:	2b00      	cmp	r3, #0
 8003230:	d004      	beq.n	800323c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
 800323a:	e00c      	b.n	8003256 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003242:	2b00      	cmp	r3, #0
 8003244:	d004      	beq.n	8003250 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
 800324e:	e002      	b.n	8003256 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f95f 	bl	8003514 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d024      	beq.n	80032aa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003268:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f939 	bl	80034ec <HAL_CAN_TxMailbox2CompleteCallback>
 800327a:	e016      	b.n	80032aa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d004      	beq.n	8003290 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
 800328e:	e00c      	b.n	80032aa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d004      	beq.n	80032a4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
 80032a2:	e002      	b.n	80032aa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f93f 	bl	8003528 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00c      	beq.n	80032ce <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2210      	movs	r2, #16
 80032cc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00b      	beq.n	80032f0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d006      	beq.n	80032f0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2208      	movs	r2, #8
 80032e8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f926 	bl	800353c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7fe fe81 	bl	8002010 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00c      	beq.n	8003332 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	2b00      	cmp	r3, #0
 8003320:	d007      	beq.n	8003332 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003328:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2210      	movs	r2, #16
 8003330:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00b      	beq.n	8003354 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d006      	beq.n	8003354 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2208      	movs	r2, #8
 800334c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f908 	bl	8003564 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f8ef 	bl	8003550 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00b      	beq.n	8003394 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2210      	movs	r2, #16
 800338c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f8f2 	bl	8003578 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00b      	beq.n	80033b6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d006      	beq.n	80033b6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2208      	movs	r2, #8
 80033ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f8eb 	bl	800358c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d07b      	beq.n	80034b8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d072      	beq.n	80034b0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	f043 0302 	orr.w	r3, r3, #2
 8003400:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	f043 0304 	orr.w	r3, r3, #4
 800341c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003424:	2b00      	cmp	r3, #0
 8003426:	d043      	beq.n	80034b0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800342e:	2b00      	cmp	r3, #0
 8003430:	d03e      	beq.n	80034b0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003438:	2b60      	cmp	r3, #96	; 0x60
 800343a:	d02b      	beq.n	8003494 <HAL_CAN_IRQHandler+0x32a>
 800343c:	2b60      	cmp	r3, #96	; 0x60
 800343e:	d82e      	bhi.n	800349e <HAL_CAN_IRQHandler+0x334>
 8003440:	2b50      	cmp	r3, #80	; 0x50
 8003442:	d022      	beq.n	800348a <HAL_CAN_IRQHandler+0x320>
 8003444:	2b50      	cmp	r3, #80	; 0x50
 8003446:	d82a      	bhi.n	800349e <HAL_CAN_IRQHandler+0x334>
 8003448:	2b40      	cmp	r3, #64	; 0x40
 800344a:	d019      	beq.n	8003480 <HAL_CAN_IRQHandler+0x316>
 800344c:	2b40      	cmp	r3, #64	; 0x40
 800344e:	d826      	bhi.n	800349e <HAL_CAN_IRQHandler+0x334>
 8003450:	2b30      	cmp	r3, #48	; 0x30
 8003452:	d010      	beq.n	8003476 <HAL_CAN_IRQHandler+0x30c>
 8003454:	2b30      	cmp	r3, #48	; 0x30
 8003456:	d822      	bhi.n	800349e <HAL_CAN_IRQHandler+0x334>
 8003458:	2b10      	cmp	r3, #16
 800345a:	d002      	beq.n	8003462 <HAL_CAN_IRQHandler+0x2f8>
 800345c:	2b20      	cmp	r3, #32
 800345e:	d005      	beq.n	800346c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003460:	e01d      	b.n	800349e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	f043 0308 	orr.w	r3, r3, #8
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800346a:	e019      	b.n	80034a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	f043 0310 	orr.w	r3, r3, #16
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003474:	e014      	b.n	80034a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	f043 0320 	orr.w	r3, r3, #32
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800347e:	e00f      	b.n	80034a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003488:	e00a      	b.n	80034a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003492:	e005      	b.n	80034a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800349c:	e000      	b.n	80034a0 <HAL_CAN_IRQHandler+0x336>
            break;
 800349e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034ae:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2204      	movs	r2, #4
 80034b6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d008      	beq.n	80034d0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f868 	bl	80035a0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80034d0:	bf00      	nop
 80034d2:	3728      	adds	r7, #40	; 0x28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035c4:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <__NVIC_SetPriorityGrouping+0x44>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035d0:	4013      	ands	r3, r2
 80035d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035e6:	4a04      	ldr	r2, [pc, #16]	; (80035f8 <__NVIC_SetPriorityGrouping+0x44>)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	60d3      	str	r3, [r2, #12]
}
 80035ec:	bf00      	nop
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003600:	4b04      	ldr	r3, [pc, #16]	; (8003614 <__NVIC_GetPriorityGrouping+0x18>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	0a1b      	lsrs	r3, r3, #8
 8003606:	f003 0307 	and.w	r3, r3, #7
}
 800360a:	4618      	mov	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003626:	2b00      	cmp	r3, #0
 8003628:	db0b      	blt.n	8003642 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	f003 021f 	and.w	r2, r3, #31
 8003630:	4907      	ldr	r1, [pc, #28]	; (8003650 <__NVIC_EnableIRQ+0x38>)
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	2001      	movs	r0, #1
 800363a:	fa00 f202 	lsl.w	r2, r0, r2
 800363e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	e000e100 	.word	0xe000e100

08003654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	6039      	str	r1, [r7, #0]
 800365e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003664:	2b00      	cmp	r3, #0
 8003666:	db0a      	blt.n	800367e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	490c      	ldr	r1, [pc, #48]	; (80036a0 <__NVIC_SetPriority+0x4c>)
 800366e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003672:	0112      	lsls	r2, r2, #4
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	440b      	add	r3, r1
 8003678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800367c:	e00a      	b.n	8003694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	b2da      	uxtb	r2, r3
 8003682:	4908      	ldr	r1, [pc, #32]	; (80036a4 <__NVIC_SetPriority+0x50>)
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	3b04      	subs	r3, #4
 800368c:	0112      	lsls	r2, r2, #4
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	440b      	add	r3, r1
 8003692:	761a      	strb	r2, [r3, #24]
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	e000e100 	.word	0xe000e100
 80036a4:	e000ed00 	.word	0xe000ed00

080036a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b089      	sub	sp, #36	; 0x24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f1c3 0307 	rsb	r3, r3, #7
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	bf28      	it	cs
 80036c6:	2304      	movcs	r3, #4
 80036c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	3304      	adds	r3, #4
 80036ce:	2b06      	cmp	r3, #6
 80036d0:	d902      	bls.n	80036d8 <NVIC_EncodePriority+0x30>
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	3b03      	subs	r3, #3
 80036d6:	e000      	b.n	80036da <NVIC_EncodePriority+0x32>
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43da      	mvns	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	401a      	ands	r2, r3
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	fa01 f303 	lsl.w	r3, r1, r3
 80036fa:	43d9      	mvns	r1, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003700:	4313      	orrs	r3, r2
         );
}
 8003702:	4618      	mov	r0, r3
 8003704:	3724      	adds	r7, #36	; 0x24
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
	...

08003710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3b01      	subs	r3, #1
 800371c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003720:	d301      	bcc.n	8003726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003722:	2301      	movs	r3, #1
 8003724:	e00f      	b.n	8003746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003726:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <SysTick_Config+0x40>)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3b01      	subs	r3, #1
 800372c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800372e:	210f      	movs	r1, #15
 8003730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003734:	f7ff ff8e 	bl	8003654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <SysTick_Config+0x40>)
 800373a:	2200      	movs	r2, #0
 800373c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800373e:	4b04      	ldr	r3, [pc, #16]	; (8003750 <SysTick_Config+0x40>)
 8003740:	2207      	movs	r2, #7
 8003742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	e000e010 	.word	0xe000e010

08003754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff ff29 	bl	80035b4 <__NVIC_SetPriorityGrouping>
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800376a:	b580      	push	{r7, lr}
 800376c:	b086      	sub	sp, #24
 800376e:	af00      	add	r7, sp, #0
 8003770:	4603      	mov	r3, r0
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800377c:	f7ff ff3e 	bl	80035fc <__NVIC_GetPriorityGrouping>
 8003780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	6978      	ldr	r0, [r7, #20]
 8003788:	f7ff ff8e 	bl	80036a8 <NVIC_EncodePriority>
 800378c:	4602      	mov	r2, r0
 800378e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff ff5d 	bl	8003654 <__NVIC_SetPriority>
}
 800379a:	bf00      	nop
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	4603      	mov	r3, r0
 80037aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ff31 	bl	8003618 <__NVIC_EnableIRQ>
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff ffa2 	bl	8003710 <SysTick_Config>
 80037cc:	4603      	mov	r3, r0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037e4:	f7fe ffe0 	bl	80027a8 <HAL_GetTick>
 80037e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d008      	beq.n	8003808 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2280      	movs	r2, #128	; 0x80
 80037fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e052      	b.n	80038ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0216 	bic.w	r2, r2, #22
 8003816:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003826:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	2b00      	cmp	r3, #0
 800382e:	d103      	bne.n	8003838 <HAL_DMA_Abort+0x62>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003834:	2b00      	cmp	r3, #0
 8003836:	d007      	beq.n	8003848 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0208 	bic.w	r2, r2, #8
 8003846:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0201 	bic.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003858:	e013      	b.n	8003882 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800385a:	f7fe ffa5 	bl	80027a8 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b05      	cmp	r3, #5
 8003866:	d90c      	bls.n	8003882 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2203      	movs	r2, #3
 8003872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e015      	b.n	80038ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1e4      	bne.n	800385a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003894:	223f      	movs	r2, #63	; 0x3f
 8003896:	409a      	lsls	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d004      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2280      	movs	r2, #128	; 0x80
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e00c      	b.n	80038ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2205      	movs	r2, #5
 80038d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b089      	sub	sp, #36	; 0x24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800390e:	2300      	movs	r3, #0
 8003910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	e165      	b.n	8003be4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003918:	2201      	movs	r2, #1
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4013      	ands	r3, r2
 800392a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	429a      	cmp	r2, r3
 8003932:	f040 8154 	bne.w	8003bde <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b01      	cmp	r3, #1
 8003940:	d005      	beq.n	800394e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800394a:	2b02      	cmp	r3, #2
 800394c:	d130      	bne.n	80039b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	2203      	movs	r2, #3
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003984:	2201      	movs	r2, #1
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f003 0201 	and.w	r2, r3, #1
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d017      	beq.n	80039ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4013      	ands	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d123      	bne.n	8003a40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	08da      	lsrs	r2, r3, #3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3208      	adds	r2, #8
 8003a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	220f      	movs	r2, #15
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	08da      	lsrs	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3208      	adds	r2, #8
 8003a3a:	69b9      	ldr	r1, [r7, #24]
 8003a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4013      	ands	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 0203 	and.w	r2, r3, #3
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80ae 	beq.w	8003bde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	4b5d      	ldr	r3, [pc, #372]	; (8003bfc <HAL_GPIO_Init+0x300>)
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	4a5c      	ldr	r2, [pc, #368]	; (8003bfc <HAL_GPIO_Init+0x300>)
 8003a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a90:	6453      	str	r3, [r2, #68]	; 0x44
 8003a92:	4b5a      	ldr	r3, [pc, #360]	; (8003bfc <HAL_GPIO_Init+0x300>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a9e:	4a58      	ldr	r2, [pc, #352]	; (8003c00 <HAL_GPIO_Init+0x304>)
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	089b      	lsrs	r3, r3, #2
 8003aa4:	3302      	adds	r3, #2
 8003aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	220f      	movs	r2, #15
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a4f      	ldr	r2, [pc, #316]	; (8003c04 <HAL_GPIO_Init+0x308>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d025      	beq.n	8003b16 <HAL_GPIO_Init+0x21a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a4e      	ldr	r2, [pc, #312]	; (8003c08 <HAL_GPIO_Init+0x30c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01f      	beq.n	8003b12 <HAL_GPIO_Init+0x216>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a4d      	ldr	r2, [pc, #308]	; (8003c0c <HAL_GPIO_Init+0x310>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d019      	beq.n	8003b0e <HAL_GPIO_Init+0x212>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a4c      	ldr	r2, [pc, #304]	; (8003c10 <HAL_GPIO_Init+0x314>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d013      	beq.n	8003b0a <HAL_GPIO_Init+0x20e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a4b      	ldr	r2, [pc, #300]	; (8003c14 <HAL_GPIO_Init+0x318>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00d      	beq.n	8003b06 <HAL_GPIO_Init+0x20a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a4a      	ldr	r2, [pc, #296]	; (8003c18 <HAL_GPIO_Init+0x31c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d007      	beq.n	8003b02 <HAL_GPIO_Init+0x206>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a49      	ldr	r2, [pc, #292]	; (8003c1c <HAL_GPIO_Init+0x320>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d101      	bne.n	8003afe <HAL_GPIO_Init+0x202>
 8003afa:	2306      	movs	r3, #6
 8003afc:	e00c      	b.n	8003b18 <HAL_GPIO_Init+0x21c>
 8003afe:	2307      	movs	r3, #7
 8003b00:	e00a      	b.n	8003b18 <HAL_GPIO_Init+0x21c>
 8003b02:	2305      	movs	r3, #5
 8003b04:	e008      	b.n	8003b18 <HAL_GPIO_Init+0x21c>
 8003b06:	2304      	movs	r3, #4
 8003b08:	e006      	b.n	8003b18 <HAL_GPIO_Init+0x21c>
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e004      	b.n	8003b18 <HAL_GPIO_Init+0x21c>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e002      	b.n	8003b18 <HAL_GPIO_Init+0x21c>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <HAL_GPIO_Init+0x21c>
 8003b16:	2300      	movs	r3, #0
 8003b18:	69fa      	ldr	r2, [r7, #28]
 8003b1a:	f002 0203 	and.w	r2, r2, #3
 8003b1e:	0092      	lsls	r2, r2, #2
 8003b20:	4093      	lsls	r3, r2
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b28:	4935      	ldr	r1, [pc, #212]	; (8003c00 <HAL_GPIO_Init+0x304>)
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	089b      	lsrs	r3, r3, #2
 8003b2e:	3302      	adds	r3, #2
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b36:	4b3a      	ldr	r3, [pc, #232]	; (8003c20 <HAL_GPIO_Init+0x324>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4013      	ands	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b5a:	4a31      	ldr	r2, [pc, #196]	; (8003c20 <HAL_GPIO_Init+0x324>)
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b60:	4b2f      	ldr	r3, [pc, #188]	; (8003c20 <HAL_GPIO_Init+0x324>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b84:	4a26      	ldr	r2, [pc, #152]	; (8003c20 <HAL_GPIO_Init+0x324>)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b8a:	4b25      	ldr	r3, [pc, #148]	; (8003c20 <HAL_GPIO_Init+0x324>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	43db      	mvns	r3, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bae:	4a1c      	ldr	r2, [pc, #112]	; (8003c20 <HAL_GPIO_Init+0x324>)
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bb4:	4b1a      	ldr	r3, [pc, #104]	; (8003c20 <HAL_GPIO_Init+0x324>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bd8:	4a11      	ldr	r2, [pc, #68]	; (8003c20 <HAL_GPIO_Init+0x324>)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	3301      	adds	r3, #1
 8003be2:	61fb      	str	r3, [r7, #28]
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b0f      	cmp	r3, #15
 8003be8:	f67f ae96 	bls.w	8003918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bec:	bf00      	nop
 8003bee:	bf00      	nop
 8003bf0:	3724      	adds	r7, #36	; 0x24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40013800 	.word	0x40013800
 8003c04:	40020000 	.word	0x40020000
 8003c08:	40020400 	.word	0x40020400
 8003c0c:	40020800 	.word	0x40020800
 8003c10:	40020c00 	.word	0x40020c00
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40021400 	.word	0x40021400
 8003c1c:	40021800 	.word	0x40021800
 8003c20:	40013c00 	.word	0x40013c00

08003c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	807b      	strh	r3, [r7, #2]
 8003c30:	4613      	mov	r3, r2
 8003c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c34:	787b      	ldrb	r3, [r7, #1]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c3a:	887a      	ldrh	r2, [r7, #2]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c40:	e003      	b.n	8003c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c42:	887b      	ldrh	r3, [r7, #2]
 8003c44:	041a      	lsls	r2, r3, #16
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	619a      	str	r2, [r3, #24]
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0cc      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b68      	ldr	r3, [pc, #416]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d90c      	bls.n	8003c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b65      	ldr	r3, [pc, #404]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b63      	ldr	r3, [pc, #396]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0b8      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d020      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cac:	4b59      	ldr	r3, [pc, #356]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	4a58      	ldr	r2, [pc, #352]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc4:	4b53      	ldr	r3, [pc, #332]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4a52      	ldr	r2, [pc, #328]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd0:	4b50      	ldr	r3, [pc, #320]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	494d      	ldr	r1, [pc, #308]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d044      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d119      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e07f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d003      	beq.n	8003d16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d16:	4b3f      	ldr	r3, [pc, #252]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e06f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d26:	4b3b      	ldr	r3, [pc, #236]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e067      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d36:	4b37      	ldr	r3, [pc, #220]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f023 0203 	bic.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4934      	ldr	r1, [pc, #208]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d48:	f7fe fd2e 	bl	80027a8 <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d50:	f7fe fd2a 	bl	80027a8 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e04f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	4b2b      	ldr	r3, [pc, #172]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 020c 	and.w	r2, r3, #12
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d1eb      	bne.n	8003d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d78:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d20c      	bcs.n	8003da0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	4b20      	ldr	r3, [pc, #128]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e032      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dac:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4916      	ldr	r1, [pc, #88]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	490e      	ldr	r1, [pc, #56]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dde:	f000 f855 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8003de2:	4602      	mov	r2, r0
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	091b      	lsrs	r3, r3, #4
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	490a      	ldr	r1, [pc, #40]	; (8003e18 <HAL_RCC_ClockConfig+0x1c0>)
 8003df0:	5ccb      	ldrb	r3, [r1, r3]
 8003df2:	fa22 f303 	lsr.w	r3, r2, r3
 8003df6:	4a09      	ldr	r2, [pc, #36]	; (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe fc8e 	bl	8002720 <HAL_InitTick>

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023c00 	.word	0x40023c00
 8003e14:	40023800 	.word	0x40023800
 8003e18:	08008a40 	.word	0x08008a40
 8003e1c:	20000000 	.word	0x20000000
 8003e20:	20000004 	.word	0x20000004

08003e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000000 	.word	0x20000000

08003e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e40:	f7ff fff0 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	0a9b      	lsrs	r3, r3, #10
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	4903      	ldr	r1, [pc, #12]	; (8003e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e52:	5ccb      	ldrb	r3, [r1, r3]
 8003e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	08008a50 	.word	0x08008a50

08003e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e68:	f7ff ffdc 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	0b5b      	lsrs	r3, r3, #13
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	4903      	ldr	r1, [pc, #12]	; (8003e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e7a:	5ccb      	ldrb	r3, [r1, r3]
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40023800 	.word	0x40023800
 8003e88:	08008a50 	.word	0x08008a50

08003e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e90:	b0ae      	sub	sp, #184	; 0xb8
 8003e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eb2:	4bcb      	ldr	r3, [pc, #812]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b0c      	cmp	r3, #12
 8003ebc:	f200 8206 	bhi.w	80042cc <HAL_RCC_GetSysClockFreq+0x440>
 8003ec0:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003efd 	.word	0x08003efd
 8003ecc:	080042cd 	.word	0x080042cd
 8003ed0:	080042cd 	.word	0x080042cd
 8003ed4:	080042cd 	.word	0x080042cd
 8003ed8:	08003f05 	.word	0x08003f05
 8003edc:	080042cd 	.word	0x080042cd
 8003ee0:	080042cd 	.word	0x080042cd
 8003ee4:	080042cd 	.word	0x080042cd
 8003ee8:	08003f0d 	.word	0x08003f0d
 8003eec:	080042cd 	.word	0x080042cd
 8003ef0:	080042cd 	.word	0x080042cd
 8003ef4:	080042cd 	.word	0x080042cd
 8003ef8:	080040fd 	.word	0x080040fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003efc:	4bb9      	ldr	r3, [pc, #740]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003efe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003f02:	e1e7      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f04:	4bb8      	ldr	r3, [pc, #736]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f0a:	e1e3      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f0c:	4bb4      	ldr	r3, [pc, #720]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f18:	4bb1      	ldr	r3, [pc, #708]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d071      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f24:	4bae      	ldr	r3, [pc, #696]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	099b      	lsrs	r3, r3, #6
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f30:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f40:	2300      	movs	r3, #0
 8003f42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f4a:	4622      	mov	r2, r4
 8003f4c:	462b      	mov	r3, r5
 8003f4e:	f04f 0000 	mov.w	r0, #0
 8003f52:	f04f 0100 	mov.w	r1, #0
 8003f56:	0159      	lsls	r1, r3, #5
 8003f58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f5c:	0150      	lsls	r0, r2, #5
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4621      	mov	r1, r4
 8003f64:	1a51      	subs	r1, r2, r1
 8003f66:	6439      	str	r1, [r7, #64]	; 0x40
 8003f68:	4629      	mov	r1, r5
 8003f6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003f7c:	4649      	mov	r1, r9
 8003f7e:	018b      	lsls	r3, r1, #6
 8003f80:	4641      	mov	r1, r8
 8003f82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f86:	4641      	mov	r1, r8
 8003f88:	018a      	lsls	r2, r1, #6
 8003f8a:	4641      	mov	r1, r8
 8003f8c:	1a51      	subs	r1, r2, r1
 8003f8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f90:	4649      	mov	r1, r9
 8003f92:	eb63 0301 	sbc.w	r3, r3, r1
 8003f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003fa4:	4649      	mov	r1, r9
 8003fa6:	00cb      	lsls	r3, r1, #3
 8003fa8:	4641      	mov	r1, r8
 8003faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fae:	4641      	mov	r1, r8
 8003fb0:	00ca      	lsls	r2, r1, #3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4622      	mov	r2, r4
 8003fba:	189b      	adds	r3, r3, r2
 8003fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003fbe:	462b      	mov	r3, r5
 8003fc0:	460a      	mov	r2, r1
 8003fc2:	eb42 0303 	adc.w	r3, r2, r3
 8003fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	024b      	lsls	r3, r1, #9
 8003fd8:	4621      	mov	r1, r4
 8003fda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fde:	4621      	mov	r1, r4
 8003fe0:	024a      	lsls	r2, r1, #9
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ff0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ff4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003ff8:	f7fc fe46 	bl	8000c88 <__aeabi_uldivmod>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4613      	mov	r3, r2
 8004002:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004006:	e067      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004008:	4b75      	ldr	r3, [pc, #468]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	099b      	lsrs	r3, r3, #6
 800400e:	2200      	movs	r2, #0
 8004010:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004014:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004018:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800401c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004020:	67bb      	str	r3, [r7, #120]	; 0x78
 8004022:	2300      	movs	r3, #0
 8004024:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004026:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800402a:	4622      	mov	r2, r4
 800402c:	462b      	mov	r3, r5
 800402e:	f04f 0000 	mov.w	r0, #0
 8004032:	f04f 0100 	mov.w	r1, #0
 8004036:	0159      	lsls	r1, r3, #5
 8004038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800403c:	0150      	lsls	r0, r2, #5
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4621      	mov	r1, r4
 8004044:	1a51      	subs	r1, r2, r1
 8004046:	62b9      	str	r1, [r7, #40]	; 0x28
 8004048:	4629      	mov	r1, r5
 800404a:	eb63 0301 	sbc.w	r3, r3, r1
 800404e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800405c:	4649      	mov	r1, r9
 800405e:	018b      	lsls	r3, r1, #6
 8004060:	4641      	mov	r1, r8
 8004062:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004066:	4641      	mov	r1, r8
 8004068:	018a      	lsls	r2, r1, #6
 800406a:	4641      	mov	r1, r8
 800406c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004070:	4649      	mov	r1, r9
 8004072:	eb63 0b01 	sbc.w	fp, r3, r1
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004082:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004086:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800408a:	4692      	mov	sl, r2
 800408c:	469b      	mov	fp, r3
 800408e:	4623      	mov	r3, r4
 8004090:	eb1a 0303 	adds.w	r3, sl, r3
 8004094:	623b      	str	r3, [r7, #32]
 8004096:	462b      	mov	r3, r5
 8004098:	eb4b 0303 	adc.w	r3, fp, r3
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80040aa:	4629      	mov	r1, r5
 80040ac:	028b      	lsls	r3, r1, #10
 80040ae:	4621      	mov	r1, r4
 80040b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040b4:	4621      	mov	r1, r4
 80040b6:	028a      	lsls	r2, r1, #10
 80040b8:	4610      	mov	r0, r2
 80040ba:	4619      	mov	r1, r3
 80040bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040c0:	2200      	movs	r2, #0
 80040c2:	673b      	str	r3, [r7, #112]	; 0x70
 80040c4:	677a      	str	r2, [r7, #116]	; 0x74
 80040c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80040ca:	f7fc fddd 	bl	8000c88 <__aeabi_uldivmod>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4613      	mov	r3, r2
 80040d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040d8:	4b41      	ldr	r3, [pc, #260]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	0c1b      	lsrs	r3, r3, #16
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	3301      	adds	r3, #1
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80040ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80040f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80040fa:	e0eb      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040fc:	4b38      	ldr	r3, [pc, #224]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004104:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004108:	4b35      	ldr	r3, [pc, #212]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d06b      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004114:	4b32      	ldr	r3, [pc, #200]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	099b      	lsrs	r3, r3, #6
 800411a:	2200      	movs	r2, #0
 800411c:	66bb      	str	r3, [r7, #104]	; 0x68
 800411e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004120:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004126:	663b      	str	r3, [r7, #96]	; 0x60
 8004128:	2300      	movs	r3, #0
 800412a:	667b      	str	r3, [r7, #100]	; 0x64
 800412c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004130:	4622      	mov	r2, r4
 8004132:	462b      	mov	r3, r5
 8004134:	f04f 0000 	mov.w	r0, #0
 8004138:	f04f 0100 	mov.w	r1, #0
 800413c:	0159      	lsls	r1, r3, #5
 800413e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004142:	0150      	lsls	r0, r2, #5
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4621      	mov	r1, r4
 800414a:	1a51      	subs	r1, r2, r1
 800414c:	61b9      	str	r1, [r7, #24]
 800414e:	4629      	mov	r1, r5
 8004150:	eb63 0301 	sbc.w	r3, r3, r1
 8004154:	61fb      	str	r3, [r7, #28]
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004162:	4659      	mov	r1, fp
 8004164:	018b      	lsls	r3, r1, #6
 8004166:	4651      	mov	r1, sl
 8004168:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800416c:	4651      	mov	r1, sl
 800416e:	018a      	lsls	r2, r1, #6
 8004170:	4651      	mov	r1, sl
 8004172:	ebb2 0801 	subs.w	r8, r2, r1
 8004176:	4659      	mov	r1, fp
 8004178:	eb63 0901 	sbc.w	r9, r3, r1
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004188:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800418c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004190:	4690      	mov	r8, r2
 8004192:	4699      	mov	r9, r3
 8004194:	4623      	mov	r3, r4
 8004196:	eb18 0303 	adds.w	r3, r8, r3
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	462b      	mov	r3, r5
 800419e:	eb49 0303 	adc.w	r3, r9, r3
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80041b0:	4629      	mov	r1, r5
 80041b2:	024b      	lsls	r3, r1, #9
 80041b4:	4621      	mov	r1, r4
 80041b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041ba:	4621      	mov	r1, r4
 80041bc:	024a      	lsls	r2, r1, #9
 80041be:	4610      	mov	r0, r2
 80041c0:	4619      	mov	r1, r3
 80041c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041c6:	2200      	movs	r2, #0
 80041c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80041ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80041cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041d0:	f7fc fd5a 	bl	8000c88 <__aeabi_uldivmod>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4613      	mov	r3, r2
 80041da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041de:	e065      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x420>
 80041e0:	40023800 	.word	0x40023800
 80041e4:	00f42400 	.word	0x00f42400
 80041e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ec:	4b3d      	ldr	r3, [pc, #244]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	099b      	lsrs	r3, r3, #6
 80041f2:	2200      	movs	r2, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	4611      	mov	r1, r2
 80041f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041fc:	653b      	str	r3, [r7, #80]	; 0x50
 80041fe:	2300      	movs	r3, #0
 8004200:	657b      	str	r3, [r7, #84]	; 0x54
 8004202:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004206:	4642      	mov	r2, r8
 8004208:	464b      	mov	r3, r9
 800420a:	f04f 0000 	mov.w	r0, #0
 800420e:	f04f 0100 	mov.w	r1, #0
 8004212:	0159      	lsls	r1, r3, #5
 8004214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004218:	0150      	lsls	r0, r2, #5
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4641      	mov	r1, r8
 8004220:	1a51      	subs	r1, r2, r1
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	4649      	mov	r1, r9
 8004226:	eb63 0301 	sbc.w	r3, r3, r1
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004238:	4659      	mov	r1, fp
 800423a:	018b      	lsls	r3, r1, #6
 800423c:	4651      	mov	r1, sl
 800423e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004242:	4651      	mov	r1, sl
 8004244:	018a      	lsls	r2, r1, #6
 8004246:	4651      	mov	r1, sl
 8004248:	1a54      	subs	r4, r2, r1
 800424a:	4659      	mov	r1, fp
 800424c:	eb63 0501 	sbc.w	r5, r3, r1
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	00eb      	lsls	r3, r5, #3
 800425a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800425e:	00e2      	lsls	r2, r4, #3
 8004260:	4614      	mov	r4, r2
 8004262:	461d      	mov	r5, r3
 8004264:	4643      	mov	r3, r8
 8004266:	18e3      	adds	r3, r4, r3
 8004268:	603b      	str	r3, [r7, #0]
 800426a:	464b      	mov	r3, r9
 800426c:	eb45 0303 	adc.w	r3, r5, r3
 8004270:	607b      	str	r3, [r7, #4]
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800427e:	4629      	mov	r1, r5
 8004280:	028b      	lsls	r3, r1, #10
 8004282:	4621      	mov	r1, r4
 8004284:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004288:	4621      	mov	r1, r4
 800428a:	028a      	lsls	r2, r1, #10
 800428c:	4610      	mov	r0, r2
 800428e:	4619      	mov	r1, r3
 8004290:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004294:	2200      	movs	r2, #0
 8004296:	64bb      	str	r3, [r7, #72]	; 0x48
 8004298:	64fa      	str	r2, [r7, #76]	; 0x4c
 800429a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800429e:	f7fc fcf3 	bl	8000c88 <__aeabi_uldivmod>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4613      	mov	r3, r2
 80042a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80042ac:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	0f1b      	lsrs	r3, r3, #28
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80042ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042ca:	e003      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042cc:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80042ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	37b8      	adds	r7, #184	; 0xb8
 80042dc:	46bd      	mov	sp, r7
 80042de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e2:	bf00      	nop
 80042e4:	40023800 	.word	0x40023800
 80042e8:	00f42400 	.word	0x00f42400

080042ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e28d      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 8083 	beq.w	8004412 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800430c:	4b94      	ldr	r3, [pc, #592]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 030c 	and.w	r3, r3, #12
 8004314:	2b04      	cmp	r3, #4
 8004316:	d019      	beq.n	800434c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004318:	4b91      	ldr	r3, [pc, #580]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004320:	2b08      	cmp	r3, #8
 8004322:	d106      	bne.n	8004332 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004324:	4b8e      	ldr	r3, [pc, #568]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800432c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004330:	d00c      	beq.n	800434c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004332:	4b8b      	ldr	r3, [pc, #556]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800433a:	2b0c      	cmp	r3, #12
 800433c:	d112      	bne.n	8004364 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800433e:	4b88      	ldr	r3, [pc, #544]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800434a:	d10b      	bne.n	8004364 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434c:	4b84      	ldr	r3, [pc, #528]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d05b      	beq.n	8004410 <HAL_RCC_OscConfig+0x124>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d157      	bne.n	8004410 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e25a      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436c:	d106      	bne.n	800437c <HAL_RCC_OscConfig+0x90>
 800436e:	4b7c      	ldr	r3, [pc, #496]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a7b      	ldr	r2, [pc, #492]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e01d      	b.n	80043b8 <HAL_RCC_OscConfig+0xcc>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004384:	d10c      	bne.n	80043a0 <HAL_RCC_OscConfig+0xb4>
 8004386:	4b76      	ldr	r3, [pc, #472]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a75      	ldr	r2, [pc, #468]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 800438c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	4b73      	ldr	r3, [pc, #460]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a72      	ldr	r2, [pc, #456]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e00b      	b.n	80043b8 <HAL_RCC_OscConfig+0xcc>
 80043a0:	4b6f      	ldr	r3, [pc, #444]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a6e      	ldr	r2, [pc, #440]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80043a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	4b6c      	ldr	r3, [pc, #432]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a6b      	ldr	r2, [pc, #428]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80043b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d013      	beq.n	80043e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fe f9f2 	bl	80027a8 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fe f9ee 	bl	80027a8 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e21f      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	4b61      	ldr	r3, [pc, #388]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0xdc>
 80043e6:	e014      	b.n	8004412 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fe f9de 	bl	80027a8 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f0:	f7fe f9da 	bl	80027a8 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	; 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e20b      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004402:	4b57      	ldr	r3, [pc, #348]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x104>
 800440e:	e000      	b.n	8004412 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d06f      	beq.n	80044fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800441e:	4b50      	ldr	r3, [pc, #320]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b00      	cmp	r3, #0
 8004428:	d017      	beq.n	800445a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800442a:	4b4d      	ldr	r3, [pc, #308]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004432:	2b08      	cmp	r3, #8
 8004434:	d105      	bne.n	8004442 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004436:	4b4a      	ldr	r3, [pc, #296]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004442:	4b47      	ldr	r3, [pc, #284]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800444a:	2b0c      	cmp	r3, #12
 800444c:	d11c      	bne.n	8004488 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800444e:	4b44      	ldr	r3, [pc, #272]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d116      	bne.n	8004488 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445a:	4b41      	ldr	r3, [pc, #260]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_RCC_OscConfig+0x186>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d001      	beq.n	8004472 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e1d3      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004472:	4b3b      	ldr	r3, [pc, #236]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4937      	ldr	r1, [pc, #220]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004482:	4313      	orrs	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004486:	e03a      	b.n	80044fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d020      	beq.n	80044d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004490:	4b34      	ldr	r3, [pc, #208]	; (8004564 <HAL_RCC_OscConfig+0x278>)
 8004492:	2201      	movs	r2, #1
 8004494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004496:	f7fe f987 	bl	80027a8 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800449e:	f7fe f983 	bl	80027a8 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e1b4      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b0:	4b2b      	ldr	r3, [pc, #172]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044bc:	4b28      	ldr	r3, [pc, #160]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4925      	ldr	r1, [pc, #148]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]
 80044d0:	e015      	b.n	80044fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d2:	4b24      	ldr	r3, [pc, #144]	; (8004564 <HAL_RCC_OscConfig+0x278>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fe f966 	bl	80027a8 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044e0:	f7fe f962 	bl	80027a8 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e193      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f2:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d036      	beq.n	8004578 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d016      	beq.n	8004540 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <HAL_RCC_OscConfig+0x27c>)
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004518:	f7fe f946 	bl	80027a8 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004520:	f7fe f942 	bl	80027a8 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e173      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x234>
 800453e:	e01b      	b.n	8004578 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004540:	4b09      	ldr	r3, [pc, #36]	; (8004568 <HAL_RCC_OscConfig+0x27c>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004546:	f7fe f92f 	bl	80027a8 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800454c:	e00e      	b.n	800456c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800454e:	f7fe f92b 	bl	80027a8 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d907      	bls.n	800456c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e15c      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
 8004560:	40023800 	.word	0x40023800
 8004564:	42470000 	.word	0x42470000
 8004568:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800456c:	4b8a      	ldr	r3, [pc, #552]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 800456e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1ea      	bne.n	800454e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8097 	beq.w	80046b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004586:	2300      	movs	r3, #0
 8004588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800458a:	4b83      	ldr	r3, [pc, #524]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10f      	bne.n	80045b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004596:	2300      	movs	r3, #0
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	4b7f      	ldr	r3, [pc, #508]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	4a7e      	ldr	r2, [pc, #504]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 80045a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a4:	6413      	str	r3, [r2, #64]	; 0x40
 80045a6:	4b7c      	ldr	r3, [pc, #496]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b2:	2301      	movs	r3, #1
 80045b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b6:	4b79      	ldr	r3, [pc, #484]	; (800479c <HAL_RCC_OscConfig+0x4b0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d118      	bne.n	80045f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045c2:	4b76      	ldr	r3, [pc, #472]	; (800479c <HAL_RCC_OscConfig+0x4b0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a75      	ldr	r2, [pc, #468]	; (800479c <HAL_RCC_OscConfig+0x4b0>)
 80045c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ce:	f7fe f8eb 	bl	80027a8 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d6:	f7fe f8e7 	bl	80027a8 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e118      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e8:	4b6c      	ldr	r3, [pc, #432]	; (800479c <HAL_RCC_OscConfig+0x4b0>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d106      	bne.n	800460a <HAL_RCC_OscConfig+0x31e>
 80045fc:	4b66      	ldr	r3, [pc, #408]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	4a65      	ldr	r2, [pc, #404]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	6713      	str	r3, [r2, #112]	; 0x70
 8004608:	e01c      	b.n	8004644 <HAL_RCC_OscConfig+0x358>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2b05      	cmp	r3, #5
 8004610:	d10c      	bne.n	800462c <HAL_RCC_OscConfig+0x340>
 8004612:	4b61      	ldr	r3, [pc, #388]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	4a60      	ldr	r2, [pc, #384]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 8004618:	f043 0304 	orr.w	r3, r3, #4
 800461c:	6713      	str	r3, [r2, #112]	; 0x70
 800461e:	4b5e      	ldr	r3, [pc, #376]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	4a5d      	ldr	r2, [pc, #372]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	6713      	str	r3, [r2, #112]	; 0x70
 800462a:	e00b      	b.n	8004644 <HAL_RCC_OscConfig+0x358>
 800462c:	4b5a      	ldr	r3, [pc, #360]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004630:	4a59      	ldr	r2, [pc, #356]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	6713      	str	r3, [r2, #112]	; 0x70
 8004638:	4b57      	ldr	r3, [pc, #348]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 800463a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463c:	4a56      	ldr	r2, [pc, #344]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 800463e:	f023 0304 	bic.w	r3, r3, #4
 8004642:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d015      	beq.n	8004678 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464c:	f7fe f8ac 	bl	80027a8 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004652:	e00a      	b.n	800466a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004654:	f7fe f8a8 	bl	80027a8 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e0d7      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466a:	4b4b      	ldr	r3, [pc, #300]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0ee      	beq.n	8004654 <HAL_RCC_OscConfig+0x368>
 8004676:	e014      	b.n	80046a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004678:	f7fe f896 	bl	80027a8 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467e:	e00a      	b.n	8004696 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004680:	f7fe f892 	bl	80027a8 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f241 3288 	movw	r2, #5000	; 0x1388
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e0c1      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004696:	4b40      	ldr	r3, [pc, #256]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1ee      	bne.n	8004680 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d105      	bne.n	80046b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a8:	4b3b      	ldr	r3, [pc, #236]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	4a3a      	ldr	r2, [pc, #232]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 80046ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80ad 	beq.w	8004818 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046be:	4b36      	ldr	r3, [pc, #216]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d060      	beq.n	800478c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d145      	bne.n	800475e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d2:	4b33      	ldr	r3, [pc, #204]	; (80047a0 <HAL_RCC_OscConfig+0x4b4>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fe f866 	bl	80027a8 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fe f862 	bl	80027a8 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e093      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f2:	4b29      	ldr	r3, [pc, #164]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69da      	ldr	r2, [r3, #28]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	019b      	lsls	r3, r3, #6
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	085b      	lsrs	r3, r3, #1
 8004716:	3b01      	subs	r3, #1
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	061b      	lsls	r3, r3, #24
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	071b      	lsls	r3, r3, #28
 800472a:	491b      	ldr	r1, [pc, #108]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 800472c:	4313      	orrs	r3, r2
 800472e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004730:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <HAL_RCC_OscConfig+0x4b4>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004736:	f7fe f837 	bl	80027a8 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800473e:	f7fe f833 	bl	80027a8 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e064      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004750:	4b11      	ldr	r3, [pc, #68]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCC_OscConfig+0x452>
 800475c:	e05c      	b.n	8004818 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475e:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <HAL_RCC_OscConfig+0x4b4>)
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fe f820 	bl	80027a8 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476c:	f7fe f81c 	bl	80027a8 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e04d      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x480>
 800478a:	e045      	b.n	8004818 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d107      	bne.n	80047a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e040      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
 8004798:	40023800 	.word	0x40023800
 800479c:	40007000 	.word	0x40007000
 80047a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047a4:	4b1f      	ldr	r3, [pc, #124]	; (8004824 <HAL_RCC_OscConfig+0x538>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d030      	beq.n	8004814 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047bc:	429a      	cmp	r2, r3
 80047be:	d129      	bne.n	8004814 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d122      	bne.n	8004814 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047d4:	4013      	ands	r3, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047dc:	4293      	cmp	r3, r2
 80047de:	d119      	bne.n	8004814 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	085b      	lsrs	r3, r3, #1
 80047ec:	3b01      	subs	r3, #1
 80047ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d10f      	bne.n	8004814 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004800:	429a      	cmp	r2, r3
 8004802:	d107      	bne.n	8004814 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d001      	beq.n	8004818 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40023800 	.word	0x40023800

08004828 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e03f      	b.n	80048ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fd fdb2 	bl	80023b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2224      	movs	r2, #36	; 0x24
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800486a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fddf 	bl	8005430 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004880:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695a      	ldr	r2, [r3, #20]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004890:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b08a      	sub	sp, #40	; 0x28
 80048c6:	af02      	add	r7, sp, #8
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	4613      	mov	r3, r2
 80048d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d17c      	bne.n	80049dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <HAL_UART_Transmit+0x2c>
 80048e8:	88fb      	ldrh	r3, [r7, #6]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e075      	b.n	80049de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_UART_Transmit+0x3e>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e06e      	b.n	80049de <HAL_UART_Transmit+0x11c>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2221      	movs	r2, #33	; 0x21
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004916:	f7fd ff47 	bl	80027a8 <HAL_GetTick>
 800491a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	88fa      	ldrh	r2, [r7, #6]
 8004920:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	88fa      	ldrh	r2, [r7, #6]
 8004926:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004930:	d108      	bne.n	8004944 <HAL_UART_Transmit+0x82>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d104      	bne.n	8004944 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	e003      	b.n	800494c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004948:	2300      	movs	r3, #0
 800494a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004954:	e02a      	b.n	80049ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2200      	movs	r2, #0
 800495e:	2180      	movs	r1, #128	; 0x80
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fb1f 	bl	8004fa4 <UART_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e036      	b.n	80049de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10b      	bne.n	800498e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004984:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	3302      	adds	r3, #2
 800498a:	61bb      	str	r3, [r7, #24]
 800498c:	e007      	b.n	800499e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	781a      	ldrb	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	3301      	adds	r3, #1
 800499c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1cf      	bne.n	8004956 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2200      	movs	r2, #0
 80049be:	2140      	movs	r1, #64	; 0x40
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 faef 	bl	8004fa4 <UART_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e006      	b.n	80049de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	e000      	b.n	80049de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049dc:	2302      	movs	r3, #2
  }
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3720      	adds	r7, #32
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	4613      	mov	r3, r2
 80049f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d11d      	bne.n	8004a3c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <HAL_UART_Receive_IT+0x26>
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e016      	b.n	8004a3e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_UART_Receive_IT+0x38>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e00f      	b.n	8004a3e <HAL_UART_Receive_IT+0x58>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68b9      	ldr	r1, [r7, #8]
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fb24 	bl	8005080 <UART_Start_Receive_IT>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	e000      	b.n	8004a3e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004a3c:	2302      	movs	r3, #2
  }
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b0ba      	sub	sp, #232	; 0xe8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10f      	bne.n	8004aae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <HAL_UART_IRQHandler+0x66>
 8004a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fc07 	bl	80052ba <UART_Receive_IT>
      return;
 8004aac:	e256      	b.n	8004f5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80de 	beq.w	8004c74 <HAL_UART_IRQHandler+0x22c>
 8004ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 80d1 	beq.w	8004c74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00b      	beq.n	8004af6 <HAL_UART_IRQHandler+0xae>
 8004ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f043 0201 	orr.w	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <HAL_UART_IRQHandler+0xd2>
 8004b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f043 0202 	orr.w	r2, r3, #2
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00b      	beq.n	8004b3e <HAL_UART_IRQHandler+0xf6>
 8004b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f043 0204 	orr.w	r2, r3, #4
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d011      	beq.n	8004b6e <HAL_UART_IRQHandler+0x126>
 8004b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d105      	bne.n	8004b62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	f043 0208 	orr.w	r2, r3, #8
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 81ed 	beq.w	8004f52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_UART_IRQHandler+0x14e>
 8004b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fb92 	bl	80052ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba0:	2b40      	cmp	r3, #64	; 0x40
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d103      	bne.n	8004bc2 <HAL_UART_IRQHandler+0x17a>
 8004bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d04f      	beq.n	8004c62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa9a 	bl	80050fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd2:	2b40      	cmp	r3, #64	; 0x40
 8004bd4:	d141      	bne.n	8004c5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3314      	adds	r3, #20
 8004bdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3314      	adds	r3, #20
 8004bfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1d9      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d013      	beq.n	8004c52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	4a7d      	ldr	r2, [pc, #500]	; (8004e24 <HAL_UART_IRQHandler+0x3dc>)
 8004c30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe fe3d 	bl	80038b6 <HAL_DMA_Abort_IT>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c50:	e00e      	b.n	8004c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f990 	bl	8004f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c58:	e00a      	b.n	8004c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f98c 	bl	8004f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c60:	e006      	b.n	8004c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f988 	bl	8004f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c6e:	e170      	b.n	8004f52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c70:	bf00      	nop
    return;
 8004c72:	e16e      	b.n	8004f52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	f040 814a 	bne.w	8004f12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 8143 	beq.w	8004f12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 813c 	beq.w	8004f12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cba:	2b40      	cmp	r3, #64	; 0x40
 8004cbc:	f040 80b4 	bne.w	8004e28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ccc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8140 	beq.w	8004f56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	f080 8139 	bcs.w	8004f56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf6:	f000 8088 	beq.w	8004e0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	330c      	adds	r3, #12
 8004d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d08:	e853 3f00 	ldrex	r3, [r3]
 8004d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d36:	e841 2300 	strex	r3, r2, [r1]
 8004d3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1d9      	bne.n	8004cfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3314      	adds	r3, #20
 8004d4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3314      	adds	r3, #20
 8004d66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e1      	bne.n	8004d46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3314      	adds	r3, #20
 8004d88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3314      	adds	r3, #20
 8004da2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004da6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004da8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004dac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e3      	bne.n	8004d82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	330c      	adds	r3, #12
 8004dce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dda:	f023 0310 	bic.w	r3, r3, #16
 8004dde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	330c      	adds	r3, #12
 8004de8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004dec:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004df2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e3      	bne.n	8004dc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fe fce6 	bl	80037d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	4619      	mov	r1, r3
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f8b6 	bl	8004f8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e20:	e099      	b.n	8004f56 <HAL_UART_IRQHandler+0x50e>
 8004e22:	bf00      	nop
 8004e24:	080051c3 	.word	0x080051c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 808b 	beq.w	8004f5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8086 	beq.w	8004f5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	330c      	adds	r3, #12
 8004e6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e72:	647a      	str	r2, [r7, #68]	; 0x44
 8004e74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e3      	bne.n	8004e4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3314      	adds	r3, #20
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	623b      	str	r3, [r7, #32]
   return(result);
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	f023 0301 	bic.w	r3, r3, #1
 8004e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3314      	adds	r3, #20
 8004ea6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004eaa:	633a      	str	r2, [r7, #48]	; 0x30
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e3      	bne.n	8004e86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	e853 3f00 	ldrex	r3, [r3]
 8004eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0310 	bic.w	r3, r3, #16
 8004ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	330c      	adds	r3, #12
 8004eec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ef0:	61fa      	str	r2, [r7, #28]
 8004ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef4:	69b9      	ldr	r1, [r7, #24]
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	e841 2300 	strex	r3, r2, [r1]
 8004efc:	617b      	str	r3, [r7, #20]
   return(result);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e3      	bne.n	8004ecc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f08:	4619      	mov	r1, r3
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f83e 	bl	8004f8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f10:	e023      	b.n	8004f5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d009      	beq.n	8004f32 <HAL_UART_IRQHandler+0x4ea>
 8004f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f95d 	bl	80051ea <UART_Transmit_IT>
    return;
 8004f30:	e014      	b.n	8004f5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00e      	beq.n	8004f5c <HAL_UART_IRQHandler+0x514>
 8004f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f99d 	bl	800528a <UART_EndTransmit_IT>
    return;
 8004f50:	e004      	b.n	8004f5c <HAL_UART_IRQHandler+0x514>
    return;
 8004f52:	bf00      	nop
 8004f54:	e002      	b.n	8004f5c <HAL_UART_IRQHandler+0x514>
      return;
 8004f56:	bf00      	nop
 8004f58:	e000      	b.n	8004f5c <HAL_UART_IRQHandler+0x514>
      return;
 8004f5a:	bf00      	nop
  }
}
 8004f5c:	37e8      	adds	r7, #232	; 0xe8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop

08004f64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b090      	sub	sp, #64	; 0x40
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	603b      	str	r3, [r7, #0]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb4:	e050      	b.n	8005058 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fbc:	d04c      	beq.n	8005058 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d007      	beq.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fc4:	f7fd fbf0 	bl	80027a8 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d241      	bcs.n	8005058 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	330c      	adds	r3, #12
 8004fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	e853 3f00 	ldrex	r3, [r3]
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	330c      	adds	r3, #12
 8004ff2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ff4:	637a      	str	r2, [r7, #52]	; 0x34
 8004ff6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e5      	bne.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3314      	adds	r3, #20
 800500e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	613b      	str	r3, [r7, #16]
   return(result);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f023 0301 	bic.w	r3, r3, #1
 800501e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3314      	adds	r3, #20
 8005026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005028:	623a      	str	r2, [r7, #32]
 800502a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	69f9      	ldr	r1, [r7, #28]
 800502e:	6a3a      	ldr	r2, [r7, #32]
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	61bb      	str	r3, [r7, #24]
   return(result);
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e5      	bne.n	8005008 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e00f      	b.n	8005078 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	4013      	ands	r3, r2
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	429a      	cmp	r2, r3
 8005066:	bf0c      	ite	eq
 8005068:	2301      	moveq	r3, #1
 800506a:	2300      	movne	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	429a      	cmp	r2, r3
 8005074:	d09f      	beq.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3740      	adds	r7, #64	; 0x40
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	4613      	mov	r3, r2
 800508c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	88fa      	ldrh	r2, [r7, #6]
 8005098:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	88fa      	ldrh	r2, [r7, #6]
 800509e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2222      	movs	r2, #34	; 0x22
 80050aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695a      	ldr	r2, [r3, #20]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f042 0201 	orr.w	r2, r2, #1
 80050dc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0220 	orr.w	r2, r2, #32
 80050ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b095      	sub	sp, #84	; 0x54
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800511a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	330c      	adds	r3, #12
 8005122:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005124:	643a      	str	r2, [r7, #64]	; 0x40
 8005126:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800512a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800512c:	e841 2300 	strex	r3, r2, [r1]
 8005130:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e5      	bne.n	8005104 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3314      	adds	r3, #20
 800513e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	e853 3f00 	ldrex	r3, [r3]
 8005146:	61fb      	str	r3, [r7, #28]
   return(result);
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	f023 0301 	bic.w	r3, r3, #1
 800514e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3314      	adds	r3, #20
 8005156:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005158:	62fa      	str	r2, [r7, #44]	; 0x2c
 800515a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800515e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005160:	e841 2300 	strex	r3, r2, [r1]
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1e5      	bne.n	8005138 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005170:	2b01      	cmp	r3, #1
 8005172:	d119      	bne.n	80051a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	60bb      	str	r3, [r7, #8]
   return(result);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f023 0310 	bic.w	r3, r3, #16
 800518a:	647b      	str	r3, [r7, #68]	; 0x44
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	330c      	adds	r3, #12
 8005192:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005194:	61ba      	str	r2, [r7, #24]
 8005196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	6979      	ldr	r1, [r7, #20]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	613b      	str	r3, [r7, #16]
   return(result);
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e5      	bne.n	8005174 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051b6:	bf00      	nop
 80051b8:	3754      	adds	r7, #84	; 0x54
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7ff fecb 	bl	8004f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051e2:	bf00      	nop
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b085      	sub	sp, #20
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b21      	cmp	r3, #33	; 0x21
 80051fc:	d13e      	bne.n	800527c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005206:	d114      	bne.n	8005232 <UART_Transmit_IT+0x48>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d110      	bne.n	8005232 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005224:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	1c9a      	adds	r2, r3, #2
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	621a      	str	r2, [r3, #32]
 8005230:	e008      	b.n	8005244 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	1c59      	adds	r1, r3, #1
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6211      	str	r1, [r2, #32]
 800523c:	781a      	ldrb	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29b      	uxth	r3, r3
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	4619      	mov	r1, r3
 8005252:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10f      	bne.n	8005278 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005266:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005276:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	e000      	b.n	800527e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800527c:	2302      	movs	r3, #2
  }
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff fe5a 	bl	8004f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b08c      	sub	sp, #48	; 0x30
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b22      	cmp	r3, #34	; 0x22
 80052cc:	f040 80ab 	bne.w	8005426 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d8:	d117      	bne.n	800530a <UART_Receive_IT+0x50>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d113      	bne.n	800530a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	1c9a      	adds	r2, r3, #2
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	629a      	str	r2, [r3, #40]	; 0x28
 8005308:	e026      	b.n	8005358 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005310:	2300      	movs	r3, #0
 8005312:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531c:	d007      	beq.n	800532e <UART_Receive_IT+0x74>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <UART_Receive_IT+0x82>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	e008      	b.n	800534e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005348:	b2da      	uxtb	r2, r3
 800534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800535c:	b29b      	uxth	r3, r3
 800535e:	3b01      	subs	r3, #1
 8005360:	b29b      	uxth	r3, r3
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	4619      	mov	r1, r3
 8005366:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005368:	2b00      	cmp	r3, #0
 800536a:	d15a      	bne.n	8005422 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0220 	bic.w	r2, r2, #32
 800537a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800538a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	695a      	ldr	r2, [r3, #20]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0201 	bic.w	r2, r2, #1
 800539a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d135      	bne.n	8005418 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	330c      	adds	r3, #12
 80053b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	613b      	str	r3, [r7, #16]
   return(result);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f023 0310 	bic.w	r3, r3, #16
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	330c      	adds	r3, #12
 80053d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d2:	623a      	str	r2, [r7, #32]
 80053d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	69f9      	ldr	r1, [r7, #28]
 80053d8:	6a3a      	ldr	r2, [r7, #32]
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	61bb      	str	r3, [r7, #24]
   return(result);
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e5      	bne.n	80053b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d10a      	bne.n	800540a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800540e:	4619      	mov	r1, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7ff fdbb 	bl	8004f8c <HAL_UARTEx_RxEventCallback>
 8005416:	e002      	b.n	800541e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7fc fdd7 	bl	8001fcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	e002      	b.n	8005428 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	e000      	b.n	8005428 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005426:	2302      	movs	r3, #2
  }
}
 8005428:	4618      	mov	r0, r3
 800542a:	3730      	adds	r7, #48	; 0x30
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005434:	b0c0      	sub	sp, #256	; 0x100
 8005436:	af00      	add	r7, sp, #0
 8005438:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544c:	68d9      	ldr	r1, [r3, #12]
 800544e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	ea40 0301 	orr.w	r3, r0, r1
 8005458:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800545a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	431a      	orrs	r2, r3
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	431a      	orrs	r2, r3
 8005470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800547c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005488:	f021 010c 	bic.w	r1, r1, #12
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005496:	430b      	orrs	r3, r1
 8005498:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800549a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054aa:	6999      	ldr	r1, [r3, #24]
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	ea40 0301 	orr.w	r3, r0, r1
 80054b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	4b8f      	ldr	r3, [pc, #572]	; (80056fc <UART_SetConfig+0x2cc>)
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d005      	beq.n	80054d0 <UART_SetConfig+0xa0>
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	4b8d      	ldr	r3, [pc, #564]	; (8005700 <UART_SetConfig+0x2d0>)
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d104      	bne.n	80054da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054d0:	f7fe fcc8 	bl	8003e64 <HAL_RCC_GetPCLK2Freq>
 80054d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054d8:	e003      	b.n	80054e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054da:	f7fe fcaf 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 80054de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ec:	f040 810c 	bne.w	8005708 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054f4:	2200      	movs	r2, #0
 80054f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80054fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005502:	4622      	mov	r2, r4
 8005504:	462b      	mov	r3, r5
 8005506:	1891      	adds	r1, r2, r2
 8005508:	65b9      	str	r1, [r7, #88]	; 0x58
 800550a:	415b      	adcs	r3, r3
 800550c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800550e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005512:	4621      	mov	r1, r4
 8005514:	eb12 0801 	adds.w	r8, r2, r1
 8005518:	4629      	mov	r1, r5
 800551a:	eb43 0901 	adc.w	r9, r3, r1
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800552a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800552e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005532:	4690      	mov	r8, r2
 8005534:	4699      	mov	r9, r3
 8005536:	4623      	mov	r3, r4
 8005538:	eb18 0303 	adds.w	r3, r8, r3
 800553c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005540:	462b      	mov	r3, r5
 8005542:	eb49 0303 	adc.w	r3, r9, r3
 8005546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005556:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800555a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800555e:	460b      	mov	r3, r1
 8005560:	18db      	adds	r3, r3, r3
 8005562:	653b      	str	r3, [r7, #80]	; 0x50
 8005564:	4613      	mov	r3, r2
 8005566:	eb42 0303 	adc.w	r3, r2, r3
 800556a:	657b      	str	r3, [r7, #84]	; 0x54
 800556c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005570:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005574:	f7fb fb88 	bl	8000c88 <__aeabi_uldivmod>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4b61      	ldr	r3, [pc, #388]	; (8005704 <UART_SetConfig+0x2d4>)
 800557e:	fba3 2302 	umull	r2, r3, r3, r2
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	011c      	lsls	r4, r3, #4
 8005586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800558a:	2200      	movs	r2, #0
 800558c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005590:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005594:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005598:	4642      	mov	r2, r8
 800559a:	464b      	mov	r3, r9
 800559c:	1891      	adds	r1, r2, r2
 800559e:	64b9      	str	r1, [r7, #72]	; 0x48
 80055a0:	415b      	adcs	r3, r3
 80055a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80055a8:	4641      	mov	r1, r8
 80055aa:	eb12 0a01 	adds.w	sl, r2, r1
 80055ae:	4649      	mov	r1, r9
 80055b0:	eb43 0b01 	adc.w	fp, r3, r1
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055c8:	4692      	mov	sl, r2
 80055ca:	469b      	mov	fp, r3
 80055cc:	4643      	mov	r3, r8
 80055ce:	eb1a 0303 	adds.w	r3, sl, r3
 80055d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055d6:	464b      	mov	r3, r9
 80055d8:	eb4b 0303 	adc.w	r3, fp, r3
 80055dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80055f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80055f4:	460b      	mov	r3, r1
 80055f6:	18db      	adds	r3, r3, r3
 80055f8:	643b      	str	r3, [r7, #64]	; 0x40
 80055fa:	4613      	mov	r3, r2
 80055fc:	eb42 0303 	adc.w	r3, r2, r3
 8005600:	647b      	str	r3, [r7, #68]	; 0x44
 8005602:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005606:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800560a:	f7fb fb3d 	bl	8000c88 <__aeabi_uldivmod>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4611      	mov	r1, r2
 8005614:	4b3b      	ldr	r3, [pc, #236]	; (8005704 <UART_SetConfig+0x2d4>)
 8005616:	fba3 2301 	umull	r2, r3, r3, r1
 800561a:	095b      	lsrs	r3, r3, #5
 800561c:	2264      	movs	r2, #100	; 0x64
 800561e:	fb02 f303 	mul.w	r3, r2, r3
 8005622:	1acb      	subs	r3, r1, r3
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800562a:	4b36      	ldr	r3, [pc, #216]	; (8005704 <UART_SetConfig+0x2d4>)
 800562c:	fba3 2302 	umull	r2, r3, r3, r2
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005638:	441c      	add	r4, r3
 800563a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800563e:	2200      	movs	r2, #0
 8005640:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005644:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005648:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800564c:	4642      	mov	r2, r8
 800564e:	464b      	mov	r3, r9
 8005650:	1891      	adds	r1, r2, r2
 8005652:	63b9      	str	r1, [r7, #56]	; 0x38
 8005654:	415b      	adcs	r3, r3
 8005656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005658:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800565c:	4641      	mov	r1, r8
 800565e:	1851      	adds	r1, r2, r1
 8005660:	6339      	str	r1, [r7, #48]	; 0x30
 8005662:	4649      	mov	r1, r9
 8005664:	414b      	adcs	r3, r1
 8005666:	637b      	str	r3, [r7, #52]	; 0x34
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005674:	4659      	mov	r1, fp
 8005676:	00cb      	lsls	r3, r1, #3
 8005678:	4651      	mov	r1, sl
 800567a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800567e:	4651      	mov	r1, sl
 8005680:	00ca      	lsls	r2, r1, #3
 8005682:	4610      	mov	r0, r2
 8005684:	4619      	mov	r1, r3
 8005686:	4603      	mov	r3, r0
 8005688:	4642      	mov	r2, r8
 800568a:	189b      	adds	r3, r3, r2
 800568c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005690:	464b      	mov	r3, r9
 8005692:	460a      	mov	r2, r1
 8005694:	eb42 0303 	adc.w	r3, r2, r3
 8005698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80056ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80056b0:	460b      	mov	r3, r1
 80056b2:	18db      	adds	r3, r3, r3
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b6:	4613      	mov	r3, r2
 80056b8:	eb42 0303 	adc.w	r3, r2, r3
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056c6:	f7fb fadf 	bl	8000c88 <__aeabi_uldivmod>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4b0d      	ldr	r3, [pc, #52]	; (8005704 <UART_SetConfig+0x2d4>)
 80056d0:	fba3 1302 	umull	r1, r3, r3, r2
 80056d4:	095b      	lsrs	r3, r3, #5
 80056d6:	2164      	movs	r1, #100	; 0x64
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	3332      	adds	r3, #50	; 0x32
 80056e2:	4a08      	ldr	r2, [pc, #32]	; (8005704 <UART_SetConfig+0x2d4>)
 80056e4:	fba2 2303 	umull	r2, r3, r2, r3
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	f003 0207 	and.w	r2, r3, #7
 80056ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4422      	add	r2, r4
 80056f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056f8:	e105      	b.n	8005906 <UART_SetConfig+0x4d6>
 80056fa:	bf00      	nop
 80056fc:	40011000 	.word	0x40011000
 8005700:	40011400 	.word	0x40011400
 8005704:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800570c:	2200      	movs	r2, #0
 800570e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005712:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005716:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800571a:	4642      	mov	r2, r8
 800571c:	464b      	mov	r3, r9
 800571e:	1891      	adds	r1, r2, r2
 8005720:	6239      	str	r1, [r7, #32]
 8005722:	415b      	adcs	r3, r3
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
 8005726:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800572a:	4641      	mov	r1, r8
 800572c:	1854      	adds	r4, r2, r1
 800572e:	4649      	mov	r1, r9
 8005730:	eb43 0501 	adc.w	r5, r3, r1
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	00eb      	lsls	r3, r5, #3
 800573e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005742:	00e2      	lsls	r2, r4, #3
 8005744:	4614      	mov	r4, r2
 8005746:	461d      	mov	r5, r3
 8005748:	4643      	mov	r3, r8
 800574a:	18e3      	adds	r3, r4, r3
 800574c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005750:	464b      	mov	r3, r9
 8005752:	eb45 0303 	adc.w	r3, r5, r3
 8005756:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800575a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005766:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005776:	4629      	mov	r1, r5
 8005778:	008b      	lsls	r3, r1, #2
 800577a:	4621      	mov	r1, r4
 800577c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005780:	4621      	mov	r1, r4
 8005782:	008a      	lsls	r2, r1, #2
 8005784:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005788:	f7fb fa7e 	bl	8000c88 <__aeabi_uldivmod>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4b60      	ldr	r3, [pc, #384]	; (8005914 <UART_SetConfig+0x4e4>)
 8005792:	fba3 2302 	umull	r2, r3, r3, r2
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	011c      	lsls	r4, r3, #4
 800579a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800579e:	2200      	movs	r2, #0
 80057a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80057a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80057ac:	4642      	mov	r2, r8
 80057ae:	464b      	mov	r3, r9
 80057b0:	1891      	adds	r1, r2, r2
 80057b2:	61b9      	str	r1, [r7, #24]
 80057b4:	415b      	adcs	r3, r3
 80057b6:	61fb      	str	r3, [r7, #28]
 80057b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057bc:	4641      	mov	r1, r8
 80057be:	1851      	adds	r1, r2, r1
 80057c0:	6139      	str	r1, [r7, #16]
 80057c2:	4649      	mov	r1, r9
 80057c4:	414b      	adcs	r3, r1
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	f04f 0300 	mov.w	r3, #0
 80057d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057d4:	4659      	mov	r1, fp
 80057d6:	00cb      	lsls	r3, r1, #3
 80057d8:	4651      	mov	r1, sl
 80057da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057de:	4651      	mov	r1, sl
 80057e0:	00ca      	lsls	r2, r1, #3
 80057e2:	4610      	mov	r0, r2
 80057e4:	4619      	mov	r1, r3
 80057e6:	4603      	mov	r3, r0
 80057e8:	4642      	mov	r2, r8
 80057ea:	189b      	adds	r3, r3, r2
 80057ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057f0:	464b      	mov	r3, r9
 80057f2:	460a      	mov	r2, r1
 80057f4:	eb42 0303 	adc.w	r3, r2, r3
 80057f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	67bb      	str	r3, [r7, #120]	; 0x78
 8005806:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	f04f 0300 	mov.w	r3, #0
 8005810:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005814:	4649      	mov	r1, r9
 8005816:	008b      	lsls	r3, r1, #2
 8005818:	4641      	mov	r1, r8
 800581a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800581e:	4641      	mov	r1, r8
 8005820:	008a      	lsls	r2, r1, #2
 8005822:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005826:	f7fb fa2f 	bl	8000c88 <__aeabi_uldivmod>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	4b39      	ldr	r3, [pc, #228]	; (8005914 <UART_SetConfig+0x4e4>)
 8005830:	fba3 1302 	umull	r1, r3, r3, r2
 8005834:	095b      	lsrs	r3, r3, #5
 8005836:	2164      	movs	r1, #100	; 0x64
 8005838:	fb01 f303 	mul.w	r3, r1, r3
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	3332      	adds	r3, #50	; 0x32
 8005842:	4a34      	ldr	r2, [pc, #208]	; (8005914 <UART_SetConfig+0x4e4>)
 8005844:	fba2 2303 	umull	r2, r3, r2, r3
 8005848:	095b      	lsrs	r3, r3, #5
 800584a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800584e:	441c      	add	r4, r3
 8005850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005854:	2200      	movs	r2, #0
 8005856:	673b      	str	r3, [r7, #112]	; 0x70
 8005858:	677a      	str	r2, [r7, #116]	; 0x74
 800585a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800585e:	4642      	mov	r2, r8
 8005860:	464b      	mov	r3, r9
 8005862:	1891      	adds	r1, r2, r2
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	415b      	adcs	r3, r3
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800586e:	4641      	mov	r1, r8
 8005870:	1851      	adds	r1, r2, r1
 8005872:	6039      	str	r1, [r7, #0]
 8005874:	4649      	mov	r1, r9
 8005876:	414b      	adcs	r3, r1
 8005878:	607b      	str	r3, [r7, #4]
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	f04f 0300 	mov.w	r3, #0
 8005882:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005886:	4659      	mov	r1, fp
 8005888:	00cb      	lsls	r3, r1, #3
 800588a:	4651      	mov	r1, sl
 800588c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005890:	4651      	mov	r1, sl
 8005892:	00ca      	lsls	r2, r1, #3
 8005894:	4610      	mov	r0, r2
 8005896:	4619      	mov	r1, r3
 8005898:	4603      	mov	r3, r0
 800589a:	4642      	mov	r2, r8
 800589c:	189b      	adds	r3, r3, r2
 800589e:	66bb      	str	r3, [r7, #104]	; 0x68
 80058a0:	464b      	mov	r3, r9
 80058a2:	460a      	mov	r2, r1
 80058a4:	eb42 0303 	adc.w	r3, r2, r3
 80058a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	663b      	str	r3, [r7, #96]	; 0x60
 80058b4:	667a      	str	r2, [r7, #100]	; 0x64
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80058c2:	4649      	mov	r1, r9
 80058c4:	008b      	lsls	r3, r1, #2
 80058c6:	4641      	mov	r1, r8
 80058c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058cc:	4641      	mov	r1, r8
 80058ce:	008a      	lsls	r2, r1, #2
 80058d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058d4:	f7fb f9d8 	bl	8000c88 <__aeabi_uldivmod>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <UART_SetConfig+0x4e4>)
 80058de:	fba3 1302 	umull	r1, r3, r3, r2
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	2164      	movs	r1, #100	; 0x64
 80058e6:	fb01 f303 	mul.w	r3, r1, r3
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	3332      	adds	r3, #50	; 0x32
 80058f0:	4a08      	ldr	r2, [pc, #32]	; (8005914 <UART_SetConfig+0x4e4>)
 80058f2:	fba2 2303 	umull	r2, r3, r2, r3
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	f003 020f 	and.w	r2, r3, #15
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4422      	add	r2, r4
 8005904:	609a      	str	r2, [r3, #8]
}
 8005906:	bf00      	nop
 8005908:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800590c:	46bd      	mov	sp, r7
 800590e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005912:	bf00      	nop
 8005914:	51eb851f 	.word	0x51eb851f

08005918 <__errno>:
 8005918:	4b01      	ldr	r3, [pc, #4]	; (8005920 <__errno+0x8>)
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	2000000c 	.word	0x2000000c

08005924 <__libc_init_array>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	4d0d      	ldr	r5, [pc, #52]	; (800595c <__libc_init_array+0x38>)
 8005928:	4c0d      	ldr	r4, [pc, #52]	; (8005960 <__libc_init_array+0x3c>)
 800592a:	1b64      	subs	r4, r4, r5
 800592c:	10a4      	asrs	r4, r4, #2
 800592e:	2600      	movs	r6, #0
 8005930:	42a6      	cmp	r6, r4
 8005932:	d109      	bne.n	8005948 <__libc_init_array+0x24>
 8005934:	4d0b      	ldr	r5, [pc, #44]	; (8005964 <__libc_init_array+0x40>)
 8005936:	4c0c      	ldr	r4, [pc, #48]	; (8005968 <__libc_init_array+0x44>)
 8005938:	f002 ffcc 	bl	80088d4 <_init>
 800593c:	1b64      	subs	r4, r4, r5
 800593e:	10a4      	asrs	r4, r4, #2
 8005940:	2600      	movs	r6, #0
 8005942:	42a6      	cmp	r6, r4
 8005944:	d105      	bne.n	8005952 <__libc_init_array+0x2e>
 8005946:	bd70      	pop	{r4, r5, r6, pc}
 8005948:	f855 3b04 	ldr.w	r3, [r5], #4
 800594c:	4798      	blx	r3
 800594e:	3601      	adds	r6, #1
 8005950:	e7ee      	b.n	8005930 <__libc_init_array+0xc>
 8005952:	f855 3b04 	ldr.w	r3, [r5], #4
 8005956:	4798      	blx	r3
 8005958:	3601      	adds	r6, #1
 800595a:	e7f2      	b.n	8005942 <__libc_init_array+0x1e>
 800595c:	08008e70 	.word	0x08008e70
 8005960:	08008e70 	.word	0x08008e70
 8005964:	08008e70 	.word	0x08008e70
 8005968:	08008e74 	.word	0x08008e74

0800596c <memset>:
 800596c:	4402      	add	r2, r0
 800596e:	4603      	mov	r3, r0
 8005970:	4293      	cmp	r3, r2
 8005972:	d100      	bne.n	8005976 <memset+0xa>
 8005974:	4770      	bx	lr
 8005976:	f803 1b01 	strb.w	r1, [r3], #1
 800597a:	e7f9      	b.n	8005970 <memset+0x4>

0800597c <__cvt>:
 800597c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005980:	ec55 4b10 	vmov	r4, r5, d0
 8005984:	2d00      	cmp	r5, #0
 8005986:	460e      	mov	r6, r1
 8005988:	4619      	mov	r1, r3
 800598a:	462b      	mov	r3, r5
 800598c:	bfbb      	ittet	lt
 800598e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005992:	461d      	movlt	r5, r3
 8005994:	2300      	movge	r3, #0
 8005996:	232d      	movlt	r3, #45	; 0x2d
 8005998:	700b      	strb	r3, [r1, #0]
 800599a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800599c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80059a0:	4691      	mov	r9, r2
 80059a2:	f023 0820 	bic.w	r8, r3, #32
 80059a6:	bfbc      	itt	lt
 80059a8:	4622      	movlt	r2, r4
 80059aa:	4614      	movlt	r4, r2
 80059ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059b0:	d005      	beq.n	80059be <__cvt+0x42>
 80059b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80059b6:	d100      	bne.n	80059ba <__cvt+0x3e>
 80059b8:	3601      	adds	r6, #1
 80059ba:	2102      	movs	r1, #2
 80059bc:	e000      	b.n	80059c0 <__cvt+0x44>
 80059be:	2103      	movs	r1, #3
 80059c0:	ab03      	add	r3, sp, #12
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	ab02      	add	r3, sp, #8
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	ec45 4b10 	vmov	d0, r4, r5
 80059cc:	4653      	mov	r3, sl
 80059ce:	4632      	mov	r2, r6
 80059d0:	f000 fe1a 	bl	8006608 <_dtoa_r>
 80059d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059d8:	4607      	mov	r7, r0
 80059da:	d102      	bne.n	80059e2 <__cvt+0x66>
 80059dc:	f019 0f01 	tst.w	r9, #1
 80059e0:	d022      	beq.n	8005a28 <__cvt+0xac>
 80059e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059e6:	eb07 0906 	add.w	r9, r7, r6
 80059ea:	d110      	bne.n	8005a0e <__cvt+0x92>
 80059ec:	783b      	ldrb	r3, [r7, #0]
 80059ee:	2b30      	cmp	r3, #48	; 0x30
 80059f0:	d10a      	bne.n	8005a08 <__cvt+0x8c>
 80059f2:	2200      	movs	r2, #0
 80059f4:	2300      	movs	r3, #0
 80059f6:	4620      	mov	r0, r4
 80059f8:	4629      	mov	r1, r5
 80059fa:	f7fb f885 	bl	8000b08 <__aeabi_dcmpeq>
 80059fe:	b918      	cbnz	r0, 8005a08 <__cvt+0x8c>
 8005a00:	f1c6 0601 	rsb	r6, r6, #1
 8005a04:	f8ca 6000 	str.w	r6, [sl]
 8005a08:	f8da 3000 	ldr.w	r3, [sl]
 8005a0c:	4499      	add	r9, r3
 8005a0e:	2200      	movs	r2, #0
 8005a10:	2300      	movs	r3, #0
 8005a12:	4620      	mov	r0, r4
 8005a14:	4629      	mov	r1, r5
 8005a16:	f7fb f877 	bl	8000b08 <__aeabi_dcmpeq>
 8005a1a:	b108      	cbz	r0, 8005a20 <__cvt+0xa4>
 8005a1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a20:	2230      	movs	r2, #48	; 0x30
 8005a22:	9b03      	ldr	r3, [sp, #12]
 8005a24:	454b      	cmp	r3, r9
 8005a26:	d307      	bcc.n	8005a38 <__cvt+0xbc>
 8005a28:	9b03      	ldr	r3, [sp, #12]
 8005a2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a2c:	1bdb      	subs	r3, r3, r7
 8005a2e:	4638      	mov	r0, r7
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	b004      	add	sp, #16
 8005a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a38:	1c59      	adds	r1, r3, #1
 8005a3a:	9103      	str	r1, [sp, #12]
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	e7f0      	b.n	8005a22 <__cvt+0xa6>

08005a40 <__exponent>:
 8005a40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a42:	4603      	mov	r3, r0
 8005a44:	2900      	cmp	r1, #0
 8005a46:	bfb8      	it	lt
 8005a48:	4249      	neglt	r1, r1
 8005a4a:	f803 2b02 	strb.w	r2, [r3], #2
 8005a4e:	bfb4      	ite	lt
 8005a50:	222d      	movlt	r2, #45	; 0x2d
 8005a52:	222b      	movge	r2, #43	; 0x2b
 8005a54:	2909      	cmp	r1, #9
 8005a56:	7042      	strb	r2, [r0, #1]
 8005a58:	dd2a      	ble.n	8005ab0 <__exponent+0x70>
 8005a5a:	f10d 0407 	add.w	r4, sp, #7
 8005a5e:	46a4      	mov	ip, r4
 8005a60:	270a      	movs	r7, #10
 8005a62:	46a6      	mov	lr, r4
 8005a64:	460a      	mov	r2, r1
 8005a66:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a6a:	fb07 1516 	mls	r5, r7, r6, r1
 8005a6e:	3530      	adds	r5, #48	; 0x30
 8005a70:	2a63      	cmp	r2, #99	; 0x63
 8005a72:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005a76:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	dcf1      	bgt.n	8005a62 <__exponent+0x22>
 8005a7e:	3130      	adds	r1, #48	; 0x30
 8005a80:	f1ae 0502 	sub.w	r5, lr, #2
 8005a84:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a88:	1c44      	adds	r4, r0, #1
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	4561      	cmp	r1, ip
 8005a8e:	d30a      	bcc.n	8005aa6 <__exponent+0x66>
 8005a90:	f10d 0209 	add.w	r2, sp, #9
 8005a94:	eba2 020e 	sub.w	r2, r2, lr
 8005a98:	4565      	cmp	r5, ip
 8005a9a:	bf88      	it	hi
 8005a9c:	2200      	movhi	r2, #0
 8005a9e:	4413      	add	r3, r2
 8005aa0:	1a18      	subs	r0, r3, r0
 8005aa2:	b003      	add	sp, #12
 8005aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aaa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005aae:	e7ed      	b.n	8005a8c <__exponent+0x4c>
 8005ab0:	2330      	movs	r3, #48	; 0x30
 8005ab2:	3130      	adds	r1, #48	; 0x30
 8005ab4:	7083      	strb	r3, [r0, #2]
 8005ab6:	70c1      	strb	r1, [r0, #3]
 8005ab8:	1d03      	adds	r3, r0, #4
 8005aba:	e7f1      	b.n	8005aa0 <__exponent+0x60>

08005abc <_printf_float>:
 8005abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac0:	ed2d 8b02 	vpush	{d8}
 8005ac4:	b08d      	sub	sp, #52	; 0x34
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005acc:	4616      	mov	r6, r2
 8005ace:	461f      	mov	r7, r3
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	f001 fd3f 	bl	8007554 <_localeconv_r>
 8005ad6:	f8d0 a000 	ldr.w	sl, [r0]
 8005ada:	4650      	mov	r0, sl
 8005adc:	f7fa fb98 	bl	8000210 <strlen>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	930a      	str	r3, [sp, #40]	; 0x28
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	9305      	str	r3, [sp, #20]
 8005ae8:	f8d8 3000 	ldr.w	r3, [r8]
 8005aec:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005af0:	3307      	adds	r3, #7
 8005af2:	f023 0307 	bic.w	r3, r3, #7
 8005af6:	f103 0208 	add.w	r2, r3, #8
 8005afa:	f8c8 2000 	str.w	r2, [r8]
 8005afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b02:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b06:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b0e:	9307      	str	r3, [sp, #28]
 8005b10:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b14:	ee08 0a10 	vmov	s16, r0
 8005b18:	4b9f      	ldr	r3, [pc, #636]	; (8005d98 <_printf_float+0x2dc>)
 8005b1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b22:	f7fb f823 	bl	8000b6c <__aeabi_dcmpun>
 8005b26:	bb88      	cbnz	r0, 8005b8c <_printf_float+0xd0>
 8005b28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b2c:	4b9a      	ldr	r3, [pc, #616]	; (8005d98 <_printf_float+0x2dc>)
 8005b2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b32:	f7fa fffd 	bl	8000b30 <__aeabi_dcmple>
 8005b36:	bb48      	cbnz	r0, 8005b8c <_printf_float+0xd0>
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	4640      	mov	r0, r8
 8005b3e:	4649      	mov	r1, r9
 8005b40:	f7fa ffec 	bl	8000b1c <__aeabi_dcmplt>
 8005b44:	b110      	cbz	r0, 8005b4c <_printf_float+0x90>
 8005b46:	232d      	movs	r3, #45	; 0x2d
 8005b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b4c:	4b93      	ldr	r3, [pc, #588]	; (8005d9c <_printf_float+0x2e0>)
 8005b4e:	4894      	ldr	r0, [pc, #592]	; (8005da0 <_printf_float+0x2e4>)
 8005b50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b54:	bf94      	ite	ls
 8005b56:	4698      	movls	r8, r3
 8005b58:	4680      	movhi	r8, r0
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	6123      	str	r3, [r4, #16]
 8005b5e:	9b05      	ldr	r3, [sp, #20]
 8005b60:	f023 0204 	bic.w	r2, r3, #4
 8005b64:	6022      	str	r2, [r4, #0]
 8005b66:	f04f 0900 	mov.w	r9, #0
 8005b6a:	9700      	str	r7, [sp, #0]
 8005b6c:	4633      	mov	r3, r6
 8005b6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b70:	4621      	mov	r1, r4
 8005b72:	4628      	mov	r0, r5
 8005b74:	f000 f9d8 	bl	8005f28 <_printf_common>
 8005b78:	3001      	adds	r0, #1
 8005b7a:	f040 8090 	bne.w	8005c9e <_printf_float+0x1e2>
 8005b7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b82:	b00d      	add	sp, #52	; 0x34
 8005b84:	ecbd 8b02 	vpop	{d8}
 8005b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b8c:	4642      	mov	r2, r8
 8005b8e:	464b      	mov	r3, r9
 8005b90:	4640      	mov	r0, r8
 8005b92:	4649      	mov	r1, r9
 8005b94:	f7fa ffea 	bl	8000b6c <__aeabi_dcmpun>
 8005b98:	b140      	cbz	r0, 8005bac <_printf_float+0xf0>
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	bfbc      	itt	lt
 8005ba0:	232d      	movlt	r3, #45	; 0x2d
 8005ba2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ba6:	487f      	ldr	r0, [pc, #508]	; (8005da4 <_printf_float+0x2e8>)
 8005ba8:	4b7f      	ldr	r3, [pc, #508]	; (8005da8 <_printf_float+0x2ec>)
 8005baa:	e7d1      	b.n	8005b50 <_printf_float+0x94>
 8005bac:	6863      	ldr	r3, [r4, #4]
 8005bae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005bb2:	9206      	str	r2, [sp, #24]
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	d13f      	bne.n	8005c38 <_printf_float+0x17c>
 8005bb8:	2306      	movs	r3, #6
 8005bba:	6063      	str	r3, [r4, #4]
 8005bbc:	9b05      	ldr	r3, [sp, #20]
 8005bbe:	6861      	ldr	r1, [r4, #4]
 8005bc0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	9303      	str	r3, [sp, #12]
 8005bc8:	ab0a      	add	r3, sp, #40	; 0x28
 8005bca:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005bce:	ab09      	add	r3, sp, #36	; 0x24
 8005bd0:	ec49 8b10 	vmov	d0, r8, r9
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	6022      	str	r2, [r4, #0]
 8005bd8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005bdc:	4628      	mov	r0, r5
 8005bde:	f7ff fecd 	bl	800597c <__cvt>
 8005be2:	9b06      	ldr	r3, [sp, #24]
 8005be4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005be6:	2b47      	cmp	r3, #71	; 0x47
 8005be8:	4680      	mov	r8, r0
 8005bea:	d108      	bne.n	8005bfe <_printf_float+0x142>
 8005bec:	1cc8      	adds	r0, r1, #3
 8005bee:	db02      	blt.n	8005bf6 <_printf_float+0x13a>
 8005bf0:	6863      	ldr	r3, [r4, #4]
 8005bf2:	4299      	cmp	r1, r3
 8005bf4:	dd41      	ble.n	8005c7a <_printf_float+0x1be>
 8005bf6:	f1ab 0b02 	sub.w	fp, fp, #2
 8005bfa:	fa5f fb8b 	uxtb.w	fp, fp
 8005bfe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c02:	d820      	bhi.n	8005c46 <_printf_float+0x18a>
 8005c04:	3901      	subs	r1, #1
 8005c06:	465a      	mov	r2, fp
 8005c08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c0c:	9109      	str	r1, [sp, #36]	; 0x24
 8005c0e:	f7ff ff17 	bl	8005a40 <__exponent>
 8005c12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c14:	1813      	adds	r3, r2, r0
 8005c16:	2a01      	cmp	r2, #1
 8005c18:	4681      	mov	r9, r0
 8005c1a:	6123      	str	r3, [r4, #16]
 8005c1c:	dc02      	bgt.n	8005c24 <_printf_float+0x168>
 8005c1e:	6822      	ldr	r2, [r4, #0]
 8005c20:	07d2      	lsls	r2, r2, #31
 8005c22:	d501      	bpl.n	8005c28 <_printf_float+0x16c>
 8005c24:	3301      	adds	r3, #1
 8005c26:	6123      	str	r3, [r4, #16]
 8005c28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d09c      	beq.n	8005b6a <_printf_float+0xae>
 8005c30:	232d      	movs	r3, #45	; 0x2d
 8005c32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c36:	e798      	b.n	8005b6a <_printf_float+0xae>
 8005c38:	9a06      	ldr	r2, [sp, #24]
 8005c3a:	2a47      	cmp	r2, #71	; 0x47
 8005c3c:	d1be      	bne.n	8005bbc <_printf_float+0x100>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1bc      	bne.n	8005bbc <_printf_float+0x100>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e7b9      	b.n	8005bba <_printf_float+0xfe>
 8005c46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c4a:	d118      	bne.n	8005c7e <_printf_float+0x1c2>
 8005c4c:	2900      	cmp	r1, #0
 8005c4e:	6863      	ldr	r3, [r4, #4]
 8005c50:	dd0b      	ble.n	8005c6a <_printf_float+0x1ae>
 8005c52:	6121      	str	r1, [r4, #16]
 8005c54:	b913      	cbnz	r3, 8005c5c <_printf_float+0x1a0>
 8005c56:	6822      	ldr	r2, [r4, #0]
 8005c58:	07d0      	lsls	r0, r2, #31
 8005c5a:	d502      	bpl.n	8005c62 <_printf_float+0x1a6>
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	440b      	add	r3, r1
 8005c60:	6123      	str	r3, [r4, #16]
 8005c62:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c64:	f04f 0900 	mov.w	r9, #0
 8005c68:	e7de      	b.n	8005c28 <_printf_float+0x16c>
 8005c6a:	b913      	cbnz	r3, 8005c72 <_printf_float+0x1b6>
 8005c6c:	6822      	ldr	r2, [r4, #0]
 8005c6e:	07d2      	lsls	r2, r2, #31
 8005c70:	d501      	bpl.n	8005c76 <_printf_float+0x1ba>
 8005c72:	3302      	adds	r3, #2
 8005c74:	e7f4      	b.n	8005c60 <_printf_float+0x1a4>
 8005c76:	2301      	movs	r3, #1
 8005c78:	e7f2      	b.n	8005c60 <_printf_float+0x1a4>
 8005c7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c80:	4299      	cmp	r1, r3
 8005c82:	db05      	blt.n	8005c90 <_printf_float+0x1d4>
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	6121      	str	r1, [r4, #16]
 8005c88:	07d8      	lsls	r0, r3, #31
 8005c8a:	d5ea      	bpl.n	8005c62 <_printf_float+0x1a6>
 8005c8c:	1c4b      	adds	r3, r1, #1
 8005c8e:	e7e7      	b.n	8005c60 <_printf_float+0x1a4>
 8005c90:	2900      	cmp	r1, #0
 8005c92:	bfd4      	ite	le
 8005c94:	f1c1 0202 	rsble	r2, r1, #2
 8005c98:	2201      	movgt	r2, #1
 8005c9a:	4413      	add	r3, r2
 8005c9c:	e7e0      	b.n	8005c60 <_printf_float+0x1a4>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	055a      	lsls	r2, r3, #21
 8005ca2:	d407      	bmi.n	8005cb4 <_printf_float+0x1f8>
 8005ca4:	6923      	ldr	r3, [r4, #16]
 8005ca6:	4642      	mov	r2, r8
 8005ca8:	4631      	mov	r1, r6
 8005caa:	4628      	mov	r0, r5
 8005cac:	47b8      	blx	r7
 8005cae:	3001      	adds	r0, #1
 8005cb0:	d12c      	bne.n	8005d0c <_printf_float+0x250>
 8005cb2:	e764      	b.n	8005b7e <_printf_float+0xc2>
 8005cb4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005cb8:	f240 80e0 	bls.w	8005e7c <_printf_float+0x3c0>
 8005cbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f7fa ff20 	bl	8000b08 <__aeabi_dcmpeq>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d034      	beq.n	8005d36 <_printf_float+0x27a>
 8005ccc:	4a37      	ldr	r2, [pc, #220]	; (8005dac <_printf_float+0x2f0>)
 8005cce:	2301      	movs	r3, #1
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	47b8      	blx	r7
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	f43f af51 	beq.w	8005b7e <_printf_float+0xc2>
 8005cdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	db02      	blt.n	8005cea <_printf_float+0x22e>
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	07d8      	lsls	r0, r3, #31
 8005ce8:	d510      	bpl.n	8005d0c <_printf_float+0x250>
 8005cea:	ee18 3a10 	vmov	r3, s16
 8005cee:	4652      	mov	r2, sl
 8005cf0:	4631      	mov	r1, r6
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	47b8      	blx	r7
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	f43f af41 	beq.w	8005b7e <_printf_float+0xc2>
 8005cfc:	f04f 0800 	mov.w	r8, #0
 8005d00:	f104 091a 	add.w	r9, r4, #26
 8005d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d06:	3b01      	subs	r3, #1
 8005d08:	4543      	cmp	r3, r8
 8005d0a:	dc09      	bgt.n	8005d20 <_printf_float+0x264>
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	079b      	lsls	r3, r3, #30
 8005d10:	f100 8105 	bmi.w	8005f1e <_printf_float+0x462>
 8005d14:	68e0      	ldr	r0, [r4, #12]
 8005d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d18:	4298      	cmp	r0, r3
 8005d1a:	bfb8      	it	lt
 8005d1c:	4618      	movlt	r0, r3
 8005d1e:	e730      	b.n	8005b82 <_printf_float+0xc6>
 8005d20:	2301      	movs	r3, #1
 8005d22:	464a      	mov	r2, r9
 8005d24:	4631      	mov	r1, r6
 8005d26:	4628      	mov	r0, r5
 8005d28:	47b8      	blx	r7
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	f43f af27 	beq.w	8005b7e <_printf_float+0xc2>
 8005d30:	f108 0801 	add.w	r8, r8, #1
 8005d34:	e7e6      	b.n	8005d04 <_printf_float+0x248>
 8005d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	dc39      	bgt.n	8005db0 <_printf_float+0x2f4>
 8005d3c:	4a1b      	ldr	r2, [pc, #108]	; (8005dac <_printf_float+0x2f0>)
 8005d3e:	2301      	movs	r3, #1
 8005d40:	4631      	mov	r1, r6
 8005d42:	4628      	mov	r0, r5
 8005d44:	47b8      	blx	r7
 8005d46:	3001      	adds	r0, #1
 8005d48:	f43f af19 	beq.w	8005b7e <_printf_float+0xc2>
 8005d4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d50:	4313      	orrs	r3, r2
 8005d52:	d102      	bne.n	8005d5a <_printf_float+0x29e>
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	07d9      	lsls	r1, r3, #31
 8005d58:	d5d8      	bpl.n	8005d0c <_printf_float+0x250>
 8005d5a:	ee18 3a10 	vmov	r3, s16
 8005d5e:	4652      	mov	r2, sl
 8005d60:	4631      	mov	r1, r6
 8005d62:	4628      	mov	r0, r5
 8005d64:	47b8      	blx	r7
 8005d66:	3001      	adds	r0, #1
 8005d68:	f43f af09 	beq.w	8005b7e <_printf_float+0xc2>
 8005d6c:	f04f 0900 	mov.w	r9, #0
 8005d70:	f104 0a1a 	add.w	sl, r4, #26
 8005d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d76:	425b      	negs	r3, r3
 8005d78:	454b      	cmp	r3, r9
 8005d7a:	dc01      	bgt.n	8005d80 <_printf_float+0x2c4>
 8005d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d7e:	e792      	b.n	8005ca6 <_printf_float+0x1ea>
 8005d80:	2301      	movs	r3, #1
 8005d82:	4652      	mov	r2, sl
 8005d84:	4631      	mov	r1, r6
 8005d86:	4628      	mov	r0, r5
 8005d88:	47b8      	blx	r7
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	f43f aef7 	beq.w	8005b7e <_printf_float+0xc2>
 8005d90:	f109 0901 	add.w	r9, r9, #1
 8005d94:	e7ee      	b.n	8005d74 <_printf_float+0x2b8>
 8005d96:	bf00      	nop
 8005d98:	7fefffff 	.word	0x7fefffff
 8005d9c:	08008a5c 	.word	0x08008a5c
 8005da0:	08008a60 	.word	0x08008a60
 8005da4:	08008a68 	.word	0x08008a68
 8005da8:	08008a64 	.word	0x08008a64
 8005dac:	08008a6c 	.word	0x08008a6c
 8005db0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005db2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005db4:	429a      	cmp	r2, r3
 8005db6:	bfa8      	it	ge
 8005db8:	461a      	movge	r2, r3
 8005dba:	2a00      	cmp	r2, #0
 8005dbc:	4691      	mov	r9, r2
 8005dbe:	dc37      	bgt.n	8005e30 <_printf_float+0x374>
 8005dc0:	f04f 0b00 	mov.w	fp, #0
 8005dc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dc8:	f104 021a 	add.w	r2, r4, #26
 8005dcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005dce:	9305      	str	r3, [sp, #20]
 8005dd0:	eba3 0309 	sub.w	r3, r3, r9
 8005dd4:	455b      	cmp	r3, fp
 8005dd6:	dc33      	bgt.n	8005e40 <_printf_float+0x384>
 8005dd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	db3b      	blt.n	8005e58 <_printf_float+0x39c>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	07da      	lsls	r2, r3, #31
 8005de4:	d438      	bmi.n	8005e58 <_printf_float+0x39c>
 8005de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005de8:	9a05      	ldr	r2, [sp, #20]
 8005dea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dec:	1a9a      	subs	r2, r3, r2
 8005dee:	eba3 0901 	sub.w	r9, r3, r1
 8005df2:	4591      	cmp	r9, r2
 8005df4:	bfa8      	it	ge
 8005df6:	4691      	movge	r9, r2
 8005df8:	f1b9 0f00 	cmp.w	r9, #0
 8005dfc:	dc35      	bgt.n	8005e6a <_printf_float+0x3ae>
 8005dfe:	f04f 0800 	mov.w	r8, #0
 8005e02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e06:	f104 0a1a 	add.w	sl, r4, #26
 8005e0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e0e:	1a9b      	subs	r3, r3, r2
 8005e10:	eba3 0309 	sub.w	r3, r3, r9
 8005e14:	4543      	cmp	r3, r8
 8005e16:	f77f af79 	ble.w	8005d0c <_printf_float+0x250>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	4652      	mov	r2, sl
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4628      	mov	r0, r5
 8005e22:	47b8      	blx	r7
 8005e24:	3001      	adds	r0, #1
 8005e26:	f43f aeaa 	beq.w	8005b7e <_printf_float+0xc2>
 8005e2a:	f108 0801 	add.w	r8, r8, #1
 8005e2e:	e7ec      	b.n	8005e0a <_printf_float+0x34e>
 8005e30:	4613      	mov	r3, r2
 8005e32:	4631      	mov	r1, r6
 8005e34:	4642      	mov	r2, r8
 8005e36:	4628      	mov	r0, r5
 8005e38:	47b8      	blx	r7
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d1c0      	bne.n	8005dc0 <_printf_float+0x304>
 8005e3e:	e69e      	b.n	8005b7e <_printf_float+0xc2>
 8005e40:	2301      	movs	r3, #1
 8005e42:	4631      	mov	r1, r6
 8005e44:	4628      	mov	r0, r5
 8005e46:	9205      	str	r2, [sp, #20]
 8005e48:	47b8      	blx	r7
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	f43f ae97 	beq.w	8005b7e <_printf_float+0xc2>
 8005e50:	9a05      	ldr	r2, [sp, #20]
 8005e52:	f10b 0b01 	add.w	fp, fp, #1
 8005e56:	e7b9      	b.n	8005dcc <_printf_float+0x310>
 8005e58:	ee18 3a10 	vmov	r3, s16
 8005e5c:	4652      	mov	r2, sl
 8005e5e:	4631      	mov	r1, r6
 8005e60:	4628      	mov	r0, r5
 8005e62:	47b8      	blx	r7
 8005e64:	3001      	adds	r0, #1
 8005e66:	d1be      	bne.n	8005de6 <_printf_float+0x32a>
 8005e68:	e689      	b.n	8005b7e <_printf_float+0xc2>
 8005e6a:	9a05      	ldr	r2, [sp, #20]
 8005e6c:	464b      	mov	r3, r9
 8005e6e:	4442      	add	r2, r8
 8005e70:	4631      	mov	r1, r6
 8005e72:	4628      	mov	r0, r5
 8005e74:	47b8      	blx	r7
 8005e76:	3001      	adds	r0, #1
 8005e78:	d1c1      	bne.n	8005dfe <_printf_float+0x342>
 8005e7a:	e680      	b.n	8005b7e <_printf_float+0xc2>
 8005e7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e7e:	2a01      	cmp	r2, #1
 8005e80:	dc01      	bgt.n	8005e86 <_printf_float+0x3ca>
 8005e82:	07db      	lsls	r3, r3, #31
 8005e84:	d538      	bpl.n	8005ef8 <_printf_float+0x43c>
 8005e86:	2301      	movs	r3, #1
 8005e88:	4642      	mov	r2, r8
 8005e8a:	4631      	mov	r1, r6
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	47b8      	blx	r7
 8005e90:	3001      	adds	r0, #1
 8005e92:	f43f ae74 	beq.w	8005b7e <_printf_float+0xc2>
 8005e96:	ee18 3a10 	vmov	r3, s16
 8005e9a:	4652      	mov	r2, sl
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	47b8      	blx	r7
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	f43f ae6b 	beq.w	8005b7e <_printf_float+0xc2>
 8005ea8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005eac:	2200      	movs	r2, #0
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f7fa fe2a 	bl	8000b08 <__aeabi_dcmpeq>
 8005eb4:	b9d8      	cbnz	r0, 8005eee <_printf_float+0x432>
 8005eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eb8:	f108 0201 	add.w	r2, r8, #1
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	4631      	mov	r1, r6
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	47b8      	blx	r7
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d10e      	bne.n	8005ee6 <_printf_float+0x42a>
 8005ec8:	e659      	b.n	8005b7e <_printf_float+0xc2>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	4652      	mov	r2, sl
 8005ece:	4631      	mov	r1, r6
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	47b8      	blx	r7
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	f43f ae52 	beq.w	8005b7e <_printf_float+0xc2>
 8005eda:	f108 0801 	add.w	r8, r8, #1
 8005ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	4543      	cmp	r3, r8
 8005ee4:	dcf1      	bgt.n	8005eca <_printf_float+0x40e>
 8005ee6:	464b      	mov	r3, r9
 8005ee8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005eec:	e6dc      	b.n	8005ca8 <_printf_float+0x1ec>
 8005eee:	f04f 0800 	mov.w	r8, #0
 8005ef2:	f104 0a1a 	add.w	sl, r4, #26
 8005ef6:	e7f2      	b.n	8005ede <_printf_float+0x422>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	4642      	mov	r2, r8
 8005efc:	e7df      	b.n	8005ebe <_printf_float+0x402>
 8005efe:	2301      	movs	r3, #1
 8005f00:	464a      	mov	r2, r9
 8005f02:	4631      	mov	r1, r6
 8005f04:	4628      	mov	r0, r5
 8005f06:	47b8      	blx	r7
 8005f08:	3001      	adds	r0, #1
 8005f0a:	f43f ae38 	beq.w	8005b7e <_printf_float+0xc2>
 8005f0e:	f108 0801 	add.w	r8, r8, #1
 8005f12:	68e3      	ldr	r3, [r4, #12]
 8005f14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f16:	1a5b      	subs	r3, r3, r1
 8005f18:	4543      	cmp	r3, r8
 8005f1a:	dcf0      	bgt.n	8005efe <_printf_float+0x442>
 8005f1c:	e6fa      	b.n	8005d14 <_printf_float+0x258>
 8005f1e:	f04f 0800 	mov.w	r8, #0
 8005f22:	f104 0919 	add.w	r9, r4, #25
 8005f26:	e7f4      	b.n	8005f12 <_printf_float+0x456>

08005f28 <_printf_common>:
 8005f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f2c:	4616      	mov	r6, r2
 8005f2e:	4699      	mov	r9, r3
 8005f30:	688a      	ldr	r2, [r1, #8]
 8005f32:	690b      	ldr	r3, [r1, #16]
 8005f34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	bfb8      	it	lt
 8005f3c:	4613      	movlt	r3, r2
 8005f3e:	6033      	str	r3, [r6, #0]
 8005f40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f44:	4607      	mov	r7, r0
 8005f46:	460c      	mov	r4, r1
 8005f48:	b10a      	cbz	r2, 8005f4e <_printf_common+0x26>
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	6033      	str	r3, [r6, #0]
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	0699      	lsls	r1, r3, #26
 8005f52:	bf42      	ittt	mi
 8005f54:	6833      	ldrmi	r3, [r6, #0]
 8005f56:	3302      	addmi	r3, #2
 8005f58:	6033      	strmi	r3, [r6, #0]
 8005f5a:	6825      	ldr	r5, [r4, #0]
 8005f5c:	f015 0506 	ands.w	r5, r5, #6
 8005f60:	d106      	bne.n	8005f70 <_printf_common+0x48>
 8005f62:	f104 0a19 	add.w	sl, r4, #25
 8005f66:	68e3      	ldr	r3, [r4, #12]
 8005f68:	6832      	ldr	r2, [r6, #0]
 8005f6a:	1a9b      	subs	r3, r3, r2
 8005f6c:	42ab      	cmp	r3, r5
 8005f6e:	dc26      	bgt.n	8005fbe <_printf_common+0x96>
 8005f70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f74:	1e13      	subs	r3, r2, #0
 8005f76:	6822      	ldr	r2, [r4, #0]
 8005f78:	bf18      	it	ne
 8005f7a:	2301      	movne	r3, #1
 8005f7c:	0692      	lsls	r2, r2, #26
 8005f7e:	d42b      	bmi.n	8005fd8 <_printf_common+0xb0>
 8005f80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f84:	4649      	mov	r1, r9
 8005f86:	4638      	mov	r0, r7
 8005f88:	47c0      	blx	r8
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	d01e      	beq.n	8005fcc <_printf_common+0xa4>
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	68e5      	ldr	r5, [r4, #12]
 8005f92:	6832      	ldr	r2, [r6, #0]
 8005f94:	f003 0306 	and.w	r3, r3, #6
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	bf08      	it	eq
 8005f9c:	1aad      	subeq	r5, r5, r2
 8005f9e:	68a3      	ldr	r3, [r4, #8]
 8005fa0:	6922      	ldr	r2, [r4, #16]
 8005fa2:	bf0c      	ite	eq
 8005fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fa8:	2500      	movne	r5, #0
 8005faa:	4293      	cmp	r3, r2
 8005fac:	bfc4      	itt	gt
 8005fae:	1a9b      	subgt	r3, r3, r2
 8005fb0:	18ed      	addgt	r5, r5, r3
 8005fb2:	2600      	movs	r6, #0
 8005fb4:	341a      	adds	r4, #26
 8005fb6:	42b5      	cmp	r5, r6
 8005fb8:	d11a      	bne.n	8005ff0 <_printf_common+0xc8>
 8005fba:	2000      	movs	r0, #0
 8005fbc:	e008      	b.n	8005fd0 <_printf_common+0xa8>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	4652      	mov	r2, sl
 8005fc2:	4649      	mov	r1, r9
 8005fc4:	4638      	mov	r0, r7
 8005fc6:	47c0      	blx	r8
 8005fc8:	3001      	adds	r0, #1
 8005fca:	d103      	bne.n	8005fd4 <_printf_common+0xac>
 8005fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd4:	3501      	adds	r5, #1
 8005fd6:	e7c6      	b.n	8005f66 <_printf_common+0x3e>
 8005fd8:	18e1      	adds	r1, r4, r3
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	2030      	movs	r0, #48	; 0x30
 8005fde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fe2:	4422      	add	r2, r4
 8005fe4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fe8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fec:	3302      	adds	r3, #2
 8005fee:	e7c7      	b.n	8005f80 <_printf_common+0x58>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	4622      	mov	r2, r4
 8005ff4:	4649      	mov	r1, r9
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	47c0      	blx	r8
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	d0e6      	beq.n	8005fcc <_printf_common+0xa4>
 8005ffe:	3601      	adds	r6, #1
 8006000:	e7d9      	b.n	8005fb6 <_printf_common+0x8e>
	...

08006004 <_printf_i>:
 8006004:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006008:	7e0f      	ldrb	r7, [r1, #24]
 800600a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800600c:	2f78      	cmp	r7, #120	; 0x78
 800600e:	4691      	mov	r9, r2
 8006010:	4680      	mov	r8, r0
 8006012:	460c      	mov	r4, r1
 8006014:	469a      	mov	sl, r3
 8006016:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800601a:	d807      	bhi.n	800602c <_printf_i+0x28>
 800601c:	2f62      	cmp	r7, #98	; 0x62
 800601e:	d80a      	bhi.n	8006036 <_printf_i+0x32>
 8006020:	2f00      	cmp	r7, #0
 8006022:	f000 80d8 	beq.w	80061d6 <_printf_i+0x1d2>
 8006026:	2f58      	cmp	r7, #88	; 0x58
 8006028:	f000 80a3 	beq.w	8006172 <_printf_i+0x16e>
 800602c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006030:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006034:	e03a      	b.n	80060ac <_printf_i+0xa8>
 8006036:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800603a:	2b15      	cmp	r3, #21
 800603c:	d8f6      	bhi.n	800602c <_printf_i+0x28>
 800603e:	a101      	add	r1, pc, #4	; (adr r1, 8006044 <_printf_i+0x40>)
 8006040:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006044:	0800609d 	.word	0x0800609d
 8006048:	080060b1 	.word	0x080060b1
 800604c:	0800602d 	.word	0x0800602d
 8006050:	0800602d 	.word	0x0800602d
 8006054:	0800602d 	.word	0x0800602d
 8006058:	0800602d 	.word	0x0800602d
 800605c:	080060b1 	.word	0x080060b1
 8006060:	0800602d 	.word	0x0800602d
 8006064:	0800602d 	.word	0x0800602d
 8006068:	0800602d 	.word	0x0800602d
 800606c:	0800602d 	.word	0x0800602d
 8006070:	080061bd 	.word	0x080061bd
 8006074:	080060e1 	.word	0x080060e1
 8006078:	0800619f 	.word	0x0800619f
 800607c:	0800602d 	.word	0x0800602d
 8006080:	0800602d 	.word	0x0800602d
 8006084:	080061df 	.word	0x080061df
 8006088:	0800602d 	.word	0x0800602d
 800608c:	080060e1 	.word	0x080060e1
 8006090:	0800602d 	.word	0x0800602d
 8006094:	0800602d 	.word	0x0800602d
 8006098:	080061a7 	.word	0x080061a7
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	1d1a      	adds	r2, r3, #4
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	602a      	str	r2, [r5, #0]
 80060a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060ac:	2301      	movs	r3, #1
 80060ae:	e0a3      	b.n	80061f8 <_printf_i+0x1f4>
 80060b0:	6820      	ldr	r0, [r4, #0]
 80060b2:	6829      	ldr	r1, [r5, #0]
 80060b4:	0606      	lsls	r6, r0, #24
 80060b6:	f101 0304 	add.w	r3, r1, #4
 80060ba:	d50a      	bpl.n	80060d2 <_printf_i+0xce>
 80060bc:	680e      	ldr	r6, [r1, #0]
 80060be:	602b      	str	r3, [r5, #0]
 80060c0:	2e00      	cmp	r6, #0
 80060c2:	da03      	bge.n	80060cc <_printf_i+0xc8>
 80060c4:	232d      	movs	r3, #45	; 0x2d
 80060c6:	4276      	negs	r6, r6
 80060c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060cc:	485e      	ldr	r0, [pc, #376]	; (8006248 <_printf_i+0x244>)
 80060ce:	230a      	movs	r3, #10
 80060d0:	e019      	b.n	8006106 <_printf_i+0x102>
 80060d2:	680e      	ldr	r6, [r1, #0]
 80060d4:	602b      	str	r3, [r5, #0]
 80060d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060da:	bf18      	it	ne
 80060dc:	b236      	sxthne	r6, r6
 80060de:	e7ef      	b.n	80060c0 <_printf_i+0xbc>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	6820      	ldr	r0, [r4, #0]
 80060e4:	1d19      	adds	r1, r3, #4
 80060e6:	6029      	str	r1, [r5, #0]
 80060e8:	0601      	lsls	r1, r0, #24
 80060ea:	d501      	bpl.n	80060f0 <_printf_i+0xec>
 80060ec:	681e      	ldr	r6, [r3, #0]
 80060ee:	e002      	b.n	80060f6 <_printf_i+0xf2>
 80060f0:	0646      	lsls	r6, r0, #25
 80060f2:	d5fb      	bpl.n	80060ec <_printf_i+0xe8>
 80060f4:	881e      	ldrh	r6, [r3, #0]
 80060f6:	4854      	ldr	r0, [pc, #336]	; (8006248 <_printf_i+0x244>)
 80060f8:	2f6f      	cmp	r7, #111	; 0x6f
 80060fa:	bf0c      	ite	eq
 80060fc:	2308      	moveq	r3, #8
 80060fe:	230a      	movne	r3, #10
 8006100:	2100      	movs	r1, #0
 8006102:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006106:	6865      	ldr	r5, [r4, #4]
 8006108:	60a5      	str	r5, [r4, #8]
 800610a:	2d00      	cmp	r5, #0
 800610c:	bfa2      	ittt	ge
 800610e:	6821      	ldrge	r1, [r4, #0]
 8006110:	f021 0104 	bicge.w	r1, r1, #4
 8006114:	6021      	strge	r1, [r4, #0]
 8006116:	b90e      	cbnz	r6, 800611c <_printf_i+0x118>
 8006118:	2d00      	cmp	r5, #0
 800611a:	d04d      	beq.n	80061b8 <_printf_i+0x1b4>
 800611c:	4615      	mov	r5, r2
 800611e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006122:	fb03 6711 	mls	r7, r3, r1, r6
 8006126:	5dc7      	ldrb	r7, [r0, r7]
 8006128:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800612c:	4637      	mov	r7, r6
 800612e:	42bb      	cmp	r3, r7
 8006130:	460e      	mov	r6, r1
 8006132:	d9f4      	bls.n	800611e <_printf_i+0x11a>
 8006134:	2b08      	cmp	r3, #8
 8006136:	d10b      	bne.n	8006150 <_printf_i+0x14c>
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	07de      	lsls	r6, r3, #31
 800613c:	d508      	bpl.n	8006150 <_printf_i+0x14c>
 800613e:	6923      	ldr	r3, [r4, #16]
 8006140:	6861      	ldr	r1, [r4, #4]
 8006142:	4299      	cmp	r1, r3
 8006144:	bfde      	ittt	le
 8006146:	2330      	movle	r3, #48	; 0x30
 8006148:	f805 3c01 	strble.w	r3, [r5, #-1]
 800614c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006150:	1b52      	subs	r2, r2, r5
 8006152:	6122      	str	r2, [r4, #16]
 8006154:	f8cd a000 	str.w	sl, [sp]
 8006158:	464b      	mov	r3, r9
 800615a:	aa03      	add	r2, sp, #12
 800615c:	4621      	mov	r1, r4
 800615e:	4640      	mov	r0, r8
 8006160:	f7ff fee2 	bl	8005f28 <_printf_common>
 8006164:	3001      	adds	r0, #1
 8006166:	d14c      	bne.n	8006202 <_printf_i+0x1fe>
 8006168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800616c:	b004      	add	sp, #16
 800616e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006172:	4835      	ldr	r0, [pc, #212]	; (8006248 <_printf_i+0x244>)
 8006174:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006178:	6829      	ldr	r1, [r5, #0]
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006180:	6029      	str	r1, [r5, #0]
 8006182:	061d      	lsls	r5, r3, #24
 8006184:	d514      	bpl.n	80061b0 <_printf_i+0x1ac>
 8006186:	07df      	lsls	r7, r3, #31
 8006188:	bf44      	itt	mi
 800618a:	f043 0320 	orrmi.w	r3, r3, #32
 800618e:	6023      	strmi	r3, [r4, #0]
 8006190:	b91e      	cbnz	r6, 800619a <_printf_i+0x196>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	f023 0320 	bic.w	r3, r3, #32
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	2310      	movs	r3, #16
 800619c:	e7b0      	b.n	8006100 <_printf_i+0xfc>
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	f043 0320 	orr.w	r3, r3, #32
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	2378      	movs	r3, #120	; 0x78
 80061a8:	4828      	ldr	r0, [pc, #160]	; (800624c <_printf_i+0x248>)
 80061aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061ae:	e7e3      	b.n	8006178 <_printf_i+0x174>
 80061b0:	0659      	lsls	r1, r3, #25
 80061b2:	bf48      	it	mi
 80061b4:	b2b6      	uxthmi	r6, r6
 80061b6:	e7e6      	b.n	8006186 <_printf_i+0x182>
 80061b8:	4615      	mov	r5, r2
 80061ba:	e7bb      	b.n	8006134 <_printf_i+0x130>
 80061bc:	682b      	ldr	r3, [r5, #0]
 80061be:	6826      	ldr	r6, [r4, #0]
 80061c0:	6961      	ldr	r1, [r4, #20]
 80061c2:	1d18      	adds	r0, r3, #4
 80061c4:	6028      	str	r0, [r5, #0]
 80061c6:	0635      	lsls	r5, r6, #24
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	d501      	bpl.n	80061d0 <_printf_i+0x1cc>
 80061cc:	6019      	str	r1, [r3, #0]
 80061ce:	e002      	b.n	80061d6 <_printf_i+0x1d2>
 80061d0:	0670      	lsls	r0, r6, #25
 80061d2:	d5fb      	bpl.n	80061cc <_printf_i+0x1c8>
 80061d4:	8019      	strh	r1, [r3, #0]
 80061d6:	2300      	movs	r3, #0
 80061d8:	6123      	str	r3, [r4, #16]
 80061da:	4615      	mov	r5, r2
 80061dc:	e7ba      	b.n	8006154 <_printf_i+0x150>
 80061de:	682b      	ldr	r3, [r5, #0]
 80061e0:	1d1a      	adds	r2, r3, #4
 80061e2:	602a      	str	r2, [r5, #0]
 80061e4:	681d      	ldr	r5, [r3, #0]
 80061e6:	6862      	ldr	r2, [r4, #4]
 80061e8:	2100      	movs	r1, #0
 80061ea:	4628      	mov	r0, r5
 80061ec:	f7fa f818 	bl	8000220 <memchr>
 80061f0:	b108      	cbz	r0, 80061f6 <_printf_i+0x1f2>
 80061f2:	1b40      	subs	r0, r0, r5
 80061f4:	6060      	str	r0, [r4, #4]
 80061f6:	6863      	ldr	r3, [r4, #4]
 80061f8:	6123      	str	r3, [r4, #16]
 80061fa:	2300      	movs	r3, #0
 80061fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006200:	e7a8      	b.n	8006154 <_printf_i+0x150>
 8006202:	6923      	ldr	r3, [r4, #16]
 8006204:	462a      	mov	r2, r5
 8006206:	4649      	mov	r1, r9
 8006208:	4640      	mov	r0, r8
 800620a:	47d0      	blx	sl
 800620c:	3001      	adds	r0, #1
 800620e:	d0ab      	beq.n	8006168 <_printf_i+0x164>
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	079b      	lsls	r3, r3, #30
 8006214:	d413      	bmi.n	800623e <_printf_i+0x23a>
 8006216:	68e0      	ldr	r0, [r4, #12]
 8006218:	9b03      	ldr	r3, [sp, #12]
 800621a:	4298      	cmp	r0, r3
 800621c:	bfb8      	it	lt
 800621e:	4618      	movlt	r0, r3
 8006220:	e7a4      	b.n	800616c <_printf_i+0x168>
 8006222:	2301      	movs	r3, #1
 8006224:	4632      	mov	r2, r6
 8006226:	4649      	mov	r1, r9
 8006228:	4640      	mov	r0, r8
 800622a:	47d0      	blx	sl
 800622c:	3001      	adds	r0, #1
 800622e:	d09b      	beq.n	8006168 <_printf_i+0x164>
 8006230:	3501      	adds	r5, #1
 8006232:	68e3      	ldr	r3, [r4, #12]
 8006234:	9903      	ldr	r1, [sp, #12]
 8006236:	1a5b      	subs	r3, r3, r1
 8006238:	42ab      	cmp	r3, r5
 800623a:	dcf2      	bgt.n	8006222 <_printf_i+0x21e>
 800623c:	e7eb      	b.n	8006216 <_printf_i+0x212>
 800623e:	2500      	movs	r5, #0
 8006240:	f104 0619 	add.w	r6, r4, #25
 8006244:	e7f5      	b.n	8006232 <_printf_i+0x22e>
 8006246:	bf00      	nop
 8006248:	08008a6e 	.word	0x08008a6e
 800624c:	08008a7f 	.word	0x08008a7f

08006250 <iprintf>:
 8006250:	b40f      	push	{r0, r1, r2, r3}
 8006252:	4b0a      	ldr	r3, [pc, #40]	; (800627c <iprintf+0x2c>)
 8006254:	b513      	push	{r0, r1, r4, lr}
 8006256:	681c      	ldr	r4, [r3, #0]
 8006258:	b124      	cbz	r4, 8006264 <iprintf+0x14>
 800625a:	69a3      	ldr	r3, [r4, #24]
 800625c:	b913      	cbnz	r3, 8006264 <iprintf+0x14>
 800625e:	4620      	mov	r0, r4
 8006260:	f001 f8da 	bl	8007418 <__sinit>
 8006264:	ab05      	add	r3, sp, #20
 8006266:	9a04      	ldr	r2, [sp, #16]
 8006268:	68a1      	ldr	r1, [r4, #8]
 800626a:	9301      	str	r3, [sp, #4]
 800626c:	4620      	mov	r0, r4
 800626e:	f001 fe97 	bl	8007fa0 <_vfiprintf_r>
 8006272:	b002      	add	sp, #8
 8006274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006278:	b004      	add	sp, #16
 800627a:	4770      	bx	lr
 800627c:	2000000c 	.word	0x2000000c

08006280 <_puts_r>:
 8006280:	b570      	push	{r4, r5, r6, lr}
 8006282:	460e      	mov	r6, r1
 8006284:	4605      	mov	r5, r0
 8006286:	b118      	cbz	r0, 8006290 <_puts_r+0x10>
 8006288:	6983      	ldr	r3, [r0, #24]
 800628a:	b90b      	cbnz	r3, 8006290 <_puts_r+0x10>
 800628c:	f001 f8c4 	bl	8007418 <__sinit>
 8006290:	69ab      	ldr	r3, [r5, #24]
 8006292:	68ac      	ldr	r4, [r5, #8]
 8006294:	b913      	cbnz	r3, 800629c <_puts_r+0x1c>
 8006296:	4628      	mov	r0, r5
 8006298:	f001 f8be 	bl	8007418 <__sinit>
 800629c:	4b2c      	ldr	r3, [pc, #176]	; (8006350 <_puts_r+0xd0>)
 800629e:	429c      	cmp	r4, r3
 80062a0:	d120      	bne.n	80062e4 <_puts_r+0x64>
 80062a2:	686c      	ldr	r4, [r5, #4]
 80062a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062a6:	07db      	lsls	r3, r3, #31
 80062a8:	d405      	bmi.n	80062b6 <_puts_r+0x36>
 80062aa:	89a3      	ldrh	r3, [r4, #12]
 80062ac:	0598      	lsls	r0, r3, #22
 80062ae:	d402      	bmi.n	80062b6 <_puts_r+0x36>
 80062b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062b2:	f001 f954 	bl	800755e <__retarget_lock_acquire_recursive>
 80062b6:	89a3      	ldrh	r3, [r4, #12]
 80062b8:	0719      	lsls	r1, r3, #28
 80062ba:	d51d      	bpl.n	80062f8 <_puts_r+0x78>
 80062bc:	6923      	ldr	r3, [r4, #16]
 80062be:	b1db      	cbz	r3, 80062f8 <_puts_r+0x78>
 80062c0:	3e01      	subs	r6, #1
 80062c2:	68a3      	ldr	r3, [r4, #8]
 80062c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062c8:	3b01      	subs	r3, #1
 80062ca:	60a3      	str	r3, [r4, #8]
 80062cc:	bb39      	cbnz	r1, 800631e <_puts_r+0x9e>
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	da38      	bge.n	8006344 <_puts_r+0xc4>
 80062d2:	4622      	mov	r2, r4
 80062d4:	210a      	movs	r1, #10
 80062d6:	4628      	mov	r0, r5
 80062d8:	f000 f848 	bl	800636c <__swbuf_r>
 80062dc:	3001      	adds	r0, #1
 80062de:	d011      	beq.n	8006304 <_puts_r+0x84>
 80062e0:	250a      	movs	r5, #10
 80062e2:	e011      	b.n	8006308 <_puts_r+0x88>
 80062e4:	4b1b      	ldr	r3, [pc, #108]	; (8006354 <_puts_r+0xd4>)
 80062e6:	429c      	cmp	r4, r3
 80062e8:	d101      	bne.n	80062ee <_puts_r+0x6e>
 80062ea:	68ac      	ldr	r4, [r5, #8]
 80062ec:	e7da      	b.n	80062a4 <_puts_r+0x24>
 80062ee:	4b1a      	ldr	r3, [pc, #104]	; (8006358 <_puts_r+0xd8>)
 80062f0:	429c      	cmp	r4, r3
 80062f2:	bf08      	it	eq
 80062f4:	68ec      	ldreq	r4, [r5, #12]
 80062f6:	e7d5      	b.n	80062a4 <_puts_r+0x24>
 80062f8:	4621      	mov	r1, r4
 80062fa:	4628      	mov	r0, r5
 80062fc:	f000 f888 	bl	8006410 <__swsetup_r>
 8006300:	2800      	cmp	r0, #0
 8006302:	d0dd      	beq.n	80062c0 <_puts_r+0x40>
 8006304:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006308:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800630a:	07da      	lsls	r2, r3, #31
 800630c:	d405      	bmi.n	800631a <_puts_r+0x9a>
 800630e:	89a3      	ldrh	r3, [r4, #12]
 8006310:	059b      	lsls	r3, r3, #22
 8006312:	d402      	bmi.n	800631a <_puts_r+0x9a>
 8006314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006316:	f001 f923 	bl	8007560 <__retarget_lock_release_recursive>
 800631a:	4628      	mov	r0, r5
 800631c:	bd70      	pop	{r4, r5, r6, pc}
 800631e:	2b00      	cmp	r3, #0
 8006320:	da04      	bge.n	800632c <_puts_r+0xac>
 8006322:	69a2      	ldr	r2, [r4, #24]
 8006324:	429a      	cmp	r2, r3
 8006326:	dc06      	bgt.n	8006336 <_puts_r+0xb6>
 8006328:	290a      	cmp	r1, #10
 800632a:	d004      	beq.n	8006336 <_puts_r+0xb6>
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	6022      	str	r2, [r4, #0]
 8006332:	7019      	strb	r1, [r3, #0]
 8006334:	e7c5      	b.n	80062c2 <_puts_r+0x42>
 8006336:	4622      	mov	r2, r4
 8006338:	4628      	mov	r0, r5
 800633a:	f000 f817 	bl	800636c <__swbuf_r>
 800633e:	3001      	adds	r0, #1
 8006340:	d1bf      	bne.n	80062c2 <_puts_r+0x42>
 8006342:	e7df      	b.n	8006304 <_puts_r+0x84>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	250a      	movs	r5, #10
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	6022      	str	r2, [r4, #0]
 800634c:	701d      	strb	r5, [r3, #0]
 800634e:	e7db      	b.n	8006308 <_puts_r+0x88>
 8006350:	08008b40 	.word	0x08008b40
 8006354:	08008b60 	.word	0x08008b60
 8006358:	08008b20 	.word	0x08008b20

0800635c <puts>:
 800635c:	4b02      	ldr	r3, [pc, #8]	; (8006368 <puts+0xc>)
 800635e:	4601      	mov	r1, r0
 8006360:	6818      	ldr	r0, [r3, #0]
 8006362:	f7ff bf8d 	b.w	8006280 <_puts_r>
 8006366:	bf00      	nop
 8006368:	2000000c 	.word	0x2000000c

0800636c <__swbuf_r>:
 800636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636e:	460e      	mov	r6, r1
 8006370:	4614      	mov	r4, r2
 8006372:	4605      	mov	r5, r0
 8006374:	b118      	cbz	r0, 800637e <__swbuf_r+0x12>
 8006376:	6983      	ldr	r3, [r0, #24]
 8006378:	b90b      	cbnz	r3, 800637e <__swbuf_r+0x12>
 800637a:	f001 f84d 	bl	8007418 <__sinit>
 800637e:	4b21      	ldr	r3, [pc, #132]	; (8006404 <__swbuf_r+0x98>)
 8006380:	429c      	cmp	r4, r3
 8006382:	d12b      	bne.n	80063dc <__swbuf_r+0x70>
 8006384:	686c      	ldr	r4, [r5, #4]
 8006386:	69a3      	ldr	r3, [r4, #24]
 8006388:	60a3      	str	r3, [r4, #8]
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	071a      	lsls	r2, r3, #28
 800638e:	d52f      	bpl.n	80063f0 <__swbuf_r+0x84>
 8006390:	6923      	ldr	r3, [r4, #16]
 8006392:	b36b      	cbz	r3, 80063f0 <__swbuf_r+0x84>
 8006394:	6923      	ldr	r3, [r4, #16]
 8006396:	6820      	ldr	r0, [r4, #0]
 8006398:	1ac0      	subs	r0, r0, r3
 800639a:	6963      	ldr	r3, [r4, #20]
 800639c:	b2f6      	uxtb	r6, r6
 800639e:	4283      	cmp	r3, r0
 80063a0:	4637      	mov	r7, r6
 80063a2:	dc04      	bgt.n	80063ae <__swbuf_r+0x42>
 80063a4:	4621      	mov	r1, r4
 80063a6:	4628      	mov	r0, r5
 80063a8:	f000 ffa2 	bl	80072f0 <_fflush_r>
 80063ac:	bb30      	cbnz	r0, 80063fc <__swbuf_r+0x90>
 80063ae:	68a3      	ldr	r3, [r4, #8]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	60a3      	str	r3, [r4, #8]
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	6022      	str	r2, [r4, #0]
 80063ba:	701e      	strb	r6, [r3, #0]
 80063bc:	6963      	ldr	r3, [r4, #20]
 80063be:	3001      	adds	r0, #1
 80063c0:	4283      	cmp	r3, r0
 80063c2:	d004      	beq.n	80063ce <__swbuf_r+0x62>
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	07db      	lsls	r3, r3, #31
 80063c8:	d506      	bpl.n	80063d8 <__swbuf_r+0x6c>
 80063ca:	2e0a      	cmp	r6, #10
 80063cc:	d104      	bne.n	80063d8 <__swbuf_r+0x6c>
 80063ce:	4621      	mov	r1, r4
 80063d0:	4628      	mov	r0, r5
 80063d2:	f000 ff8d 	bl	80072f0 <_fflush_r>
 80063d6:	b988      	cbnz	r0, 80063fc <__swbuf_r+0x90>
 80063d8:	4638      	mov	r0, r7
 80063da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063dc:	4b0a      	ldr	r3, [pc, #40]	; (8006408 <__swbuf_r+0x9c>)
 80063de:	429c      	cmp	r4, r3
 80063e0:	d101      	bne.n	80063e6 <__swbuf_r+0x7a>
 80063e2:	68ac      	ldr	r4, [r5, #8]
 80063e4:	e7cf      	b.n	8006386 <__swbuf_r+0x1a>
 80063e6:	4b09      	ldr	r3, [pc, #36]	; (800640c <__swbuf_r+0xa0>)
 80063e8:	429c      	cmp	r4, r3
 80063ea:	bf08      	it	eq
 80063ec:	68ec      	ldreq	r4, [r5, #12]
 80063ee:	e7ca      	b.n	8006386 <__swbuf_r+0x1a>
 80063f0:	4621      	mov	r1, r4
 80063f2:	4628      	mov	r0, r5
 80063f4:	f000 f80c 	bl	8006410 <__swsetup_r>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d0cb      	beq.n	8006394 <__swbuf_r+0x28>
 80063fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006400:	e7ea      	b.n	80063d8 <__swbuf_r+0x6c>
 8006402:	bf00      	nop
 8006404:	08008b40 	.word	0x08008b40
 8006408:	08008b60 	.word	0x08008b60
 800640c:	08008b20 	.word	0x08008b20

08006410 <__swsetup_r>:
 8006410:	4b32      	ldr	r3, [pc, #200]	; (80064dc <__swsetup_r+0xcc>)
 8006412:	b570      	push	{r4, r5, r6, lr}
 8006414:	681d      	ldr	r5, [r3, #0]
 8006416:	4606      	mov	r6, r0
 8006418:	460c      	mov	r4, r1
 800641a:	b125      	cbz	r5, 8006426 <__swsetup_r+0x16>
 800641c:	69ab      	ldr	r3, [r5, #24]
 800641e:	b913      	cbnz	r3, 8006426 <__swsetup_r+0x16>
 8006420:	4628      	mov	r0, r5
 8006422:	f000 fff9 	bl	8007418 <__sinit>
 8006426:	4b2e      	ldr	r3, [pc, #184]	; (80064e0 <__swsetup_r+0xd0>)
 8006428:	429c      	cmp	r4, r3
 800642a:	d10f      	bne.n	800644c <__swsetup_r+0x3c>
 800642c:	686c      	ldr	r4, [r5, #4]
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006434:	0719      	lsls	r1, r3, #28
 8006436:	d42c      	bmi.n	8006492 <__swsetup_r+0x82>
 8006438:	06dd      	lsls	r5, r3, #27
 800643a:	d411      	bmi.n	8006460 <__swsetup_r+0x50>
 800643c:	2309      	movs	r3, #9
 800643e:	6033      	str	r3, [r6, #0]
 8006440:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006444:	81a3      	strh	r3, [r4, #12]
 8006446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800644a:	e03e      	b.n	80064ca <__swsetup_r+0xba>
 800644c:	4b25      	ldr	r3, [pc, #148]	; (80064e4 <__swsetup_r+0xd4>)
 800644e:	429c      	cmp	r4, r3
 8006450:	d101      	bne.n	8006456 <__swsetup_r+0x46>
 8006452:	68ac      	ldr	r4, [r5, #8]
 8006454:	e7eb      	b.n	800642e <__swsetup_r+0x1e>
 8006456:	4b24      	ldr	r3, [pc, #144]	; (80064e8 <__swsetup_r+0xd8>)
 8006458:	429c      	cmp	r4, r3
 800645a:	bf08      	it	eq
 800645c:	68ec      	ldreq	r4, [r5, #12]
 800645e:	e7e6      	b.n	800642e <__swsetup_r+0x1e>
 8006460:	0758      	lsls	r0, r3, #29
 8006462:	d512      	bpl.n	800648a <__swsetup_r+0x7a>
 8006464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006466:	b141      	cbz	r1, 800647a <__swsetup_r+0x6a>
 8006468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800646c:	4299      	cmp	r1, r3
 800646e:	d002      	beq.n	8006476 <__swsetup_r+0x66>
 8006470:	4630      	mov	r0, r6
 8006472:	f001 fc8b 	bl	8007d8c <_free_r>
 8006476:	2300      	movs	r3, #0
 8006478:	6363      	str	r3, [r4, #52]	; 0x34
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006480:	81a3      	strh	r3, [r4, #12]
 8006482:	2300      	movs	r3, #0
 8006484:	6063      	str	r3, [r4, #4]
 8006486:	6923      	ldr	r3, [r4, #16]
 8006488:	6023      	str	r3, [r4, #0]
 800648a:	89a3      	ldrh	r3, [r4, #12]
 800648c:	f043 0308 	orr.w	r3, r3, #8
 8006490:	81a3      	strh	r3, [r4, #12]
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	b94b      	cbnz	r3, 80064aa <__swsetup_r+0x9a>
 8006496:	89a3      	ldrh	r3, [r4, #12]
 8006498:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800649c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064a0:	d003      	beq.n	80064aa <__swsetup_r+0x9a>
 80064a2:	4621      	mov	r1, r4
 80064a4:	4630      	mov	r0, r6
 80064a6:	f001 f881 	bl	80075ac <__smakebuf_r>
 80064aa:	89a0      	ldrh	r0, [r4, #12]
 80064ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064b0:	f010 0301 	ands.w	r3, r0, #1
 80064b4:	d00a      	beq.n	80064cc <__swsetup_r+0xbc>
 80064b6:	2300      	movs	r3, #0
 80064b8:	60a3      	str	r3, [r4, #8]
 80064ba:	6963      	ldr	r3, [r4, #20]
 80064bc:	425b      	negs	r3, r3
 80064be:	61a3      	str	r3, [r4, #24]
 80064c0:	6923      	ldr	r3, [r4, #16]
 80064c2:	b943      	cbnz	r3, 80064d6 <__swsetup_r+0xc6>
 80064c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064c8:	d1ba      	bne.n	8006440 <__swsetup_r+0x30>
 80064ca:	bd70      	pop	{r4, r5, r6, pc}
 80064cc:	0781      	lsls	r1, r0, #30
 80064ce:	bf58      	it	pl
 80064d0:	6963      	ldrpl	r3, [r4, #20]
 80064d2:	60a3      	str	r3, [r4, #8]
 80064d4:	e7f4      	b.n	80064c0 <__swsetup_r+0xb0>
 80064d6:	2000      	movs	r0, #0
 80064d8:	e7f7      	b.n	80064ca <__swsetup_r+0xba>
 80064da:	bf00      	nop
 80064dc:	2000000c 	.word	0x2000000c
 80064e0:	08008b40 	.word	0x08008b40
 80064e4:	08008b60 	.word	0x08008b60
 80064e8:	08008b20 	.word	0x08008b20

080064ec <quorem>:
 80064ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f0:	6903      	ldr	r3, [r0, #16]
 80064f2:	690c      	ldr	r4, [r1, #16]
 80064f4:	42a3      	cmp	r3, r4
 80064f6:	4607      	mov	r7, r0
 80064f8:	f2c0 8081 	blt.w	80065fe <quorem+0x112>
 80064fc:	3c01      	subs	r4, #1
 80064fe:	f101 0814 	add.w	r8, r1, #20
 8006502:	f100 0514 	add.w	r5, r0, #20
 8006506:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800650a:	9301      	str	r3, [sp, #4]
 800650c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006510:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006514:	3301      	adds	r3, #1
 8006516:	429a      	cmp	r2, r3
 8006518:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800651c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006520:	fbb2 f6f3 	udiv	r6, r2, r3
 8006524:	d331      	bcc.n	800658a <quorem+0x9e>
 8006526:	f04f 0e00 	mov.w	lr, #0
 800652a:	4640      	mov	r0, r8
 800652c:	46ac      	mov	ip, r5
 800652e:	46f2      	mov	sl, lr
 8006530:	f850 2b04 	ldr.w	r2, [r0], #4
 8006534:	b293      	uxth	r3, r2
 8006536:	fb06 e303 	mla	r3, r6, r3, lr
 800653a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800653e:	b29b      	uxth	r3, r3
 8006540:	ebaa 0303 	sub.w	r3, sl, r3
 8006544:	f8dc a000 	ldr.w	sl, [ip]
 8006548:	0c12      	lsrs	r2, r2, #16
 800654a:	fa13 f38a 	uxtah	r3, r3, sl
 800654e:	fb06 e202 	mla	r2, r6, r2, lr
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	9b00      	ldr	r3, [sp, #0]
 8006556:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800655a:	b292      	uxth	r2, r2
 800655c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006560:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006564:	f8bd 3000 	ldrh.w	r3, [sp]
 8006568:	4581      	cmp	r9, r0
 800656a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800656e:	f84c 3b04 	str.w	r3, [ip], #4
 8006572:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006576:	d2db      	bcs.n	8006530 <quorem+0x44>
 8006578:	f855 300b 	ldr.w	r3, [r5, fp]
 800657c:	b92b      	cbnz	r3, 800658a <quorem+0x9e>
 800657e:	9b01      	ldr	r3, [sp, #4]
 8006580:	3b04      	subs	r3, #4
 8006582:	429d      	cmp	r5, r3
 8006584:	461a      	mov	r2, r3
 8006586:	d32e      	bcc.n	80065e6 <quorem+0xfa>
 8006588:	613c      	str	r4, [r7, #16]
 800658a:	4638      	mov	r0, r7
 800658c:	f001 fae6 	bl	8007b5c <__mcmp>
 8006590:	2800      	cmp	r0, #0
 8006592:	db24      	blt.n	80065de <quorem+0xf2>
 8006594:	3601      	adds	r6, #1
 8006596:	4628      	mov	r0, r5
 8006598:	f04f 0c00 	mov.w	ip, #0
 800659c:	f858 2b04 	ldr.w	r2, [r8], #4
 80065a0:	f8d0 e000 	ldr.w	lr, [r0]
 80065a4:	b293      	uxth	r3, r2
 80065a6:	ebac 0303 	sub.w	r3, ip, r3
 80065aa:	0c12      	lsrs	r2, r2, #16
 80065ac:	fa13 f38e 	uxtah	r3, r3, lr
 80065b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80065b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065be:	45c1      	cmp	r9, r8
 80065c0:	f840 3b04 	str.w	r3, [r0], #4
 80065c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80065c8:	d2e8      	bcs.n	800659c <quorem+0xb0>
 80065ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065d2:	b922      	cbnz	r2, 80065de <quorem+0xf2>
 80065d4:	3b04      	subs	r3, #4
 80065d6:	429d      	cmp	r5, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	d30a      	bcc.n	80065f2 <quorem+0x106>
 80065dc:	613c      	str	r4, [r7, #16]
 80065de:	4630      	mov	r0, r6
 80065e0:	b003      	add	sp, #12
 80065e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e6:	6812      	ldr	r2, [r2, #0]
 80065e8:	3b04      	subs	r3, #4
 80065ea:	2a00      	cmp	r2, #0
 80065ec:	d1cc      	bne.n	8006588 <quorem+0x9c>
 80065ee:	3c01      	subs	r4, #1
 80065f0:	e7c7      	b.n	8006582 <quorem+0x96>
 80065f2:	6812      	ldr	r2, [r2, #0]
 80065f4:	3b04      	subs	r3, #4
 80065f6:	2a00      	cmp	r2, #0
 80065f8:	d1f0      	bne.n	80065dc <quorem+0xf0>
 80065fa:	3c01      	subs	r4, #1
 80065fc:	e7eb      	b.n	80065d6 <quorem+0xea>
 80065fe:	2000      	movs	r0, #0
 8006600:	e7ee      	b.n	80065e0 <quorem+0xf4>
 8006602:	0000      	movs	r0, r0
 8006604:	0000      	movs	r0, r0
	...

08006608 <_dtoa_r>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	ed2d 8b04 	vpush	{d8-d9}
 8006610:	ec57 6b10 	vmov	r6, r7, d0
 8006614:	b093      	sub	sp, #76	; 0x4c
 8006616:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006618:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800661c:	9106      	str	r1, [sp, #24]
 800661e:	ee10 aa10 	vmov	sl, s0
 8006622:	4604      	mov	r4, r0
 8006624:	9209      	str	r2, [sp, #36]	; 0x24
 8006626:	930c      	str	r3, [sp, #48]	; 0x30
 8006628:	46bb      	mov	fp, r7
 800662a:	b975      	cbnz	r5, 800664a <_dtoa_r+0x42>
 800662c:	2010      	movs	r0, #16
 800662e:	f000 fffd 	bl	800762c <malloc>
 8006632:	4602      	mov	r2, r0
 8006634:	6260      	str	r0, [r4, #36]	; 0x24
 8006636:	b920      	cbnz	r0, 8006642 <_dtoa_r+0x3a>
 8006638:	4ba7      	ldr	r3, [pc, #668]	; (80068d8 <_dtoa_r+0x2d0>)
 800663a:	21ea      	movs	r1, #234	; 0xea
 800663c:	48a7      	ldr	r0, [pc, #668]	; (80068dc <_dtoa_r+0x2d4>)
 800663e:	f001 fe45 	bl	80082cc <__assert_func>
 8006642:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006646:	6005      	str	r5, [r0, #0]
 8006648:	60c5      	str	r5, [r0, #12]
 800664a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800664c:	6819      	ldr	r1, [r3, #0]
 800664e:	b151      	cbz	r1, 8006666 <_dtoa_r+0x5e>
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	604a      	str	r2, [r1, #4]
 8006654:	2301      	movs	r3, #1
 8006656:	4093      	lsls	r3, r2
 8006658:	608b      	str	r3, [r1, #8]
 800665a:	4620      	mov	r0, r4
 800665c:	f001 f83c 	bl	80076d8 <_Bfree>
 8006660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	1e3b      	subs	r3, r7, #0
 8006668:	bfaa      	itet	ge
 800666a:	2300      	movge	r3, #0
 800666c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006670:	f8c8 3000 	strge.w	r3, [r8]
 8006674:	4b9a      	ldr	r3, [pc, #616]	; (80068e0 <_dtoa_r+0x2d8>)
 8006676:	bfbc      	itt	lt
 8006678:	2201      	movlt	r2, #1
 800667a:	f8c8 2000 	strlt.w	r2, [r8]
 800667e:	ea33 030b 	bics.w	r3, r3, fp
 8006682:	d11b      	bne.n	80066bc <_dtoa_r+0xb4>
 8006684:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006686:	f242 730f 	movw	r3, #9999	; 0x270f
 800668a:	6013      	str	r3, [r2, #0]
 800668c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006690:	4333      	orrs	r3, r6
 8006692:	f000 8592 	beq.w	80071ba <_dtoa_r+0xbb2>
 8006696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006698:	b963      	cbnz	r3, 80066b4 <_dtoa_r+0xac>
 800669a:	4b92      	ldr	r3, [pc, #584]	; (80068e4 <_dtoa_r+0x2dc>)
 800669c:	e022      	b.n	80066e4 <_dtoa_r+0xdc>
 800669e:	4b92      	ldr	r3, [pc, #584]	; (80068e8 <_dtoa_r+0x2e0>)
 80066a0:	9301      	str	r3, [sp, #4]
 80066a2:	3308      	adds	r3, #8
 80066a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	9801      	ldr	r0, [sp, #4]
 80066aa:	b013      	add	sp, #76	; 0x4c
 80066ac:	ecbd 8b04 	vpop	{d8-d9}
 80066b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b4:	4b8b      	ldr	r3, [pc, #556]	; (80068e4 <_dtoa_r+0x2dc>)
 80066b6:	9301      	str	r3, [sp, #4]
 80066b8:	3303      	adds	r3, #3
 80066ba:	e7f3      	b.n	80066a4 <_dtoa_r+0x9c>
 80066bc:	2200      	movs	r2, #0
 80066be:	2300      	movs	r3, #0
 80066c0:	4650      	mov	r0, sl
 80066c2:	4659      	mov	r1, fp
 80066c4:	f7fa fa20 	bl	8000b08 <__aeabi_dcmpeq>
 80066c8:	ec4b ab19 	vmov	d9, sl, fp
 80066cc:	4680      	mov	r8, r0
 80066ce:	b158      	cbz	r0, 80066e8 <_dtoa_r+0xe0>
 80066d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066d2:	2301      	movs	r3, #1
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 856b 	beq.w	80071b4 <_dtoa_r+0xbac>
 80066de:	4883      	ldr	r0, [pc, #524]	; (80068ec <_dtoa_r+0x2e4>)
 80066e0:	6018      	str	r0, [r3, #0]
 80066e2:	1e43      	subs	r3, r0, #1
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	e7df      	b.n	80066a8 <_dtoa_r+0xa0>
 80066e8:	ec4b ab10 	vmov	d0, sl, fp
 80066ec:	aa10      	add	r2, sp, #64	; 0x40
 80066ee:	a911      	add	r1, sp, #68	; 0x44
 80066f0:	4620      	mov	r0, r4
 80066f2:	f001 fad9 	bl	8007ca8 <__d2b>
 80066f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80066fa:	ee08 0a10 	vmov	s16, r0
 80066fe:	2d00      	cmp	r5, #0
 8006700:	f000 8084 	beq.w	800680c <_dtoa_r+0x204>
 8006704:	ee19 3a90 	vmov	r3, s19
 8006708:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800670c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006710:	4656      	mov	r6, sl
 8006712:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006716:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800671a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800671e:	4b74      	ldr	r3, [pc, #464]	; (80068f0 <_dtoa_r+0x2e8>)
 8006720:	2200      	movs	r2, #0
 8006722:	4630      	mov	r0, r6
 8006724:	4639      	mov	r1, r7
 8006726:	f7f9 fdcf 	bl	80002c8 <__aeabi_dsub>
 800672a:	a365      	add	r3, pc, #404	; (adr r3, 80068c0 <_dtoa_r+0x2b8>)
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	f7f9 ff82 	bl	8000638 <__aeabi_dmul>
 8006734:	a364      	add	r3, pc, #400	; (adr r3, 80068c8 <_dtoa_r+0x2c0>)
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	f7f9 fdc7 	bl	80002cc <__adddf3>
 800673e:	4606      	mov	r6, r0
 8006740:	4628      	mov	r0, r5
 8006742:	460f      	mov	r7, r1
 8006744:	f7f9 ff0e 	bl	8000564 <__aeabi_i2d>
 8006748:	a361      	add	r3, pc, #388	; (adr r3, 80068d0 <_dtoa_r+0x2c8>)
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	f7f9 ff73 	bl	8000638 <__aeabi_dmul>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	4630      	mov	r0, r6
 8006758:	4639      	mov	r1, r7
 800675a:	f7f9 fdb7 	bl	80002cc <__adddf3>
 800675e:	4606      	mov	r6, r0
 8006760:	460f      	mov	r7, r1
 8006762:	f7fa fa19 	bl	8000b98 <__aeabi_d2iz>
 8006766:	2200      	movs	r2, #0
 8006768:	9000      	str	r0, [sp, #0]
 800676a:	2300      	movs	r3, #0
 800676c:	4630      	mov	r0, r6
 800676e:	4639      	mov	r1, r7
 8006770:	f7fa f9d4 	bl	8000b1c <__aeabi_dcmplt>
 8006774:	b150      	cbz	r0, 800678c <_dtoa_r+0x184>
 8006776:	9800      	ldr	r0, [sp, #0]
 8006778:	f7f9 fef4 	bl	8000564 <__aeabi_i2d>
 800677c:	4632      	mov	r2, r6
 800677e:	463b      	mov	r3, r7
 8006780:	f7fa f9c2 	bl	8000b08 <__aeabi_dcmpeq>
 8006784:	b910      	cbnz	r0, 800678c <_dtoa_r+0x184>
 8006786:	9b00      	ldr	r3, [sp, #0]
 8006788:	3b01      	subs	r3, #1
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	9b00      	ldr	r3, [sp, #0]
 800678e:	2b16      	cmp	r3, #22
 8006790:	d85a      	bhi.n	8006848 <_dtoa_r+0x240>
 8006792:	9a00      	ldr	r2, [sp, #0]
 8006794:	4b57      	ldr	r3, [pc, #348]	; (80068f4 <_dtoa_r+0x2ec>)
 8006796:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	ec51 0b19 	vmov	r0, r1, d9
 80067a2:	f7fa f9bb 	bl	8000b1c <__aeabi_dcmplt>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d050      	beq.n	800684c <_dtoa_r+0x244>
 80067aa:	9b00      	ldr	r3, [sp, #0]
 80067ac:	3b01      	subs	r3, #1
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	2300      	movs	r3, #0
 80067b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80067b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067b6:	1b5d      	subs	r5, r3, r5
 80067b8:	1e6b      	subs	r3, r5, #1
 80067ba:	9305      	str	r3, [sp, #20]
 80067bc:	bf45      	ittet	mi
 80067be:	f1c5 0301 	rsbmi	r3, r5, #1
 80067c2:	9304      	strmi	r3, [sp, #16]
 80067c4:	2300      	movpl	r3, #0
 80067c6:	2300      	movmi	r3, #0
 80067c8:	bf4c      	ite	mi
 80067ca:	9305      	strmi	r3, [sp, #20]
 80067cc:	9304      	strpl	r3, [sp, #16]
 80067ce:	9b00      	ldr	r3, [sp, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	db3d      	blt.n	8006850 <_dtoa_r+0x248>
 80067d4:	9b05      	ldr	r3, [sp, #20]
 80067d6:	9a00      	ldr	r2, [sp, #0]
 80067d8:	920a      	str	r2, [sp, #40]	; 0x28
 80067da:	4413      	add	r3, r2
 80067dc:	9305      	str	r3, [sp, #20]
 80067de:	2300      	movs	r3, #0
 80067e0:	9307      	str	r3, [sp, #28]
 80067e2:	9b06      	ldr	r3, [sp, #24]
 80067e4:	2b09      	cmp	r3, #9
 80067e6:	f200 8089 	bhi.w	80068fc <_dtoa_r+0x2f4>
 80067ea:	2b05      	cmp	r3, #5
 80067ec:	bfc4      	itt	gt
 80067ee:	3b04      	subgt	r3, #4
 80067f0:	9306      	strgt	r3, [sp, #24]
 80067f2:	9b06      	ldr	r3, [sp, #24]
 80067f4:	f1a3 0302 	sub.w	r3, r3, #2
 80067f8:	bfcc      	ite	gt
 80067fa:	2500      	movgt	r5, #0
 80067fc:	2501      	movle	r5, #1
 80067fe:	2b03      	cmp	r3, #3
 8006800:	f200 8087 	bhi.w	8006912 <_dtoa_r+0x30a>
 8006804:	e8df f003 	tbb	[pc, r3]
 8006808:	59383a2d 	.word	0x59383a2d
 800680c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006810:	441d      	add	r5, r3
 8006812:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006816:	2b20      	cmp	r3, #32
 8006818:	bfc1      	itttt	gt
 800681a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800681e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006822:	fa0b f303 	lslgt.w	r3, fp, r3
 8006826:	fa26 f000 	lsrgt.w	r0, r6, r0
 800682a:	bfda      	itte	le
 800682c:	f1c3 0320 	rsble	r3, r3, #32
 8006830:	fa06 f003 	lslle.w	r0, r6, r3
 8006834:	4318      	orrgt	r0, r3
 8006836:	f7f9 fe85 	bl	8000544 <__aeabi_ui2d>
 800683a:	2301      	movs	r3, #1
 800683c:	4606      	mov	r6, r0
 800683e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006842:	3d01      	subs	r5, #1
 8006844:	930e      	str	r3, [sp, #56]	; 0x38
 8006846:	e76a      	b.n	800671e <_dtoa_r+0x116>
 8006848:	2301      	movs	r3, #1
 800684a:	e7b2      	b.n	80067b2 <_dtoa_r+0x1aa>
 800684c:	900b      	str	r0, [sp, #44]	; 0x2c
 800684e:	e7b1      	b.n	80067b4 <_dtoa_r+0x1ac>
 8006850:	9b04      	ldr	r3, [sp, #16]
 8006852:	9a00      	ldr	r2, [sp, #0]
 8006854:	1a9b      	subs	r3, r3, r2
 8006856:	9304      	str	r3, [sp, #16]
 8006858:	4253      	negs	r3, r2
 800685a:	9307      	str	r3, [sp, #28]
 800685c:	2300      	movs	r3, #0
 800685e:	930a      	str	r3, [sp, #40]	; 0x28
 8006860:	e7bf      	b.n	80067e2 <_dtoa_r+0x1da>
 8006862:	2300      	movs	r3, #0
 8006864:	9308      	str	r3, [sp, #32]
 8006866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006868:	2b00      	cmp	r3, #0
 800686a:	dc55      	bgt.n	8006918 <_dtoa_r+0x310>
 800686c:	2301      	movs	r3, #1
 800686e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006872:	461a      	mov	r2, r3
 8006874:	9209      	str	r2, [sp, #36]	; 0x24
 8006876:	e00c      	b.n	8006892 <_dtoa_r+0x28a>
 8006878:	2301      	movs	r3, #1
 800687a:	e7f3      	b.n	8006864 <_dtoa_r+0x25c>
 800687c:	2300      	movs	r3, #0
 800687e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006880:	9308      	str	r3, [sp, #32]
 8006882:	9b00      	ldr	r3, [sp, #0]
 8006884:	4413      	add	r3, r2
 8006886:	9302      	str	r3, [sp, #8]
 8006888:	3301      	adds	r3, #1
 800688a:	2b01      	cmp	r3, #1
 800688c:	9303      	str	r3, [sp, #12]
 800688e:	bfb8      	it	lt
 8006890:	2301      	movlt	r3, #1
 8006892:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006894:	2200      	movs	r2, #0
 8006896:	6042      	str	r2, [r0, #4]
 8006898:	2204      	movs	r2, #4
 800689a:	f102 0614 	add.w	r6, r2, #20
 800689e:	429e      	cmp	r6, r3
 80068a0:	6841      	ldr	r1, [r0, #4]
 80068a2:	d93d      	bls.n	8006920 <_dtoa_r+0x318>
 80068a4:	4620      	mov	r0, r4
 80068a6:	f000 fed7 	bl	8007658 <_Balloc>
 80068aa:	9001      	str	r0, [sp, #4]
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d13b      	bne.n	8006928 <_dtoa_r+0x320>
 80068b0:	4b11      	ldr	r3, [pc, #68]	; (80068f8 <_dtoa_r+0x2f0>)
 80068b2:	4602      	mov	r2, r0
 80068b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80068b8:	e6c0      	b.n	800663c <_dtoa_r+0x34>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e7df      	b.n	800687e <_dtoa_r+0x276>
 80068be:	bf00      	nop
 80068c0:	636f4361 	.word	0x636f4361
 80068c4:	3fd287a7 	.word	0x3fd287a7
 80068c8:	8b60c8b3 	.word	0x8b60c8b3
 80068cc:	3fc68a28 	.word	0x3fc68a28
 80068d0:	509f79fb 	.word	0x509f79fb
 80068d4:	3fd34413 	.word	0x3fd34413
 80068d8:	08008a9d 	.word	0x08008a9d
 80068dc:	08008ab4 	.word	0x08008ab4
 80068e0:	7ff00000 	.word	0x7ff00000
 80068e4:	08008a99 	.word	0x08008a99
 80068e8:	08008a90 	.word	0x08008a90
 80068ec:	08008a6d 	.word	0x08008a6d
 80068f0:	3ff80000 	.word	0x3ff80000
 80068f4:	08008c08 	.word	0x08008c08
 80068f8:	08008b0f 	.word	0x08008b0f
 80068fc:	2501      	movs	r5, #1
 80068fe:	2300      	movs	r3, #0
 8006900:	9306      	str	r3, [sp, #24]
 8006902:	9508      	str	r5, [sp, #32]
 8006904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006908:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800690c:	2200      	movs	r2, #0
 800690e:	2312      	movs	r3, #18
 8006910:	e7b0      	b.n	8006874 <_dtoa_r+0x26c>
 8006912:	2301      	movs	r3, #1
 8006914:	9308      	str	r3, [sp, #32]
 8006916:	e7f5      	b.n	8006904 <_dtoa_r+0x2fc>
 8006918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800691e:	e7b8      	b.n	8006892 <_dtoa_r+0x28a>
 8006920:	3101      	adds	r1, #1
 8006922:	6041      	str	r1, [r0, #4]
 8006924:	0052      	lsls	r2, r2, #1
 8006926:	e7b8      	b.n	800689a <_dtoa_r+0x292>
 8006928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800692a:	9a01      	ldr	r2, [sp, #4]
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	9b03      	ldr	r3, [sp, #12]
 8006930:	2b0e      	cmp	r3, #14
 8006932:	f200 809d 	bhi.w	8006a70 <_dtoa_r+0x468>
 8006936:	2d00      	cmp	r5, #0
 8006938:	f000 809a 	beq.w	8006a70 <_dtoa_r+0x468>
 800693c:	9b00      	ldr	r3, [sp, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	dd32      	ble.n	80069a8 <_dtoa_r+0x3a0>
 8006942:	4ab7      	ldr	r2, [pc, #732]	; (8006c20 <_dtoa_r+0x618>)
 8006944:	f003 030f 	and.w	r3, r3, #15
 8006948:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800694c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006950:	9b00      	ldr	r3, [sp, #0]
 8006952:	05d8      	lsls	r0, r3, #23
 8006954:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006958:	d516      	bpl.n	8006988 <_dtoa_r+0x380>
 800695a:	4bb2      	ldr	r3, [pc, #712]	; (8006c24 <_dtoa_r+0x61c>)
 800695c:	ec51 0b19 	vmov	r0, r1, d9
 8006960:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006964:	f7f9 ff92 	bl	800088c <__aeabi_ddiv>
 8006968:	f007 070f 	and.w	r7, r7, #15
 800696c:	4682      	mov	sl, r0
 800696e:	468b      	mov	fp, r1
 8006970:	2503      	movs	r5, #3
 8006972:	4eac      	ldr	r6, [pc, #688]	; (8006c24 <_dtoa_r+0x61c>)
 8006974:	b957      	cbnz	r7, 800698c <_dtoa_r+0x384>
 8006976:	4642      	mov	r2, r8
 8006978:	464b      	mov	r3, r9
 800697a:	4650      	mov	r0, sl
 800697c:	4659      	mov	r1, fp
 800697e:	f7f9 ff85 	bl	800088c <__aeabi_ddiv>
 8006982:	4682      	mov	sl, r0
 8006984:	468b      	mov	fp, r1
 8006986:	e028      	b.n	80069da <_dtoa_r+0x3d2>
 8006988:	2502      	movs	r5, #2
 800698a:	e7f2      	b.n	8006972 <_dtoa_r+0x36a>
 800698c:	07f9      	lsls	r1, r7, #31
 800698e:	d508      	bpl.n	80069a2 <_dtoa_r+0x39a>
 8006990:	4640      	mov	r0, r8
 8006992:	4649      	mov	r1, r9
 8006994:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006998:	f7f9 fe4e 	bl	8000638 <__aeabi_dmul>
 800699c:	3501      	adds	r5, #1
 800699e:	4680      	mov	r8, r0
 80069a0:	4689      	mov	r9, r1
 80069a2:	107f      	asrs	r7, r7, #1
 80069a4:	3608      	adds	r6, #8
 80069a6:	e7e5      	b.n	8006974 <_dtoa_r+0x36c>
 80069a8:	f000 809b 	beq.w	8006ae2 <_dtoa_r+0x4da>
 80069ac:	9b00      	ldr	r3, [sp, #0]
 80069ae:	4f9d      	ldr	r7, [pc, #628]	; (8006c24 <_dtoa_r+0x61c>)
 80069b0:	425e      	negs	r6, r3
 80069b2:	4b9b      	ldr	r3, [pc, #620]	; (8006c20 <_dtoa_r+0x618>)
 80069b4:	f006 020f 	and.w	r2, r6, #15
 80069b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	ec51 0b19 	vmov	r0, r1, d9
 80069c4:	f7f9 fe38 	bl	8000638 <__aeabi_dmul>
 80069c8:	1136      	asrs	r6, r6, #4
 80069ca:	4682      	mov	sl, r0
 80069cc:	468b      	mov	fp, r1
 80069ce:	2300      	movs	r3, #0
 80069d0:	2502      	movs	r5, #2
 80069d2:	2e00      	cmp	r6, #0
 80069d4:	d17a      	bne.n	8006acc <_dtoa_r+0x4c4>
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1d3      	bne.n	8006982 <_dtoa_r+0x37a>
 80069da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 8082 	beq.w	8006ae6 <_dtoa_r+0x4de>
 80069e2:	4b91      	ldr	r3, [pc, #580]	; (8006c28 <_dtoa_r+0x620>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	4650      	mov	r0, sl
 80069e8:	4659      	mov	r1, fp
 80069ea:	f7fa f897 	bl	8000b1c <__aeabi_dcmplt>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d079      	beq.n	8006ae6 <_dtoa_r+0x4de>
 80069f2:	9b03      	ldr	r3, [sp, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d076      	beq.n	8006ae6 <_dtoa_r+0x4de>
 80069f8:	9b02      	ldr	r3, [sp, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	dd36      	ble.n	8006a6c <_dtoa_r+0x464>
 80069fe:	9b00      	ldr	r3, [sp, #0]
 8006a00:	4650      	mov	r0, sl
 8006a02:	4659      	mov	r1, fp
 8006a04:	1e5f      	subs	r7, r3, #1
 8006a06:	2200      	movs	r2, #0
 8006a08:	4b88      	ldr	r3, [pc, #544]	; (8006c2c <_dtoa_r+0x624>)
 8006a0a:	f7f9 fe15 	bl	8000638 <__aeabi_dmul>
 8006a0e:	9e02      	ldr	r6, [sp, #8]
 8006a10:	4682      	mov	sl, r0
 8006a12:	468b      	mov	fp, r1
 8006a14:	3501      	adds	r5, #1
 8006a16:	4628      	mov	r0, r5
 8006a18:	f7f9 fda4 	bl	8000564 <__aeabi_i2d>
 8006a1c:	4652      	mov	r2, sl
 8006a1e:	465b      	mov	r3, fp
 8006a20:	f7f9 fe0a 	bl	8000638 <__aeabi_dmul>
 8006a24:	4b82      	ldr	r3, [pc, #520]	; (8006c30 <_dtoa_r+0x628>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	f7f9 fc50 	bl	80002cc <__adddf3>
 8006a2c:	46d0      	mov	r8, sl
 8006a2e:	46d9      	mov	r9, fp
 8006a30:	4682      	mov	sl, r0
 8006a32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006a36:	2e00      	cmp	r6, #0
 8006a38:	d158      	bne.n	8006aec <_dtoa_r+0x4e4>
 8006a3a:	4b7e      	ldr	r3, [pc, #504]	; (8006c34 <_dtoa_r+0x62c>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	4640      	mov	r0, r8
 8006a40:	4649      	mov	r1, r9
 8006a42:	f7f9 fc41 	bl	80002c8 <__aeabi_dsub>
 8006a46:	4652      	mov	r2, sl
 8006a48:	465b      	mov	r3, fp
 8006a4a:	4680      	mov	r8, r0
 8006a4c:	4689      	mov	r9, r1
 8006a4e:	f7fa f883 	bl	8000b58 <__aeabi_dcmpgt>
 8006a52:	2800      	cmp	r0, #0
 8006a54:	f040 8295 	bne.w	8006f82 <_dtoa_r+0x97a>
 8006a58:	4652      	mov	r2, sl
 8006a5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006a5e:	4640      	mov	r0, r8
 8006a60:	4649      	mov	r1, r9
 8006a62:	f7fa f85b 	bl	8000b1c <__aeabi_dcmplt>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	f040 8289 	bne.w	8006f7e <_dtoa_r+0x976>
 8006a6c:	ec5b ab19 	vmov	sl, fp, d9
 8006a70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f2c0 8148 	blt.w	8006d08 <_dtoa_r+0x700>
 8006a78:	9a00      	ldr	r2, [sp, #0]
 8006a7a:	2a0e      	cmp	r2, #14
 8006a7c:	f300 8144 	bgt.w	8006d08 <_dtoa_r+0x700>
 8006a80:	4b67      	ldr	r3, [pc, #412]	; (8006c20 <_dtoa_r+0x618>)
 8006a82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f280 80d5 	bge.w	8006c3c <_dtoa_r+0x634>
 8006a92:	9b03      	ldr	r3, [sp, #12]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f300 80d1 	bgt.w	8006c3c <_dtoa_r+0x634>
 8006a9a:	f040 826f 	bne.w	8006f7c <_dtoa_r+0x974>
 8006a9e:	4b65      	ldr	r3, [pc, #404]	; (8006c34 <_dtoa_r+0x62c>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	4649      	mov	r1, r9
 8006aa6:	f7f9 fdc7 	bl	8000638 <__aeabi_dmul>
 8006aaa:	4652      	mov	r2, sl
 8006aac:	465b      	mov	r3, fp
 8006aae:	f7fa f849 	bl	8000b44 <__aeabi_dcmpge>
 8006ab2:	9e03      	ldr	r6, [sp, #12]
 8006ab4:	4637      	mov	r7, r6
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	f040 8245 	bne.w	8006f46 <_dtoa_r+0x93e>
 8006abc:	9d01      	ldr	r5, [sp, #4]
 8006abe:	2331      	movs	r3, #49	; 0x31
 8006ac0:	f805 3b01 	strb.w	r3, [r5], #1
 8006ac4:	9b00      	ldr	r3, [sp, #0]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	e240      	b.n	8006f4e <_dtoa_r+0x946>
 8006acc:	07f2      	lsls	r2, r6, #31
 8006ace:	d505      	bpl.n	8006adc <_dtoa_r+0x4d4>
 8006ad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ad4:	f7f9 fdb0 	bl	8000638 <__aeabi_dmul>
 8006ad8:	3501      	adds	r5, #1
 8006ada:	2301      	movs	r3, #1
 8006adc:	1076      	asrs	r6, r6, #1
 8006ade:	3708      	adds	r7, #8
 8006ae0:	e777      	b.n	80069d2 <_dtoa_r+0x3ca>
 8006ae2:	2502      	movs	r5, #2
 8006ae4:	e779      	b.n	80069da <_dtoa_r+0x3d2>
 8006ae6:	9f00      	ldr	r7, [sp, #0]
 8006ae8:	9e03      	ldr	r6, [sp, #12]
 8006aea:	e794      	b.n	8006a16 <_dtoa_r+0x40e>
 8006aec:	9901      	ldr	r1, [sp, #4]
 8006aee:	4b4c      	ldr	r3, [pc, #304]	; (8006c20 <_dtoa_r+0x618>)
 8006af0:	4431      	add	r1, r6
 8006af2:	910d      	str	r1, [sp, #52]	; 0x34
 8006af4:	9908      	ldr	r1, [sp, #32]
 8006af6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006afa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006afe:	2900      	cmp	r1, #0
 8006b00:	d043      	beq.n	8006b8a <_dtoa_r+0x582>
 8006b02:	494d      	ldr	r1, [pc, #308]	; (8006c38 <_dtoa_r+0x630>)
 8006b04:	2000      	movs	r0, #0
 8006b06:	f7f9 fec1 	bl	800088c <__aeabi_ddiv>
 8006b0a:	4652      	mov	r2, sl
 8006b0c:	465b      	mov	r3, fp
 8006b0e:	f7f9 fbdb 	bl	80002c8 <__aeabi_dsub>
 8006b12:	9d01      	ldr	r5, [sp, #4]
 8006b14:	4682      	mov	sl, r0
 8006b16:	468b      	mov	fp, r1
 8006b18:	4649      	mov	r1, r9
 8006b1a:	4640      	mov	r0, r8
 8006b1c:	f7fa f83c 	bl	8000b98 <__aeabi_d2iz>
 8006b20:	4606      	mov	r6, r0
 8006b22:	f7f9 fd1f 	bl	8000564 <__aeabi_i2d>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	f7f9 fbcb 	bl	80002c8 <__aeabi_dsub>
 8006b32:	3630      	adds	r6, #48	; 0x30
 8006b34:	f805 6b01 	strb.w	r6, [r5], #1
 8006b38:	4652      	mov	r2, sl
 8006b3a:	465b      	mov	r3, fp
 8006b3c:	4680      	mov	r8, r0
 8006b3e:	4689      	mov	r9, r1
 8006b40:	f7f9 ffec 	bl	8000b1c <__aeabi_dcmplt>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	d163      	bne.n	8006c10 <_dtoa_r+0x608>
 8006b48:	4642      	mov	r2, r8
 8006b4a:	464b      	mov	r3, r9
 8006b4c:	4936      	ldr	r1, [pc, #216]	; (8006c28 <_dtoa_r+0x620>)
 8006b4e:	2000      	movs	r0, #0
 8006b50:	f7f9 fbba 	bl	80002c8 <__aeabi_dsub>
 8006b54:	4652      	mov	r2, sl
 8006b56:	465b      	mov	r3, fp
 8006b58:	f7f9 ffe0 	bl	8000b1c <__aeabi_dcmplt>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	f040 80b5 	bne.w	8006ccc <_dtoa_r+0x6c4>
 8006b62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b64:	429d      	cmp	r5, r3
 8006b66:	d081      	beq.n	8006a6c <_dtoa_r+0x464>
 8006b68:	4b30      	ldr	r3, [pc, #192]	; (8006c2c <_dtoa_r+0x624>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	4650      	mov	r0, sl
 8006b6e:	4659      	mov	r1, fp
 8006b70:	f7f9 fd62 	bl	8000638 <__aeabi_dmul>
 8006b74:	4b2d      	ldr	r3, [pc, #180]	; (8006c2c <_dtoa_r+0x624>)
 8006b76:	4682      	mov	sl, r0
 8006b78:	468b      	mov	fp, r1
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f7f9 fd5a 	bl	8000638 <__aeabi_dmul>
 8006b84:	4680      	mov	r8, r0
 8006b86:	4689      	mov	r9, r1
 8006b88:	e7c6      	b.n	8006b18 <_dtoa_r+0x510>
 8006b8a:	4650      	mov	r0, sl
 8006b8c:	4659      	mov	r1, fp
 8006b8e:	f7f9 fd53 	bl	8000638 <__aeabi_dmul>
 8006b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b94:	9d01      	ldr	r5, [sp, #4]
 8006b96:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b98:	4682      	mov	sl, r0
 8006b9a:	468b      	mov	fp, r1
 8006b9c:	4649      	mov	r1, r9
 8006b9e:	4640      	mov	r0, r8
 8006ba0:	f7f9 fffa 	bl	8000b98 <__aeabi_d2iz>
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	f7f9 fcdd 	bl	8000564 <__aeabi_i2d>
 8006baa:	3630      	adds	r6, #48	; 0x30
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4640      	mov	r0, r8
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	f7f9 fb88 	bl	80002c8 <__aeabi_dsub>
 8006bb8:	f805 6b01 	strb.w	r6, [r5], #1
 8006bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bbe:	429d      	cmp	r5, r3
 8006bc0:	4680      	mov	r8, r0
 8006bc2:	4689      	mov	r9, r1
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	d124      	bne.n	8006c14 <_dtoa_r+0x60c>
 8006bca:	4b1b      	ldr	r3, [pc, #108]	; (8006c38 <_dtoa_r+0x630>)
 8006bcc:	4650      	mov	r0, sl
 8006bce:	4659      	mov	r1, fp
 8006bd0:	f7f9 fb7c 	bl	80002cc <__adddf3>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4640      	mov	r0, r8
 8006bda:	4649      	mov	r1, r9
 8006bdc:	f7f9 ffbc 	bl	8000b58 <__aeabi_dcmpgt>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d173      	bne.n	8006ccc <_dtoa_r+0x6c4>
 8006be4:	4652      	mov	r2, sl
 8006be6:	465b      	mov	r3, fp
 8006be8:	4913      	ldr	r1, [pc, #76]	; (8006c38 <_dtoa_r+0x630>)
 8006bea:	2000      	movs	r0, #0
 8006bec:	f7f9 fb6c 	bl	80002c8 <__aeabi_dsub>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4640      	mov	r0, r8
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	f7f9 ff90 	bl	8000b1c <__aeabi_dcmplt>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	f43f af35 	beq.w	8006a6c <_dtoa_r+0x464>
 8006c02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c04:	1e6b      	subs	r3, r5, #1
 8006c06:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c0c:	2b30      	cmp	r3, #48	; 0x30
 8006c0e:	d0f8      	beq.n	8006c02 <_dtoa_r+0x5fa>
 8006c10:	9700      	str	r7, [sp, #0]
 8006c12:	e049      	b.n	8006ca8 <_dtoa_r+0x6a0>
 8006c14:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <_dtoa_r+0x624>)
 8006c16:	f7f9 fd0f 	bl	8000638 <__aeabi_dmul>
 8006c1a:	4680      	mov	r8, r0
 8006c1c:	4689      	mov	r9, r1
 8006c1e:	e7bd      	b.n	8006b9c <_dtoa_r+0x594>
 8006c20:	08008c08 	.word	0x08008c08
 8006c24:	08008be0 	.word	0x08008be0
 8006c28:	3ff00000 	.word	0x3ff00000
 8006c2c:	40240000 	.word	0x40240000
 8006c30:	401c0000 	.word	0x401c0000
 8006c34:	40140000 	.word	0x40140000
 8006c38:	3fe00000 	.word	0x3fe00000
 8006c3c:	9d01      	ldr	r5, [sp, #4]
 8006c3e:	4656      	mov	r6, sl
 8006c40:	465f      	mov	r7, fp
 8006c42:	4642      	mov	r2, r8
 8006c44:	464b      	mov	r3, r9
 8006c46:	4630      	mov	r0, r6
 8006c48:	4639      	mov	r1, r7
 8006c4a:	f7f9 fe1f 	bl	800088c <__aeabi_ddiv>
 8006c4e:	f7f9 ffa3 	bl	8000b98 <__aeabi_d2iz>
 8006c52:	4682      	mov	sl, r0
 8006c54:	f7f9 fc86 	bl	8000564 <__aeabi_i2d>
 8006c58:	4642      	mov	r2, r8
 8006c5a:	464b      	mov	r3, r9
 8006c5c:	f7f9 fcec 	bl	8000638 <__aeabi_dmul>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4630      	mov	r0, r6
 8006c66:	4639      	mov	r1, r7
 8006c68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006c6c:	f7f9 fb2c 	bl	80002c8 <__aeabi_dsub>
 8006c70:	f805 6b01 	strb.w	r6, [r5], #1
 8006c74:	9e01      	ldr	r6, [sp, #4]
 8006c76:	9f03      	ldr	r7, [sp, #12]
 8006c78:	1bae      	subs	r6, r5, r6
 8006c7a:	42b7      	cmp	r7, r6
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	460b      	mov	r3, r1
 8006c80:	d135      	bne.n	8006cee <_dtoa_r+0x6e6>
 8006c82:	f7f9 fb23 	bl	80002cc <__adddf3>
 8006c86:	4642      	mov	r2, r8
 8006c88:	464b      	mov	r3, r9
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	460f      	mov	r7, r1
 8006c8e:	f7f9 ff63 	bl	8000b58 <__aeabi_dcmpgt>
 8006c92:	b9d0      	cbnz	r0, 8006cca <_dtoa_r+0x6c2>
 8006c94:	4642      	mov	r2, r8
 8006c96:	464b      	mov	r3, r9
 8006c98:	4630      	mov	r0, r6
 8006c9a:	4639      	mov	r1, r7
 8006c9c:	f7f9 ff34 	bl	8000b08 <__aeabi_dcmpeq>
 8006ca0:	b110      	cbz	r0, 8006ca8 <_dtoa_r+0x6a0>
 8006ca2:	f01a 0f01 	tst.w	sl, #1
 8006ca6:	d110      	bne.n	8006cca <_dtoa_r+0x6c2>
 8006ca8:	4620      	mov	r0, r4
 8006caa:	ee18 1a10 	vmov	r1, s16
 8006cae:	f000 fd13 	bl	80076d8 <_Bfree>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	9800      	ldr	r0, [sp, #0]
 8006cb6:	702b      	strb	r3, [r5, #0]
 8006cb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cba:	3001      	adds	r0, #1
 8006cbc:	6018      	str	r0, [r3, #0]
 8006cbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f43f acf1 	beq.w	80066a8 <_dtoa_r+0xa0>
 8006cc6:	601d      	str	r5, [r3, #0]
 8006cc8:	e4ee      	b.n	80066a8 <_dtoa_r+0xa0>
 8006cca:	9f00      	ldr	r7, [sp, #0]
 8006ccc:	462b      	mov	r3, r5
 8006cce:	461d      	mov	r5, r3
 8006cd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cd4:	2a39      	cmp	r2, #57	; 0x39
 8006cd6:	d106      	bne.n	8006ce6 <_dtoa_r+0x6de>
 8006cd8:	9a01      	ldr	r2, [sp, #4]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d1f7      	bne.n	8006cce <_dtoa_r+0x6c6>
 8006cde:	9901      	ldr	r1, [sp, #4]
 8006ce0:	2230      	movs	r2, #48	; 0x30
 8006ce2:	3701      	adds	r7, #1
 8006ce4:	700a      	strb	r2, [r1, #0]
 8006ce6:	781a      	ldrb	r2, [r3, #0]
 8006ce8:	3201      	adds	r2, #1
 8006cea:	701a      	strb	r2, [r3, #0]
 8006cec:	e790      	b.n	8006c10 <_dtoa_r+0x608>
 8006cee:	4ba6      	ldr	r3, [pc, #664]	; (8006f88 <_dtoa_r+0x980>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f7f9 fca1 	bl	8000638 <__aeabi_dmul>
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	4606      	mov	r6, r0
 8006cfc:	460f      	mov	r7, r1
 8006cfe:	f7f9 ff03 	bl	8000b08 <__aeabi_dcmpeq>
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d09d      	beq.n	8006c42 <_dtoa_r+0x63a>
 8006d06:	e7cf      	b.n	8006ca8 <_dtoa_r+0x6a0>
 8006d08:	9a08      	ldr	r2, [sp, #32]
 8006d0a:	2a00      	cmp	r2, #0
 8006d0c:	f000 80d7 	beq.w	8006ebe <_dtoa_r+0x8b6>
 8006d10:	9a06      	ldr	r2, [sp, #24]
 8006d12:	2a01      	cmp	r2, #1
 8006d14:	f300 80ba 	bgt.w	8006e8c <_dtoa_r+0x884>
 8006d18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d1a:	2a00      	cmp	r2, #0
 8006d1c:	f000 80b2 	beq.w	8006e84 <_dtoa_r+0x87c>
 8006d20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d24:	9e07      	ldr	r6, [sp, #28]
 8006d26:	9d04      	ldr	r5, [sp, #16]
 8006d28:	9a04      	ldr	r2, [sp, #16]
 8006d2a:	441a      	add	r2, r3
 8006d2c:	9204      	str	r2, [sp, #16]
 8006d2e:	9a05      	ldr	r2, [sp, #20]
 8006d30:	2101      	movs	r1, #1
 8006d32:	441a      	add	r2, r3
 8006d34:	4620      	mov	r0, r4
 8006d36:	9205      	str	r2, [sp, #20]
 8006d38:	f000 fd86 	bl	8007848 <__i2b>
 8006d3c:	4607      	mov	r7, r0
 8006d3e:	2d00      	cmp	r5, #0
 8006d40:	dd0c      	ble.n	8006d5c <_dtoa_r+0x754>
 8006d42:	9b05      	ldr	r3, [sp, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	dd09      	ble.n	8006d5c <_dtoa_r+0x754>
 8006d48:	42ab      	cmp	r3, r5
 8006d4a:	9a04      	ldr	r2, [sp, #16]
 8006d4c:	bfa8      	it	ge
 8006d4e:	462b      	movge	r3, r5
 8006d50:	1ad2      	subs	r2, r2, r3
 8006d52:	9204      	str	r2, [sp, #16]
 8006d54:	9a05      	ldr	r2, [sp, #20]
 8006d56:	1aed      	subs	r5, r5, r3
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	9305      	str	r3, [sp, #20]
 8006d5c:	9b07      	ldr	r3, [sp, #28]
 8006d5e:	b31b      	cbz	r3, 8006da8 <_dtoa_r+0x7a0>
 8006d60:	9b08      	ldr	r3, [sp, #32]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 80af 	beq.w	8006ec6 <_dtoa_r+0x8be>
 8006d68:	2e00      	cmp	r6, #0
 8006d6a:	dd13      	ble.n	8006d94 <_dtoa_r+0x78c>
 8006d6c:	4639      	mov	r1, r7
 8006d6e:	4632      	mov	r2, r6
 8006d70:	4620      	mov	r0, r4
 8006d72:	f000 fe29 	bl	80079c8 <__pow5mult>
 8006d76:	ee18 2a10 	vmov	r2, s16
 8006d7a:	4601      	mov	r1, r0
 8006d7c:	4607      	mov	r7, r0
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f000 fd78 	bl	8007874 <__multiply>
 8006d84:	ee18 1a10 	vmov	r1, s16
 8006d88:	4680      	mov	r8, r0
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f000 fca4 	bl	80076d8 <_Bfree>
 8006d90:	ee08 8a10 	vmov	s16, r8
 8006d94:	9b07      	ldr	r3, [sp, #28]
 8006d96:	1b9a      	subs	r2, r3, r6
 8006d98:	d006      	beq.n	8006da8 <_dtoa_r+0x7a0>
 8006d9a:	ee18 1a10 	vmov	r1, s16
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f000 fe12 	bl	80079c8 <__pow5mult>
 8006da4:	ee08 0a10 	vmov	s16, r0
 8006da8:	2101      	movs	r1, #1
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 fd4c 	bl	8007848 <__i2b>
 8006db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	4606      	mov	r6, r0
 8006db6:	f340 8088 	ble.w	8006eca <_dtoa_r+0x8c2>
 8006dba:	461a      	mov	r2, r3
 8006dbc:	4601      	mov	r1, r0
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f000 fe02 	bl	80079c8 <__pow5mult>
 8006dc4:	9b06      	ldr	r3, [sp, #24]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	4606      	mov	r6, r0
 8006dca:	f340 8081 	ble.w	8006ed0 <_dtoa_r+0x8c8>
 8006dce:	f04f 0800 	mov.w	r8, #0
 8006dd2:	6933      	ldr	r3, [r6, #16]
 8006dd4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006dd8:	6918      	ldr	r0, [r3, #16]
 8006dda:	f000 fce5 	bl	80077a8 <__hi0bits>
 8006dde:	f1c0 0020 	rsb	r0, r0, #32
 8006de2:	9b05      	ldr	r3, [sp, #20]
 8006de4:	4418      	add	r0, r3
 8006de6:	f010 001f 	ands.w	r0, r0, #31
 8006dea:	f000 8092 	beq.w	8006f12 <_dtoa_r+0x90a>
 8006dee:	f1c0 0320 	rsb	r3, r0, #32
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	f340 808a 	ble.w	8006f0c <_dtoa_r+0x904>
 8006df8:	f1c0 001c 	rsb	r0, r0, #28
 8006dfc:	9b04      	ldr	r3, [sp, #16]
 8006dfe:	4403      	add	r3, r0
 8006e00:	9304      	str	r3, [sp, #16]
 8006e02:	9b05      	ldr	r3, [sp, #20]
 8006e04:	4403      	add	r3, r0
 8006e06:	4405      	add	r5, r0
 8006e08:	9305      	str	r3, [sp, #20]
 8006e0a:	9b04      	ldr	r3, [sp, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	dd07      	ble.n	8006e20 <_dtoa_r+0x818>
 8006e10:	ee18 1a10 	vmov	r1, s16
 8006e14:	461a      	mov	r2, r3
 8006e16:	4620      	mov	r0, r4
 8006e18:	f000 fe30 	bl	8007a7c <__lshift>
 8006e1c:	ee08 0a10 	vmov	s16, r0
 8006e20:	9b05      	ldr	r3, [sp, #20]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	dd05      	ble.n	8006e32 <_dtoa_r+0x82a>
 8006e26:	4631      	mov	r1, r6
 8006e28:	461a      	mov	r2, r3
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f000 fe26 	bl	8007a7c <__lshift>
 8006e30:	4606      	mov	r6, r0
 8006e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d06e      	beq.n	8006f16 <_dtoa_r+0x90e>
 8006e38:	ee18 0a10 	vmov	r0, s16
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	f000 fe8d 	bl	8007b5c <__mcmp>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	da67      	bge.n	8006f16 <_dtoa_r+0x90e>
 8006e46:	9b00      	ldr	r3, [sp, #0]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	ee18 1a10 	vmov	r1, s16
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	220a      	movs	r2, #10
 8006e52:	2300      	movs	r3, #0
 8006e54:	4620      	mov	r0, r4
 8006e56:	f000 fc61 	bl	800771c <__multadd>
 8006e5a:	9b08      	ldr	r3, [sp, #32]
 8006e5c:	ee08 0a10 	vmov	s16, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 81b1 	beq.w	80071c8 <_dtoa_r+0xbc0>
 8006e66:	2300      	movs	r3, #0
 8006e68:	4639      	mov	r1, r7
 8006e6a:	220a      	movs	r2, #10
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	f000 fc55 	bl	800771c <__multadd>
 8006e72:	9b02      	ldr	r3, [sp, #8]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	4607      	mov	r7, r0
 8006e78:	f300 808e 	bgt.w	8006f98 <_dtoa_r+0x990>
 8006e7c:	9b06      	ldr	r3, [sp, #24]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	dc51      	bgt.n	8006f26 <_dtoa_r+0x91e>
 8006e82:	e089      	b.n	8006f98 <_dtoa_r+0x990>
 8006e84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e8a:	e74b      	b.n	8006d24 <_dtoa_r+0x71c>
 8006e8c:	9b03      	ldr	r3, [sp, #12]
 8006e8e:	1e5e      	subs	r6, r3, #1
 8006e90:	9b07      	ldr	r3, [sp, #28]
 8006e92:	42b3      	cmp	r3, r6
 8006e94:	bfbf      	itttt	lt
 8006e96:	9b07      	ldrlt	r3, [sp, #28]
 8006e98:	9607      	strlt	r6, [sp, #28]
 8006e9a:	1af2      	sublt	r2, r6, r3
 8006e9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e9e:	bfb6      	itet	lt
 8006ea0:	189b      	addlt	r3, r3, r2
 8006ea2:	1b9e      	subge	r6, r3, r6
 8006ea4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006ea6:	9b03      	ldr	r3, [sp, #12]
 8006ea8:	bfb8      	it	lt
 8006eaa:	2600      	movlt	r6, #0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	bfb7      	itett	lt
 8006eb0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006eb4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006eb8:	1a9d      	sublt	r5, r3, r2
 8006eba:	2300      	movlt	r3, #0
 8006ebc:	e734      	b.n	8006d28 <_dtoa_r+0x720>
 8006ebe:	9e07      	ldr	r6, [sp, #28]
 8006ec0:	9d04      	ldr	r5, [sp, #16]
 8006ec2:	9f08      	ldr	r7, [sp, #32]
 8006ec4:	e73b      	b.n	8006d3e <_dtoa_r+0x736>
 8006ec6:	9a07      	ldr	r2, [sp, #28]
 8006ec8:	e767      	b.n	8006d9a <_dtoa_r+0x792>
 8006eca:	9b06      	ldr	r3, [sp, #24]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	dc18      	bgt.n	8006f02 <_dtoa_r+0x8fa>
 8006ed0:	f1ba 0f00 	cmp.w	sl, #0
 8006ed4:	d115      	bne.n	8006f02 <_dtoa_r+0x8fa>
 8006ed6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006eda:	b993      	cbnz	r3, 8006f02 <_dtoa_r+0x8fa>
 8006edc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006ee0:	0d1b      	lsrs	r3, r3, #20
 8006ee2:	051b      	lsls	r3, r3, #20
 8006ee4:	b183      	cbz	r3, 8006f08 <_dtoa_r+0x900>
 8006ee6:	9b04      	ldr	r3, [sp, #16]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	9304      	str	r3, [sp, #16]
 8006eec:	9b05      	ldr	r3, [sp, #20]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	9305      	str	r3, [sp, #20]
 8006ef2:	f04f 0801 	mov.w	r8, #1
 8006ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f47f af6a 	bne.w	8006dd2 <_dtoa_r+0x7ca>
 8006efe:	2001      	movs	r0, #1
 8006f00:	e76f      	b.n	8006de2 <_dtoa_r+0x7da>
 8006f02:	f04f 0800 	mov.w	r8, #0
 8006f06:	e7f6      	b.n	8006ef6 <_dtoa_r+0x8ee>
 8006f08:	4698      	mov	r8, r3
 8006f0a:	e7f4      	b.n	8006ef6 <_dtoa_r+0x8ee>
 8006f0c:	f43f af7d 	beq.w	8006e0a <_dtoa_r+0x802>
 8006f10:	4618      	mov	r0, r3
 8006f12:	301c      	adds	r0, #28
 8006f14:	e772      	b.n	8006dfc <_dtoa_r+0x7f4>
 8006f16:	9b03      	ldr	r3, [sp, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	dc37      	bgt.n	8006f8c <_dtoa_r+0x984>
 8006f1c:	9b06      	ldr	r3, [sp, #24]
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	dd34      	ble.n	8006f8c <_dtoa_r+0x984>
 8006f22:	9b03      	ldr	r3, [sp, #12]
 8006f24:	9302      	str	r3, [sp, #8]
 8006f26:	9b02      	ldr	r3, [sp, #8]
 8006f28:	b96b      	cbnz	r3, 8006f46 <_dtoa_r+0x93e>
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	2205      	movs	r2, #5
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f000 fbf4 	bl	800771c <__multadd>
 8006f34:	4601      	mov	r1, r0
 8006f36:	4606      	mov	r6, r0
 8006f38:	ee18 0a10 	vmov	r0, s16
 8006f3c:	f000 fe0e 	bl	8007b5c <__mcmp>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	f73f adbb 	bgt.w	8006abc <_dtoa_r+0x4b4>
 8006f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f48:	9d01      	ldr	r5, [sp, #4]
 8006f4a:	43db      	mvns	r3, r3
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	f04f 0800 	mov.w	r8, #0
 8006f52:	4631      	mov	r1, r6
 8006f54:	4620      	mov	r0, r4
 8006f56:	f000 fbbf 	bl	80076d8 <_Bfree>
 8006f5a:	2f00      	cmp	r7, #0
 8006f5c:	f43f aea4 	beq.w	8006ca8 <_dtoa_r+0x6a0>
 8006f60:	f1b8 0f00 	cmp.w	r8, #0
 8006f64:	d005      	beq.n	8006f72 <_dtoa_r+0x96a>
 8006f66:	45b8      	cmp	r8, r7
 8006f68:	d003      	beq.n	8006f72 <_dtoa_r+0x96a>
 8006f6a:	4641      	mov	r1, r8
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f000 fbb3 	bl	80076d8 <_Bfree>
 8006f72:	4639      	mov	r1, r7
 8006f74:	4620      	mov	r0, r4
 8006f76:	f000 fbaf 	bl	80076d8 <_Bfree>
 8006f7a:	e695      	b.n	8006ca8 <_dtoa_r+0x6a0>
 8006f7c:	2600      	movs	r6, #0
 8006f7e:	4637      	mov	r7, r6
 8006f80:	e7e1      	b.n	8006f46 <_dtoa_r+0x93e>
 8006f82:	9700      	str	r7, [sp, #0]
 8006f84:	4637      	mov	r7, r6
 8006f86:	e599      	b.n	8006abc <_dtoa_r+0x4b4>
 8006f88:	40240000 	.word	0x40240000
 8006f8c:	9b08      	ldr	r3, [sp, #32]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 80ca 	beq.w	8007128 <_dtoa_r+0xb20>
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	9302      	str	r3, [sp, #8]
 8006f98:	2d00      	cmp	r5, #0
 8006f9a:	dd05      	ble.n	8006fa8 <_dtoa_r+0x9a0>
 8006f9c:	4639      	mov	r1, r7
 8006f9e:	462a      	mov	r2, r5
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f000 fd6b 	bl	8007a7c <__lshift>
 8006fa6:	4607      	mov	r7, r0
 8006fa8:	f1b8 0f00 	cmp.w	r8, #0
 8006fac:	d05b      	beq.n	8007066 <_dtoa_r+0xa5e>
 8006fae:	6879      	ldr	r1, [r7, #4]
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f000 fb51 	bl	8007658 <_Balloc>
 8006fb6:	4605      	mov	r5, r0
 8006fb8:	b928      	cbnz	r0, 8006fc6 <_dtoa_r+0x9be>
 8006fba:	4b87      	ldr	r3, [pc, #540]	; (80071d8 <_dtoa_r+0xbd0>)
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006fc2:	f7ff bb3b 	b.w	800663c <_dtoa_r+0x34>
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	3202      	adds	r2, #2
 8006fca:	0092      	lsls	r2, r2, #2
 8006fcc:	f107 010c 	add.w	r1, r7, #12
 8006fd0:	300c      	adds	r0, #12
 8006fd2:	f000 fb33 	bl	800763c <memcpy>
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	4629      	mov	r1, r5
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f000 fd4e 	bl	8007a7c <__lshift>
 8006fe0:	9b01      	ldr	r3, [sp, #4]
 8006fe2:	f103 0901 	add.w	r9, r3, #1
 8006fe6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006fea:	4413      	add	r3, r2
 8006fec:	9305      	str	r3, [sp, #20]
 8006fee:	f00a 0301 	and.w	r3, sl, #1
 8006ff2:	46b8      	mov	r8, r7
 8006ff4:	9304      	str	r3, [sp, #16]
 8006ff6:	4607      	mov	r7, r0
 8006ff8:	4631      	mov	r1, r6
 8006ffa:	ee18 0a10 	vmov	r0, s16
 8006ffe:	f7ff fa75 	bl	80064ec <quorem>
 8007002:	4641      	mov	r1, r8
 8007004:	9002      	str	r0, [sp, #8]
 8007006:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800700a:	ee18 0a10 	vmov	r0, s16
 800700e:	f000 fda5 	bl	8007b5c <__mcmp>
 8007012:	463a      	mov	r2, r7
 8007014:	9003      	str	r0, [sp, #12]
 8007016:	4631      	mov	r1, r6
 8007018:	4620      	mov	r0, r4
 800701a:	f000 fdbb 	bl	8007b94 <__mdiff>
 800701e:	68c2      	ldr	r2, [r0, #12]
 8007020:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007024:	4605      	mov	r5, r0
 8007026:	bb02      	cbnz	r2, 800706a <_dtoa_r+0xa62>
 8007028:	4601      	mov	r1, r0
 800702a:	ee18 0a10 	vmov	r0, s16
 800702e:	f000 fd95 	bl	8007b5c <__mcmp>
 8007032:	4602      	mov	r2, r0
 8007034:	4629      	mov	r1, r5
 8007036:	4620      	mov	r0, r4
 8007038:	9207      	str	r2, [sp, #28]
 800703a:	f000 fb4d 	bl	80076d8 <_Bfree>
 800703e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007042:	ea43 0102 	orr.w	r1, r3, r2
 8007046:	9b04      	ldr	r3, [sp, #16]
 8007048:	430b      	orrs	r3, r1
 800704a:	464d      	mov	r5, r9
 800704c:	d10f      	bne.n	800706e <_dtoa_r+0xa66>
 800704e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007052:	d02a      	beq.n	80070aa <_dtoa_r+0xaa2>
 8007054:	9b03      	ldr	r3, [sp, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	dd02      	ble.n	8007060 <_dtoa_r+0xa58>
 800705a:	9b02      	ldr	r3, [sp, #8]
 800705c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007060:	f88b a000 	strb.w	sl, [fp]
 8007064:	e775      	b.n	8006f52 <_dtoa_r+0x94a>
 8007066:	4638      	mov	r0, r7
 8007068:	e7ba      	b.n	8006fe0 <_dtoa_r+0x9d8>
 800706a:	2201      	movs	r2, #1
 800706c:	e7e2      	b.n	8007034 <_dtoa_r+0xa2c>
 800706e:	9b03      	ldr	r3, [sp, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	db04      	blt.n	800707e <_dtoa_r+0xa76>
 8007074:	9906      	ldr	r1, [sp, #24]
 8007076:	430b      	orrs	r3, r1
 8007078:	9904      	ldr	r1, [sp, #16]
 800707a:	430b      	orrs	r3, r1
 800707c:	d122      	bne.n	80070c4 <_dtoa_r+0xabc>
 800707e:	2a00      	cmp	r2, #0
 8007080:	ddee      	ble.n	8007060 <_dtoa_r+0xa58>
 8007082:	ee18 1a10 	vmov	r1, s16
 8007086:	2201      	movs	r2, #1
 8007088:	4620      	mov	r0, r4
 800708a:	f000 fcf7 	bl	8007a7c <__lshift>
 800708e:	4631      	mov	r1, r6
 8007090:	ee08 0a10 	vmov	s16, r0
 8007094:	f000 fd62 	bl	8007b5c <__mcmp>
 8007098:	2800      	cmp	r0, #0
 800709a:	dc03      	bgt.n	80070a4 <_dtoa_r+0xa9c>
 800709c:	d1e0      	bne.n	8007060 <_dtoa_r+0xa58>
 800709e:	f01a 0f01 	tst.w	sl, #1
 80070a2:	d0dd      	beq.n	8007060 <_dtoa_r+0xa58>
 80070a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070a8:	d1d7      	bne.n	800705a <_dtoa_r+0xa52>
 80070aa:	2339      	movs	r3, #57	; 0x39
 80070ac:	f88b 3000 	strb.w	r3, [fp]
 80070b0:	462b      	mov	r3, r5
 80070b2:	461d      	mov	r5, r3
 80070b4:	3b01      	subs	r3, #1
 80070b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070ba:	2a39      	cmp	r2, #57	; 0x39
 80070bc:	d071      	beq.n	80071a2 <_dtoa_r+0xb9a>
 80070be:	3201      	adds	r2, #1
 80070c0:	701a      	strb	r2, [r3, #0]
 80070c2:	e746      	b.n	8006f52 <_dtoa_r+0x94a>
 80070c4:	2a00      	cmp	r2, #0
 80070c6:	dd07      	ble.n	80070d8 <_dtoa_r+0xad0>
 80070c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070cc:	d0ed      	beq.n	80070aa <_dtoa_r+0xaa2>
 80070ce:	f10a 0301 	add.w	r3, sl, #1
 80070d2:	f88b 3000 	strb.w	r3, [fp]
 80070d6:	e73c      	b.n	8006f52 <_dtoa_r+0x94a>
 80070d8:	9b05      	ldr	r3, [sp, #20]
 80070da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80070de:	4599      	cmp	r9, r3
 80070e0:	d047      	beq.n	8007172 <_dtoa_r+0xb6a>
 80070e2:	ee18 1a10 	vmov	r1, s16
 80070e6:	2300      	movs	r3, #0
 80070e8:	220a      	movs	r2, #10
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 fb16 	bl	800771c <__multadd>
 80070f0:	45b8      	cmp	r8, r7
 80070f2:	ee08 0a10 	vmov	s16, r0
 80070f6:	f04f 0300 	mov.w	r3, #0
 80070fa:	f04f 020a 	mov.w	r2, #10
 80070fe:	4641      	mov	r1, r8
 8007100:	4620      	mov	r0, r4
 8007102:	d106      	bne.n	8007112 <_dtoa_r+0xb0a>
 8007104:	f000 fb0a 	bl	800771c <__multadd>
 8007108:	4680      	mov	r8, r0
 800710a:	4607      	mov	r7, r0
 800710c:	f109 0901 	add.w	r9, r9, #1
 8007110:	e772      	b.n	8006ff8 <_dtoa_r+0x9f0>
 8007112:	f000 fb03 	bl	800771c <__multadd>
 8007116:	4639      	mov	r1, r7
 8007118:	4680      	mov	r8, r0
 800711a:	2300      	movs	r3, #0
 800711c:	220a      	movs	r2, #10
 800711e:	4620      	mov	r0, r4
 8007120:	f000 fafc 	bl	800771c <__multadd>
 8007124:	4607      	mov	r7, r0
 8007126:	e7f1      	b.n	800710c <_dtoa_r+0xb04>
 8007128:	9b03      	ldr	r3, [sp, #12]
 800712a:	9302      	str	r3, [sp, #8]
 800712c:	9d01      	ldr	r5, [sp, #4]
 800712e:	ee18 0a10 	vmov	r0, s16
 8007132:	4631      	mov	r1, r6
 8007134:	f7ff f9da 	bl	80064ec <quorem>
 8007138:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800713c:	9b01      	ldr	r3, [sp, #4]
 800713e:	f805 ab01 	strb.w	sl, [r5], #1
 8007142:	1aea      	subs	r2, r5, r3
 8007144:	9b02      	ldr	r3, [sp, #8]
 8007146:	4293      	cmp	r3, r2
 8007148:	dd09      	ble.n	800715e <_dtoa_r+0xb56>
 800714a:	ee18 1a10 	vmov	r1, s16
 800714e:	2300      	movs	r3, #0
 8007150:	220a      	movs	r2, #10
 8007152:	4620      	mov	r0, r4
 8007154:	f000 fae2 	bl	800771c <__multadd>
 8007158:	ee08 0a10 	vmov	s16, r0
 800715c:	e7e7      	b.n	800712e <_dtoa_r+0xb26>
 800715e:	9b02      	ldr	r3, [sp, #8]
 8007160:	2b00      	cmp	r3, #0
 8007162:	bfc8      	it	gt
 8007164:	461d      	movgt	r5, r3
 8007166:	9b01      	ldr	r3, [sp, #4]
 8007168:	bfd8      	it	le
 800716a:	2501      	movle	r5, #1
 800716c:	441d      	add	r5, r3
 800716e:	f04f 0800 	mov.w	r8, #0
 8007172:	ee18 1a10 	vmov	r1, s16
 8007176:	2201      	movs	r2, #1
 8007178:	4620      	mov	r0, r4
 800717a:	f000 fc7f 	bl	8007a7c <__lshift>
 800717e:	4631      	mov	r1, r6
 8007180:	ee08 0a10 	vmov	s16, r0
 8007184:	f000 fcea 	bl	8007b5c <__mcmp>
 8007188:	2800      	cmp	r0, #0
 800718a:	dc91      	bgt.n	80070b0 <_dtoa_r+0xaa8>
 800718c:	d102      	bne.n	8007194 <_dtoa_r+0xb8c>
 800718e:	f01a 0f01 	tst.w	sl, #1
 8007192:	d18d      	bne.n	80070b0 <_dtoa_r+0xaa8>
 8007194:	462b      	mov	r3, r5
 8007196:	461d      	mov	r5, r3
 8007198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800719c:	2a30      	cmp	r2, #48	; 0x30
 800719e:	d0fa      	beq.n	8007196 <_dtoa_r+0xb8e>
 80071a0:	e6d7      	b.n	8006f52 <_dtoa_r+0x94a>
 80071a2:	9a01      	ldr	r2, [sp, #4]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d184      	bne.n	80070b2 <_dtoa_r+0xaaa>
 80071a8:	9b00      	ldr	r3, [sp, #0]
 80071aa:	3301      	adds	r3, #1
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	2331      	movs	r3, #49	; 0x31
 80071b0:	7013      	strb	r3, [r2, #0]
 80071b2:	e6ce      	b.n	8006f52 <_dtoa_r+0x94a>
 80071b4:	4b09      	ldr	r3, [pc, #36]	; (80071dc <_dtoa_r+0xbd4>)
 80071b6:	f7ff ba95 	b.w	80066e4 <_dtoa_r+0xdc>
 80071ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f47f aa6e 	bne.w	800669e <_dtoa_r+0x96>
 80071c2:	4b07      	ldr	r3, [pc, #28]	; (80071e0 <_dtoa_r+0xbd8>)
 80071c4:	f7ff ba8e 	b.w	80066e4 <_dtoa_r+0xdc>
 80071c8:	9b02      	ldr	r3, [sp, #8]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	dcae      	bgt.n	800712c <_dtoa_r+0xb24>
 80071ce:	9b06      	ldr	r3, [sp, #24]
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	f73f aea8 	bgt.w	8006f26 <_dtoa_r+0x91e>
 80071d6:	e7a9      	b.n	800712c <_dtoa_r+0xb24>
 80071d8:	08008b0f 	.word	0x08008b0f
 80071dc:	08008a6c 	.word	0x08008a6c
 80071e0:	08008a90 	.word	0x08008a90

080071e4 <__sflush_r>:
 80071e4:	898a      	ldrh	r2, [r1, #12]
 80071e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ea:	4605      	mov	r5, r0
 80071ec:	0710      	lsls	r0, r2, #28
 80071ee:	460c      	mov	r4, r1
 80071f0:	d458      	bmi.n	80072a4 <__sflush_r+0xc0>
 80071f2:	684b      	ldr	r3, [r1, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	dc05      	bgt.n	8007204 <__sflush_r+0x20>
 80071f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	dc02      	bgt.n	8007204 <__sflush_r+0x20>
 80071fe:	2000      	movs	r0, #0
 8007200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007206:	2e00      	cmp	r6, #0
 8007208:	d0f9      	beq.n	80071fe <__sflush_r+0x1a>
 800720a:	2300      	movs	r3, #0
 800720c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007210:	682f      	ldr	r7, [r5, #0]
 8007212:	602b      	str	r3, [r5, #0]
 8007214:	d032      	beq.n	800727c <__sflush_r+0x98>
 8007216:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	075a      	lsls	r2, r3, #29
 800721c:	d505      	bpl.n	800722a <__sflush_r+0x46>
 800721e:	6863      	ldr	r3, [r4, #4]
 8007220:	1ac0      	subs	r0, r0, r3
 8007222:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007224:	b10b      	cbz	r3, 800722a <__sflush_r+0x46>
 8007226:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007228:	1ac0      	subs	r0, r0, r3
 800722a:	2300      	movs	r3, #0
 800722c:	4602      	mov	r2, r0
 800722e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007230:	6a21      	ldr	r1, [r4, #32]
 8007232:	4628      	mov	r0, r5
 8007234:	47b0      	blx	r6
 8007236:	1c43      	adds	r3, r0, #1
 8007238:	89a3      	ldrh	r3, [r4, #12]
 800723a:	d106      	bne.n	800724a <__sflush_r+0x66>
 800723c:	6829      	ldr	r1, [r5, #0]
 800723e:	291d      	cmp	r1, #29
 8007240:	d82c      	bhi.n	800729c <__sflush_r+0xb8>
 8007242:	4a2a      	ldr	r2, [pc, #168]	; (80072ec <__sflush_r+0x108>)
 8007244:	40ca      	lsrs	r2, r1
 8007246:	07d6      	lsls	r6, r2, #31
 8007248:	d528      	bpl.n	800729c <__sflush_r+0xb8>
 800724a:	2200      	movs	r2, #0
 800724c:	6062      	str	r2, [r4, #4]
 800724e:	04d9      	lsls	r1, r3, #19
 8007250:	6922      	ldr	r2, [r4, #16]
 8007252:	6022      	str	r2, [r4, #0]
 8007254:	d504      	bpl.n	8007260 <__sflush_r+0x7c>
 8007256:	1c42      	adds	r2, r0, #1
 8007258:	d101      	bne.n	800725e <__sflush_r+0x7a>
 800725a:	682b      	ldr	r3, [r5, #0]
 800725c:	b903      	cbnz	r3, 8007260 <__sflush_r+0x7c>
 800725e:	6560      	str	r0, [r4, #84]	; 0x54
 8007260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007262:	602f      	str	r7, [r5, #0]
 8007264:	2900      	cmp	r1, #0
 8007266:	d0ca      	beq.n	80071fe <__sflush_r+0x1a>
 8007268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800726c:	4299      	cmp	r1, r3
 800726e:	d002      	beq.n	8007276 <__sflush_r+0x92>
 8007270:	4628      	mov	r0, r5
 8007272:	f000 fd8b 	bl	8007d8c <_free_r>
 8007276:	2000      	movs	r0, #0
 8007278:	6360      	str	r0, [r4, #52]	; 0x34
 800727a:	e7c1      	b.n	8007200 <__sflush_r+0x1c>
 800727c:	6a21      	ldr	r1, [r4, #32]
 800727e:	2301      	movs	r3, #1
 8007280:	4628      	mov	r0, r5
 8007282:	47b0      	blx	r6
 8007284:	1c41      	adds	r1, r0, #1
 8007286:	d1c7      	bne.n	8007218 <__sflush_r+0x34>
 8007288:	682b      	ldr	r3, [r5, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0c4      	beq.n	8007218 <__sflush_r+0x34>
 800728e:	2b1d      	cmp	r3, #29
 8007290:	d001      	beq.n	8007296 <__sflush_r+0xb2>
 8007292:	2b16      	cmp	r3, #22
 8007294:	d101      	bne.n	800729a <__sflush_r+0xb6>
 8007296:	602f      	str	r7, [r5, #0]
 8007298:	e7b1      	b.n	80071fe <__sflush_r+0x1a>
 800729a:	89a3      	ldrh	r3, [r4, #12]
 800729c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072a0:	81a3      	strh	r3, [r4, #12]
 80072a2:	e7ad      	b.n	8007200 <__sflush_r+0x1c>
 80072a4:	690f      	ldr	r7, [r1, #16]
 80072a6:	2f00      	cmp	r7, #0
 80072a8:	d0a9      	beq.n	80071fe <__sflush_r+0x1a>
 80072aa:	0793      	lsls	r3, r2, #30
 80072ac:	680e      	ldr	r6, [r1, #0]
 80072ae:	bf08      	it	eq
 80072b0:	694b      	ldreq	r3, [r1, #20]
 80072b2:	600f      	str	r7, [r1, #0]
 80072b4:	bf18      	it	ne
 80072b6:	2300      	movne	r3, #0
 80072b8:	eba6 0807 	sub.w	r8, r6, r7
 80072bc:	608b      	str	r3, [r1, #8]
 80072be:	f1b8 0f00 	cmp.w	r8, #0
 80072c2:	dd9c      	ble.n	80071fe <__sflush_r+0x1a>
 80072c4:	6a21      	ldr	r1, [r4, #32]
 80072c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072c8:	4643      	mov	r3, r8
 80072ca:	463a      	mov	r2, r7
 80072cc:	4628      	mov	r0, r5
 80072ce:	47b0      	blx	r6
 80072d0:	2800      	cmp	r0, #0
 80072d2:	dc06      	bgt.n	80072e2 <__sflush_r+0xfe>
 80072d4:	89a3      	ldrh	r3, [r4, #12]
 80072d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072da:	81a3      	strh	r3, [r4, #12]
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072e0:	e78e      	b.n	8007200 <__sflush_r+0x1c>
 80072e2:	4407      	add	r7, r0
 80072e4:	eba8 0800 	sub.w	r8, r8, r0
 80072e8:	e7e9      	b.n	80072be <__sflush_r+0xda>
 80072ea:	bf00      	nop
 80072ec:	20400001 	.word	0x20400001

080072f0 <_fflush_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	690b      	ldr	r3, [r1, #16]
 80072f4:	4605      	mov	r5, r0
 80072f6:	460c      	mov	r4, r1
 80072f8:	b913      	cbnz	r3, 8007300 <_fflush_r+0x10>
 80072fa:	2500      	movs	r5, #0
 80072fc:	4628      	mov	r0, r5
 80072fe:	bd38      	pop	{r3, r4, r5, pc}
 8007300:	b118      	cbz	r0, 800730a <_fflush_r+0x1a>
 8007302:	6983      	ldr	r3, [r0, #24]
 8007304:	b90b      	cbnz	r3, 800730a <_fflush_r+0x1a>
 8007306:	f000 f887 	bl	8007418 <__sinit>
 800730a:	4b14      	ldr	r3, [pc, #80]	; (800735c <_fflush_r+0x6c>)
 800730c:	429c      	cmp	r4, r3
 800730e:	d11b      	bne.n	8007348 <_fflush_r+0x58>
 8007310:	686c      	ldr	r4, [r5, #4]
 8007312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0ef      	beq.n	80072fa <_fflush_r+0xa>
 800731a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800731c:	07d0      	lsls	r0, r2, #31
 800731e:	d404      	bmi.n	800732a <_fflush_r+0x3a>
 8007320:	0599      	lsls	r1, r3, #22
 8007322:	d402      	bmi.n	800732a <_fflush_r+0x3a>
 8007324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007326:	f000 f91a 	bl	800755e <__retarget_lock_acquire_recursive>
 800732a:	4628      	mov	r0, r5
 800732c:	4621      	mov	r1, r4
 800732e:	f7ff ff59 	bl	80071e4 <__sflush_r>
 8007332:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007334:	07da      	lsls	r2, r3, #31
 8007336:	4605      	mov	r5, r0
 8007338:	d4e0      	bmi.n	80072fc <_fflush_r+0xc>
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	059b      	lsls	r3, r3, #22
 800733e:	d4dd      	bmi.n	80072fc <_fflush_r+0xc>
 8007340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007342:	f000 f90d 	bl	8007560 <__retarget_lock_release_recursive>
 8007346:	e7d9      	b.n	80072fc <_fflush_r+0xc>
 8007348:	4b05      	ldr	r3, [pc, #20]	; (8007360 <_fflush_r+0x70>)
 800734a:	429c      	cmp	r4, r3
 800734c:	d101      	bne.n	8007352 <_fflush_r+0x62>
 800734e:	68ac      	ldr	r4, [r5, #8]
 8007350:	e7df      	b.n	8007312 <_fflush_r+0x22>
 8007352:	4b04      	ldr	r3, [pc, #16]	; (8007364 <_fflush_r+0x74>)
 8007354:	429c      	cmp	r4, r3
 8007356:	bf08      	it	eq
 8007358:	68ec      	ldreq	r4, [r5, #12]
 800735a:	e7da      	b.n	8007312 <_fflush_r+0x22>
 800735c:	08008b40 	.word	0x08008b40
 8007360:	08008b60 	.word	0x08008b60
 8007364:	08008b20 	.word	0x08008b20

08007368 <std>:
 8007368:	2300      	movs	r3, #0
 800736a:	b510      	push	{r4, lr}
 800736c:	4604      	mov	r4, r0
 800736e:	e9c0 3300 	strd	r3, r3, [r0]
 8007372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007376:	6083      	str	r3, [r0, #8]
 8007378:	8181      	strh	r1, [r0, #12]
 800737a:	6643      	str	r3, [r0, #100]	; 0x64
 800737c:	81c2      	strh	r2, [r0, #14]
 800737e:	6183      	str	r3, [r0, #24]
 8007380:	4619      	mov	r1, r3
 8007382:	2208      	movs	r2, #8
 8007384:	305c      	adds	r0, #92	; 0x5c
 8007386:	f7fe faf1 	bl	800596c <memset>
 800738a:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <std+0x38>)
 800738c:	6263      	str	r3, [r4, #36]	; 0x24
 800738e:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <std+0x3c>)
 8007390:	62a3      	str	r3, [r4, #40]	; 0x28
 8007392:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <std+0x40>)
 8007394:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007396:	4b05      	ldr	r3, [pc, #20]	; (80073ac <std+0x44>)
 8007398:	6224      	str	r4, [r4, #32]
 800739a:	6323      	str	r3, [r4, #48]	; 0x30
 800739c:	bd10      	pop	{r4, pc}
 800739e:	bf00      	nop
 80073a0:	08008221 	.word	0x08008221
 80073a4:	08008243 	.word	0x08008243
 80073a8:	0800827b 	.word	0x0800827b
 80073ac:	0800829f 	.word	0x0800829f

080073b0 <_cleanup_r>:
 80073b0:	4901      	ldr	r1, [pc, #4]	; (80073b8 <_cleanup_r+0x8>)
 80073b2:	f000 b8af 	b.w	8007514 <_fwalk_reent>
 80073b6:	bf00      	nop
 80073b8:	080072f1 	.word	0x080072f1

080073bc <__sfmoreglue>:
 80073bc:	b570      	push	{r4, r5, r6, lr}
 80073be:	2268      	movs	r2, #104	; 0x68
 80073c0:	1e4d      	subs	r5, r1, #1
 80073c2:	4355      	muls	r5, r2
 80073c4:	460e      	mov	r6, r1
 80073c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073ca:	f000 fd4b 	bl	8007e64 <_malloc_r>
 80073ce:	4604      	mov	r4, r0
 80073d0:	b140      	cbz	r0, 80073e4 <__sfmoreglue+0x28>
 80073d2:	2100      	movs	r1, #0
 80073d4:	e9c0 1600 	strd	r1, r6, [r0]
 80073d8:	300c      	adds	r0, #12
 80073da:	60a0      	str	r0, [r4, #8]
 80073dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073e0:	f7fe fac4 	bl	800596c <memset>
 80073e4:	4620      	mov	r0, r4
 80073e6:	bd70      	pop	{r4, r5, r6, pc}

080073e8 <__sfp_lock_acquire>:
 80073e8:	4801      	ldr	r0, [pc, #4]	; (80073f0 <__sfp_lock_acquire+0x8>)
 80073ea:	f000 b8b8 	b.w	800755e <__retarget_lock_acquire_recursive>
 80073ee:	bf00      	nop
 80073f0:	20000311 	.word	0x20000311

080073f4 <__sfp_lock_release>:
 80073f4:	4801      	ldr	r0, [pc, #4]	; (80073fc <__sfp_lock_release+0x8>)
 80073f6:	f000 b8b3 	b.w	8007560 <__retarget_lock_release_recursive>
 80073fa:	bf00      	nop
 80073fc:	20000311 	.word	0x20000311

08007400 <__sinit_lock_acquire>:
 8007400:	4801      	ldr	r0, [pc, #4]	; (8007408 <__sinit_lock_acquire+0x8>)
 8007402:	f000 b8ac 	b.w	800755e <__retarget_lock_acquire_recursive>
 8007406:	bf00      	nop
 8007408:	20000312 	.word	0x20000312

0800740c <__sinit_lock_release>:
 800740c:	4801      	ldr	r0, [pc, #4]	; (8007414 <__sinit_lock_release+0x8>)
 800740e:	f000 b8a7 	b.w	8007560 <__retarget_lock_release_recursive>
 8007412:	bf00      	nop
 8007414:	20000312 	.word	0x20000312

08007418 <__sinit>:
 8007418:	b510      	push	{r4, lr}
 800741a:	4604      	mov	r4, r0
 800741c:	f7ff fff0 	bl	8007400 <__sinit_lock_acquire>
 8007420:	69a3      	ldr	r3, [r4, #24]
 8007422:	b11b      	cbz	r3, 800742c <__sinit+0x14>
 8007424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007428:	f7ff bff0 	b.w	800740c <__sinit_lock_release>
 800742c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007430:	6523      	str	r3, [r4, #80]	; 0x50
 8007432:	4b13      	ldr	r3, [pc, #76]	; (8007480 <__sinit+0x68>)
 8007434:	4a13      	ldr	r2, [pc, #76]	; (8007484 <__sinit+0x6c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	62a2      	str	r2, [r4, #40]	; 0x28
 800743a:	42a3      	cmp	r3, r4
 800743c:	bf04      	itt	eq
 800743e:	2301      	moveq	r3, #1
 8007440:	61a3      	streq	r3, [r4, #24]
 8007442:	4620      	mov	r0, r4
 8007444:	f000 f820 	bl	8007488 <__sfp>
 8007448:	6060      	str	r0, [r4, #4]
 800744a:	4620      	mov	r0, r4
 800744c:	f000 f81c 	bl	8007488 <__sfp>
 8007450:	60a0      	str	r0, [r4, #8]
 8007452:	4620      	mov	r0, r4
 8007454:	f000 f818 	bl	8007488 <__sfp>
 8007458:	2200      	movs	r2, #0
 800745a:	60e0      	str	r0, [r4, #12]
 800745c:	2104      	movs	r1, #4
 800745e:	6860      	ldr	r0, [r4, #4]
 8007460:	f7ff ff82 	bl	8007368 <std>
 8007464:	68a0      	ldr	r0, [r4, #8]
 8007466:	2201      	movs	r2, #1
 8007468:	2109      	movs	r1, #9
 800746a:	f7ff ff7d 	bl	8007368 <std>
 800746e:	68e0      	ldr	r0, [r4, #12]
 8007470:	2202      	movs	r2, #2
 8007472:	2112      	movs	r1, #18
 8007474:	f7ff ff78 	bl	8007368 <std>
 8007478:	2301      	movs	r3, #1
 800747a:	61a3      	str	r3, [r4, #24]
 800747c:	e7d2      	b.n	8007424 <__sinit+0xc>
 800747e:	bf00      	nop
 8007480:	08008a58 	.word	0x08008a58
 8007484:	080073b1 	.word	0x080073b1

08007488 <__sfp>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	4607      	mov	r7, r0
 800748c:	f7ff ffac 	bl	80073e8 <__sfp_lock_acquire>
 8007490:	4b1e      	ldr	r3, [pc, #120]	; (800750c <__sfp+0x84>)
 8007492:	681e      	ldr	r6, [r3, #0]
 8007494:	69b3      	ldr	r3, [r6, #24]
 8007496:	b913      	cbnz	r3, 800749e <__sfp+0x16>
 8007498:	4630      	mov	r0, r6
 800749a:	f7ff ffbd 	bl	8007418 <__sinit>
 800749e:	3648      	adds	r6, #72	; 0x48
 80074a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074a4:	3b01      	subs	r3, #1
 80074a6:	d503      	bpl.n	80074b0 <__sfp+0x28>
 80074a8:	6833      	ldr	r3, [r6, #0]
 80074aa:	b30b      	cbz	r3, 80074f0 <__sfp+0x68>
 80074ac:	6836      	ldr	r6, [r6, #0]
 80074ae:	e7f7      	b.n	80074a0 <__sfp+0x18>
 80074b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074b4:	b9d5      	cbnz	r5, 80074ec <__sfp+0x64>
 80074b6:	4b16      	ldr	r3, [pc, #88]	; (8007510 <__sfp+0x88>)
 80074b8:	60e3      	str	r3, [r4, #12]
 80074ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074be:	6665      	str	r5, [r4, #100]	; 0x64
 80074c0:	f000 f84c 	bl	800755c <__retarget_lock_init_recursive>
 80074c4:	f7ff ff96 	bl	80073f4 <__sfp_lock_release>
 80074c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074d0:	6025      	str	r5, [r4, #0]
 80074d2:	61a5      	str	r5, [r4, #24]
 80074d4:	2208      	movs	r2, #8
 80074d6:	4629      	mov	r1, r5
 80074d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074dc:	f7fe fa46 	bl	800596c <memset>
 80074e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074e8:	4620      	mov	r0, r4
 80074ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074ec:	3468      	adds	r4, #104	; 0x68
 80074ee:	e7d9      	b.n	80074a4 <__sfp+0x1c>
 80074f0:	2104      	movs	r1, #4
 80074f2:	4638      	mov	r0, r7
 80074f4:	f7ff ff62 	bl	80073bc <__sfmoreglue>
 80074f8:	4604      	mov	r4, r0
 80074fa:	6030      	str	r0, [r6, #0]
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d1d5      	bne.n	80074ac <__sfp+0x24>
 8007500:	f7ff ff78 	bl	80073f4 <__sfp_lock_release>
 8007504:	230c      	movs	r3, #12
 8007506:	603b      	str	r3, [r7, #0]
 8007508:	e7ee      	b.n	80074e8 <__sfp+0x60>
 800750a:	bf00      	nop
 800750c:	08008a58 	.word	0x08008a58
 8007510:	ffff0001 	.word	0xffff0001

08007514 <_fwalk_reent>:
 8007514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007518:	4606      	mov	r6, r0
 800751a:	4688      	mov	r8, r1
 800751c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007520:	2700      	movs	r7, #0
 8007522:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007526:	f1b9 0901 	subs.w	r9, r9, #1
 800752a:	d505      	bpl.n	8007538 <_fwalk_reent+0x24>
 800752c:	6824      	ldr	r4, [r4, #0]
 800752e:	2c00      	cmp	r4, #0
 8007530:	d1f7      	bne.n	8007522 <_fwalk_reent+0xe>
 8007532:	4638      	mov	r0, r7
 8007534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007538:	89ab      	ldrh	r3, [r5, #12]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d907      	bls.n	800754e <_fwalk_reent+0x3a>
 800753e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007542:	3301      	adds	r3, #1
 8007544:	d003      	beq.n	800754e <_fwalk_reent+0x3a>
 8007546:	4629      	mov	r1, r5
 8007548:	4630      	mov	r0, r6
 800754a:	47c0      	blx	r8
 800754c:	4307      	orrs	r7, r0
 800754e:	3568      	adds	r5, #104	; 0x68
 8007550:	e7e9      	b.n	8007526 <_fwalk_reent+0x12>
	...

08007554 <_localeconv_r>:
 8007554:	4800      	ldr	r0, [pc, #0]	; (8007558 <_localeconv_r+0x4>)
 8007556:	4770      	bx	lr
 8007558:	20000160 	.word	0x20000160

0800755c <__retarget_lock_init_recursive>:
 800755c:	4770      	bx	lr

0800755e <__retarget_lock_acquire_recursive>:
 800755e:	4770      	bx	lr

08007560 <__retarget_lock_release_recursive>:
 8007560:	4770      	bx	lr

08007562 <__swhatbuf_r>:
 8007562:	b570      	push	{r4, r5, r6, lr}
 8007564:	460e      	mov	r6, r1
 8007566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756a:	2900      	cmp	r1, #0
 800756c:	b096      	sub	sp, #88	; 0x58
 800756e:	4614      	mov	r4, r2
 8007570:	461d      	mov	r5, r3
 8007572:	da08      	bge.n	8007586 <__swhatbuf_r+0x24>
 8007574:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	602a      	str	r2, [r5, #0]
 800757c:	061a      	lsls	r2, r3, #24
 800757e:	d410      	bmi.n	80075a2 <__swhatbuf_r+0x40>
 8007580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007584:	e00e      	b.n	80075a4 <__swhatbuf_r+0x42>
 8007586:	466a      	mov	r2, sp
 8007588:	f000 fee0 	bl	800834c <_fstat_r>
 800758c:	2800      	cmp	r0, #0
 800758e:	dbf1      	blt.n	8007574 <__swhatbuf_r+0x12>
 8007590:	9a01      	ldr	r2, [sp, #4]
 8007592:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007596:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800759a:	425a      	negs	r2, r3
 800759c:	415a      	adcs	r2, r3
 800759e:	602a      	str	r2, [r5, #0]
 80075a0:	e7ee      	b.n	8007580 <__swhatbuf_r+0x1e>
 80075a2:	2340      	movs	r3, #64	; 0x40
 80075a4:	2000      	movs	r0, #0
 80075a6:	6023      	str	r3, [r4, #0]
 80075a8:	b016      	add	sp, #88	; 0x58
 80075aa:	bd70      	pop	{r4, r5, r6, pc}

080075ac <__smakebuf_r>:
 80075ac:	898b      	ldrh	r3, [r1, #12]
 80075ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075b0:	079d      	lsls	r5, r3, #30
 80075b2:	4606      	mov	r6, r0
 80075b4:	460c      	mov	r4, r1
 80075b6:	d507      	bpl.n	80075c8 <__smakebuf_r+0x1c>
 80075b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	6123      	str	r3, [r4, #16]
 80075c0:	2301      	movs	r3, #1
 80075c2:	6163      	str	r3, [r4, #20]
 80075c4:	b002      	add	sp, #8
 80075c6:	bd70      	pop	{r4, r5, r6, pc}
 80075c8:	ab01      	add	r3, sp, #4
 80075ca:	466a      	mov	r2, sp
 80075cc:	f7ff ffc9 	bl	8007562 <__swhatbuf_r>
 80075d0:	9900      	ldr	r1, [sp, #0]
 80075d2:	4605      	mov	r5, r0
 80075d4:	4630      	mov	r0, r6
 80075d6:	f000 fc45 	bl	8007e64 <_malloc_r>
 80075da:	b948      	cbnz	r0, 80075f0 <__smakebuf_r+0x44>
 80075dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e0:	059a      	lsls	r2, r3, #22
 80075e2:	d4ef      	bmi.n	80075c4 <__smakebuf_r+0x18>
 80075e4:	f023 0303 	bic.w	r3, r3, #3
 80075e8:	f043 0302 	orr.w	r3, r3, #2
 80075ec:	81a3      	strh	r3, [r4, #12]
 80075ee:	e7e3      	b.n	80075b8 <__smakebuf_r+0xc>
 80075f0:	4b0d      	ldr	r3, [pc, #52]	; (8007628 <__smakebuf_r+0x7c>)
 80075f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	6020      	str	r0, [r4, #0]
 80075f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075fc:	81a3      	strh	r3, [r4, #12]
 80075fe:	9b00      	ldr	r3, [sp, #0]
 8007600:	6163      	str	r3, [r4, #20]
 8007602:	9b01      	ldr	r3, [sp, #4]
 8007604:	6120      	str	r0, [r4, #16]
 8007606:	b15b      	cbz	r3, 8007620 <__smakebuf_r+0x74>
 8007608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800760c:	4630      	mov	r0, r6
 800760e:	f000 feaf 	bl	8008370 <_isatty_r>
 8007612:	b128      	cbz	r0, 8007620 <__smakebuf_r+0x74>
 8007614:	89a3      	ldrh	r3, [r4, #12]
 8007616:	f023 0303 	bic.w	r3, r3, #3
 800761a:	f043 0301 	orr.w	r3, r3, #1
 800761e:	81a3      	strh	r3, [r4, #12]
 8007620:	89a0      	ldrh	r0, [r4, #12]
 8007622:	4305      	orrs	r5, r0
 8007624:	81a5      	strh	r5, [r4, #12]
 8007626:	e7cd      	b.n	80075c4 <__smakebuf_r+0x18>
 8007628:	080073b1 	.word	0x080073b1

0800762c <malloc>:
 800762c:	4b02      	ldr	r3, [pc, #8]	; (8007638 <malloc+0xc>)
 800762e:	4601      	mov	r1, r0
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	f000 bc17 	b.w	8007e64 <_malloc_r>
 8007636:	bf00      	nop
 8007638:	2000000c 	.word	0x2000000c

0800763c <memcpy>:
 800763c:	440a      	add	r2, r1
 800763e:	4291      	cmp	r1, r2
 8007640:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007644:	d100      	bne.n	8007648 <memcpy+0xc>
 8007646:	4770      	bx	lr
 8007648:	b510      	push	{r4, lr}
 800764a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800764e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007652:	4291      	cmp	r1, r2
 8007654:	d1f9      	bne.n	800764a <memcpy+0xe>
 8007656:	bd10      	pop	{r4, pc}

08007658 <_Balloc>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800765c:	4604      	mov	r4, r0
 800765e:	460d      	mov	r5, r1
 8007660:	b976      	cbnz	r6, 8007680 <_Balloc+0x28>
 8007662:	2010      	movs	r0, #16
 8007664:	f7ff ffe2 	bl	800762c <malloc>
 8007668:	4602      	mov	r2, r0
 800766a:	6260      	str	r0, [r4, #36]	; 0x24
 800766c:	b920      	cbnz	r0, 8007678 <_Balloc+0x20>
 800766e:	4b18      	ldr	r3, [pc, #96]	; (80076d0 <_Balloc+0x78>)
 8007670:	4818      	ldr	r0, [pc, #96]	; (80076d4 <_Balloc+0x7c>)
 8007672:	2166      	movs	r1, #102	; 0x66
 8007674:	f000 fe2a 	bl	80082cc <__assert_func>
 8007678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800767c:	6006      	str	r6, [r0, #0]
 800767e:	60c6      	str	r6, [r0, #12]
 8007680:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007682:	68f3      	ldr	r3, [r6, #12]
 8007684:	b183      	cbz	r3, 80076a8 <_Balloc+0x50>
 8007686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800768e:	b9b8      	cbnz	r0, 80076c0 <_Balloc+0x68>
 8007690:	2101      	movs	r1, #1
 8007692:	fa01 f605 	lsl.w	r6, r1, r5
 8007696:	1d72      	adds	r2, r6, #5
 8007698:	0092      	lsls	r2, r2, #2
 800769a:	4620      	mov	r0, r4
 800769c:	f000 fb60 	bl	8007d60 <_calloc_r>
 80076a0:	b160      	cbz	r0, 80076bc <_Balloc+0x64>
 80076a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076a6:	e00e      	b.n	80076c6 <_Balloc+0x6e>
 80076a8:	2221      	movs	r2, #33	; 0x21
 80076aa:	2104      	movs	r1, #4
 80076ac:	4620      	mov	r0, r4
 80076ae:	f000 fb57 	bl	8007d60 <_calloc_r>
 80076b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076b4:	60f0      	str	r0, [r6, #12]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e4      	bne.n	8007686 <_Balloc+0x2e>
 80076bc:	2000      	movs	r0, #0
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	6802      	ldr	r2, [r0, #0]
 80076c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80076c6:	2300      	movs	r3, #0
 80076c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076cc:	e7f7      	b.n	80076be <_Balloc+0x66>
 80076ce:	bf00      	nop
 80076d0:	08008a9d 	.word	0x08008a9d
 80076d4:	08008b80 	.word	0x08008b80

080076d8 <_Bfree>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80076dc:	4605      	mov	r5, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	b976      	cbnz	r6, 8007700 <_Bfree+0x28>
 80076e2:	2010      	movs	r0, #16
 80076e4:	f7ff ffa2 	bl	800762c <malloc>
 80076e8:	4602      	mov	r2, r0
 80076ea:	6268      	str	r0, [r5, #36]	; 0x24
 80076ec:	b920      	cbnz	r0, 80076f8 <_Bfree+0x20>
 80076ee:	4b09      	ldr	r3, [pc, #36]	; (8007714 <_Bfree+0x3c>)
 80076f0:	4809      	ldr	r0, [pc, #36]	; (8007718 <_Bfree+0x40>)
 80076f2:	218a      	movs	r1, #138	; 0x8a
 80076f4:	f000 fdea 	bl	80082cc <__assert_func>
 80076f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076fc:	6006      	str	r6, [r0, #0]
 80076fe:	60c6      	str	r6, [r0, #12]
 8007700:	b13c      	cbz	r4, 8007712 <_Bfree+0x3a>
 8007702:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007704:	6862      	ldr	r2, [r4, #4]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800770c:	6021      	str	r1, [r4, #0]
 800770e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007712:	bd70      	pop	{r4, r5, r6, pc}
 8007714:	08008a9d 	.word	0x08008a9d
 8007718:	08008b80 	.word	0x08008b80

0800771c <__multadd>:
 800771c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007720:	690d      	ldr	r5, [r1, #16]
 8007722:	4607      	mov	r7, r0
 8007724:	460c      	mov	r4, r1
 8007726:	461e      	mov	r6, r3
 8007728:	f101 0c14 	add.w	ip, r1, #20
 800772c:	2000      	movs	r0, #0
 800772e:	f8dc 3000 	ldr.w	r3, [ip]
 8007732:	b299      	uxth	r1, r3
 8007734:	fb02 6101 	mla	r1, r2, r1, r6
 8007738:	0c1e      	lsrs	r6, r3, #16
 800773a:	0c0b      	lsrs	r3, r1, #16
 800773c:	fb02 3306 	mla	r3, r2, r6, r3
 8007740:	b289      	uxth	r1, r1
 8007742:	3001      	adds	r0, #1
 8007744:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007748:	4285      	cmp	r5, r0
 800774a:	f84c 1b04 	str.w	r1, [ip], #4
 800774e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007752:	dcec      	bgt.n	800772e <__multadd+0x12>
 8007754:	b30e      	cbz	r6, 800779a <__multadd+0x7e>
 8007756:	68a3      	ldr	r3, [r4, #8]
 8007758:	42ab      	cmp	r3, r5
 800775a:	dc19      	bgt.n	8007790 <__multadd+0x74>
 800775c:	6861      	ldr	r1, [r4, #4]
 800775e:	4638      	mov	r0, r7
 8007760:	3101      	adds	r1, #1
 8007762:	f7ff ff79 	bl	8007658 <_Balloc>
 8007766:	4680      	mov	r8, r0
 8007768:	b928      	cbnz	r0, 8007776 <__multadd+0x5a>
 800776a:	4602      	mov	r2, r0
 800776c:	4b0c      	ldr	r3, [pc, #48]	; (80077a0 <__multadd+0x84>)
 800776e:	480d      	ldr	r0, [pc, #52]	; (80077a4 <__multadd+0x88>)
 8007770:	21b5      	movs	r1, #181	; 0xb5
 8007772:	f000 fdab 	bl	80082cc <__assert_func>
 8007776:	6922      	ldr	r2, [r4, #16]
 8007778:	3202      	adds	r2, #2
 800777a:	f104 010c 	add.w	r1, r4, #12
 800777e:	0092      	lsls	r2, r2, #2
 8007780:	300c      	adds	r0, #12
 8007782:	f7ff ff5b 	bl	800763c <memcpy>
 8007786:	4621      	mov	r1, r4
 8007788:	4638      	mov	r0, r7
 800778a:	f7ff ffa5 	bl	80076d8 <_Bfree>
 800778e:	4644      	mov	r4, r8
 8007790:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007794:	3501      	adds	r5, #1
 8007796:	615e      	str	r6, [r3, #20]
 8007798:	6125      	str	r5, [r4, #16]
 800779a:	4620      	mov	r0, r4
 800779c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a0:	08008b0f 	.word	0x08008b0f
 80077a4:	08008b80 	.word	0x08008b80

080077a8 <__hi0bits>:
 80077a8:	0c03      	lsrs	r3, r0, #16
 80077aa:	041b      	lsls	r3, r3, #16
 80077ac:	b9d3      	cbnz	r3, 80077e4 <__hi0bits+0x3c>
 80077ae:	0400      	lsls	r0, r0, #16
 80077b0:	2310      	movs	r3, #16
 80077b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80077b6:	bf04      	itt	eq
 80077b8:	0200      	lsleq	r0, r0, #8
 80077ba:	3308      	addeq	r3, #8
 80077bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80077c0:	bf04      	itt	eq
 80077c2:	0100      	lsleq	r0, r0, #4
 80077c4:	3304      	addeq	r3, #4
 80077c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80077ca:	bf04      	itt	eq
 80077cc:	0080      	lsleq	r0, r0, #2
 80077ce:	3302      	addeq	r3, #2
 80077d0:	2800      	cmp	r0, #0
 80077d2:	db05      	blt.n	80077e0 <__hi0bits+0x38>
 80077d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80077d8:	f103 0301 	add.w	r3, r3, #1
 80077dc:	bf08      	it	eq
 80077de:	2320      	moveq	r3, #32
 80077e0:	4618      	mov	r0, r3
 80077e2:	4770      	bx	lr
 80077e4:	2300      	movs	r3, #0
 80077e6:	e7e4      	b.n	80077b2 <__hi0bits+0xa>

080077e8 <__lo0bits>:
 80077e8:	6803      	ldr	r3, [r0, #0]
 80077ea:	f013 0207 	ands.w	r2, r3, #7
 80077ee:	4601      	mov	r1, r0
 80077f0:	d00b      	beq.n	800780a <__lo0bits+0x22>
 80077f2:	07da      	lsls	r2, r3, #31
 80077f4:	d423      	bmi.n	800783e <__lo0bits+0x56>
 80077f6:	0798      	lsls	r0, r3, #30
 80077f8:	bf49      	itett	mi
 80077fa:	085b      	lsrmi	r3, r3, #1
 80077fc:	089b      	lsrpl	r3, r3, #2
 80077fe:	2001      	movmi	r0, #1
 8007800:	600b      	strmi	r3, [r1, #0]
 8007802:	bf5c      	itt	pl
 8007804:	600b      	strpl	r3, [r1, #0]
 8007806:	2002      	movpl	r0, #2
 8007808:	4770      	bx	lr
 800780a:	b298      	uxth	r0, r3
 800780c:	b9a8      	cbnz	r0, 800783a <__lo0bits+0x52>
 800780e:	0c1b      	lsrs	r3, r3, #16
 8007810:	2010      	movs	r0, #16
 8007812:	b2da      	uxtb	r2, r3
 8007814:	b90a      	cbnz	r2, 800781a <__lo0bits+0x32>
 8007816:	3008      	adds	r0, #8
 8007818:	0a1b      	lsrs	r3, r3, #8
 800781a:	071a      	lsls	r2, r3, #28
 800781c:	bf04      	itt	eq
 800781e:	091b      	lsreq	r3, r3, #4
 8007820:	3004      	addeq	r0, #4
 8007822:	079a      	lsls	r2, r3, #30
 8007824:	bf04      	itt	eq
 8007826:	089b      	lsreq	r3, r3, #2
 8007828:	3002      	addeq	r0, #2
 800782a:	07da      	lsls	r2, r3, #31
 800782c:	d403      	bmi.n	8007836 <__lo0bits+0x4e>
 800782e:	085b      	lsrs	r3, r3, #1
 8007830:	f100 0001 	add.w	r0, r0, #1
 8007834:	d005      	beq.n	8007842 <__lo0bits+0x5a>
 8007836:	600b      	str	r3, [r1, #0]
 8007838:	4770      	bx	lr
 800783a:	4610      	mov	r0, r2
 800783c:	e7e9      	b.n	8007812 <__lo0bits+0x2a>
 800783e:	2000      	movs	r0, #0
 8007840:	4770      	bx	lr
 8007842:	2020      	movs	r0, #32
 8007844:	4770      	bx	lr
	...

08007848 <__i2b>:
 8007848:	b510      	push	{r4, lr}
 800784a:	460c      	mov	r4, r1
 800784c:	2101      	movs	r1, #1
 800784e:	f7ff ff03 	bl	8007658 <_Balloc>
 8007852:	4602      	mov	r2, r0
 8007854:	b928      	cbnz	r0, 8007862 <__i2b+0x1a>
 8007856:	4b05      	ldr	r3, [pc, #20]	; (800786c <__i2b+0x24>)
 8007858:	4805      	ldr	r0, [pc, #20]	; (8007870 <__i2b+0x28>)
 800785a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800785e:	f000 fd35 	bl	80082cc <__assert_func>
 8007862:	2301      	movs	r3, #1
 8007864:	6144      	str	r4, [r0, #20]
 8007866:	6103      	str	r3, [r0, #16]
 8007868:	bd10      	pop	{r4, pc}
 800786a:	bf00      	nop
 800786c:	08008b0f 	.word	0x08008b0f
 8007870:	08008b80 	.word	0x08008b80

08007874 <__multiply>:
 8007874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007878:	4691      	mov	r9, r2
 800787a:	690a      	ldr	r2, [r1, #16]
 800787c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007880:	429a      	cmp	r2, r3
 8007882:	bfb8      	it	lt
 8007884:	460b      	movlt	r3, r1
 8007886:	460c      	mov	r4, r1
 8007888:	bfbc      	itt	lt
 800788a:	464c      	movlt	r4, r9
 800788c:	4699      	movlt	r9, r3
 800788e:	6927      	ldr	r7, [r4, #16]
 8007890:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007894:	68a3      	ldr	r3, [r4, #8]
 8007896:	6861      	ldr	r1, [r4, #4]
 8007898:	eb07 060a 	add.w	r6, r7, sl
 800789c:	42b3      	cmp	r3, r6
 800789e:	b085      	sub	sp, #20
 80078a0:	bfb8      	it	lt
 80078a2:	3101      	addlt	r1, #1
 80078a4:	f7ff fed8 	bl	8007658 <_Balloc>
 80078a8:	b930      	cbnz	r0, 80078b8 <__multiply+0x44>
 80078aa:	4602      	mov	r2, r0
 80078ac:	4b44      	ldr	r3, [pc, #272]	; (80079c0 <__multiply+0x14c>)
 80078ae:	4845      	ldr	r0, [pc, #276]	; (80079c4 <__multiply+0x150>)
 80078b0:	f240 115d 	movw	r1, #349	; 0x15d
 80078b4:	f000 fd0a 	bl	80082cc <__assert_func>
 80078b8:	f100 0514 	add.w	r5, r0, #20
 80078bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80078c0:	462b      	mov	r3, r5
 80078c2:	2200      	movs	r2, #0
 80078c4:	4543      	cmp	r3, r8
 80078c6:	d321      	bcc.n	800790c <__multiply+0x98>
 80078c8:	f104 0314 	add.w	r3, r4, #20
 80078cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80078d0:	f109 0314 	add.w	r3, r9, #20
 80078d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80078d8:	9202      	str	r2, [sp, #8]
 80078da:	1b3a      	subs	r2, r7, r4
 80078dc:	3a15      	subs	r2, #21
 80078de:	f022 0203 	bic.w	r2, r2, #3
 80078e2:	3204      	adds	r2, #4
 80078e4:	f104 0115 	add.w	r1, r4, #21
 80078e8:	428f      	cmp	r7, r1
 80078ea:	bf38      	it	cc
 80078ec:	2204      	movcc	r2, #4
 80078ee:	9201      	str	r2, [sp, #4]
 80078f0:	9a02      	ldr	r2, [sp, #8]
 80078f2:	9303      	str	r3, [sp, #12]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d80c      	bhi.n	8007912 <__multiply+0x9e>
 80078f8:	2e00      	cmp	r6, #0
 80078fa:	dd03      	ble.n	8007904 <__multiply+0x90>
 80078fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007900:	2b00      	cmp	r3, #0
 8007902:	d05a      	beq.n	80079ba <__multiply+0x146>
 8007904:	6106      	str	r6, [r0, #16]
 8007906:	b005      	add	sp, #20
 8007908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790c:	f843 2b04 	str.w	r2, [r3], #4
 8007910:	e7d8      	b.n	80078c4 <__multiply+0x50>
 8007912:	f8b3 a000 	ldrh.w	sl, [r3]
 8007916:	f1ba 0f00 	cmp.w	sl, #0
 800791a:	d024      	beq.n	8007966 <__multiply+0xf2>
 800791c:	f104 0e14 	add.w	lr, r4, #20
 8007920:	46a9      	mov	r9, r5
 8007922:	f04f 0c00 	mov.w	ip, #0
 8007926:	f85e 2b04 	ldr.w	r2, [lr], #4
 800792a:	f8d9 1000 	ldr.w	r1, [r9]
 800792e:	fa1f fb82 	uxth.w	fp, r2
 8007932:	b289      	uxth	r1, r1
 8007934:	fb0a 110b 	mla	r1, sl, fp, r1
 8007938:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800793c:	f8d9 2000 	ldr.w	r2, [r9]
 8007940:	4461      	add	r1, ip
 8007942:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007946:	fb0a c20b 	mla	r2, sl, fp, ip
 800794a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800794e:	b289      	uxth	r1, r1
 8007950:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007954:	4577      	cmp	r7, lr
 8007956:	f849 1b04 	str.w	r1, [r9], #4
 800795a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800795e:	d8e2      	bhi.n	8007926 <__multiply+0xb2>
 8007960:	9a01      	ldr	r2, [sp, #4]
 8007962:	f845 c002 	str.w	ip, [r5, r2]
 8007966:	9a03      	ldr	r2, [sp, #12]
 8007968:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800796c:	3304      	adds	r3, #4
 800796e:	f1b9 0f00 	cmp.w	r9, #0
 8007972:	d020      	beq.n	80079b6 <__multiply+0x142>
 8007974:	6829      	ldr	r1, [r5, #0]
 8007976:	f104 0c14 	add.w	ip, r4, #20
 800797a:	46ae      	mov	lr, r5
 800797c:	f04f 0a00 	mov.w	sl, #0
 8007980:	f8bc b000 	ldrh.w	fp, [ip]
 8007984:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007988:	fb09 220b 	mla	r2, r9, fp, r2
 800798c:	4492      	add	sl, r2
 800798e:	b289      	uxth	r1, r1
 8007990:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007994:	f84e 1b04 	str.w	r1, [lr], #4
 8007998:	f85c 2b04 	ldr.w	r2, [ip], #4
 800799c:	f8be 1000 	ldrh.w	r1, [lr]
 80079a0:	0c12      	lsrs	r2, r2, #16
 80079a2:	fb09 1102 	mla	r1, r9, r2, r1
 80079a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80079aa:	4567      	cmp	r7, ip
 80079ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80079b0:	d8e6      	bhi.n	8007980 <__multiply+0x10c>
 80079b2:	9a01      	ldr	r2, [sp, #4]
 80079b4:	50a9      	str	r1, [r5, r2]
 80079b6:	3504      	adds	r5, #4
 80079b8:	e79a      	b.n	80078f0 <__multiply+0x7c>
 80079ba:	3e01      	subs	r6, #1
 80079bc:	e79c      	b.n	80078f8 <__multiply+0x84>
 80079be:	bf00      	nop
 80079c0:	08008b0f 	.word	0x08008b0f
 80079c4:	08008b80 	.word	0x08008b80

080079c8 <__pow5mult>:
 80079c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079cc:	4615      	mov	r5, r2
 80079ce:	f012 0203 	ands.w	r2, r2, #3
 80079d2:	4606      	mov	r6, r0
 80079d4:	460f      	mov	r7, r1
 80079d6:	d007      	beq.n	80079e8 <__pow5mult+0x20>
 80079d8:	4c25      	ldr	r4, [pc, #148]	; (8007a70 <__pow5mult+0xa8>)
 80079da:	3a01      	subs	r2, #1
 80079dc:	2300      	movs	r3, #0
 80079de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079e2:	f7ff fe9b 	bl	800771c <__multadd>
 80079e6:	4607      	mov	r7, r0
 80079e8:	10ad      	asrs	r5, r5, #2
 80079ea:	d03d      	beq.n	8007a68 <__pow5mult+0xa0>
 80079ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80079ee:	b97c      	cbnz	r4, 8007a10 <__pow5mult+0x48>
 80079f0:	2010      	movs	r0, #16
 80079f2:	f7ff fe1b 	bl	800762c <malloc>
 80079f6:	4602      	mov	r2, r0
 80079f8:	6270      	str	r0, [r6, #36]	; 0x24
 80079fa:	b928      	cbnz	r0, 8007a08 <__pow5mult+0x40>
 80079fc:	4b1d      	ldr	r3, [pc, #116]	; (8007a74 <__pow5mult+0xac>)
 80079fe:	481e      	ldr	r0, [pc, #120]	; (8007a78 <__pow5mult+0xb0>)
 8007a00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007a04:	f000 fc62 	bl	80082cc <__assert_func>
 8007a08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a0c:	6004      	str	r4, [r0, #0]
 8007a0e:	60c4      	str	r4, [r0, #12]
 8007a10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007a14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a18:	b94c      	cbnz	r4, 8007a2e <__pow5mult+0x66>
 8007a1a:	f240 2171 	movw	r1, #625	; 0x271
 8007a1e:	4630      	mov	r0, r6
 8007a20:	f7ff ff12 	bl	8007848 <__i2b>
 8007a24:	2300      	movs	r3, #0
 8007a26:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	6003      	str	r3, [r0, #0]
 8007a2e:	f04f 0900 	mov.w	r9, #0
 8007a32:	07eb      	lsls	r3, r5, #31
 8007a34:	d50a      	bpl.n	8007a4c <__pow5mult+0x84>
 8007a36:	4639      	mov	r1, r7
 8007a38:	4622      	mov	r2, r4
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f7ff ff1a 	bl	8007874 <__multiply>
 8007a40:	4639      	mov	r1, r7
 8007a42:	4680      	mov	r8, r0
 8007a44:	4630      	mov	r0, r6
 8007a46:	f7ff fe47 	bl	80076d8 <_Bfree>
 8007a4a:	4647      	mov	r7, r8
 8007a4c:	106d      	asrs	r5, r5, #1
 8007a4e:	d00b      	beq.n	8007a68 <__pow5mult+0xa0>
 8007a50:	6820      	ldr	r0, [r4, #0]
 8007a52:	b938      	cbnz	r0, 8007a64 <__pow5mult+0x9c>
 8007a54:	4622      	mov	r2, r4
 8007a56:	4621      	mov	r1, r4
 8007a58:	4630      	mov	r0, r6
 8007a5a:	f7ff ff0b 	bl	8007874 <__multiply>
 8007a5e:	6020      	str	r0, [r4, #0]
 8007a60:	f8c0 9000 	str.w	r9, [r0]
 8007a64:	4604      	mov	r4, r0
 8007a66:	e7e4      	b.n	8007a32 <__pow5mult+0x6a>
 8007a68:	4638      	mov	r0, r7
 8007a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a6e:	bf00      	nop
 8007a70:	08008cd0 	.word	0x08008cd0
 8007a74:	08008a9d 	.word	0x08008a9d
 8007a78:	08008b80 	.word	0x08008b80

08007a7c <__lshift>:
 8007a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a80:	460c      	mov	r4, r1
 8007a82:	6849      	ldr	r1, [r1, #4]
 8007a84:	6923      	ldr	r3, [r4, #16]
 8007a86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a8a:	68a3      	ldr	r3, [r4, #8]
 8007a8c:	4607      	mov	r7, r0
 8007a8e:	4691      	mov	r9, r2
 8007a90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a94:	f108 0601 	add.w	r6, r8, #1
 8007a98:	42b3      	cmp	r3, r6
 8007a9a:	db0b      	blt.n	8007ab4 <__lshift+0x38>
 8007a9c:	4638      	mov	r0, r7
 8007a9e:	f7ff fddb 	bl	8007658 <_Balloc>
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	b948      	cbnz	r0, 8007aba <__lshift+0x3e>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	4b2a      	ldr	r3, [pc, #168]	; (8007b54 <__lshift+0xd8>)
 8007aaa:	482b      	ldr	r0, [pc, #172]	; (8007b58 <__lshift+0xdc>)
 8007aac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ab0:	f000 fc0c 	bl	80082cc <__assert_func>
 8007ab4:	3101      	adds	r1, #1
 8007ab6:	005b      	lsls	r3, r3, #1
 8007ab8:	e7ee      	b.n	8007a98 <__lshift+0x1c>
 8007aba:	2300      	movs	r3, #0
 8007abc:	f100 0114 	add.w	r1, r0, #20
 8007ac0:	f100 0210 	add.w	r2, r0, #16
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	4553      	cmp	r3, sl
 8007ac8:	db37      	blt.n	8007b3a <__lshift+0xbe>
 8007aca:	6920      	ldr	r0, [r4, #16]
 8007acc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ad0:	f104 0314 	add.w	r3, r4, #20
 8007ad4:	f019 091f 	ands.w	r9, r9, #31
 8007ad8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007adc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007ae0:	d02f      	beq.n	8007b42 <__lshift+0xc6>
 8007ae2:	f1c9 0e20 	rsb	lr, r9, #32
 8007ae6:	468a      	mov	sl, r1
 8007ae8:	f04f 0c00 	mov.w	ip, #0
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	fa02 f209 	lsl.w	r2, r2, r9
 8007af2:	ea42 020c 	orr.w	r2, r2, ip
 8007af6:	f84a 2b04 	str.w	r2, [sl], #4
 8007afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007afe:	4298      	cmp	r0, r3
 8007b00:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007b04:	d8f2      	bhi.n	8007aec <__lshift+0x70>
 8007b06:	1b03      	subs	r3, r0, r4
 8007b08:	3b15      	subs	r3, #21
 8007b0a:	f023 0303 	bic.w	r3, r3, #3
 8007b0e:	3304      	adds	r3, #4
 8007b10:	f104 0215 	add.w	r2, r4, #21
 8007b14:	4290      	cmp	r0, r2
 8007b16:	bf38      	it	cc
 8007b18:	2304      	movcc	r3, #4
 8007b1a:	f841 c003 	str.w	ip, [r1, r3]
 8007b1e:	f1bc 0f00 	cmp.w	ip, #0
 8007b22:	d001      	beq.n	8007b28 <__lshift+0xac>
 8007b24:	f108 0602 	add.w	r6, r8, #2
 8007b28:	3e01      	subs	r6, #1
 8007b2a:	4638      	mov	r0, r7
 8007b2c:	612e      	str	r6, [r5, #16]
 8007b2e:	4621      	mov	r1, r4
 8007b30:	f7ff fdd2 	bl	80076d8 <_Bfree>
 8007b34:	4628      	mov	r0, r5
 8007b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b3e:	3301      	adds	r3, #1
 8007b40:	e7c1      	b.n	8007ac6 <__lshift+0x4a>
 8007b42:	3904      	subs	r1, #4
 8007b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b48:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b4c:	4298      	cmp	r0, r3
 8007b4e:	d8f9      	bhi.n	8007b44 <__lshift+0xc8>
 8007b50:	e7ea      	b.n	8007b28 <__lshift+0xac>
 8007b52:	bf00      	nop
 8007b54:	08008b0f 	.word	0x08008b0f
 8007b58:	08008b80 	.word	0x08008b80

08007b5c <__mcmp>:
 8007b5c:	b530      	push	{r4, r5, lr}
 8007b5e:	6902      	ldr	r2, [r0, #16]
 8007b60:	690c      	ldr	r4, [r1, #16]
 8007b62:	1b12      	subs	r2, r2, r4
 8007b64:	d10e      	bne.n	8007b84 <__mcmp+0x28>
 8007b66:	f100 0314 	add.w	r3, r0, #20
 8007b6a:	3114      	adds	r1, #20
 8007b6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007b70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007b74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007b78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007b7c:	42a5      	cmp	r5, r4
 8007b7e:	d003      	beq.n	8007b88 <__mcmp+0x2c>
 8007b80:	d305      	bcc.n	8007b8e <__mcmp+0x32>
 8007b82:	2201      	movs	r2, #1
 8007b84:	4610      	mov	r0, r2
 8007b86:	bd30      	pop	{r4, r5, pc}
 8007b88:	4283      	cmp	r3, r0
 8007b8a:	d3f3      	bcc.n	8007b74 <__mcmp+0x18>
 8007b8c:	e7fa      	b.n	8007b84 <__mcmp+0x28>
 8007b8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b92:	e7f7      	b.n	8007b84 <__mcmp+0x28>

08007b94 <__mdiff>:
 8007b94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b98:	460c      	mov	r4, r1
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	4690      	mov	r8, r2
 8007ba2:	f7ff ffdb 	bl	8007b5c <__mcmp>
 8007ba6:	1e05      	subs	r5, r0, #0
 8007ba8:	d110      	bne.n	8007bcc <__mdiff+0x38>
 8007baa:	4629      	mov	r1, r5
 8007bac:	4630      	mov	r0, r6
 8007bae:	f7ff fd53 	bl	8007658 <_Balloc>
 8007bb2:	b930      	cbnz	r0, 8007bc2 <__mdiff+0x2e>
 8007bb4:	4b3a      	ldr	r3, [pc, #232]	; (8007ca0 <__mdiff+0x10c>)
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	f240 2132 	movw	r1, #562	; 0x232
 8007bbc:	4839      	ldr	r0, [pc, #228]	; (8007ca4 <__mdiff+0x110>)
 8007bbe:	f000 fb85 	bl	80082cc <__assert_func>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007bc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bcc:	bfa4      	itt	ge
 8007bce:	4643      	movge	r3, r8
 8007bd0:	46a0      	movge	r8, r4
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007bd8:	bfa6      	itte	ge
 8007bda:	461c      	movge	r4, r3
 8007bdc:	2500      	movge	r5, #0
 8007bde:	2501      	movlt	r5, #1
 8007be0:	f7ff fd3a 	bl	8007658 <_Balloc>
 8007be4:	b920      	cbnz	r0, 8007bf0 <__mdiff+0x5c>
 8007be6:	4b2e      	ldr	r3, [pc, #184]	; (8007ca0 <__mdiff+0x10c>)
 8007be8:	4602      	mov	r2, r0
 8007bea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007bee:	e7e5      	b.n	8007bbc <__mdiff+0x28>
 8007bf0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007bf4:	6926      	ldr	r6, [r4, #16]
 8007bf6:	60c5      	str	r5, [r0, #12]
 8007bf8:	f104 0914 	add.w	r9, r4, #20
 8007bfc:	f108 0514 	add.w	r5, r8, #20
 8007c00:	f100 0e14 	add.w	lr, r0, #20
 8007c04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007c08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007c0c:	f108 0210 	add.w	r2, r8, #16
 8007c10:	46f2      	mov	sl, lr
 8007c12:	2100      	movs	r1, #0
 8007c14:	f859 3b04 	ldr.w	r3, [r9], #4
 8007c18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007c1c:	fa1f f883 	uxth.w	r8, r3
 8007c20:	fa11 f18b 	uxtah	r1, r1, fp
 8007c24:	0c1b      	lsrs	r3, r3, #16
 8007c26:	eba1 0808 	sub.w	r8, r1, r8
 8007c2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007c2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007c32:	fa1f f888 	uxth.w	r8, r8
 8007c36:	1419      	asrs	r1, r3, #16
 8007c38:	454e      	cmp	r6, r9
 8007c3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007c3e:	f84a 3b04 	str.w	r3, [sl], #4
 8007c42:	d8e7      	bhi.n	8007c14 <__mdiff+0x80>
 8007c44:	1b33      	subs	r3, r6, r4
 8007c46:	3b15      	subs	r3, #21
 8007c48:	f023 0303 	bic.w	r3, r3, #3
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	3415      	adds	r4, #21
 8007c50:	42a6      	cmp	r6, r4
 8007c52:	bf38      	it	cc
 8007c54:	2304      	movcc	r3, #4
 8007c56:	441d      	add	r5, r3
 8007c58:	4473      	add	r3, lr
 8007c5a:	469e      	mov	lr, r3
 8007c5c:	462e      	mov	r6, r5
 8007c5e:	4566      	cmp	r6, ip
 8007c60:	d30e      	bcc.n	8007c80 <__mdiff+0xec>
 8007c62:	f10c 0203 	add.w	r2, ip, #3
 8007c66:	1b52      	subs	r2, r2, r5
 8007c68:	f022 0203 	bic.w	r2, r2, #3
 8007c6c:	3d03      	subs	r5, #3
 8007c6e:	45ac      	cmp	ip, r5
 8007c70:	bf38      	it	cc
 8007c72:	2200      	movcc	r2, #0
 8007c74:	441a      	add	r2, r3
 8007c76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007c7a:	b17b      	cbz	r3, 8007c9c <__mdiff+0x108>
 8007c7c:	6107      	str	r7, [r0, #16]
 8007c7e:	e7a3      	b.n	8007bc8 <__mdiff+0x34>
 8007c80:	f856 8b04 	ldr.w	r8, [r6], #4
 8007c84:	fa11 f288 	uxtah	r2, r1, r8
 8007c88:	1414      	asrs	r4, r2, #16
 8007c8a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007c8e:	b292      	uxth	r2, r2
 8007c90:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007c94:	f84e 2b04 	str.w	r2, [lr], #4
 8007c98:	1421      	asrs	r1, r4, #16
 8007c9a:	e7e0      	b.n	8007c5e <__mdiff+0xca>
 8007c9c:	3f01      	subs	r7, #1
 8007c9e:	e7ea      	b.n	8007c76 <__mdiff+0xe2>
 8007ca0:	08008b0f 	.word	0x08008b0f
 8007ca4:	08008b80 	.word	0x08008b80

08007ca8 <__d2b>:
 8007ca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007cac:	4689      	mov	r9, r1
 8007cae:	2101      	movs	r1, #1
 8007cb0:	ec57 6b10 	vmov	r6, r7, d0
 8007cb4:	4690      	mov	r8, r2
 8007cb6:	f7ff fccf 	bl	8007658 <_Balloc>
 8007cba:	4604      	mov	r4, r0
 8007cbc:	b930      	cbnz	r0, 8007ccc <__d2b+0x24>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	4b25      	ldr	r3, [pc, #148]	; (8007d58 <__d2b+0xb0>)
 8007cc2:	4826      	ldr	r0, [pc, #152]	; (8007d5c <__d2b+0xb4>)
 8007cc4:	f240 310a 	movw	r1, #778	; 0x30a
 8007cc8:	f000 fb00 	bl	80082cc <__assert_func>
 8007ccc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007cd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007cd4:	bb35      	cbnz	r5, 8007d24 <__d2b+0x7c>
 8007cd6:	2e00      	cmp	r6, #0
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	d028      	beq.n	8007d2e <__d2b+0x86>
 8007cdc:	4668      	mov	r0, sp
 8007cde:	9600      	str	r6, [sp, #0]
 8007ce0:	f7ff fd82 	bl	80077e8 <__lo0bits>
 8007ce4:	9900      	ldr	r1, [sp, #0]
 8007ce6:	b300      	cbz	r0, 8007d2a <__d2b+0x82>
 8007ce8:	9a01      	ldr	r2, [sp, #4]
 8007cea:	f1c0 0320 	rsb	r3, r0, #32
 8007cee:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf2:	430b      	orrs	r3, r1
 8007cf4:	40c2      	lsrs	r2, r0
 8007cf6:	6163      	str	r3, [r4, #20]
 8007cf8:	9201      	str	r2, [sp, #4]
 8007cfa:	9b01      	ldr	r3, [sp, #4]
 8007cfc:	61a3      	str	r3, [r4, #24]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	bf14      	ite	ne
 8007d02:	2202      	movne	r2, #2
 8007d04:	2201      	moveq	r2, #1
 8007d06:	6122      	str	r2, [r4, #16]
 8007d08:	b1d5      	cbz	r5, 8007d40 <__d2b+0x98>
 8007d0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d0e:	4405      	add	r5, r0
 8007d10:	f8c9 5000 	str.w	r5, [r9]
 8007d14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d18:	f8c8 0000 	str.w	r0, [r8]
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	b003      	add	sp, #12
 8007d20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d28:	e7d5      	b.n	8007cd6 <__d2b+0x2e>
 8007d2a:	6161      	str	r1, [r4, #20]
 8007d2c:	e7e5      	b.n	8007cfa <__d2b+0x52>
 8007d2e:	a801      	add	r0, sp, #4
 8007d30:	f7ff fd5a 	bl	80077e8 <__lo0bits>
 8007d34:	9b01      	ldr	r3, [sp, #4]
 8007d36:	6163      	str	r3, [r4, #20]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	6122      	str	r2, [r4, #16]
 8007d3c:	3020      	adds	r0, #32
 8007d3e:	e7e3      	b.n	8007d08 <__d2b+0x60>
 8007d40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d48:	f8c9 0000 	str.w	r0, [r9]
 8007d4c:	6918      	ldr	r0, [r3, #16]
 8007d4e:	f7ff fd2b 	bl	80077a8 <__hi0bits>
 8007d52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d56:	e7df      	b.n	8007d18 <__d2b+0x70>
 8007d58:	08008b0f 	.word	0x08008b0f
 8007d5c:	08008b80 	.word	0x08008b80

08007d60 <_calloc_r>:
 8007d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d62:	fba1 2402 	umull	r2, r4, r1, r2
 8007d66:	b94c      	cbnz	r4, 8007d7c <_calloc_r+0x1c>
 8007d68:	4611      	mov	r1, r2
 8007d6a:	9201      	str	r2, [sp, #4]
 8007d6c:	f000 f87a 	bl	8007e64 <_malloc_r>
 8007d70:	9a01      	ldr	r2, [sp, #4]
 8007d72:	4605      	mov	r5, r0
 8007d74:	b930      	cbnz	r0, 8007d84 <_calloc_r+0x24>
 8007d76:	4628      	mov	r0, r5
 8007d78:	b003      	add	sp, #12
 8007d7a:	bd30      	pop	{r4, r5, pc}
 8007d7c:	220c      	movs	r2, #12
 8007d7e:	6002      	str	r2, [r0, #0]
 8007d80:	2500      	movs	r5, #0
 8007d82:	e7f8      	b.n	8007d76 <_calloc_r+0x16>
 8007d84:	4621      	mov	r1, r4
 8007d86:	f7fd fdf1 	bl	800596c <memset>
 8007d8a:	e7f4      	b.n	8007d76 <_calloc_r+0x16>

08007d8c <_free_r>:
 8007d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d8e:	2900      	cmp	r1, #0
 8007d90:	d044      	beq.n	8007e1c <_free_r+0x90>
 8007d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d96:	9001      	str	r0, [sp, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f1a1 0404 	sub.w	r4, r1, #4
 8007d9e:	bfb8      	it	lt
 8007da0:	18e4      	addlt	r4, r4, r3
 8007da2:	f000 fb19 	bl	80083d8 <__malloc_lock>
 8007da6:	4a1e      	ldr	r2, [pc, #120]	; (8007e20 <_free_r+0x94>)
 8007da8:	9801      	ldr	r0, [sp, #4]
 8007daa:	6813      	ldr	r3, [r2, #0]
 8007dac:	b933      	cbnz	r3, 8007dbc <_free_r+0x30>
 8007dae:	6063      	str	r3, [r4, #4]
 8007db0:	6014      	str	r4, [r2, #0]
 8007db2:	b003      	add	sp, #12
 8007db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007db8:	f000 bb14 	b.w	80083e4 <__malloc_unlock>
 8007dbc:	42a3      	cmp	r3, r4
 8007dbe:	d908      	bls.n	8007dd2 <_free_r+0x46>
 8007dc0:	6825      	ldr	r5, [r4, #0]
 8007dc2:	1961      	adds	r1, r4, r5
 8007dc4:	428b      	cmp	r3, r1
 8007dc6:	bf01      	itttt	eq
 8007dc8:	6819      	ldreq	r1, [r3, #0]
 8007dca:	685b      	ldreq	r3, [r3, #4]
 8007dcc:	1949      	addeq	r1, r1, r5
 8007dce:	6021      	streq	r1, [r4, #0]
 8007dd0:	e7ed      	b.n	8007dae <_free_r+0x22>
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	b10b      	cbz	r3, 8007ddc <_free_r+0x50>
 8007dd8:	42a3      	cmp	r3, r4
 8007dda:	d9fa      	bls.n	8007dd2 <_free_r+0x46>
 8007ddc:	6811      	ldr	r1, [r2, #0]
 8007dde:	1855      	adds	r5, r2, r1
 8007de0:	42a5      	cmp	r5, r4
 8007de2:	d10b      	bne.n	8007dfc <_free_r+0x70>
 8007de4:	6824      	ldr	r4, [r4, #0]
 8007de6:	4421      	add	r1, r4
 8007de8:	1854      	adds	r4, r2, r1
 8007dea:	42a3      	cmp	r3, r4
 8007dec:	6011      	str	r1, [r2, #0]
 8007dee:	d1e0      	bne.n	8007db2 <_free_r+0x26>
 8007df0:	681c      	ldr	r4, [r3, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	6053      	str	r3, [r2, #4]
 8007df6:	4421      	add	r1, r4
 8007df8:	6011      	str	r1, [r2, #0]
 8007dfa:	e7da      	b.n	8007db2 <_free_r+0x26>
 8007dfc:	d902      	bls.n	8007e04 <_free_r+0x78>
 8007dfe:	230c      	movs	r3, #12
 8007e00:	6003      	str	r3, [r0, #0]
 8007e02:	e7d6      	b.n	8007db2 <_free_r+0x26>
 8007e04:	6825      	ldr	r5, [r4, #0]
 8007e06:	1961      	adds	r1, r4, r5
 8007e08:	428b      	cmp	r3, r1
 8007e0a:	bf04      	itt	eq
 8007e0c:	6819      	ldreq	r1, [r3, #0]
 8007e0e:	685b      	ldreq	r3, [r3, #4]
 8007e10:	6063      	str	r3, [r4, #4]
 8007e12:	bf04      	itt	eq
 8007e14:	1949      	addeq	r1, r1, r5
 8007e16:	6021      	streq	r1, [r4, #0]
 8007e18:	6054      	str	r4, [r2, #4]
 8007e1a:	e7ca      	b.n	8007db2 <_free_r+0x26>
 8007e1c:	b003      	add	sp, #12
 8007e1e:	bd30      	pop	{r4, r5, pc}
 8007e20:	20000314 	.word	0x20000314

08007e24 <sbrk_aligned>:
 8007e24:	b570      	push	{r4, r5, r6, lr}
 8007e26:	4e0e      	ldr	r6, [pc, #56]	; (8007e60 <sbrk_aligned+0x3c>)
 8007e28:	460c      	mov	r4, r1
 8007e2a:	6831      	ldr	r1, [r6, #0]
 8007e2c:	4605      	mov	r5, r0
 8007e2e:	b911      	cbnz	r1, 8007e36 <sbrk_aligned+0x12>
 8007e30:	f000 f9e6 	bl	8008200 <_sbrk_r>
 8007e34:	6030      	str	r0, [r6, #0]
 8007e36:	4621      	mov	r1, r4
 8007e38:	4628      	mov	r0, r5
 8007e3a:	f000 f9e1 	bl	8008200 <_sbrk_r>
 8007e3e:	1c43      	adds	r3, r0, #1
 8007e40:	d00a      	beq.n	8007e58 <sbrk_aligned+0x34>
 8007e42:	1cc4      	adds	r4, r0, #3
 8007e44:	f024 0403 	bic.w	r4, r4, #3
 8007e48:	42a0      	cmp	r0, r4
 8007e4a:	d007      	beq.n	8007e5c <sbrk_aligned+0x38>
 8007e4c:	1a21      	subs	r1, r4, r0
 8007e4e:	4628      	mov	r0, r5
 8007e50:	f000 f9d6 	bl	8008200 <_sbrk_r>
 8007e54:	3001      	adds	r0, #1
 8007e56:	d101      	bne.n	8007e5c <sbrk_aligned+0x38>
 8007e58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	bd70      	pop	{r4, r5, r6, pc}
 8007e60:	20000318 	.word	0x20000318

08007e64 <_malloc_r>:
 8007e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e68:	1ccd      	adds	r5, r1, #3
 8007e6a:	f025 0503 	bic.w	r5, r5, #3
 8007e6e:	3508      	adds	r5, #8
 8007e70:	2d0c      	cmp	r5, #12
 8007e72:	bf38      	it	cc
 8007e74:	250c      	movcc	r5, #12
 8007e76:	2d00      	cmp	r5, #0
 8007e78:	4607      	mov	r7, r0
 8007e7a:	db01      	blt.n	8007e80 <_malloc_r+0x1c>
 8007e7c:	42a9      	cmp	r1, r5
 8007e7e:	d905      	bls.n	8007e8c <_malloc_r+0x28>
 8007e80:	230c      	movs	r3, #12
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	2600      	movs	r6, #0
 8007e86:	4630      	mov	r0, r6
 8007e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e8c:	4e2e      	ldr	r6, [pc, #184]	; (8007f48 <_malloc_r+0xe4>)
 8007e8e:	f000 faa3 	bl	80083d8 <__malloc_lock>
 8007e92:	6833      	ldr	r3, [r6, #0]
 8007e94:	461c      	mov	r4, r3
 8007e96:	bb34      	cbnz	r4, 8007ee6 <_malloc_r+0x82>
 8007e98:	4629      	mov	r1, r5
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	f7ff ffc2 	bl	8007e24 <sbrk_aligned>
 8007ea0:	1c43      	adds	r3, r0, #1
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	d14d      	bne.n	8007f42 <_malloc_r+0xde>
 8007ea6:	6834      	ldr	r4, [r6, #0]
 8007ea8:	4626      	mov	r6, r4
 8007eaa:	2e00      	cmp	r6, #0
 8007eac:	d140      	bne.n	8007f30 <_malloc_r+0xcc>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	4631      	mov	r1, r6
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	eb04 0803 	add.w	r8, r4, r3
 8007eb8:	f000 f9a2 	bl	8008200 <_sbrk_r>
 8007ebc:	4580      	cmp	r8, r0
 8007ebe:	d13a      	bne.n	8007f36 <_malloc_r+0xd2>
 8007ec0:	6821      	ldr	r1, [r4, #0]
 8007ec2:	3503      	adds	r5, #3
 8007ec4:	1a6d      	subs	r5, r5, r1
 8007ec6:	f025 0503 	bic.w	r5, r5, #3
 8007eca:	3508      	adds	r5, #8
 8007ecc:	2d0c      	cmp	r5, #12
 8007ece:	bf38      	it	cc
 8007ed0:	250c      	movcc	r5, #12
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	f7ff ffa5 	bl	8007e24 <sbrk_aligned>
 8007eda:	3001      	adds	r0, #1
 8007edc:	d02b      	beq.n	8007f36 <_malloc_r+0xd2>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	442b      	add	r3, r5
 8007ee2:	6023      	str	r3, [r4, #0]
 8007ee4:	e00e      	b.n	8007f04 <_malloc_r+0xa0>
 8007ee6:	6822      	ldr	r2, [r4, #0]
 8007ee8:	1b52      	subs	r2, r2, r5
 8007eea:	d41e      	bmi.n	8007f2a <_malloc_r+0xc6>
 8007eec:	2a0b      	cmp	r2, #11
 8007eee:	d916      	bls.n	8007f1e <_malloc_r+0xba>
 8007ef0:	1961      	adds	r1, r4, r5
 8007ef2:	42a3      	cmp	r3, r4
 8007ef4:	6025      	str	r5, [r4, #0]
 8007ef6:	bf18      	it	ne
 8007ef8:	6059      	strne	r1, [r3, #4]
 8007efa:	6863      	ldr	r3, [r4, #4]
 8007efc:	bf08      	it	eq
 8007efe:	6031      	streq	r1, [r6, #0]
 8007f00:	5162      	str	r2, [r4, r5]
 8007f02:	604b      	str	r3, [r1, #4]
 8007f04:	4638      	mov	r0, r7
 8007f06:	f104 060b 	add.w	r6, r4, #11
 8007f0a:	f000 fa6b 	bl	80083e4 <__malloc_unlock>
 8007f0e:	f026 0607 	bic.w	r6, r6, #7
 8007f12:	1d23      	adds	r3, r4, #4
 8007f14:	1af2      	subs	r2, r6, r3
 8007f16:	d0b6      	beq.n	8007e86 <_malloc_r+0x22>
 8007f18:	1b9b      	subs	r3, r3, r6
 8007f1a:	50a3      	str	r3, [r4, r2]
 8007f1c:	e7b3      	b.n	8007e86 <_malloc_r+0x22>
 8007f1e:	6862      	ldr	r2, [r4, #4]
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	bf0c      	ite	eq
 8007f24:	6032      	streq	r2, [r6, #0]
 8007f26:	605a      	strne	r2, [r3, #4]
 8007f28:	e7ec      	b.n	8007f04 <_malloc_r+0xa0>
 8007f2a:	4623      	mov	r3, r4
 8007f2c:	6864      	ldr	r4, [r4, #4]
 8007f2e:	e7b2      	b.n	8007e96 <_malloc_r+0x32>
 8007f30:	4634      	mov	r4, r6
 8007f32:	6876      	ldr	r6, [r6, #4]
 8007f34:	e7b9      	b.n	8007eaa <_malloc_r+0x46>
 8007f36:	230c      	movs	r3, #12
 8007f38:	603b      	str	r3, [r7, #0]
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	f000 fa52 	bl	80083e4 <__malloc_unlock>
 8007f40:	e7a1      	b.n	8007e86 <_malloc_r+0x22>
 8007f42:	6025      	str	r5, [r4, #0]
 8007f44:	e7de      	b.n	8007f04 <_malloc_r+0xa0>
 8007f46:	bf00      	nop
 8007f48:	20000314 	.word	0x20000314

08007f4c <__sfputc_r>:
 8007f4c:	6893      	ldr	r3, [r2, #8]
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	b410      	push	{r4}
 8007f54:	6093      	str	r3, [r2, #8]
 8007f56:	da08      	bge.n	8007f6a <__sfputc_r+0x1e>
 8007f58:	6994      	ldr	r4, [r2, #24]
 8007f5a:	42a3      	cmp	r3, r4
 8007f5c:	db01      	blt.n	8007f62 <__sfputc_r+0x16>
 8007f5e:	290a      	cmp	r1, #10
 8007f60:	d103      	bne.n	8007f6a <__sfputc_r+0x1e>
 8007f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f66:	f7fe ba01 	b.w	800636c <__swbuf_r>
 8007f6a:	6813      	ldr	r3, [r2, #0]
 8007f6c:	1c58      	adds	r0, r3, #1
 8007f6e:	6010      	str	r0, [r2, #0]
 8007f70:	7019      	strb	r1, [r3, #0]
 8007f72:	4608      	mov	r0, r1
 8007f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <__sfputs_r>:
 8007f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	460f      	mov	r7, r1
 8007f80:	4614      	mov	r4, r2
 8007f82:	18d5      	adds	r5, r2, r3
 8007f84:	42ac      	cmp	r4, r5
 8007f86:	d101      	bne.n	8007f8c <__sfputs_r+0x12>
 8007f88:	2000      	movs	r0, #0
 8007f8a:	e007      	b.n	8007f9c <__sfputs_r+0x22>
 8007f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f90:	463a      	mov	r2, r7
 8007f92:	4630      	mov	r0, r6
 8007f94:	f7ff ffda 	bl	8007f4c <__sfputc_r>
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	d1f3      	bne.n	8007f84 <__sfputs_r+0xa>
 8007f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fa0 <_vfiprintf_r>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	460d      	mov	r5, r1
 8007fa6:	b09d      	sub	sp, #116	; 0x74
 8007fa8:	4614      	mov	r4, r2
 8007faa:	4698      	mov	r8, r3
 8007fac:	4606      	mov	r6, r0
 8007fae:	b118      	cbz	r0, 8007fb8 <_vfiprintf_r+0x18>
 8007fb0:	6983      	ldr	r3, [r0, #24]
 8007fb2:	b90b      	cbnz	r3, 8007fb8 <_vfiprintf_r+0x18>
 8007fb4:	f7ff fa30 	bl	8007418 <__sinit>
 8007fb8:	4b89      	ldr	r3, [pc, #548]	; (80081e0 <_vfiprintf_r+0x240>)
 8007fba:	429d      	cmp	r5, r3
 8007fbc:	d11b      	bne.n	8007ff6 <_vfiprintf_r+0x56>
 8007fbe:	6875      	ldr	r5, [r6, #4]
 8007fc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fc2:	07d9      	lsls	r1, r3, #31
 8007fc4:	d405      	bmi.n	8007fd2 <_vfiprintf_r+0x32>
 8007fc6:	89ab      	ldrh	r3, [r5, #12]
 8007fc8:	059a      	lsls	r2, r3, #22
 8007fca:	d402      	bmi.n	8007fd2 <_vfiprintf_r+0x32>
 8007fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fce:	f7ff fac6 	bl	800755e <__retarget_lock_acquire_recursive>
 8007fd2:	89ab      	ldrh	r3, [r5, #12]
 8007fd4:	071b      	lsls	r3, r3, #28
 8007fd6:	d501      	bpl.n	8007fdc <_vfiprintf_r+0x3c>
 8007fd8:	692b      	ldr	r3, [r5, #16]
 8007fda:	b9eb      	cbnz	r3, 8008018 <_vfiprintf_r+0x78>
 8007fdc:	4629      	mov	r1, r5
 8007fde:	4630      	mov	r0, r6
 8007fe0:	f7fe fa16 	bl	8006410 <__swsetup_r>
 8007fe4:	b1c0      	cbz	r0, 8008018 <_vfiprintf_r+0x78>
 8007fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fe8:	07dc      	lsls	r4, r3, #31
 8007fea:	d50e      	bpl.n	800800a <_vfiprintf_r+0x6a>
 8007fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ff0:	b01d      	add	sp, #116	; 0x74
 8007ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff6:	4b7b      	ldr	r3, [pc, #492]	; (80081e4 <_vfiprintf_r+0x244>)
 8007ff8:	429d      	cmp	r5, r3
 8007ffa:	d101      	bne.n	8008000 <_vfiprintf_r+0x60>
 8007ffc:	68b5      	ldr	r5, [r6, #8]
 8007ffe:	e7df      	b.n	8007fc0 <_vfiprintf_r+0x20>
 8008000:	4b79      	ldr	r3, [pc, #484]	; (80081e8 <_vfiprintf_r+0x248>)
 8008002:	429d      	cmp	r5, r3
 8008004:	bf08      	it	eq
 8008006:	68f5      	ldreq	r5, [r6, #12]
 8008008:	e7da      	b.n	8007fc0 <_vfiprintf_r+0x20>
 800800a:	89ab      	ldrh	r3, [r5, #12]
 800800c:	0598      	lsls	r0, r3, #22
 800800e:	d4ed      	bmi.n	8007fec <_vfiprintf_r+0x4c>
 8008010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008012:	f7ff faa5 	bl	8007560 <__retarget_lock_release_recursive>
 8008016:	e7e9      	b.n	8007fec <_vfiprintf_r+0x4c>
 8008018:	2300      	movs	r3, #0
 800801a:	9309      	str	r3, [sp, #36]	; 0x24
 800801c:	2320      	movs	r3, #32
 800801e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008022:	f8cd 800c 	str.w	r8, [sp, #12]
 8008026:	2330      	movs	r3, #48	; 0x30
 8008028:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80081ec <_vfiprintf_r+0x24c>
 800802c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008030:	f04f 0901 	mov.w	r9, #1
 8008034:	4623      	mov	r3, r4
 8008036:	469a      	mov	sl, r3
 8008038:	f813 2b01 	ldrb.w	r2, [r3], #1
 800803c:	b10a      	cbz	r2, 8008042 <_vfiprintf_r+0xa2>
 800803e:	2a25      	cmp	r2, #37	; 0x25
 8008040:	d1f9      	bne.n	8008036 <_vfiprintf_r+0x96>
 8008042:	ebba 0b04 	subs.w	fp, sl, r4
 8008046:	d00b      	beq.n	8008060 <_vfiprintf_r+0xc0>
 8008048:	465b      	mov	r3, fp
 800804a:	4622      	mov	r2, r4
 800804c:	4629      	mov	r1, r5
 800804e:	4630      	mov	r0, r6
 8008050:	f7ff ff93 	bl	8007f7a <__sfputs_r>
 8008054:	3001      	adds	r0, #1
 8008056:	f000 80aa 	beq.w	80081ae <_vfiprintf_r+0x20e>
 800805a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800805c:	445a      	add	r2, fp
 800805e:	9209      	str	r2, [sp, #36]	; 0x24
 8008060:	f89a 3000 	ldrb.w	r3, [sl]
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 80a2 	beq.w	80081ae <_vfiprintf_r+0x20e>
 800806a:	2300      	movs	r3, #0
 800806c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008074:	f10a 0a01 	add.w	sl, sl, #1
 8008078:	9304      	str	r3, [sp, #16]
 800807a:	9307      	str	r3, [sp, #28]
 800807c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008080:	931a      	str	r3, [sp, #104]	; 0x68
 8008082:	4654      	mov	r4, sl
 8008084:	2205      	movs	r2, #5
 8008086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800808a:	4858      	ldr	r0, [pc, #352]	; (80081ec <_vfiprintf_r+0x24c>)
 800808c:	f7f8 f8c8 	bl	8000220 <memchr>
 8008090:	9a04      	ldr	r2, [sp, #16]
 8008092:	b9d8      	cbnz	r0, 80080cc <_vfiprintf_r+0x12c>
 8008094:	06d1      	lsls	r1, r2, #27
 8008096:	bf44      	itt	mi
 8008098:	2320      	movmi	r3, #32
 800809a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800809e:	0713      	lsls	r3, r2, #28
 80080a0:	bf44      	itt	mi
 80080a2:	232b      	movmi	r3, #43	; 0x2b
 80080a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080a8:	f89a 3000 	ldrb.w	r3, [sl]
 80080ac:	2b2a      	cmp	r3, #42	; 0x2a
 80080ae:	d015      	beq.n	80080dc <_vfiprintf_r+0x13c>
 80080b0:	9a07      	ldr	r2, [sp, #28]
 80080b2:	4654      	mov	r4, sl
 80080b4:	2000      	movs	r0, #0
 80080b6:	f04f 0c0a 	mov.w	ip, #10
 80080ba:	4621      	mov	r1, r4
 80080bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080c0:	3b30      	subs	r3, #48	; 0x30
 80080c2:	2b09      	cmp	r3, #9
 80080c4:	d94e      	bls.n	8008164 <_vfiprintf_r+0x1c4>
 80080c6:	b1b0      	cbz	r0, 80080f6 <_vfiprintf_r+0x156>
 80080c8:	9207      	str	r2, [sp, #28]
 80080ca:	e014      	b.n	80080f6 <_vfiprintf_r+0x156>
 80080cc:	eba0 0308 	sub.w	r3, r0, r8
 80080d0:	fa09 f303 	lsl.w	r3, r9, r3
 80080d4:	4313      	orrs	r3, r2
 80080d6:	9304      	str	r3, [sp, #16]
 80080d8:	46a2      	mov	sl, r4
 80080da:	e7d2      	b.n	8008082 <_vfiprintf_r+0xe2>
 80080dc:	9b03      	ldr	r3, [sp, #12]
 80080de:	1d19      	adds	r1, r3, #4
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	9103      	str	r1, [sp, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	bfbb      	ittet	lt
 80080e8:	425b      	neglt	r3, r3
 80080ea:	f042 0202 	orrlt.w	r2, r2, #2
 80080ee:	9307      	strge	r3, [sp, #28]
 80080f0:	9307      	strlt	r3, [sp, #28]
 80080f2:	bfb8      	it	lt
 80080f4:	9204      	strlt	r2, [sp, #16]
 80080f6:	7823      	ldrb	r3, [r4, #0]
 80080f8:	2b2e      	cmp	r3, #46	; 0x2e
 80080fa:	d10c      	bne.n	8008116 <_vfiprintf_r+0x176>
 80080fc:	7863      	ldrb	r3, [r4, #1]
 80080fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008100:	d135      	bne.n	800816e <_vfiprintf_r+0x1ce>
 8008102:	9b03      	ldr	r3, [sp, #12]
 8008104:	1d1a      	adds	r2, r3, #4
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	9203      	str	r2, [sp, #12]
 800810a:	2b00      	cmp	r3, #0
 800810c:	bfb8      	it	lt
 800810e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008112:	3402      	adds	r4, #2
 8008114:	9305      	str	r3, [sp, #20]
 8008116:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80081fc <_vfiprintf_r+0x25c>
 800811a:	7821      	ldrb	r1, [r4, #0]
 800811c:	2203      	movs	r2, #3
 800811e:	4650      	mov	r0, sl
 8008120:	f7f8 f87e 	bl	8000220 <memchr>
 8008124:	b140      	cbz	r0, 8008138 <_vfiprintf_r+0x198>
 8008126:	2340      	movs	r3, #64	; 0x40
 8008128:	eba0 000a 	sub.w	r0, r0, sl
 800812c:	fa03 f000 	lsl.w	r0, r3, r0
 8008130:	9b04      	ldr	r3, [sp, #16]
 8008132:	4303      	orrs	r3, r0
 8008134:	3401      	adds	r4, #1
 8008136:	9304      	str	r3, [sp, #16]
 8008138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800813c:	482c      	ldr	r0, [pc, #176]	; (80081f0 <_vfiprintf_r+0x250>)
 800813e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008142:	2206      	movs	r2, #6
 8008144:	f7f8 f86c 	bl	8000220 <memchr>
 8008148:	2800      	cmp	r0, #0
 800814a:	d03f      	beq.n	80081cc <_vfiprintf_r+0x22c>
 800814c:	4b29      	ldr	r3, [pc, #164]	; (80081f4 <_vfiprintf_r+0x254>)
 800814e:	bb1b      	cbnz	r3, 8008198 <_vfiprintf_r+0x1f8>
 8008150:	9b03      	ldr	r3, [sp, #12]
 8008152:	3307      	adds	r3, #7
 8008154:	f023 0307 	bic.w	r3, r3, #7
 8008158:	3308      	adds	r3, #8
 800815a:	9303      	str	r3, [sp, #12]
 800815c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815e:	443b      	add	r3, r7
 8008160:	9309      	str	r3, [sp, #36]	; 0x24
 8008162:	e767      	b.n	8008034 <_vfiprintf_r+0x94>
 8008164:	fb0c 3202 	mla	r2, ip, r2, r3
 8008168:	460c      	mov	r4, r1
 800816a:	2001      	movs	r0, #1
 800816c:	e7a5      	b.n	80080ba <_vfiprintf_r+0x11a>
 800816e:	2300      	movs	r3, #0
 8008170:	3401      	adds	r4, #1
 8008172:	9305      	str	r3, [sp, #20]
 8008174:	4619      	mov	r1, r3
 8008176:	f04f 0c0a 	mov.w	ip, #10
 800817a:	4620      	mov	r0, r4
 800817c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008180:	3a30      	subs	r2, #48	; 0x30
 8008182:	2a09      	cmp	r2, #9
 8008184:	d903      	bls.n	800818e <_vfiprintf_r+0x1ee>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0c5      	beq.n	8008116 <_vfiprintf_r+0x176>
 800818a:	9105      	str	r1, [sp, #20]
 800818c:	e7c3      	b.n	8008116 <_vfiprintf_r+0x176>
 800818e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008192:	4604      	mov	r4, r0
 8008194:	2301      	movs	r3, #1
 8008196:	e7f0      	b.n	800817a <_vfiprintf_r+0x1da>
 8008198:	ab03      	add	r3, sp, #12
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	462a      	mov	r2, r5
 800819e:	4b16      	ldr	r3, [pc, #88]	; (80081f8 <_vfiprintf_r+0x258>)
 80081a0:	a904      	add	r1, sp, #16
 80081a2:	4630      	mov	r0, r6
 80081a4:	f7fd fc8a 	bl	8005abc <_printf_float>
 80081a8:	4607      	mov	r7, r0
 80081aa:	1c78      	adds	r0, r7, #1
 80081ac:	d1d6      	bne.n	800815c <_vfiprintf_r+0x1bc>
 80081ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081b0:	07d9      	lsls	r1, r3, #31
 80081b2:	d405      	bmi.n	80081c0 <_vfiprintf_r+0x220>
 80081b4:	89ab      	ldrh	r3, [r5, #12]
 80081b6:	059a      	lsls	r2, r3, #22
 80081b8:	d402      	bmi.n	80081c0 <_vfiprintf_r+0x220>
 80081ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081bc:	f7ff f9d0 	bl	8007560 <__retarget_lock_release_recursive>
 80081c0:	89ab      	ldrh	r3, [r5, #12]
 80081c2:	065b      	lsls	r3, r3, #25
 80081c4:	f53f af12 	bmi.w	8007fec <_vfiprintf_r+0x4c>
 80081c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081ca:	e711      	b.n	8007ff0 <_vfiprintf_r+0x50>
 80081cc:	ab03      	add	r3, sp, #12
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	462a      	mov	r2, r5
 80081d2:	4b09      	ldr	r3, [pc, #36]	; (80081f8 <_vfiprintf_r+0x258>)
 80081d4:	a904      	add	r1, sp, #16
 80081d6:	4630      	mov	r0, r6
 80081d8:	f7fd ff14 	bl	8006004 <_printf_i>
 80081dc:	e7e4      	b.n	80081a8 <_vfiprintf_r+0x208>
 80081de:	bf00      	nop
 80081e0:	08008b40 	.word	0x08008b40
 80081e4:	08008b60 	.word	0x08008b60
 80081e8:	08008b20 	.word	0x08008b20
 80081ec:	08008cdc 	.word	0x08008cdc
 80081f0:	08008ce6 	.word	0x08008ce6
 80081f4:	08005abd 	.word	0x08005abd
 80081f8:	08007f7b 	.word	0x08007f7b
 80081fc:	08008ce2 	.word	0x08008ce2

08008200 <_sbrk_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4d06      	ldr	r5, [pc, #24]	; (800821c <_sbrk_r+0x1c>)
 8008204:	2300      	movs	r3, #0
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	f7fa f9f4 	bl	80025f8 <_sbrk>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_sbrk_r+0x1a>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_sbrk_r+0x1a>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	2000031c 	.word	0x2000031c

08008220 <__sread>:
 8008220:	b510      	push	{r4, lr}
 8008222:	460c      	mov	r4, r1
 8008224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008228:	f000 f8e2 	bl	80083f0 <_read_r>
 800822c:	2800      	cmp	r0, #0
 800822e:	bfab      	itete	ge
 8008230:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008232:	89a3      	ldrhlt	r3, [r4, #12]
 8008234:	181b      	addge	r3, r3, r0
 8008236:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800823a:	bfac      	ite	ge
 800823c:	6563      	strge	r3, [r4, #84]	; 0x54
 800823e:	81a3      	strhlt	r3, [r4, #12]
 8008240:	bd10      	pop	{r4, pc}

08008242 <__swrite>:
 8008242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008246:	461f      	mov	r7, r3
 8008248:	898b      	ldrh	r3, [r1, #12]
 800824a:	05db      	lsls	r3, r3, #23
 800824c:	4605      	mov	r5, r0
 800824e:	460c      	mov	r4, r1
 8008250:	4616      	mov	r6, r2
 8008252:	d505      	bpl.n	8008260 <__swrite+0x1e>
 8008254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008258:	2302      	movs	r3, #2
 800825a:	2200      	movs	r2, #0
 800825c:	f000 f898 	bl	8008390 <_lseek_r>
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800826a:	81a3      	strh	r3, [r4, #12]
 800826c:	4632      	mov	r2, r6
 800826e:	463b      	mov	r3, r7
 8008270:	4628      	mov	r0, r5
 8008272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008276:	f000 b817 	b.w	80082a8 <_write_r>

0800827a <__sseek>:
 800827a:	b510      	push	{r4, lr}
 800827c:	460c      	mov	r4, r1
 800827e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008282:	f000 f885 	bl	8008390 <_lseek_r>
 8008286:	1c43      	adds	r3, r0, #1
 8008288:	89a3      	ldrh	r3, [r4, #12]
 800828a:	bf15      	itete	ne
 800828c:	6560      	strne	r0, [r4, #84]	; 0x54
 800828e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008292:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008296:	81a3      	strheq	r3, [r4, #12]
 8008298:	bf18      	it	ne
 800829a:	81a3      	strhne	r3, [r4, #12]
 800829c:	bd10      	pop	{r4, pc}

0800829e <__sclose>:
 800829e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a2:	f000 b831 	b.w	8008308 <_close_r>
	...

080082a8 <_write_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d07      	ldr	r5, [pc, #28]	; (80082c8 <_write_r+0x20>)
 80082ac:	4604      	mov	r4, r0
 80082ae:	4608      	mov	r0, r1
 80082b0:	4611      	mov	r1, r2
 80082b2:	2200      	movs	r2, #0
 80082b4:	602a      	str	r2, [r5, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	f7f9 fe74 	bl	8001fa4 <_write>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d102      	bne.n	80082c6 <_write_r+0x1e>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	b103      	cbz	r3, 80082c6 <_write_r+0x1e>
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	2000031c 	.word	0x2000031c

080082cc <__assert_func>:
 80082cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082ce:	4614      	mov	r4, r2
 80082d0:	461a      	mov	r2, r3
 80082d2:	4b09      	ldr	r3, [pc, #36]	; (80082f8 <__assert_func+0x2c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4605      	mov	r5, r0
 80082d8:	68d8      	ldr	r0, [r3, #12]
 80082da:	b14c      	cbz	r4, 80082f0 <__assert_func+0x24>
 80082dc:	4b07      	ldr	r3, [pc, #28]	; (80082fc <__assert_func+0x30>)
 80082de:	9100      	str	r1, [sp, #0]
 80082e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082e4:	4906      	ldr	r1, [pc, #24]	; (8008300 <__assert_func+0x34>)
 80082e6:	462b      	mov	r3, r5
 80082e8:	f000 f81e 	bl	8008328 <fiprintf>
 80082ec:	f000 f89f 	bl	800842e <abort>
 80082f0:	4b04      	ldr	r3, [pc, #16]	; (8008304 <__assert_func+0x38>)
 80082f2:	461c      	mov	r4, r3
 80082f4:	e7f3      	b.n	80082de <__assert_func+0x12>
 80082f6:	bf00      	nop
 80082f8:	2000000c 	.word	0x2000000c
 80082fc:	08008ced 	.word	0x08008ced
 8008300:	08008cfa 	.word	0x08008cfa
 8008304:	08008d28 	.word	0x08008d28

08008308 <_close_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4d06      	ldr	r5, [pc, #24]	; (8008324 <_close_r+0x1c>)
 800830c:	2300      	movs	r3, #0
 800830e:	4604      	mov	r4, r0
 8008310:	4608      	mov	r0, r1
 8008312:	602b      	str	r3, [r5, #0]
 8008314:	f7fa f93b 	bl	800258e <_close>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d102      	bne.n	8008322 <_close_r+0x1a>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	b103      	cbz	r3, 8008322 <_close_r+0x1a>
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	bd38      	pop	{r3, r4, r5, pc}
 8008324:	2000031c 	.word	0x2000031c

08008328 <fiprintf>:
 8008328:	b40e      	push	{r1, r2, r3}
 800832a:	b503      	push	{r0, r1, lr}
 800832c:	4601      	mov	r1, r0
 800832e:	ab03      	add	r3, sp, #12
 8008330:	4805      	ldr	r0, [pc, #20]	; (8008348 <fiprintf+0x20>)
 8008332:	f853 2b04 	ldr.w	r2, [r3], #4
 8008336:	6800      	ldr	r0, [r0, #0]
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	f7ff fe31 	bl	8007fa0 <_vfiprintf_r>
 800833e:	b002      	add	sp, #8
 8008340:	f85d eb04 	ldr.w	lr, [sp], #4
 8008344:	b003      	add	sp, #12
 8008346:	4770      	bx	lr
 8008348:	2000000c 	.word	0x2000000c

0800834c <_fstat_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4d07      	ldr	r5, [pc, #28]	; (800836c <_fstat_r+0x20>)
 8008350:	2300      	movs	r3, #0
 8008352:	4604      	mov	r4, r0
 8008354:	4608      	mov	r0, r1
 8008356:	4611      	mov	r1, r2
 8008358:	602b      	str	r3, [r5, #0]
 800835a:	f7fa f924 	bl	80025a6 <_fstat>
 800835e:	1c43      	adds	r3, r0, #1
 8008360:	d102      	bne.n	8008368 <_fstat_r+0x1c>
 8008362:	682b      	ldr	r3, [r5, #0]
 8008364:	b103      	cbz	r3, 8008368 <_fstat_r+0x1c>
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	bd38      	pop	{r3, r4, r5, pc}
 800836a:	bf00      	nop
 800836c:	2000031c 	.word	0x2000031c

08008370 <_isatty_r>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	4d06      	ldr	r5, [pc, #24]	; (800838c <_isatty_r+0x1c>)
 8008374:	2300      	movs	r3, #0
 8008376:	4604      	mov	r4, r0
 8008378:	4608      	mov	r0, r1
 800837a:	602b      	str	r3, [r5, #0]
 800837c:	f7fa f923 	bl	80025c6 <_isatty>
 8008380:	1c43      	adds	r3, r0, #1
 8008382:	d102      	bne.n	800838a <_isatty_r+0x1a>
 8008384:	682b      	ldr	r3, [r5, #0]
 8008386:	b103      	cbz	r3, 800838a <_isatty_r+0x1a>
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	bd38      	pop	{r3, r4, r5, pc}
 800838c:	2000031c 	.word	0x2000031c

08008390 <_lseek_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4d07      	ldr	r5, [pc, #28]	; (80083b0 <_lseek_r+0x20>)
 8008394:	4604      	mov	r4, r0
 8008396:	4608      	mov	r0, r1
 8008398:	4611      	mov	r1, r2
 800839a:	2200      	movs	r2, #0
 800839c:	602a      	str	r2, [r5, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	f7fa f91c 	bl	80025dc <_lseek>
 80083a4:	1c43      	adds	r3, r0, #1
 80083a6:	d102      	bne.n	80083ae <_lseek_r+0x1e>
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	b103      	cbz	r3, 80083ae <_lseek_r+0x1e>
 80083ac:	6023      	str	r3, [r4, #0]
 80083ae:	bd38      	pop	{r3, r4, r5, pc}
 80083b0:	2000031c 	.word	0x2000031c

080083b4 <__ascii_mbtowc>:
 80083b4:	b082      	sub	sp, #8
 80083b6:	b901      	cbnz	r1, 80083ba <__ascii_mbtowc+0x6>
 80083b8:	a901      	add	r1, sp, #4
 80083ba:	b142      	cbz	r2, 80083ce <__ascii_mbtowc+0x1a>
 80083bc:	b14b      	cbz	r3, 80083d2 <__ascii_mbtowc+0x1e>
 80083be:	7813      	ldrb	r3, [r2, #0]
 80083c0:	600b      	str	r3, [r1, #0]
 80083c2:	7812      	ldrb	r2, [r2, #0]
 80083c4:	1e10      	subs	r0, r2, #0
 80083c6:	bf18      	it	ne
 80083c8:	2001      	movne	r0, #1
 80083ca:	b002      	add	sp, #8
 80083cc:	4770      	bx	lr
 80083ce:	4610      	mov	r0, r2
 80083d0:	e7fb      	b.n	80083ca <__ascii_mbtowc+0x16>
 80083d2:	f06f 0001 	mvn.w	r0, #1
 80083d6:	e7f8      	b.n	80083ca <__ascii_mbtowc+0x16>

080083d8 <__malloc_lock>:
 80083d8:	4801      	ldr	r0, [pc, #4]	; (80083e0 <__malloc_lock+0x8>)
 80083da:	f7ff b8c0 	b.w	800755e <__retarget_lock_acquire_recursive>
 80083de:	bf00      	nop
 80083e0:	20000310 	.word	0x20000310

080083e4 <__malloc_unlock>:
 80083e4:	4801      	ldr	r0, [pc, #4]	; (80083ec <__malloc_unlock+0x8>)
 80083e6:	f7ff b8bb 	b.w	8007560 <__retarget_lock_release_recursive>
 80083ea:	bf00      	nop
 80083ec:	20000310 	.word	0x20000310

080083f0 <_read_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d07      	ldr	r5, [pc, #28]	; (8008410 <_read_r+0x20>)
 80083f4:	4604      	mov	r4, r0
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	2200      	movs	r2, #0
 80083fc:	602a      	str	r2, [r5, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	f7fa f8a8 	bl	8002554 <_read>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_read_r+0x1e>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_read_r+0x1e>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	2000031c 	.word	0x2000031c

08008414 <__ascii_wctomb>:
 8008414:	b149      	cbz	r1, 800842a <__ascii_wctomb+0x16>
 8008416:	2aff      	cmp	r2, #255	; 0xff
 8008418:	bf85      	ittet	hi
 800841a:	238a      	movhi	r3, #138	; 0x8a
 800841c:	6003      	strhi	r3, [r0, #0]
 800841e:	700a      	strbls	r2, [r1, #0]
 8008420:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008424:	bf98      	it	ls
 8008426:	2001      	movls	r0, #1
 8008428:	4770      	bx	lr
 800842a:	4608      	mov	r0, r1
 800842c:	4770      	bx	lr

0800842e <abort>:
 800842e:	b508      	push	{r3, lr}
 8008430:	2006      	movs	r0, #6
 8008432:	f000 f82b 	bl	800848c <raise>
 8008436:	2001      	movs	r0, #1
 8008438:	f7fa f882 	bl	8002540 <_exit>

0800843c <_raise_r>:
 800843c:	291f      	cmp	r1, #31
 800843e:	b538      	push	{r3, r4, r5, lr}
 8008440:	4604      	mov	r4, r0
 8008442:	460d      	mov	r5, r1
 8008444:	d904      	bls.n	8008450 <_raise_r+0x14>
 8008446:	2316      	movs	r3, #22
 8008448:	6003      	str	r3, [r0, #0]
 800844a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800844e:	bd38      	pop	{r3, r4, r5, pc}
 8008450:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008452:	b112      	cbz	r2, 800845a <_raise_r+0x1e>
 8008454:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008458:	b94b      	cbnz	r3, 800846e <_raise_r+0x32>
 800845a:	4620      	mov	r0, r4
 800845c:	f000 f830 	bl	80084c0 <_getpid_r>
 8008460:	462a      	mov	r2, r5
 8008462:	4601      	mov	r1, r0
 8008464:	4620      	mov	r0, r4
 8008466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800846a:	f000 b817 	b.w	800849c <_kill_r>
 800846e:	2b01      	cmp	r3, #1
 8008470:	d00a      	beq.n	8008488 <_raise_r+0x4c>
 8008472:	1c59      	adds	r1, r3, #1
 8008474:	d103      	bne.n	800847e <_raise_r+0x42>
 8008476:	2316      	movs	r3, #22
 8008478:	6003      	str	r3, [r0, #0]
 800847a:	2001      	movs	r0, #1
 800847c:	e7e7      	b.n	800844e <_raise_r+0x12>
 800847e:	2400      	movs	r4, #0
 8008480:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008484:	4628      	mov	r0, r5
 8008486:	4798      	blx	r3
 8008488:	2000      	movs	r0, #0
 800848a:	e7e0      	b.n	800844e <_raise_r+0x12>

0800848c <raise>:
 800848c:	4b02      	ldr	r3, [pc, #8]	; (8008498 <raise+0xc>)
 800848e:	4601      	mov	r1, r0
 8008490:	6818      	ldr	r0, [r3, #0]
 8008492:	f7ff bfd3 	b.w	800843c <_raise_r>
 8008496:	bf00      	nop
 8008498:	2000000c 	.word	0x2000000c

0800849c <_kill_r>:
 800849c:	b538      	push	{r3, r4, r5, lr}
 800849e:	4d07      	ldr	r5, [pc, #28]	; (80084bc <_kill_r+0x20>)
 80084a0:	2300      	movs	r3, #0
 80084a2:	4604      	mov	r4, r0
 80084a4:	4608      	mov	r0, r1
 80084a6:	4611      	mov	r1, r2
 80084a8:	602b      	str	r3, [r5, #0]
 80084aa:	f7fa f839 	bl	8002520 <_kill>
 80084ae:	1c43      	adds	r3, r0, #1
 80084b0:	d102      	bne.n	80084b8 <_kill_r+0x1c>
 80084b2:	682b      	ldr	r3, [r5, #0]
 80084b4:	b103      	cbz	r3, 80084b8 <_kill_r+0x1c>
 80084b6:	6023      	str	r3, [r4, #0]
 80084b8:	bd38      	pop	{r3, r4, r5, pc}
 80084ba:	bf00      	nop
 80084bc:	2000031c 	.word	0x2000031c

080084c0 <_getpid_r>:
 80084c0:	f7fa b826 	b.w	8002510 <_getpid>
 80084c4:	0000      	movs	r0, r0
	...

080084c8 <exp>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	ed2d 8b02 	vpush	{d8}
 80084ce:	ec55 4b10 	vmov	r4, r5, d0
 80084d2:	f000 f841 	bl	8008558 <__ieee754_exp>
 80084d6:	eeb0 8a40 	vmov.f32	s16, s0
 80084da:	eef0 8a60 	vmov.f32	s17, s1
 80084de:	ec45 4b10 	vmov	d0, r4, r5
 80084e2:	f000 f9eb 	bl	80088bc <finite>
 80084e6:	b168      	cbz	r0, 8008504 <exp+0x3c>
 80084e8:	a317      	add	r3, pc, #92	; (adr r3, 8008548 <exp+0x80>)
 80084ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ee:	4620      	mov	r0, r4
 80084f0:	4629      	mov	r1, r5
 80084f2:	f7f8 fb31 	bl	8000b58 <__aeabi_dcmpgt>
 80084f6:	b160      	cbz	r0, 8008512 <exp+0x4a>
 80084f8:	f7fd fa0e 	bl	8005918 <__errno>
 80084fc:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8008538 <exp+0x70>
 8008500:	2322      	movs	r3, #34	; 0x22
 8008502:	6003      	str	r3, [r0, #0]
 8008504:	eeb0 0a48 	vmov.f32	s0, s16
 8008508:	eef0 0a68 	vmov.f32	s1, s17
 800850c:	ecbd 8b02 	vpop	{d8}
 8008510:	bd38      	pop	{r3, r4, r5, pc}
 8008512:	a30f      	add	r3, pc, #60	; (adr r3, 8008550 <exp+0x88>)
 8008514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008518:	4620      	mov	r0, r4
 800851a:	4629      	mov	r1, r5
 800851c:	f7f8 fafe 	bl	8000b1c <__aeabi_dcmplt>
 8008520:	2800      	cmp	r0, #0
 8008522:	d0ef      	beq.n	8008504 <exp+0x3c>
 8008524:	f7fd f9f8 	bl	8005918 <__errno>
 8008528:	2322      	movs	r3, #34	; 0x22
 800852a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8008540 <exp+0x78>
 800852e:	6003      	str	r3, [r0, #0]
 8008530:	e7e8      	b.n	8008504 <exp+0x3c>
 8008532:	bf00      	nop
 8008534:	f3af 8000 	nop.w
 8008538:	00000000 	.word	0x00000000
 800853c:	7ff00000 	.word	0x7ff00000
	...
 8008548:	fefa39ef 	.word	0xfefa39ef
 800854c:	40862e42 	.word	0x40862e42
 8008550:	d52d3051 	.word	0xd52d3051
 8008554:	c0874910 	.word	0xc0874910

08008558 <__ieee754_exp>:
 8008558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800855c:	ec55 4b10 	vmov	r4, r5, d0
 8008560:	49b5      	ldr	r1, [pc, #724]	; (8008838 <__ieee754_exp+0x2e0>)
 8008562:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008566:	428b      	cmp	r3, r1
 8008568:	ed2d 8b04 	vpush	{d8-d9}
 800856c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8008570:	d93d      	bls.n	80085ee <__ieee754_exp+0x96>
 8008572:	49b2      	ldr	r1, [pc, #712]	; (800883c <__ieee754_exp+0x2e4>)
 8008574:	428b      	cmp	r3, r1
 8008576:	d918      	bls.n	80085aa <__ieee754_exp+0x52>
 8008578:	ee10 3a10 	vmov	r3, s0
 800857c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8008580:	4313      	orrs	r3, r2
 8008582:	d009      	beq.n	8008598 <__ieee754_exp+0x40>
 8008584:	ee10 2a10 	vmov	r2, s0
 8008588:	462b      	mov	r3, r5
 800858a:	4620      	mov	r0, r4
 800858c:	4629      	mov	r1, r5
 800858e:	f7f7 fe9d 	bl	80002cc <__adddf3>
 8008592:	4604      	mov	r4, r0
 8008594:	460d      	mov	r5, r1
 8008596:	e002      	b.n	800859e <__ieee754_exp+0x46>
 8008598:	b10e      	cbz	r6, 800859e <__ieee754_exp+0x46>
 800859a:	2400      	movs	r4, #0
 800859c:	2500      	movs	r5, #0
 800859e:	ecbd 8b04 	vpop	{d8-d9}
 80085a2:	ec45 4b10 	vmov	d0, r4, r5
 80085a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085aa:	a38d      	add	r3, pc, #564	; (adr r3, 80087e0 <__ieee754_exp+0x288>)
 80085ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b0:	ee10 0a10 	vmov	r0, s0
 80085b4:	4629      	mov	r1, r5
 80085b6:	f7f8 facf 	bl	8000b58 <__aeabi_dcmpgt>
 80085ba:	4607      	mov	r7, r0
 80085bc:	b130      	cbz	r0, 80085cc <__ieee754_exp+0x74>
 80085be:	ecbd 8b04 	vpop	{d8-d9}
 80085c2:	2000      	movs	r0, #0
 80085c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c8:	f000 b96f 	b.w	80088aa <__math_oflow>
 80085cc:	a386      	add	r3, pc, #536	; (adr r3, 80087e8 <__ieee754_exp+0x290>)
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	4620      	mov	r0, r4
 80085d4:	4629      	mov	r1, r5
 80085d6:	f7f8 faa1 	bl	8000b1c <__aeabi_dcmplt>
 80085da:	2800      	cmp	r0, #0
 80085dc:	f000 808b 	beq.w	80086f6 <__ieee754_exp+0x19e>
 80085e0:	ecbd 8b04 	vpop	{d8-d9}
 80085e4:	4638      	mov	r0, r7
 80085e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ea:	f000 b955 	b.w	8008898 <__math_uflow>
 80085ee:	4a94      	ldr	r2, [pc, #592]	; (8008840 <__ieee754_exp+0x2e8>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	f240 80ac 	bls.w	800874e <__ieee754_exp+0x1f6>
 80085f6:	4a93      	ldr	r2, [pc, #588]	; (8008844 <__ieee754_exp+0x2ec>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d87c      	bhi.n	80086f6 <__ieee754_exp+0x19e>
 80085fc:	4b92      	ldr	r3, [pc, #584]	; (8008848 <__ieee754_exp+0x2f0>)
 80085fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008606:	ee10 0a10 	vmov	r0, s0
 800860a:	4629      	mov	r1, r5
 800860c:	f7f7 fe5c 	bl	80002c8 <__aeabi_dsub>
 8008610:	4b8e      	ldr	r3, [pc, #568]	; (800884c <__ieee754_exp+0x2f4>)
 8008612:	00f7      	lsls	r7, r6, #3
 8008614:	443b      	add	r3, r7
 8008616:	ed93 7b00 	vldr	d7, [r3]
 800861a:	f1c6 0a01 	rsb	sl, r6, #1
 800861e:	4680      	mov	r8, r0
 8008620:	4689      	mov	r9, r1
 8008622:	ebaa 0a06 	sub.w	sl, sl, r6
 8008626:	eeb0 8a47 	vmov.f32	s16, s14
 800862a:	eef0 8a67 	vmov.f32	s17, s15
 800862e:	ec53 2b18 	vmov	r2, r3, d8
 8008632:	4640      	mov	r0, r8
 8008634:	4649      	mov	r1, r9
 8008636:	f7f7 fe47 	bl	80002c8 <__aeabi_dsub>
 800863a:	4604      	mov	r4, r0
 800863c:	460d      	mov	r5, r1
 800863e:	4622      	mov	r2, r4
 8008640:	462b      	mov	r3, r5
 8008642:	4620      	mov	r0, r4
 8008644:	4629      	mov	r1, r5
 8008646:	f7f7 fff7 	bl	8000638 <__aeabi_dmul>
 800864a:	a369      	add	r3, pc, #420	; (adr r3, 80087f0 <__ieee754_exp+0x298>)
 800864c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008650:	4606      	mov	r6, r0
 8008652:	460f      	mov	r7, r1
 8008654:	f7f7 fff0 	bl	8000638 <__aeabi_dmul>
 8008658:	a367      	add	r3, pc, #412	; (adr r3, 80087f8 <__ieee754_exp+0x2a0>)
 800865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865e:	f7f7 fe33 	bl	80002c8 <__aeabi_dsub>
 8008662:	4632      	mov	r2, r6
 8008664:	463b      	mov	r3, r7
 8008666:	f7f7 ffe7 	bl	8000638 <__aeabi_dmul>
 800866a:	a365      	add	r3, pc, #404	; (adr r3, 8008800 <__ieee754_exp+0x2a8>)
 800866c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008670:	f7f7 fe2c 	bl	80002cc <__adddf3>
 8008674:	4632      	mov	r2, r6
 8008676:	463b      	mov	r3, r7
 8008678:	f7f7 ffde 	bl	8000638 <__aeabi_dmul>
 800867c:	a362      	add	r3, pc, #392	; (adr r3, 8008808 <__ieee754_exp+0x2b0>)
 800867e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008682:	f7f7 fe21 	bl	80002c8 <__aeabi_dsub>
 8008686:	4632      	mov	r2, r6
 8008688:	463b      	mov	r3, r7
 800868a:	f7f7 ffd5 	bl	8000638 <__aeabi_dmul>
 800868e:	a360      	add	r3, pc, #384	; (adr r3, 8008810 <__ieee754_exp+0x2b8>)
 8008690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008694:	f7f7 fe1a 	bl	80002cc <__adddf3>
 8008698:	4632      	mov	r2, r6
 800869a:	463b      	mov	r3, r7
 800869c:	f7f7 ffcc 	bl	8000638 <__aeabi_dmul>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4620      	mov	r0, r4
 80086a6:	4629      	mov	r1, r5
 80086a8:	f7f7 fe0e 	bl	80002c8 <__aeabi_dsub>
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	4606      	mov	r6, r0
 80086b2:	460f      	mov	r7, r1
 80086b4:	4620      	mov	r0, r4
 80086b6:	4629      	mov	r1, r5
 80086b8:	f7f7 ffbe 	bl	8000638 <__aeabi_dmul>
 80086bc:	ec41 0b19 	vmov	d9, r0, r1
 80086c0:	f1ba 0f00 	cmp.w	sl, #0
 80086c4:	d15d      	bne.n	8008782 <__ieee754_exp+0x22a>
 80086c6:	2200      	movs	r2, #0
 80086c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80086cc:	4630      	mov	r0, r6
 80086ce:	4639      	mov	r1, r7
 80086d0:	f7f7 fdfa 	bl	80002c8 <__aeabi_dsub>
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	ec51 0b19 	vmov	r0, r1, d9
 80086dc:	f7f8 f8d6 	bl	800088c <__aeabi_ddiv>
 80086e0:	4622      	mov	r2, r4
 80086e2:	462b      	mov	r3, r5
 80086e4:	f7f7 fdf0 	bl	80002c8 <__aeabi_dsub>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	2000      	movs	r0, #0
 80086ee:	4958      	ldr	r1, [pc, #352]	; (8008850 <__ieee754_exp+0x2f8>)
 80086f0:	f7f7 fdea 	bl	80002c8 <__aeabi_dsub>
 80086f4:	e74d      	b.n	8008592 <__ieee754_exp+0x3a>
 80086f6:	4857      	ldr	r0, [pc, #348]	; (8008854 <__ieee754_exp+0x2fc>)
 80086f8:	a347      	add	r3, pc, #284	; (adr r3, 8008818 <__ieee754_exp+0x2c0>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8008702:	4629      	mov	r1, r5
 8008704:	4620      	mov	r0, r4
 8008706:	f7f7 ff97 	bl	8000638 <__aeabi_dmul>
 800870a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800870e:	f7f7 fddd 	bl	80002cc <__adddf3>
 8008712:	f7f8 fa41 	bl	8000b98 <__aeabi_d2iz>
 8008716:	4682      	mov	sl, r0
 8008718:	f7f7 ff24 	bl	8000564 <__aeabi_i2d>
 800871c:	a340      	add	r3, pc, #256	; (adr r3, 8008820 <__ieee754_exp+0x2c8>)
 800871e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008722:	4606      	mov	r6, r0
 8008724:	460f      	mov	r7, r1
 8008726:	f7f7 ff87 	bl	8000638 <__aeabi_dmul>
 800872a:	4602      	mov	r2, r0
 800872c:	460b      	mov	r3, r1
 800872e:	4620      	mov	r0, r4
 8008730:	4629      	mov	r1, r5
 8008732:	f7f7 fdc9 	bl	80002c8 <__aeabi_dsub>
 8008736:	a33c      	add	r3, pc, #240	; (adr r3, 8008828 <__ieee754_exp+0x2d0>)
 8008738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873c:	4680      	mov	r8, r0
 800873e:	4689      	mov	r9, r1
 8008740:	4630      	mov	r0, r6
 8008742:	4639      	mov	r1, r7
 8008744:	f7f7 ff78 	bl	8000638 <__aeabi_dmul>
 8008748:	ec41 0b18 	vmov	d8, r0, r1
 800874c:	e76f      	b.n	800862e <__ieee754_exp+0xd6>
 800874e:	4a42      	ldr	r2, [pc, #264]	; (8008858 <__ieee754_exp+0x300>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d811      	bhi.n	8008778 <__ieee754_exp+0x220>
 8008754:	a336      	add	r3, pc, #216	; (adr r3, 8008830 <__ieee754_exp+0x2d8>)
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	ee10 0a10 	vmov	r0, s0
 800875e:	4629      	mov	r1, r5
 8008760:	f7f7 fdb4 	bl	80002cc <__adddf3>
 8008764:	4b3a      	ldr	r3, [pc, #232]	; (8008850 <__ieee754_exp+0x2f8>)
 8008766:	2200      	movs	r2, #0
 8008768:	f7f8 f9f6 	bl	8000b58 <__aeabi_dcmpgt>
 800876c:	b138      	cbz	r0, 800877e <__ieee754_exp+0x226>
 800876e:	4b38      	ldr	r3, [pc, #224]	; (8008850 <__ieee754_exp+0x2f8>)
 8008770:	2200      	movs	r2, #0
 8008772:	4620      	mov	r0, r4
 8008774:	4629      	mov	r1, r5
 8008776:	e70a      	b.n	800858e <__ieee754_exp+0x36>
 8008778:	f04f 0a00 	mov.w	sl, #0
 800877c:	e75f      	b.n	800863e <__ieee754_exp+0xe6>
 800877e:	4682      	mov	sl, r0
 8008780:	e75d      	b.n	800863e <__ieee754_exp+0xe6>
 8008782:	4632      	mov	r2, r6
 8008784:	463b      	mov	r3, r7
 8008786:	2000      	movs	r0, #0
 8008788:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800878c:	f7f7 fd9c 	bl	80002c8 <__aeabi_dsub>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	ec51 0b19 	vmov	r0, r1, d9
 8008798:	f7f8 f878 	bl	800088c <__aeabi_ddiv>
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	ec51 0b18 	vmov	r0, r1, d8
 80087a4:	f7f7 fd90 	bl	80002c8 <__aeabi_dsub>
 80087a8:	4642      	mov	r2, r8
 80087aa:	464b      	mov	r3, r9
 80087ac:	f7f7 fd8c 	bl	80002c8 <__aeabi_dsub>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	2000      	movs	r0, #0
 80087b6:	4926      	ldr	r1, [pc, #152]	; (8008850 <__ieee754_exp+0x2f8>)
 80087b8:	f7f7 fd86 	bl	80002c8 <__aeabi_dsub>
 80087bc:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80087c0:	4592      	cmp	sl, r2
 80087c2:	db02      	blt.n	80087ca <__ieee754_exp+0x272>
 80087c4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80087c8:	e6e3      	b.n	8008592 <__ieee754_exp+0x3a>
 80087ca:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80087ce:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80087d2:	2200      	movs	r2, #0
 80087d4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80087d8:	f7f7 ff2e 	bl	8000638 <__aeabi_dmul>
 80087dc:	e6d9      	b.n	8008592 <__ieee754_exp+0x3a>
 80087de:	bf00      	nop
 80087e0:	fefa39ef 	.word	0xfefa39ef
 80087e4:	40862e42 	.word	0x40862e42
 80087e8:	d52d3051 	.word	0xd52d3051
 80087ec:	c0874910 	.word	0xc0874910
 80087f0:	72bea4d0 	.word	0x72bea4d0
 80087f4:	3e663769 	.word	0x3e663769
 80087f8:	c5d26bf1 	.word	0xc5d26bf1
 80087fc:	3ebbbd41 	.word	0x3ebbbd41
 8008800:	af25de2c 	.word	0xaf25de2c
 8008804:	3f11566a 	.word	0x3f11566a
 8008808:	16bebd93 	.word	0x16bebd93
 800880c:	3f66c16c 	.word	0x3f66c16c
 8008810:	5555553e 	.word	0x5555553e
 8008814:	3fc55555 	.word	0x3fc55555
 8008818:	652b82fe 	.word	0x652b82fe
 800881c:	3ff71547 	.word	0x3ff71547
 8008820:	fee00000 	.word	0xfee00000
 8008824:	3fe62e42 	.word	0x3fe62e42
 8008828:	35793c76 	.word	0x35793c76
 800882c:	3dea39ef 	.word	0x3dea39ef
 8008830:	8800759c 	.word	0x8800759c
 8008834:	7e37e43c 	.word	0x7e37e43c
 8008838:	40862e41 	.word	0x40862e41
 800883c:	7fefffff 	.word	0x7fefffff
 8008840:	3fd62e42 	.word	0x3fd62e42
 8008844:	3ff0a2b1 	.word	0x3ff0a2b1
 8008848:	08008e48 	.word	0x08008e48
 800884c:	08008e58 	.word	0x08008e58
 8008850:	3ff00000 	.word	0x3ff00000
 8008854:	08008e38 	.word	0x08008e38
 8008858:	3defffff 	.word	0x3defffff

0800885c <with_errno>:
 800885c:	b570      	push	{r4, r5, r6, lr}
 800885e:	4604      	mov	r4, r0
 8008860:	460d      	mov	r5, r1
 8008862:	4616      	mov	r6, r2
 8008864:	f7fd f858 	bl	8005918 <__errno>
 8008868:	4629      	mov	r1, r5
 800886a:	6006      	str	r6, [r0, #0]
 800886c:	4620      	mov	r0, r4
 800886e:	bd70      	pop	{r4, r5, r6, pc}

08008870 <xflow>:
 8008870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008872:	4614      	mov	r4, r2
 8008874:	461d      	mov	r5, r3
 8008876:	b108      	cbz	r0, 800887c <xflow+0xc>
 8008878:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800887c:	e9cd 2300 	strd	r2, r3, [sp]
 8008880:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008884:	4620      	mov	r0, r4
 8008886:	4629      	mov	r1, r5
 8008888:	f7f7 fed6 	bl	8000638 <__aeabi_dmul>
 800888c:	2222      	movs	r2, #34	; 0x22
 800888e:	b003      	add	sp, #12
 8008890:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008894:	f7ff bfe2 	b.w	800885c <with_errno>

08008898 <__math_uflow>:
 8008898:	b508      	push	{r3, lr}
 800889a:	2200      	movs	r2, #0
 800889c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80088a0:	f7ff ffe6 	bl	8008870 <xflow>
 80088a4:	ec41 0b10 	vmov	d0, r0, r1
 80088a8:	bd08      	pop	{r3, pc}

080088aa <__math_oflow>:
 80088aa:	b508      	push	{r3, lr}
 80088ac:	2200      	movs	r2, #0
 80088ae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80088b2:	f7ff ffdd 	bl	8008870 <xflow>
 80088b6:	ec41 0b10 	vmov	d0, r0, r1
 80088ba:	bd08      	pop	{r3, pc}

080088bc <finite>:
 80088bc:	b082      	sub	sp, #8
 80088be:	ed8d 0b00 	vstr	d0, [sp]
 80088c2:	9801      	ldr	r0, [sp, #4]
 80088c4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80088c8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80088cc:	0fc0      	lsrs	r0, r0, #31
 80088ce:	b002      	add	sp, #8
 80088d0:	4770      	bx	lr
	...

080088d4 <_init>:
 80088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d6:	bf00      	nop
 80088d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088da:	bc08      	pop	{r3}
 80088dc:	469e      	mov	lr, r3
 80088de:	4770      	bx	lr

080088e0 <_fini>:
 80088e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e2:	bf00      	nop
 80088e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088e6:	bc08      	pop	{r3}
 80088e8:	469e      	mov	lr, r3
 80088ea:	4770      	bx	lr
