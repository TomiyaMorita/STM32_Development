
UART_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003130  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032f0  080032f0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080032f0  080032f0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032f0  080032f0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032f0  080032f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080032f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000000a8  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000104  20000104  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a0c6  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001781  00000000  00000000  0002a152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000700  00000000  00000000  0002b8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000678  00000000  00000000  0002bfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a5a4  00000000  00000000  0002c650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ba7  00000000  00000000  00046bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a8c6  00000000  00000000  0005079b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000eb061  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b44  00000000  00000000  000eb0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080032a0 	.word	0x080032a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	080032a0 	.word	0x080032a0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa0c 	bl	80005e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f864 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8d8 	bl	8000388 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f8a6 	bl	8000328 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive(&huart2,(uint8_t *)rxbuf, sizeof(rxbuf), 0xF);
 80001dc:	230f      	movs	r3, #15
 80001de:	2201      	movs	r2, #1
 80001e0:	4927      	ldr	r1, [pc, #156]	; (8000280 <main+0xb8>)
 80001e2:	4828      	ldr	r0, [pc, #160]	; (8000284 <main+0xbc>)
 80001e4:	f002 f8ce 	bl	8002384 <HAL_UART_Receive>
	  if (rxbuf[0] != 0){
 80001e8:	4b25      	ldr	r3, [pc, #148]	; (8000280 <main+0xb8>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d0f5      	beq.n	80001dc <main+0x14>
		  if(rxbuf[0] == 'a'){
 80001f0:	4b23      	ldr	r3, [pc, #140]	; (8000280 <main+0xb8>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	2b61      	cmp	r3, #97	; 0x61
 80001f6:	d10f      	bne.n	8000218 <main+0x50>
			  HAL_UART_Transmit(&huart2,(uint8_t *)txbuf1, sizeof(txbuf1),0xFFFF);
 80001f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001fc:	2212      	movs	r2, #18
 80001fe:	4922      	ldr	r1, [pc, #136]	; (8000288 <main+0xc0>)
 8000200:	4820      	ldr	r0, [pc, #128]	; (8000284 <main+0xbc>)
 8000202:	f002 f82b 	bl	800225c <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2108      	movs	r1, #8
 800020a:	4820      	ldr	r0, [pc, #128]	; (800028c <main+0xc4>)
 800020c:	f000 fd4c 	bl	8000ca8 <HAL_GPIO_WritePin>
			  rxbuf[0]=0;
 8000210:	4b1b      	ldr	r3, [pc, #108]	; (8000280 <main+0xb8>)
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]
 8000216:	e7e1      	b.n	80001dc <main+0x14>
		  }
		  else if(rxbuf[0] == 'b'){
 8000218:	4b19      	ldr	r3, [pc, #100]	; (8000280 <main+0xb8>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b62      	cmp	r3, #98	; 0x62
 800021e:	d10f      	bne.n	8000240 <main+0x78>
			  HAL_UART_Transmit(&huart2,(uint8_t *)txbuf2, sizeof(txbuf2),0xFFFF);
 8000220:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000224:	2212      	movs	r2, #18
 8000226:	491a      	ldr	r1, [pc, #104]	; (8000290 <main+0xc8>)
 8000228:	4816      	ldr	r0, [pc, #88]	; (8000284 <main+0xbc>)
 800022a:	f002 f817 	bl	800225c <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	2108      	movs	r1, #8
 8000232:	4816      	ldr	r0, [pc, #88]	; (800028c <main+0xc4>)
 8000234:	f000 fd38 	bl	8000ca8 <HAL_GPIO_WritePin>
			  rxbuf[0]=0;
 8000238:	4b11      	ldr	r3, [pc, #68]	; (8000280 <main+0xb8>)
 800023a:	2200      	movs	r2, #0
 800023c:	701a      	strb	r2, [r3, #0]
 800023e:	e7cd      	b.n	80001dc <main+0x14>
		  }
		  else if(rxbuf[0] == 'c'){
 8000240:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <main+0xb8>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b63      	cmp	r3, #99	; 0x63
 8000246:	d10f      	bne.n	8000268 <main+0xa0>
			  HAL_UART_Transmit(&huart2,(uint8_t *)txbuf3, sizeof(txbuf3),0xFFFF);
 8000248:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800024c:	2212      	movs	r2, #18
 800024e:	4911      	ldr	r1, [pc, #68]	; (8000294 <main+0xcc>)
 8000250:	480c      	ldr	r0, [pc, #48]	; (8000284 <main+0xbc>)
 8000252:	f002 f803 	bl	800225c <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,SET);
 8000256:	2201      	movs	r2, #1
 8000258:	2108      	movs	r1, #8
 800025a:	480c      	ldr	r0, [pc, #48]	; (800028c <main+0xc4>)
 800025c:	f000 fd24 	bl	8000ca8 <HAL_GPIO_WritePin>
			  rxbuf[0]=0;
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <main+0xb8>)
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
 8000266:	e7b9      	b.n	80001dc <main+0x14>
		 		  }
		  else{
			  HAL_UART_Transmit(&huart2,(uint8_t *)txbuf4, sizeof(txbuf4),3000);
 8000268:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800026c:	2214      	movs	r2, #20
 800026e:	490a      	ldr	r1, [pc, #40]	; (8000298 <main+0xd0>)
 8000270:	4804      	ldr	r0, [pc, #16]	; (8000284 <main+0xbc>)
 8000272:	f001 fff3 	bl	800225c <HAL_UART_Transmit>
			  rxbuf[0]=0;
 8000276:	4b02      	ldr	r3, [pc, #8]	; (8000280 <main+0xb8>)
 8000278:	2200      	movs	r2, #0
 800027a:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive(&huart2,(uint8_t *)rxbuf, sizeof(rxbuf), 0xF);
 800027c:	e7ae      	b.n	80001dc <main+0x14>
 800027e:	bf00      	nop
 8000280:	200000fc 	.word	0x200000fc
 8000284:	20000078 	.word	0x20000078
 8000288:	20000000 	.word	0x20000000
 800028c:	48000400 	.word	0x48000400
 8000290:	20000014 	.word	0x20000014
 8000294:	20000028 	.word	0x20000028
 8000298:	2000003c 	.word	0x2000003c

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b090      	sub	sp, #64	; 0x40
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0318 	add.w	r3, r7, #24
 80002a6:	2228      	movs	r2, #40	; 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 fff0 	bl	8003290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002be:	2301      	movs	r3, #1
 80002c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002c2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002cc:	2301      	movs	r3, #1
 80002ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d0:	2302      	movs	r3, #2
 80002d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e0:	f107 0318 	add.w	r3, r7, #24
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fcf7 	bl	8000cd8 <HAL_RCC_OscConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002f0:	f000 f894 	bl	800041c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f4:	230f      	movs	r3, #15
 80002f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f8:	2302      	movs	r3, #2
 80002fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2102      	movs	r1, #2
 800030e:	4618      	mov	r0, r3
 8000310:	f001 fd20 	bl	8001d54 <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800031a:	f000 f87f 	bl	800041c <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3740      	adds	r7, #64	; 0x40
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800032c:	4b14      	ldr	r3, [pc, #80]	; (8000380 <MX_USART2_UART_Init+0x58>)
 800032e:	4a15      	ldr	r2, [pc, #84]	; (8000384 <MX_USART2_UART_Init+0x5c>)
 8000330:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000332:	4b13      	ldr	r3, [pc, #76]	; (8000380 <MX_USART2_UART_Init+0x58>)
 8000334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000338:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800033a:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_USART2_UART_Init+0x58>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000340:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <MX_USART2_UART_Init+0x58>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_USART2_UART_Init+0x58>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <MX_USART2_UART_Init+0x58>)
 800034e:	220c      	movs	r2, #12
 8000350:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <MX_USART2_UART_Init+0x58>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <MX_USART2_UART_Init+0x58>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_USART2_UART_Init+0x58>)
 8000360:	2200      	movs	r2, #0
 8000362:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_USART2_UART_Init+0x58>)
 8000366:	2200      	movs	r2, #0
 8000368:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_USART2_UART_Init+0x58>)
 800036c:	f001 ff28 	bl	80021c0 <HAL_UART_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000376:	f000 f851 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000078 	.word	0x20000078
 8000384:	40004400 	.word	0x40004400

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b088      	sub	sp, #32
 800038c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 030c 	add.w	r3, r7, #12
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800039e:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <MX_GPIO_Init+0x8c>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	4a1c      	ldr	r2, [pc, #112]	; (8000414 <MX_GPIO_Init+0x8c>)
 80003a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003a8:	6153      	str	r3, [r2, #20]
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_GPIO_Init+0x8c>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003b2:	60bb      	str	r3, [r7, #8]
 80003b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <MX_GPIO_Init+0x8c>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a16      	ldr	r2, [pc, #88]	; (8000414 <MX_GPIO_Init+0x8c>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_GPIO_Init+0x8c>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_GPIO_Init+0x8c>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a10      	ldr	r2, [pc, #64]	; (8000414 <MX_GPIO_Init+0x8c>)
 80003d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003d8:	6153      	str	r3, [r2, #20]
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_GPIO_Init+0x8c>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003e2:	603b      	str	r3, [r7, #0]
 80003e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2108      	movs	r1, #8
 80003ea:	480b      	ldr	r0, [pc, #44]	; (8000418 <MX_GPIO_Init+0x90>)
 80003ec:	f000 fc5c 	bl	8000ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003f0:	2308      	movs	r3, #8
 80003f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fc:	2300      	movs	r3, #0
 80003fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000400:	f107 030c 	add.w	r3, r7, #12
 8000404:	4619      	mov	r1, r3
 8000406:	4804      	ldr	r0, [pc, #16]	; (8000418 <MX_GPIO_Init+0x90>)
 8000408:	f000 fadc 	bl	80009c4 <HAL_GPIO_Init>

}
 800040c:	bf00      	nop
 800040e:	3720      	adds	r7, #32
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40021000 	.word	0x40021000
 8000418:	48000400 	.word	0x48000400

0800041c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
}
 8000422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000424:	e7fe      	b.n	8000424 <Error_Handler+0x8>
	...

08000428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <HAL_MspInit+0x44>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a0e      	ldr	r2, [pc, #56]	; (800046c <HAL_MspInit+0x44>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b0c      	ldr	r3, [pc, #48]	; (800046c <HAL_MspInit+0x44>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <HAL_MspInit+0x44>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	4a08      	ldr	r2, [pc, #32]	; (800046c <HAL_MspInit+0x44>)
 800044c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000450:	61d3      	str	r3, [r2, #28]
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <HAL_MspInit+0x44>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000

08000470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b08a      	sub	sp, #40	; 0x28
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
 8000486:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a1c      	ldr	r2, [pc, #112]	; (8000500 <HAL_UART_MspInit+0x90>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d131      	bne.n	80004f6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000492:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <HAL_UART_MspInit+0x94>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	4a1b      	ldr	r2, [pc, #108]	; (8000504 <HAL_UART_MspInit+0x94>)
 8000498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800049c:	61d3      	str	r3, [r2, #28]
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <HAL_UART_MspInit+0x94>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004a6:	613b      	str	r3, [r7, #16]
 80004a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <HAL_UART_MspInit+0x94>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a15      	ldr	r2, [pc, #84]	; (8000504 <HAL_UART_MspInit+0x94>)
 80004b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <HAL_UART_MspInit+0x94>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80004c2:	f248 0304 	movw	r3, #32772	; 0x8004
 80004c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c8:	2302      	movs	r3, #2
 80004ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d0:	2303      	movs	r3, #3
 80004d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004d4:	2307      	movs	r3, #7
 80004d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	4619      	mov	r1, r3
 80004de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e2:	f000 fa6f 	bl	80009c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	2026      	movs	r0, #38	; 0x26
 80004ec:	f000 f9bd 	bl	800086a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004f0:	2026      	movs	r0, #38	; 0x26
 80004f2:	f000 f9d6 	bl	80008a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004f6:	bf00      	nop
 80004f8:	3728      	adds	r7, #40	; 0x28
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40004400 	.word	0x40004400
 8000504:	40021000 	.word	0x40021000

08000508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800050c:	e7fe      	b.n	800050c <NMI_Handler+0x4>

0800050e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <HardFault_Handler+0x4>

08000514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <MemManage_Handler+0x4>

0800051a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <BusFault_Handler+0x4>

08000520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <UsageFault_Handler+0x4>

08000526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000554:	f000 f88e 	bl	8000674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}

0800055c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000560:	4802      	ldr	r0, [pc, #8]	; (800056c <USART2_IRQHandler+0x10>)
 8000562:	f001 ffe1 	bl	8002528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000078 	.word	0x20000078

08000570 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <SystemInit+0x20>)
 8000576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800057a:	4a05      	ldr	r2, [pc, #20]	; (8000590 <SystemInit+0x20>)
 800057c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000598:	480d      	ldr	r0, [pc, #52]	; (80005d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800059a:	490e      	ldr	r1, [pc, #56]	; (80005d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800059c:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <LoopForever+0xe>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a0:	e002      	b.n	80005a8 <LoopCopyDataInit>

080005a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a6:	3304      	adds	r3, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ac:	d3f9      	bcc.n	80005a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ae:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b0:	4c0b      	ldr	r4, [pc, #44]	; (80005e0 <LoopForever+0x16>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b4:	e001      	b.n	80005ba <LoopFillZerobss>

080005b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b8:	3204      	adds	r2, #4

080005ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005bc:	d3fb      	bcc.n	80005b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005be:	f7ff ffd7 	bl	8000570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005c2:	f002 fe41 	bl	8003248 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005c6:	f7ff fdff 	bl	80001c8 <main>

080005ca <LoopForever>:

LoopForever:
    b LoopForever
 80005ca:	e7fe      	b.n	80005ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005cc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80005d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005d8:	080032f8 	.word	0x080032f8
  ldr r2, =_sbss
 80005dc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005e0:	20000104 	.word	0x20000104

080005e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005e4:	e7fe      	b.n	80005e4 <ADC1_2_IRQHandler>
	...

080005e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_Init+0x28>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <HAL_Init+0x28>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f8:	2003      	movs	r0, #3
 80005fa:	f000 f92b 	bl	8000854 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 f808 	bl	8000614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000604:	f7ff ff10 	bl	8000428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40022000 	.word	0x40022000

08000614 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HAL_InitTick+0x54>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_InitTick+0x58>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	fbb3 f3f1 	udiv	r3, r3, r1
 800062e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f943 	bl	80008be <HAL_SYSTICK_Config>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
 8000640:	e00e      	b.n	8000660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2b0f      	cmp	r3, #15
 8000646:	d80a      	bhi.n	800065e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000648:	2200      	movs	r2, #0
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000650:	f000 f90b 	bl	800086a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000654:	4a06      	ldr	r2, [pc, #24]	; (8000670 <HAL_InitTick+0x5c>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800065a:	2300      	movs	r3, #0
 800065c:	e000      	b.n	8000660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000050 	.word	0x20000050
 800066c:	20000058 	.word	0x20000058
 8000670:	20000054 	.word	0x20000054

08000674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_IncTick+0x20>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_IncTick+0x24>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4413      	add	r3, r2
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <HAL_IncTick+0x24>)
 8000686:	6013      	str	r3, [r2, #0]
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000058 	.word	0x20000058
 8000698:	20000100 	.word	0x20000100

0800069c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return uwTick;  
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <HAL_GetTick+0x14>)
 80006a2:	681b      	ldr	r3, [r3, #0]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000100 	.word	0x20000100

080006b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <__NVIC_SetPriorityGrouping+0x44>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d0:	4013      	ands	r3, r2
 80006d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e6:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <__NVIC_SetPriorityGrouping+0x44>)
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	60d3      	str	r3, [r2, #12]
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <__NVIC_GetPriorityGrouping+0x18>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	f003 0307 	and.w	r3, r3, #7
}
 800070a:	4618      	mov	r0, r3
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	2b00      	cmp	r3, #0
 8000728:	db0b      	blt.n	8000742 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	f003 021f 	and.w	r2, r3, #31
 8000730:	4907      	ldr	r1, [pc, #28]	; (8000750 <__NVIC_EnableIRQ+0x38>)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	095b      	lsrs	r3, r3, #5
 8000738:	2001      	movs	r0, #1
 800073a:	fa00 f202 	lsl.w	r2, r0, r2
 800073e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e100 	.word	0xe000e100

08000754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	6039      	str	r1, [r7, #0]
 800075e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000764:	2b00      	cmp	r3, #0
 8000766:	db0a      	blt.n	800077e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	b2da      	uxtb	r2, r3
 800076c:	490c      	ldr	r1, [pc, #48]	; (80007a0 <__NVIC_SetPriority+0x4c>)
 800076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000772:	0112      	lsls	r2, r2, #4
 8000774:	b2d2      	uxtb	r2, r2
 8000776:	440b      	add	r3, r1
 8000778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800077c:	e00a      	b.n	8000794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4908      	ldr	r1, [pc, #32]	; (80007a4 <__NVIC_SetPriority+0x50>)
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	f003 030f 	and.w	r3, r3, #15
 800078a:	3b04      	subs	r3, #4
 800078c:	0112      	lsls	r2, r2, #4
 800078e:	b2d2      	uxtb	r2, r2
 8000790:	440b      	add	r3, r1
 8000792:	761a      	strb	r2, [r3, #24]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000e100 	.word	0xe000e100
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b089      	sub	sp, #36	; 0x24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	f1c3 0307 	rsb	r3, r3, #7
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	bf28      	it	cs
 80007c6:	2304      	movcs	r3, #4
 80007c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3304      	adds	r3, #4
 80007ce:	2b06      	cmp	r3, #6
 80007d0:	d902      	bls.n	80007d8 <NVIC_EncodePriority+0x30>
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	3b03      	subs	r3, #3
 80007d6:	e000      	b.n	80007da <NVIC_EncodePriority+0x32>
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	43da      	mvns	r2, r3
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	401a      	ands	r2, r3
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	43d9      	mvns	r1, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	4313      	orrs	r3, r2
         );
}
 8000802:	4618      	mov	r0, r3
 8000804:	3724      	adds	r7, #36	; 0x24
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
	...

08000810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000820:	d301      	bcc.n	8000826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000822:	2301      	movs	r3, #1
 8000824:	e00f      	b.n	8000846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <SysTick_Config+0x40>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3b01      	subs	r3, #1
 800082c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082e:	210f      	movs	r1, #15
 8000830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000834:	f7ff ff8e 	bl	8000754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <SysTick_Config+0x40>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <SysTick_Config+0x40>)
 8000840:	2207      	movs	r2, #7
 8000842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	e000e010 	.word	0xe000e010

08000854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff29 	bl	80006b4 <__NVIC_SetPriorityGrouping>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b086      	sub	sp, #24
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
 8000876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800087c:	f7ff ff3e 	bl	80006fc <__NVIC_GetPriorityGrouping>
 8000880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	6978      	ldr	r0, [r7, #20]
 8000888:	f7ff ff8e 	bl	80007a8 <NVIC_EncodePriority>
 800088c:	4602      	mov	r2, r0
 800088e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff5d 	bl	8000754 <__NVIC_SetPriority>
}
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4603      	mov	r3, r0
 80008aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff31 	bl	8000718 <__NVIC_EnableIRQ>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ffa2 	bl	8000810 <SysTick_Config>
 80008cc:	4603      	mov	r3, r0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d008      	beq.n	80008fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2204      	movs	r2, #4
 80008ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e020      	b.n	800093c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f022 020e 	bic.w	r2, r2, #14
 8000908:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f022 0201 	bic.w	r2, r2, #1
 8000918:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000922:	2101      	movs	r1, #1
 8000924:	fa01 f202 	lsl.w	r2, r1, r2
 8000928:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2201      	movs	r2, #1
 800092e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000950:	2300      	movs	r3, #0
 8000952:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800095a:	2b02      	cmp	r3, #2
 800095c:	d005      	beq.n	800096a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2204      	movs	r2, #4
 8000962:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000964:	2301      	movs	r3, #1
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	e027      	b.n	80009ba <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f022 020e 	bic.w	r2, r2, #14
 8000978:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f022 0201 	bic.w	r2, r2, #1
 8000988:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000992:	2101      	movs	r1, #1
 8000994:	fa01 f202 	lsl.w	r2, r1, r2
 8000998:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2201      	movs	r2, #1
 800099e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	4798      	blx	r3
    } 
  }
  return status;
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b087      	sub	sp, #28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009d2:	e14e      	b.n	8000c72 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	2101      	movs	r1, #1
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	fa01 f303 	lsl.w	r3, r1, r3
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f000 8140 	beq.w	8000c6c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f003 0303 	and.w	r3, r3, #3
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d005      	beq.n	8000a04 <HAL_GPIO_Init+0x40>
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f003 0303 	and.w	r3, r3, #3
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d130      	bne.n	8000a66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	2203      	movs	r2, #3
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	68da      	ldr	r2, [r3, #12]
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	091b      	lsrs	r3, r3, #4
 8000a50:	f003 0201 	and.w	r2, r3, #1
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f003 0303 	and.w	r3, r3, #3
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d017      	beq.n	8000aa2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43db      	mvns	r3, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	689a      	ldr	r2, [r3, #8]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f003 0303 	and.w	r3, r3, #3
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d123      	bne.n	8000af6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	08da      	lsrs	r2, r3, #3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3208      	adds	r2, #8
 8000ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	220f      	movs	r2, #15
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	691a      	ldr	r2, [r3, #16]
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	f003 0307 	and.w	r3, r3, #7
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	08da      	lsrs	r2, r3, #3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3208      	adds	r2, #8
 8000af0:	6939      	ldr	r1, [r7, #16]
 8000af2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	2203      	movs	r2, #3
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 0203 	and.w	r2, r3, #3
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f000 809a 	beq.w	8000c6c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b38:	4b55      	ldr	r3, [pc, #340]	; (8000c90 <HAL_GPIO_Init+0x2cc>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a54      	ldr	r2, [pc, #336]	; (8000c90 <HAL_GPIO_Init+0x2cc>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b52      	ldr	r3, [pc, #328]	; (8000c90 <HAL_GPIO_Init+0x2cc>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b50:	4a50      	ldr	r2, [pc, #320]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	089b      	lsrs	r3, r3, #2
 8000b56:	3302      	adds	r3, #2
 8000b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	f003 0303 	and.w	r3, r3, #3
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	220f      	movs	r2, #15
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b7a:	d013      	beq.n	8000ba4 <HAL_GPIO_Init+0x1e0>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a46      	ldr	r2, [pc, #280]	; (8000c98 <HAL_GPIO_Init+0x2d4>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d00d      	beq.n	8000ba0 <HAL_GPIO_Init+0x1dc>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a45      	ldr	r2, [pc, #276]	; (8000c9c <HAL_GPIO_Init+0x2d8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d007      	beq.n	8000b9c <HAL_GPIO_Init+0x1d8>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a44      	ldr	r2, [pc, #272]	; (8000ca0 <HAL_GPIO_Init+0x2dc>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d101      	bne.n	8000b98 <HAL_GPIO_Init+0x1d4>
 8000b94:	2303      	movs	r3, #3
 8000b96:	e006      	b.n	8000ba6 <HAL_GPIO_Init+0x1e2>
 8000b98:	2305      	movs	r3, #5
 8000b9a:	e004      	b.n	8000ba6 <HAL_GPIO_Init+0x1e2>
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	e002      	b.n	8000ba6 <HAL_GPIO_Init+0x1e2>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e000      	b.n	8000ba6 <HAL_GPIO_Init+0x1e2>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	697a      	ldr	r2, [r7, #20]
 8000ba8:	f002 0203 	and.w	r2, r2, #3
 8000bac:	0092      	lsls	r2, r2, #2
 8000bae:	4093      	lsls	r3, r2
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bb6:	4937      	ldr	r1, [pc, #220]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	089b      	lsrs	r3, r3, #2
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bc4:	4b37      	ldr	r3, [pc, #220]	; (8000ca4 <HAL_GPIO_Init+0x2e0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000be8:	4a2e      	ldr	r2, [pc, #184]	; (8000ca4 <HAL_GPIO_Init+0x2e0>)
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bee:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <HAL_GPIO_Init+0x2e0>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c12:	4a24      	ldr	r2, [pc, #144]	; (8000ca4 <HAL_GPIO_Init+0x2e0>)
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <HAL_GPIO_Init+0x2e0>)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c3c:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <HAL_GPIO_Init+0x2e0>)
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_GPIO_Init+0x2e0>)
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <HAL_GPIO_Init+0x2e0>)
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	fa22 f303 	lsr.w	r3, r2, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f47f aea9 	bne.w	80009d4 <HAL_GPIO_Init+0x10>
  }
}
 8000c82:	bf00      	nop
 8000c84:	bf00      	nop
 8000c86:	371c      	adds	r7, #28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40010000 	.word	0x40010000
 8000c98:	48000400 	.word	0x48000400
 8000c9c:	48000800 	.word	0x48000800
 8000ca0:	48000c00 	.word	0x48000c00
 8000ca4:	40010400 	.word	0x40010400

08000ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	807b      	strh	r3, [r7, #2]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cb8:	787b      	ldrb	r3, [r7, #1]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cbe:	887a      	ldrh	r2, [r7, #2]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cc4:	e002      	b.n	8000ccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cc6:	887a      	ldrh	r2, [r7, #2]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ce4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ce8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	f001 b823 	b.w	8001d44 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 817d 	beq.w	800100e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d14:	4bbc      	ldr	r3, [pc, #752]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 030c 	and.w	r3, r3, #12
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d00c      	beq.n	8000d3a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d20:	4bb9      	ldr	r3, [pc, #740]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 030c 	and.w	r3, r3, #12
 8000d28:	2b08      	cmp	r3, #8
 8000d2a:	d15c      	bne.n	8000de6 <HAL_RCC_OscConfig+0x10e>
 8000d2c:	4bb6      	ldr	r3, [pc, #728]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d38:	d155      	bne.n	8000de6 <HAL_RCC_OscConfig+0x10e>
 8000d3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d3e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d42:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d46:	fa93 f3a3 	rbit	r3, r3
 8000d4a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d4e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d52:	fab3 f383 	clz	r3, r3
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	095b      	lsrs	r3, r3, #5
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d102      	bne.n	8000d6c <HAL_RCC_OscConfig+0x94>
 8000d66:	4ba8      	ldr	r3, [pc, #672]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	e015      	b.n	8000d98 <HAL_RCC_OscConfig+0xc0>
 8000d6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d70:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d74:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d78:	fa93 f3a3 	rbit	r3, r3
 8000d7c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d84:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d88:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d8c:	fa93 f3a3 	rbit	r3, r3
 8000d90:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d94:	4b9c      	ldr	r3, [pc, #624]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d9c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000da0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000da4:	fa92 f2a2 	rbit	r2, r2
 8000da8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000dac:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	f042 0220 	orr.w	r2, r2, #32
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	f002 021f 	and.w	r2, r2, #31
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f000 811f 	beq.w	800100c <HAL_RCC_OscConfig+0x334>
 8000dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f040 8116 	bne.w	800100c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	f000 bfaf 	b.w	8001d44 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df6:	d106      	bne.n	8000e06 <HAL_RCC_OscConfig+0x12e>
 8000df8:	4b83      	ldr	r3, [pc, #524]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a82      	ldr	r2, [pc, #520]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	e036      	b.n	8000e74 <HAL_RCC_OscConfig+0x19c>
 8000e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10c      	bne.n	8000e30 <HAL_RCC_OscConfig+0x158>
 8000e16:	4b7c      	ldr	r3, [pc, #496]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a7b      	ldr	r2, [pc, #492]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	4b79      	ldr	r3, [pc, #484]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a78      	ldr	r2, [pc, #480]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	e021      	b.n	8000e74 <HAL_RCC_OscConfig+0x19c>
 8000e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e40:	d10c      	bne.n	8000e5c <HAL_RCC_OscConfig+0x184>
 8000e42:	4b71      	ldr	r3, [pc, #452]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a70      	ldr	r2, [pc, #448]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	4b6e      	ldr	r3, [pc, #440]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a6d      	ldr	r2, [pc, #436]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	e00b      	b.n	8000e74 <HAL_RCC_OscConfig+0x19c>
 8000e5c:	4b6a      	ldr	r3, [pc, #424]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a69      	ldr	r2, [pc, #420]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4b67      	ldr	r3, [pc, #412]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a66      	ldr	r2, [pc, #408]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e72:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e74:	4b64      	ldr	r3, [pc, #400]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e78:	f023 020f 	bic.w	r2, r3, #15
 8000e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	495f      	ldr	r1, [pc, #380]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d059      	beq.n	8000f52 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9e:	f7ff fbfd 	bl	800069c <HAL_GetTick>
 8000ea2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea6:	e00a      	b.n	8000ebe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea8:	f7ff fbf8 	bl	800069c <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b64      	cmp	r3, #100	; 0x64
 8000eb6:	d902      	bls.n	8000ebe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	f000 bf43 	b.w	8001d44 <HAL_RCC_OscConfig+0x106c>
 8000ebe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000eca:	fa93 f3a3 	rbit	r3, r3
 8000ece:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000ed2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed6:	fab3 f383 	clz	r3, r3
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	095b      	lsrs	r3, r3, #5
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d102      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x218>
 8000eea:	4b47      	ldr	r3, [pc, #284]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	e015      	b.n	8000f1c <HAL_RCC_OscConfig+0x244>
 8000ef0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000efc:	fa93 f3a3 	rbit	r3, r3
 8000f00:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f08:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f0c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f10:	fa93 f3a3 	rbit	r3, r3
 8000f14:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f18:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f20:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f24:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f28:	fa92 f2a2 	rbit	r2, r2
 8000f2c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f30:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f34:	fab2 f282 	clz	r2, r2
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	f042 0220 	orr.w	r2, r2, #32
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	f002 021f 	and.w	r2, r2, #31
 8000f44:	2101      	movs	r1, #1
 8000f46:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0ab      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x1d0>
 8000f50:	e05d      	b.n	800100e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f52:	f7ff fba3 	bl	800069c <HAL_GetTick>
 8000f56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5a:	e00a      	b.n	8000f72 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fb9e 	bl	800069c <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b64      	cmp	r3, #100	; 0x64
 8000f6a:	d902      	bls.n	8000f72 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	f000 bee9 	b.w	8001d44 <HAL_RCC_OscConfig+0x106c>
 8000f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f76:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f7e:	fa93 f3a3 	rbit	r3, r3
 8000f82:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f86:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8a:	fab3 f383 	clz	r3, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	095b      	lsrs	r3, r3, #5
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d102      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x2cc>
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	e015      	b.n	8000fd0 <HAL_RCC_OscConfig+0x2f8>
 8000fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000fb0:	fa93 f3a3 	rbit	r3, r3
 8000fb4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fbc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fc0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000fc4:	fa93 f3a3 	rbit	r3, r3
 8000fc8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_RCC_OscConfig+0x330>)
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fd4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000fd8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fdc:	fa92 f2a2 	rbit	r2, r2
 8000fe0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000fe4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000fe8:	fab2 f282 	clz	r2, r2
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	f042 0220 	orr.w	r2, r2, #32
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	f002 021f 	and.w	r2, r2, #31
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffe:	4013      	ands	r3, r2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1ab      	bne.n	8000f5c <HAL_RCC_OscConfig+0x284>
 8001004:	e003      	b.n	800100e <HAL_RCC_OscConfig+0x336>
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001012:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 817d 	beq.w	800131e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001024:	4ba6      	ldr	r3, [pc, #664]	; (80012c0 <HAL_RCC_OscConfig+0x5e8>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 030c 	and.w	r3, r3, #12
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00b      	beq.n	8001048 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001030:	4ba3      	ldr	r3, [pc, #652]	; (80012c0 <HAL_RCC_OscConfig+0x5e8>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 030c 	and.w	r3, r3, #12
 8001038:	2b08      	cmp	r3, #8
 800103a:	d172      	bne.n	8001122 <HAL_RCC_OscConfig+0x44a>
 800103c:	4ba0      	ldr	r3, [pc, #640]	; (80012c0 <HAL_RCC_OscConfig+0x5e8>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d16c      	bne.n	8001122 <HAL_RCC_OscConfig+0x44a>
 8001048:	2302      	movs	r3, #2
 800104a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001052:	fa93 f3a3 	rbit	r3, r3
 8001056:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800105a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105e:	fab3 f383 	clz	r3, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	095b      	lsrs	r3, r3, #5
 8001066:	b2db      	uxtb	r3, r3
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b01      	cmp	r3, #1
 8001070:	d102      	bne.n	8001078 <HAL_RCC_OscConfig+0x3a0>
 8001072:	4b93      	ldr	r3, [pc, #588]	; (80012c0 <HAL_RCC_OscConfig+0x5e8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	e013      	b.n	80010a0 <HAL_RCC_OscConfig+0x3c8>
 8001078:	2302      	movs	r3, #2
 800107a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001082:	fa93 f3a3 	rbit	r3, r3
 8001086:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800108a:	2302      	movs	r3, #2
 800108c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001090:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001094:	fa93 f3a3 	rbit	r3, r3
 8001098:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800109c:	4b88      	ldr	r3, [pc, #544]	; (80012c0 <HAL_RCC_OscConfig+0x5e8>)
 800109e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a0:	2202      	movs	r2, #2
 80010a2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80010a6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010aa:	fa92 f2a2 	rbit	r2, r2
 80010ae:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80010b2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010b6:	fab2 f282 	clz	r2, r2
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	f042 0220 	orr.w	r2, r2, #32
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	f002 021f 	and.w	r2, r2, #31
 80010c6:	2101      	movs	r1, #1
 80010c8:	fa01 f202 	lsl.w	r2, r1, r2
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00a      	beq.n	80010e8 <HAL_RCC_OscConfig+0x410>
 80010d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d002      	beq.n	80010e8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	f000 be2e 	b.w	8001d44 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e8:	4b75      	ldr	r3, [pc, #468]	; (80012c0 <HAL_RCC_OscConfig+0x5e8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	21f8      	movs	r1, #248	; 0xf8
 80010fe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001102:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001106:	fa91 f1a1 	rbit	r1, r1
 800110a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800110e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001112:	fab1 f181 	clz	r1, r1
 8001116:	b2c9      	uxtb	r1, r1
 8001118:	408b      	lsls	r3, r1
 800111a:	4969      	ldr	r1, [pc, #420]	; (80012c0 <HAL_RCC_OscConfig+0x5e8>)
 800111c:	4313      	orrs	r3, r2
 800111e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001120:	e0fd      	b.n	800131e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001126:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 8088 	beq.w	8001244 <HAL_RCC_OscConfig+0x56c>
 8001134:	2301      	movs	r3, #1
 8001136:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800113e:	fa93 f3a3 	rbit	r3, r3
 8001142:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001146:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800114a:	fab3 f383 	clz	r3, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001154:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	461a      	mov	r2, r3
 800115c:	2301      	movs	r3, #1
 800115e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fa9c 	bl	800069c <HAL_GetTick>
 8001164:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001168:	e00a      	b.n	8001180 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116a:	f7ff fa97 	bl	800069c <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d902      	bls.n	8001180 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	f000 bde2 	b.w	8001d44 <HAL_RCC_OscConfig+0x106c>
 8001180:	2302      	movs	r3, #2
 8001182:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800118a:	fa93 f3a3 	rbit	r3, r3
 800118e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001192:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001196:	fab3 f383 	clz	r3, r3
 800119a:	b2db      	uxtb	r3, r3
 800119c:	095b      	lsrs	r3, r3, #5
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d102      	bne.n	80011b0 <HAL_RCC_OscConfig+0x4d8>
 80011aa:	4b45      	ldr	r3, [pc, #276]	; (80012c0 <HAL_RCC_OscConfig+0x5e8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	e013      	b.n	80011d8 <HAL_RCC_OscConfig+0x500>
 80011b0:	2302      	movs	r3, #2
 80011b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80011ba:	fa93 f3a3 	rbit	r3, r3
 80011be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011c2:	2302      	movs	r3, #2
 80011c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80011cc:	fa93 f3a3 	rbit	r3, r3
 80011d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80011d4:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <HAL_RCC_OscConfig+0x5e8>)
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	2202      	movs	r2, #2
 80011da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80011de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011e2:	fa92 f2a2 	rbit	r2, r2
 80011e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80011ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80011ee:	fab2 f282 	clz	r2, r2
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	f042 0220 	orr.w	r2, r2, #32
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	f002 021f 	and.w	r2, r2, #31
 80011fe:	2101      	movs	r1, #1
 8001200:	fa01 f202 	lsl.w	r2, r1, r2
 8001204:	4013      	ands	r3, r2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0af      	beq.n	800116a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <HAL_RCC_OscConfig+0x5e8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001216:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	21f8      	movs	r1, #248	; 0xf8
 8001220:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001224:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001228:	fa91 f1a1 	rbit	r1, r1
 800122c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001230:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001234:	fab1 f181 	clz	r1, r1
 8001238:	b2c9      	uxtb	r1, r1
 800123a:	408b      	lsls	r3, r1
 800123c:	4920      	ldr	r1, [pc, #128]	; (80012c0 <HAL_RCC_OscConfig+0x5e8>)
 800123e:	4313      	orrs	r3, r2
 8001240:	600b      	str	r3, [r1, #0]
 8001242:	e06c      	b.n	800131e <HAL_RCC_OscConfig+0x646>
 8001244:	2301      	movs	r3, #1
 8001246:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800124e:	fa93 f3a3 	rbit	r3, r3
 8001252:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001256:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800125a:	fab3 f383 	clz	r3, r3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001264:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	461a      	mov	r2, r3
 800126c:	2300      	movs	r3, #0
 800126e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fa14 	bl	800069c <HAL_GetTick>
 8001274:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001278:	e00a      	b.n	8001290 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127a:	f7ff fa0f 	bl	800069c <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d902      	bls.n	8001290 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	f000 bd5a 	b.w	8001d44 <HAL_RCC_OscConfig+0x106c>
 8001290:	2302      	movs	r3, #2
 8001292:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001296:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800129a:	fa93 f3a3 	rbit	r3, r3
 800129e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80012a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	095b      	lsrs	r3, r3, #5
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d104      	bne.n	80012c4 <HAL_RCC_OscConfig+0x5ec>
 80012ba:	4b01      	ldr	r3, [pc, #4]	; (80012c0 <HAL_RCC_OscConfig+0x5e8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	e015      	b.n	80012ec <HAL_RCC_OscConfig+0x614>
 80012c0:	40021000 	.word	0x40021000
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012ce:	fa93 f3a3 	rbit	r3, r3
 80012d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012d6:	2302      	movs	r3, #2
 80012d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80012e8:	4bc8      	ldr	r3, [pc, #800]	; (800160c <HAL_RCC_OscConfig+0x934>)
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	2202      	movs	r2, #2
 80012ee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80012f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012f6:	fa92 f2a2 	rbit	r2, r2
 80012fa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80012fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001302:	fab2 f282 	clz	r2, r2
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	f042 0220 	orr.w	r2, r2, #32
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	f002 021f 	and.w	r2, r2, #31
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1ad      	bne.n	800127a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001322:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8110 	beq.w	8001554 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001338:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d079      	beq.n	8001438 <HAL_RCC_OscConfig+0x760>
 8001344:	2301      	movs	r3, #1
 8001346:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800134e:	fa93 f3a3 	rbit	r3, r3
 8001352:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135a:	fab3 f383 	clz	r3, r3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	461a      	mov	r2, r3
 8001362:	4bab      	ldr	r3, [pc, #684]	; (8001610 <HAL_RCC_OscConfig+0x938>)
 8001364:	4413      	add	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	461a      	mov	r2, r3
 800136a:	2301      	movs	r3, #1
 800136c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136e:	f7ff f995 	bl	800069c <HAL_GetTick>
 8001372:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001376:	e00a      	b.n	800138e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001378:	f7ff f990 	bl	800069c <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d902      	bls.n	800138e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	f000 bcdb 	b.w	8001d44 <HAL_RCC_OscConfig+0x106c>
 800138e:	2302      	movs	r3, #2
 8001390:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001394:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001398:	fa93 f3a3 	rbit	r3, r3
 800139c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80013a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013a8:	2202      	movs	r2, #2
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	fa93 f2a3 	rbit	r2, r3
 80013ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013cc:	2202      	movs	r2, #2
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	fa93 f2a3 	rbit	r2, r3
 80013de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e8:	4b88      	ldr	r3, [pc, #544]	; (800160c <HAL_RCC_OscConfig+0x934>)
 80013ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013f4:	2102      	movs	r1, #2
 80013f6:	6019      	str	r1, [r3, #0]
 80013f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	fa93 f1a3 	rbit	r1, r3
 8001406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800140e:	6019      	str	r1, [r3, #0]
  return result;
 8001410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001414:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	fab3 f383 	clz	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f003 031f 	and.w	r3, r3, #31
 800142a:	2101      	movs	r1, #1
 800142c:	fa01 f303 	lsl.w	r3, r1, r3
 8001430:	4013      	ands	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0a0      	beq.n	8001378 <HAL_RCC_OscConfig+0x6a0>
 8001436:	e08d      	b.n	8001554 <HAL_RCC_OscConfig+0x87c>
 8001438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001448:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	fa93 f2a3 	rbit	r2, r3
 8001452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001456:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800145a:	601a      	str	r2, [r3, #0]
  return result;
 800145c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001460:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001464:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001466:	fab3 f383 	clz	r3, r3
 800146a:	b2db      	uxtb	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	4b68      	ldr	r3, [pc, #416]	; (8001610 <HAL_RCC_OscConfig+0x938>)
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	461a      	mov	r2, r3
 8001476:	2300      	movs	r3, #0
 8001478:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff f90f 	bl	800069c <HAL_GetTick>
 800147e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001482:	e00a      	b.n	800149a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001484:	f7ff f90a 	bl	800069c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d902      	bls.n	800149a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	f000 bc55 	b.w	8001d44 <HAL_RCC_OscConfig+0x106c>
 800149a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014a2:	2202      	movs	r2, #2
 80014a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	fa93 f2a3 	rbit	r2, r3
 80014b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014c6:	2202      	movs	r2, #2
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	fa93 f2a3 	rbit	r2, r3
 80014d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014ea:	2202      	movs	r2, #2
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	fa93 f2a3 	rbit	r2, r3
 80014fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001500:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001504:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001506:	4b41      	ldr	r3, [pc, #260]	; (800160c <HAL_RCC_OscConfig+0x934>)
 8001508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800150a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001512:	2102      	movs	r1, #2
 8001514:	6019      	str	r1, [r3, #0]
 8001516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	fa93 f1a3 	rbit	r1, r3
 8001524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001528:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800152c:	6019      	str	r1, [r3, #0]
  return result;
 800152e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001532:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	fab3 f383 	clz	r3, r3
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	2101      	movs	r1, #1
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	4013      	ands	r3, r2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d197      	bne.n	8001484 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001558:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 81a1 	beq.w	80018ac <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001570:	4b26      	ldr	r3, [pc, #152]	; (800160c <HAL_RCC_OscConfig+0x934>)
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d116      	bne.n	80015aa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800157c:	4b23      	ldr	r3, [pc, #140]	; (800160c <HAL_RCC_OscConfig+0x934>)
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	4a22      	ldr	r2, [pc, #136]	; (800160c <HAL_RCC_OscConfig+0x934>)
 8001582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001586:	61d3      	str	r3, [r2, #28]
 8001588:	4b20      	ldr	r3, [pc, #128]	; (800160c <HAL_RCC_OscConfig+0x934>)
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001594:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015a2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015a4:	2301      	movs	r3, #1
 80015a6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <HAL_RCC_OscConfig+0x93c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d11a      	bne.n	80015ec <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <HAL_RCC_OscConfig+0x93c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a16      	ldr	r2, [pc, #88]	; (8001614 <HAL_RCC_OscConfig+0x93c>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c2:	f7ff f86b 	bl	800069c <HAL_GetTick>
 80015c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ca:	e009      	b.n	80015e0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015cc:	f7ff f866 	bl	800069c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b64      	cmp	r3, #100	; 0x64
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e3b1      	b.n	8001d44 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_RCC_OscConfig+0x93c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0ef      	beq.n	80015cc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d10d      	bne.n	8001618 <HAL_RCC_OscConfig+0x940>
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <HAL_RCC_OscConfig+0x934>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	4a02      	ldr	r2, [pc, #8]	; (800160c <HAL_RCC_OscConfig+0x934>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6213      	str	r3, [r2, #32]
 8001608:	e03c      	b.n	8001684 <HAL_RCC_OscConfig+0x9ac>
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000
 8001610:	10908120 	.word	0x10908120
 8001614:	40007000 	.word	0x40007000
 8001618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10c      	bne.n	8001642 <HAL_RCC_OscConfig+0x96a>
 8001628:	4bc1      	ldr	r3, [pc, #772]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4ac0      	ldr	r2, [pc, #768]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	4bbe      	ldr	r3, [pc, #760]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4abd      	ldr	r2, [pc, #756]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 800163a:	f023 0304 	bic.w	r3, r3, #4
 800163e:	6213      	str	r3, [r2, #32]
 8001640:	e020      	b.n	8001684 <HAL_RCC_OscConfig+0x9ac>
 8001642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001646:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b05      	cmp	r3, #5
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0x994>
 8001652:	4bb7      	ldr	r3, [pc, #732]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4ab6      	ldr	r2, [pc, #728]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6213      	str	r3, [r2, #32]
 800165e:	4bb4      	ldr	r3, [pc, #720]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4ab3      	ldr	r2, [pc, #716]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6213      	str	r3, [r2, #32]
 800166a:	e00b      	b.n	8001684 <HAL_RCC_OscConfig+0x9ac>
 800166c:	4bb0      	ldr	r3, [pc, #704]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4aaf      	ldr	r2, [pc, #700]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	6213      	str	r3, [r2, #32]
 8001678:	4bad      	ldr	r3, [pc, #692]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	4aac      	ldr	r2, [pc, #688]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 800167e:	f023 0304 	bic.w	r3, r3, #4
 8001682:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001688:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 8081 	beq.w	8001798 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff f801 	bl	800069c <HAL_GetTick>
 800169a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169e:	e00b      	b.n	80016b8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a0:	f7fe fffc 	bl	800069c <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e345      	b.n	8001d44 <HAL_RCC_OscConfig+0x106c>
 80016b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016c0:	2202      	movs	r2, #2
 80016c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	fa93 f2a3 	rbit	r2, r3
 80016d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016e4:	2202      	movs	r2, #2
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	fa93 f2a3 	rbit	r2, r3
 80016f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016fe:	601a      	str	r2, [r3, #0]
  return result;
 8001700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001704:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001708:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	095b      	lsrs	r3, r3, #5
 8001712:	b2db      	uxtb	r3, r3
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d102      	bne.n	8001724 <HAL_RCC_OscConfig+0xa4c>
 800171e:	4b84      	ldr	r3, [pc, #528]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	e013      	b.n	800174c <HAL_RCC_OscConfig+0xa74>
 8001724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001728:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800172c:	2202      	movs	r2, #2
 800172e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001734:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	fa93 f2a3 	rbit	r2, r3
 800173e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001742:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	4b79      	ldr	r3, [pc, #484]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001750:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001754:	2102      	movs	r1, #2
 8001756:	6011      	str	r1, [r2, #0]
 8001758:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800175c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	fa92 f1a2 	rbit	r1, r2
 8001766:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800176a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800176e:	6011      	str	r1, [r2, #0]
  return result;
 8001770:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001774:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	fab2 f282 	clz	r2, r2
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	f002 021f 	and.w	r2, r2, #31
 800178a:	2101      	movs	r1, #1
 800178c:	fa01 f202 	lsl.w	r2, r1, r2
 8001790:	4013      	ands	r3, r2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d084      	beq.n	80016a0 <HAL_RCC_OscConfig+0x9c8>
 8001796:	e07f      	b.n	8001898 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001798:	f7fe ff80 	bl	800069c <HAL_GetTick>
 800179c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a0:	e00b      	b.n	80017ba <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a2:	f7fe ff7b 	bl	800069c <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e2c4      	b.n	8001d44 <HAL_RCC_OscConfig+0x106c>
 80017ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017be:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017c2:	2202      	movs	r2, #2
 80017c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	fa93 f2a3 	rbit	r2, r3
 80017d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017e6:	2202      	movs	r2, #2
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	fa93 f2a3 	rbit	r2, r3
 80017f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001800:	601a      	str	r2, [r3, #0]
  return result;
 8001802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001806:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800180a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180c:	fab3 f383 	clz	r3, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d102      	bne.n	8001826 <HAL_RCC_OscConfig+0xb4e>
 8001820:	4b43      	ldr	r3, [pc, #268]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	e013      	b.n	800184e <HAL_RCC_OscConfig+0xb76>
 8001826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800182e:	2202      	movs	r2, #2
 8001830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001836:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	fa93 f2a3 	rbit	r2, r3
 8001840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001844:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	4b39      	ldr	r3, [pc, #228]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001852:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001856:	2102      	movs	r1, #2
 8001858:	6011      	str	r1, [r2, #0]
 800185a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800185e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	fa92 f1a2 	rbit	r1, r2
 8001868:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800186c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001870:	6011      	str	r1, [r2, #0]
  return result;
 8001872:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001876:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	fab2 f282 	clz	r2, r2
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	f002 021f 	and.w	r2, r2, #31
 800188c:	2101      	movs	r1, #1
 800188e:	fa01 f202 	lsl.w	r2, r1, r2
 8001892:	4013      	ands	r3, r2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d184      	bne.n	80017a2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001898:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800189c:	2b01      	cmp	r3, #1
 800189e:	d105      	bne.n	80018ac <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a0:	4b23      	ldr	r3, [pc, #140]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	4a22      	ldr	r2, [pc, #136]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 80018a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018aa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 8242 	beq.w	8001d42 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HAL_RCC_OscConfig+0xc58>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	f000 8213 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	f040 8162 	bne.w	8001ba2 <HAL_RCC_OscConfig+0xeca>
 80018de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	fa93 f2a3 	rbit	r2, r3
 80018fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001902:	601a      	str	r2, [r3, #0]
  return result;
 8001904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001908:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800190c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001918:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	461a      	mov	r2, r3
 8001920:	2300      	movs	r3, #0
 8001922:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7fe feba 	bl	800069c <HAL_GetTick>
 8001928:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192c:	e00c      	b.n	8001948 <HAL_RCC_OscConfig+0xc70>
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001934:	f7fe feb2 	bl	800069c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e1fd      	b.n	8001d44 <HAL_RCC_OscConfig+0x106c>
 8001948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001950:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	fa93 f2a3 	rbit	r2, r3
 8001964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001968:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800196c:	601a      	str	r2, [r3, #0]
  return result;
 800196e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001972:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001976:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	b2db      	uxtb	r3, r3
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b01      	cmp	r3, #1
 800198a:	d102      	bne.n	8001992 <HAL_RCC_OscConfig+0xcba>
 800198c:	4bb0      	ldr	r3, [pc, #704]	; (8001c50 <HAL_RCC_OscConfig+0xf78>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	e027      	b.n	80019e2 <HAL_RCC_OscConfig+0xd0a>
 8001992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001996:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800199a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800199e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	fa93 f2a3 	rbit	r2, r3
 80019ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019bc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	fa93 f2a3 	rbit	r2, r3
 80019d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	4b9c      	ldr	r3, [pc, #624]	; (8001c50 <HAL_RCC_OscConfig+0xf78>)
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019e6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019ee:	6011      	str	r1, [r2, #0]
 80019f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019f4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	fa92 f1a2 	rbit	r1, r2
 80019fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a02:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a06:	6011      	str	r1, [r2, #0]
  return result;
 8001a08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a0c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	fab2 f282 	clz	r2, r2
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	f042 0220 	orr.w	r2, r2, #32
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	f002 021f 	and.w	r2, r2, #31
 8001a22:	2101      	movs	r1, #1
 8001a24:	fa01 f202 	lsl.w	r2, r1, r2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d182      	bne.n	8001934 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2e:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0xf78>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	497f      	ldr	r1, [pc, #508]	; (8001c50 <HAL_RCC_OscConfig+0xf78>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	604b      	str	r3, [r1, #4]
 8001a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a68:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	fa93 f2a3 	rbit	r2, r3
 8001a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a76:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a7a:	601a      	str	r2, [r3, #0]
  return result;
 8001a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a80:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a84:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a86:	fab3 f383 	clz	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	461a      	mov	r2, r3
 8001a98:	2301      	movs	r3, #1
 8001a9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7fe fdfe 	bl	800069c <HAL_GetTick>
 8001aa0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa4:	e009      	b.n	8001aba <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa6:	f7fe fdf9 	bl	800069c <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e144      	b.n	8001d44 <HAL_RCC_OscConfig+0x106c>
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ac2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ac6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001acc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	fa93 f2a3 	rbit	r2, r3
 8001ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ada:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ade:	601a      	str	r2, [r3, #0]
  return result;
 8001ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ae8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	095b      	lsrs	r3, r3, #5
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d102      	bne.n	8001b04 <HAL_RCC_OscConfig+0xe2c>
 8001afe:	4b54      	ldr	r3, [pc, #336]	; (8001c50 <HAL_RCC_OscConfig+0xf78>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	e027      	b.n	8001b54 <HAL_RCC_OscConfig+0xe7c>
 8001b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b08:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b16:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	fa93 f2a3 	rbit	r2, r3
 8001b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b24:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	fa93 f2a3 	rbit	r2, r3
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <HAL_RCC_OscConfig+0xf78>)
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b58:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b60:	6011      	str	r1, [r2, #0]
 8001b62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b66:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	fa92 f1a2 	rbit	r1, r2
 8001b70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b74:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b78:	6011      	str	r1, [r2, #0]
  return result;
 8001b7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b7e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	fab2 f282 	clz	r2, r2
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	f042 0220 	orr.w	r2, r2, #32
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	f002 021f 	and.w	r2, r2, #31
 8001b94:	2101      	movs	r1, #1
 8001b96:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d082      	beq.n	8001aa6 <HAL_RCC_OscConfig+0xdce>
 8001ba0:	e0cf      	b.n	8001d42 <HAL_RCC_OscConfig+0x106a>
 8001ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001baa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	fa93 f2a3 	rbit	r2, r3
 8001bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bc6:	601a      	str	r2, [r3, #0]
  return result;
 8001bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bcc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bd0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	461a      	mov	r2, r3
 8001be4:	2300      	movs	r3, #0
 8001be6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7fe fd58 	bl	800069c <HAL_GetTick>
 8001bec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf0:	e009      	b.n	8001c06 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7fe fd53 	bl	800069c <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e09e      	b.n	8001d44 <HAL_RCC_OscConfig+0x106c>
 8001c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c18:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	fa93 f2a3 	rbit	r2, r3
 8001c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c26:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c2a:	601a      	str	r2, [r3, #0]
  return result;
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	095b      	lsrs	r3, r3, #5
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d104      	bne.n	8001c54 <HAL_RCC_OscConfig+0xf7c>
 8001c4a:	4b01      	ldr	r3, [pc, #4]	; (8001c50 <HAL_RCC_OscConfig+0xf78>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	e029      	b.n	8001ca4 <HAL_RCC_OscConfig+0xfcc>
 8001c50:	40021000 	.word	0x40021000
 8001c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c58:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c66:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	fa93 f2a3 	rbit	r2, r3
 8001c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c74:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	fa93 f2a3 	rbit	r2, r3
 8001c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_RCC_OscConfig+0x1078>)
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ca8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cb0:	6011      	str	r1, [r2, #0]
 8001cb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cb6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	fa92 f1a2 	rbit	r1, r2
 8001cc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cc4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cc8:	6011      	str	r1, [r2, #0]
  return result;
 8001cca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	fab2 f282 	clz	r2, r2
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	f042 0220 	orr.w	r2, r2, #32
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	f002 021f 	and.w	r2, r2, #31
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d180      	bne.n	8001bf2 <HAL_RCC_OscConfig+0xf1a>
 8001cf0:	e027      	b.n	8001d42 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e01e      	b.n	8001d44 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_RCC_OscConfig+0x1078>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d0e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d12:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d10b      	bne.n	8001d3e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d26:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000

08001d54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b09e      	sub	sp, #120	; 0x78
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e162      	b.n	8002032 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b90      	ldr	r3, [pc, #576]	; (8001fb0 <HAL_RCC_ClockConfig+0x25c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d910      	bls.n	8001d9c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b8d      	ldr	r3, [pc, #564]	; (8001fb0 <HAL_RCC_ClockConfig+0x25c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 0207 	bic.w	r2, r3, #7
 8001d82:	498b      	ldr	r1, [pc, #556]	; (8001fb0 <HAL_RCC_ClockConfig+0x25c>)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b89      	ldr	r3, [pc, #548]	; (8001fb0 <HAL_RCC_ClockConfig+0x25c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e14a      	b.n	8002032 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da8:	4b82      	ldr	r3, [pc, #520]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	497f      	ldr	r1, [pc, #508]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80dc 	beq.w	8001f80 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d13c      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xf6>
 8001dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xa6>
 8001df4:	4b6f      	ldr	r3, [pc, #444]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	e00f      	b.n	8001e1a <HAL_RCC_ClockConfig+0xc6>
 8001dfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	667b      	str	r3, [r7, #100]	; 0x64
 8001e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e0c:	663b      	str	r3, [r7, #96]	; 0x60
 8001e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e16:	4b67      	ldr	r3, [pc, #412]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e22:	fa92 f2a2 	rbit	r2, r2
 8001e26:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e2a:	fab2 f282 	clz	r2, r2
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	f042 0220 	orr.w	r2, r2, #32
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	f002 021f 	and.w	r2, r2, #31
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d17b      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e0f3      	b.n	8002032 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d13c      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x178>
 8001e52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	095b      	lsrs	r3, r3, #5
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d102      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x128>
 8001e76:	4b4f      	ldr	r3, [pc, #316]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	e00f      	b.n	8001e9c <HAL_RCC_ClockConfig+0x148>
 8001e7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	647b      	str	r3, [r7, #68]	; 0x44
 8001e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e8e:	643b      	str	r3, [r7, #64]	; 0x40
 8001e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e98:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ea0:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ea2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ea4:	fa92 f2a2 	rbit	r2, r2
 8001ea8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eac:	fab2 f282 	clz	r2, r2
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f042 0220 	orr.w	r2, r2, #32
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f002 021f 	and.w	r2, r2, #31
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d13a      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0b2      	b.n	8002032 <HAL_RCC_ClockConfig+0x2de>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	095b      	lsrs	r3, r3, #5
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d102      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x1a0>
 8001eee:	4b31      	ldr	r3, [pc, #196]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	e00d      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1bc>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
 8001f00:	2302      	movs	r3, #2
 8001f02:	623b      	str	r3, [r7, #32]
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	2202      	movs	r2, #2
 8001f12:	61ba      	str	r2, [r7, #24]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	fa92 f2a2 	rbit	r2, r2
 8001f1a:	617a      	str	r2, [r7, #20]
  return result;
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	fab2 f282 	clz	r2, r2
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	f042 0220 	orr.w	r2, r2, #32
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	f002 021f 	and.w	r2, r2, #31
 8001f2e:	2101      	movs	r1, #1
 8001f30:	fa01 f202 	lsl.w	r2, r1, r2
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e079      	b.n	8002032 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f023 0203 	bic.w	r2, r3, #3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	491a      	ldr	r1, [pc, #104]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f50:	f7fe fba4 	bl	800069c <HAL_GetTick>
 8001f54:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f58:	f7fe fba0 	bl	800069c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e061      	b.n	8002032 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_RCC_ClockConfig+0x260>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 020c 	and.w	r2, r3, #12
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d1eb      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_ClockConfig+0x25c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d214      	bcs.n	8001fb8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <HAL_RCC_ClockConfig+0x25c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 0207 	bic.w	r2, r3, #7
 8001f96:	4906      	ldr	r1, [pc, #24]	; (8001fb0 <HAL_RCC_ClockConfig+0x25c>)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <HAL_RCC_ClockConfig+0x25c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d005      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e040      	b.n	8002032 <HAL_RCC_ClockConfig+0x2de>
 8001fb0:	40022000 	.word	0x40022000
 8001fb4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCC_ClockConfig+0x2e8>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	491a      	ldr	r1, [pc, #104]	; (800203c <HAL_RCC_ClockConfig+0x2e8>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <HAL_RCC_ClockConfig+0x2e8>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4912      	ldr	r1, [pc, #72]	; (800203c <HAL_RCC_ClockConfig+0x2e8>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ff6:	f000 f829 	bl	800204c <HAL_RCC_GetSysClockFreq>
 8001ffa:	4601      	mov	r1, r0
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <HAL_RCC_ClockConfig+0x2e8>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002004:	22f0      	movs	r2, #240	; 0xf0
 8002006:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	fa92 f2a2 	rbit	r2, r2
 800200e:	60fa      	str	r2, [r7, #12]
  return result;
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	fab2 f282 	clz	r2, r2
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	40d3      	lsrs	r3, r2
 800201a:	4a09      	ldr	r2, [pc, #36]	; (8002040 <HAL_RCC_ClockConfig+0x2ec>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	fa21 f303 	lsr.w	r3, r1, r3
 8002022:	4a08      	ldr	r2, [pc, #32]	; (8002044 <HAL_RCC_ClockConfig+0x2f0>)
 8002024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <HAL_RCC_ClockConfig+0x2f4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe faf2 	bl	8000614 <HAL_InitTick>
  
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3778      	adds	r7, #120	; 0x78
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	080032b8 	.word	0x080032b8
 8002044:	20000050 	.word	0x20000050
 8002048:	20000054 	.word	0x20000054

0800204c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800204c:	b480      	push	{r7}
 800204e:	b08b      	sub	sp, #44	; 0x2c
 8002050:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002066:	4b29      	ldr	r3, [pc, #164]	; (800210c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b04      	cmp	r3, #4
 8002074:	d002      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x30>
 8002076:	2b08      	cmp	r3, #8
 8002078:	d003      	beq.n	8002082 <HAL_RCC_GetSysClockFreq+0x36>
 800207a:	e03c      	b.n	80020f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800207c:	4b24      	ldr	r3, [pc, #144]	; (8002110 <HAL_RCC_GetSysClockFreq+0xc4>)
 800207e:	623b      	str	r3, [r7, #32]
      break;
 8002080:	e03c      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002088:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800208c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	fa92 f2a2 	rbit	r2, r2
 8002094:	607a      	str	r2, [r7, #4]
  return result;
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	fab2 f282 	clz	r2, r2
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	40d3      	lsrs	r3, r2
 80020a0:	4a1c      	ldr	r2, [pc, #112]	; (8002114 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020a2:	5cd3      	ldrb	r3, [r2, r3]
 80020a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020a6:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	220f      	movs	r2, #15
 80020b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	fa92 f2a2 	rbit	r2, r2
 80020b8:	60fa      	str	r2, [r7, #12]
  return result;
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	fab2 f282 	clz	r2, r2
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	40d3      	lsrs	r3, r2
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020c6:	5cd3      	ldrb	r3, [r2, r3]
 80020c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020d4:	4a0e      	ldr	r2, [pc, #56]	; (8002110 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fb02 f303 	mul.w	r3, r2, r3
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
 80020e4:	e004      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	4a0c      	ldr	r2, [pc, #48]	; (800211c <HAL_RCC_GetSysClockFreq+0xd0>)
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	623b      	str	r3, [r7, #32]
      break;
 80020f4:	e002      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020f8:	623b      	str	r3, [r7, #32]
      break;
 80020fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020fc:	6a3b      	ldr	r3, [r7, #32]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	372c      	adds	r7, #44	; 0x2c
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40021000 	.word	0x40021000
 8002110:	007a1200 	.word	0x007a1200
 8002114:	080032d0 	.word	0x080032d0
 8002118:	080032e0 	.word	0x080032e0
 800211c:	003d0900 	.word	0x003d0900

08002120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_RCC_GetHCLKFreq+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20000050 	.word	0x20000050

08002138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800213e:	f7ff ffef 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 8002142:	4601      	mov	r1, r0
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800214c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002150:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	fa92 f2a2 	rbit	r2, r2
 8002158:	603a      	str	r2, [r7, #0]
  return result;
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	fab2 f282 	clz	r2, r2
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	40d3      	lsrs	r3, r2
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002166:	5cd3      	ldrb	r3, [r2, r3]
 8002168:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	080032c8 	.word	0x080032c8

0800217c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002182:	f7ff ffcd 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 8002186:	4601      	mov	r1, r0
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002190:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002194:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	fa92 f2a2 	rbit	r2, r2
 800219c:	603a      	str	r2, [r7, #0]
  return result;
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	fab2 f282 	clz	r2, r2
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	40d3      	lsrs	r3, r2
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80021aa:	5cd3      	ldrb	r3, [r2, r3]
 80021ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40021000 	.word	0x40021000
 80021bc:	080032c8 	.word	0x080032c8

080021c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e040      	b.n	8002254 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe f944 	bl	8000470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2224      	movs	r2, #36	; 0x24
 80021ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0201 	bic.w	r2, r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fc90 	bl	8002b24 <UART_SetConfig>
 8002204:	4603      	mov	r3, r0
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e022      	b.n	8002254 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fdba 	bl	8002d90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800222a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800223a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fe41 	bl	8002ed4 <UART_CheckIdleState>
 8002252:	4603      	mov	r3, r0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	; 0x28
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002270:	2b20      	cmp	r3, #32
 8002272:	f040 8082 	bne.w	800237a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <HAL_UART_Transmit+0x26>
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e07a      	b.n	800237c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_UART_Transmit+0x38>
 8002290:	2302      	movs	r3, #2
 8002292:	e073      	b.n	800237c <HAL_UART_Transmit+0x120>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2221      	movs	r2, #33	; 0x21
 80022a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022aa:	f7fe f9f7 	bl	800069c <HAL_GetTick>
 80022ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	88fa      	ldrh	r2, [r7, #6]
 80022b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	88fa      	ldrh	r2, [r7, #6]
 80022bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c8:	d108      	bne.n	80022dc <HAL_UART_Transmit+0x80>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d104      	bne.n	80022dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	61bb      	str	r3, [r7, #24]
 80022da:	e003      	b.n	80022e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80022ec:	e02d      	b.n	800234a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2200      	movs	r2, #0
 80022f6:	2180      	movs	r1, #128	; 0x80
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 fe34 	bl	8002f66 <UART_WaitOnFlagUntilTimeout>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e039      	b.n	800237c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10b      	bne.n	8002326 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	881a      	ldrh	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800231a:	b292      	uxth	r2, r2
 800231c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	3302      	adds	r3, #2
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	e008      	b.n	8002338 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	781a      	ldrb	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	b292      	uxth	r2, r2
 8002330:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3301      	adds	r3, #1
 8002336:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002350:	b29b      	uxth	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1cb      	bne.n	80022ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2200      	movs	r2, #0
 800235e:	2140      	movs	r1, #64	; 0x40
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fe00 	bl	8002f66 <UART_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e005      	b.n	800237c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2220      	movs	r2, #32
 8002374:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	e000      	b.n	800237c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800237a:	2302      	movs	r3, #2
  }
}
 800237c:	4618      	mov	r0, r3
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	4613      	mov	r3, r2
 8002392:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002398:	2b20      	cmp	r3, #32
 800239a:	f040 80bf 	bne.w	800251c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_UART_Receive+0x26>
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e0b7      	b.n	800251e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_UART_Receive+0x38>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e0b0      	b.n	800251e <HAL_UART_Receive+0x19a>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2222      	movs	r2, #34	; 0x22
 80023d0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023d8:	f7fe f960 	bl	800069c <HAL_GetTick>
 80023dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	88fa      	ldrh	r2, [r7, #6]
 80023e2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	88fa      	ldrh	r2, [r7, #6]
 80023ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f6:	d10e      	bne.n	8002416 <HAL_UART_Receive+0x92>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d105      	bne.n	800240c <HAL_UART_Receive+0x88>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002406:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800240a:	e02d      	b.n	8002468 <HAL_UART_Receive+0xe4>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	22ff      	movs	r2, #255	; 0xff
 8002410:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002414:	e028      	b.n	8002468 <HAL_UART_Receive+0xe4>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10d      	bne.n	800243a <HAL_UART_Receive+0xb6>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d104      	bne.n	8002430 <HAL_UART_Receive+0xac>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	22ff      	movs	r2, #255	; 0xff
 800242a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800242e:	e01b      	b.n	8002468 <HAL_UART_Receive+0xe4>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	227f      	movs	r2, #127	; 0x7f
 8002434:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002438:	e016      	b.n	8002468 <HAL_UART_Receive+0xe4>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002442:	d10d      	bne.n	8002460 <HAL_UART_Receive+0xdc>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d104      	bne.n	8002456 <HAL_UART_Receive+0xd2>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	227f      	movs	r2, #127	; 0x7f
 8002450:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002454:	e008      	b.n	8002468 <HAL_UART_Receive+0xe4>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	223f      	movs	r2, #63	; 0x3f
 800245a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800245e:	e003      	b.n	8002468 <HAL_UART_Receive+0xe4>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800246e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002478:	d108      	bne.n	800248c <HAL_UART_Receive+0x108>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d104      	bne.n	800248c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	e003      	b.n	8002494 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002490:	2300      	movs	r3, #0
 8002492:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800249c:	e033      	b.n	8002506 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2200      	movs	r2, #0
 80024a6:	2120      	movs	r1, #32
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 fd5c 	bl	8002f66 <UART_WaitOnFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e032      	b.n	800251e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10c      	bne.n	80024d8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	8a7b      	ldrh	r3, [r7, #18]
 80024c8:	4013      	ands	r3, r2
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	3302      	adds	r3, #2
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	e00d      	b.n	80024f4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80024de:	b29b      	uxth	r3, r3
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	8a7b      	ldrh	r3, [r7, #18]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	4013      	ands	r3, r2
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3301      	adds	r3, #1
 80024f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800250c:	b29b      	uxth	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1c5      	bne.n	800249e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2220      	movs	r2, #32
 8002516:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	e000      	b.n	800251e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800251c:	2302      	movs	r3, #2
  }
}
 800251e:	4618      	mov	r0, r3
 8002520:	3720      	adds	r7, #32
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b0ba      	sub	sp, #232	; 0xe8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800254e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002552:	f640 030f 	movw	r3, #2063	; 0x80f
 8002556:	4013      	ands	r3, r2
 8002558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800255c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d115      	bne.n	8002590 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00f      	beq.n	8002590 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002574:	f003 0320 	and.w	r3, r3, #32
 8002578:	2b00      	cmp	r3, #0
 800257a:	d009      	beq.n	8002590 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 82a3 	beq.w	8002acc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	4798      	blx	r3
      }
      return;
 800258e:	e29d      	b.n	8002acc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 8117 	beq.w	80027c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800259a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80025a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80025aa:	4b85      	ldr	r3, [pc, #532]	; (80027c0 <HAL_UART_IRQHandler+0x298>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 810a 	beq.w	80027c8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80025b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d011      	beq.n	80025e4 <HAL_UART_IRQHandler+0xbc>
 80025c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00b      	beq.n	80025e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2201      	movs	r2, #1
 80025d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025da:	f043 0201 	orr.w	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80025e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d011      	beq.n	8002614 <HAL_UART_IRQHandler+0xec>
 80025f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00b      	beq.n	8002614 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2202      	movs	r2, #2
 8002602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800260a:	f043 0204 	orr.w	r2, r3, #4
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d011      	beq.n	8002644 <HAL_UART_IRQHandler+0x11c>
 8002620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00b      	beq.n	8002644 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2204      	movs	r2, #4
 8002632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800263a:	f043 0202 	orr.w	r2, r3, #2
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d017      	beq.n	8002680 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b00      	cmp	r3, #0
 800265a:	d105      	bne.n	8002668 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800265c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002660:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00b      	beq.n	8002680 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2208      	movs	r2, #8
 800266e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002676:	f043 0208 	orr.w	r2, r3, #8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002688:	2b00      	cmp	r3, #0
 800268a:	d012      	beq.n	80026b2 <HAL_UART_IRQHandler+0x18a>
 800268c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00c      	beq.n	80026b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a8:	f043 0220 	orr.w	r2, r3, #32
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8209 	beq.w	8002ad0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80026be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00d      	beq.n	80026e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80026ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d007      	beq.n	80026e6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fa:	2b40      	cmp	r3, #64	; 0x40
 80026fc:	d005      	beq.n	800270a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80026fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002702:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002706:	2b00      	cmp	r3, #0
 8002708:	d04f      	beq.n	80027aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fcef 	bl	80030ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271a:	2b40      	cmp	r3, #64	; 0x40
 800271c:	d141      	bne.n	80027a2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3308      	adds	r3, #8
 8002724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800272c:	e853 3f00 	ldrex	r3, [r3]
 8002730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800273c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3308      	adds	r3, #8
 8002746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800274a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800274e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800275a:	e841 2300 	strex	r3, r2, [r1]
 800275e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1d9      	bne.n	800271e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	2b00      	cmp	r3, #0
 8002770:	d013      	beq.n	800279a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	4a13      	ldr	r2, [pc, #76]	; (80027c4 <HAL_UART_IRQHandler+0x29c>)
 8002778:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe f8e2 	bl	8000948 <HAL_DMA_Abort_IT>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d017      	beq.n	80027ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002794:	4610      	mov	r0, r2
 8002796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002798:	e00f      	b.n	80027ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f9ac 	bl	8002af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a0:	e00b      	b.n	80027ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f9a8 	bl	8002af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a8:	e007      	b.n	80027ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f9a4 	bl	8002af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80027b8:	e18a      	b.n	8002ad0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ba:	bf00      	nop
    return;
 80027bc:	e188      	b.n	8002ad0 <HAL_UART_IRQHandler+0x5a8>
 80027be:	bf00      	nop
 80027c0:	04000120 	.word	0x04000120
 80027c4:	080031b5 	.word	0x080031b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	f040 8143 	bne.w	8002a58 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80027d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 813c 	beq.w	8002a58 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80027e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8135 	beq.w	8002a58 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2210      	movs	r2, #16
 80027f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002800:	2b40      	cmp	r3, #64	; 0x40
 8002802:	f040 80b1 	bne.w	8002968 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002812:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 815c 	beq.w	8002ad4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002826:	429a      	cmp	r2, r3
 8002828:	f080 8154 	bcs.w	8002ad4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002832:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	2b20      	cmp	r3, #32
 800283e:	f000 8085 	beq.w	800294c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800284e:	e853 3f00 	ldrex	r3, [r3]
 8002852:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002856:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800285a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800285e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800286c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002870:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002874:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002878:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800287c:	e841 2300 	strex	r3, r2, [r1]
 8002880:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002884:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1da      	bne.n	8002842 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3308      	adds	r3, #8
 8002892:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002896:	e853 3f00 	ldrex	r3, [r3]
 800289a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800289c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3308      	adds	r3, #8
 80028ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028b0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80028b4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028bc:	e841 2300 	strex	r3, r2, [r1]
 80028c0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80028c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1e1      	bne.n	800288c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	3308      	adds	r3, #8
 80028ce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028d2:	e853 3f00 	ldrex	r3, [r3]
 80028d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	3308      	adds	r3, #8
 80028e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028ec:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028f4:	e841 2300 	strex	r3, r2, [r1]
 80028f8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80028fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e3      	bne.n	80028c8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002914:	e853 3f00 	ldrex	r3, [r3]
 8002918:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800291a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800291c:	f023 0310 	bic.w	r3, r3, #16
 8002920:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800292e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002930:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002932:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002934:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002936:	e841 2300 	strex	r3, r2, [r1]
 800293a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800293c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1e4      	bne.n	800290c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	4618      	mov	r0, r3
 8002948:	f7fd ffc5 	bl	80008d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002958:	b29b      	uxth	r3, r3
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	b29b      	uxth	r3, r3
 800295e:	4619      	mov	r1, r3
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f8d3 	bl	8002b0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002966:	e0b5      	b.n	8002ad4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002974:	b29b      	uxth	r3, r3
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80a7 	beq.w	8002ad8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800298a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 80a2 	beq.w	8002ad8 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299c:	e853 3f00 	ldrex	r3, [r3]
 80029a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80029a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029b6:	647b      	str	r3, [r7, #68]	; 0x44
 80029b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029be:	e841 2300 	strex	r3, r2, [r1]
 80029c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1e4      	bne.n	8002994 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3308      	adds	r3, #8
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	e853 3f00 	ldrex	r3, [r3]
 80029d8:	623b      	str	r3, [r7, #32]
   return(result);
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	f023 0301 	bic.w	r3, r3, #1
 80029e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3308      	adds	r3, #8
 80029ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029ee:	633a      	str	r2, [r7, #48]	; 0x30
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029f6:	e841 2300 	strex	r3, r2, [r1]
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1e3      	bne.n	80029ca <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2220      	movs	r2, #32
 8002a06:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	e853 3f00 	ldrex	r3, [r3]
 8002a20:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f023 0310 	bic.w	r3, r3, #16
 8002a28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3a:	69b9      	ldr	r1, [r7, #24]
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	e841 2300 	strex	r3, r2, [r1]
 8002a42:	617b      	str	r3, [r7, #20]
   return(result);
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1e4      	bne.n	8002a14 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a4e:	4619      	mov	r1, r3
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f85b 	bl	8002b0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a56:	e03f      	b.n	8002ad8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00e      	beq.n	8002a82 <HAL_UART_IRQHandler+0x55a>
 8002a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fbda 	bl	8003234 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a80:	e02d      	b.n	8002ade <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00e      	beq.n	8002aac <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d008      	beq.n	8002aac <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d01c      	beq.n	8002adc <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	4798      	blx	r3
    }
    return;
 8002aaa:	e017      	b.n	8002adc <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d012      	beq.n	8002ade <HAL_UART_IRQHandler+0x5b6>
 8002ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00c      	beq.n	8002ade <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fb8b 	bl	80031e0 <UART_EndTransmit_IT>
    return;
 8002aca:	e008      	b.n	8002ade <HAL_UART_IRQHandler+0x5b6>
      return;
 8002acc:	bf00      	nop
 8002ace:	e006      	b.n	8002ade <HAL_UART_IRQHandler+0x5b6>
    return;
 8002ad0:	bf00      	nop
 8002ad2:	e004      	b.n	8002ade <HAL_UART_IRQHandler+0x5b6>
      return;
 8002ad4:	bf00      	nop
 8002ad6:	e002      	b.n	8002ade <HAL_UART_IRQHandler+0x5b6>
      return;
 8002ad8:	bf00      	nop
 8002ada:	e000      	b.n	8002ade <HAL_UART_IRQHandler+0x5b6>
    return;
 8002adc:	bf00      	nop
  }

}
 8002ade:	37e8      	adds	r7, #232	; 0xe8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4b8a      	ldr	r3, [pc, #552]	; (8002d78 <UART_SetConfig+0x254>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	6979      	ldr	r1, [r7, #20]
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a78      	ldr	r2, [pc, #480]	; (8002d7c <UART_SetConfig+0x258>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d120      	bne.n	8002be2 <UART_SetConfig+0xbe>
 8002ba0:	4b77      	ldr	r3, [pc, #476]	; (8002d80 <UART_SetConfig+0x25c>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d817      	bhi.n	8002bdc <UART_SetConfig+0xb8>
 8002bac:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <UART_SetConfig+0x90>)
 8002bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb2:	bf00      	nop
 8002bb4:	08002bc5 	.word	0x08002bc5
 8002bb8:	08002bd1 	.word	0x08002bd1
 8002bbc:	08002bd7 	.word	0x08002bd7
 8002bc0:	08002bcb 	.word	0x08002bcb
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	77fb      	strb	r3, [r7, #31]
 8002bc8:	e01d      	b.n	8002c06 <UART_SetConfig+0xe2>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	77fb      	strb	r3, [r7, #31]
 8002bce:	e01a      	b.n	8002c06 <UART_SetConfig+0xe2>
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	77fb      	strb	r3, [r7, #31]
 8002bd4:	e017      	b.n	8002c06 <UART_SetConfig+0xe2>
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	77fb      	strb	r3, [r7, #31]
 8002bda:	e014      	b.n	8002c06 <UART_SetConfig+0xe2>
 8002bdc:	2310      	movs	r3, #16
 8002bde:	77fb      	strb	r3, [r7, #31]
 8002be0:	e011      	b.n	8002c06 <UART_SetConfig+0xe2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a67      	ldr	r2, [pc, #412]	; (8002d84 <UART_SetConfig+0x260>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d102      	bne.n	8002bf2 <UART_SetConfig+0xce>
 8002bec:	2300      	movs	r3, #0
 8002bee:	77fb      	strb	r3, [r7, #31]
 8002bf0:	e009      	b.n	8002c06 <UART_SetConfig+0xe2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a64      	ldr	r2, [pc, #400]	; (8002d88 <UART_SetConfig+0x264>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d102      	bne.n	8002c02 <UART_SetConfig+0xde>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	77fb      	strb	r3, [r7, #31]
 8002c00:	e001      	b.n	8002c06 <UART_SetConfig+0xe2>
 8002c02:	2310      	movs	r3, #16
 8002c04:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c0e:	d15b      	bne.n	8002cc8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002c10:	7ffb      	ldrb	r3, [r7, #31]
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d827      	bhi.n	8002c66 <UART_SetConfig+0x142>
 8002c16:	a201      	add	r2, pc, #4	; (adr r2, 8002c1c <UART_SetConfig+0xf8>)
 8002c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1c:	08002c41 	.word	0x08002c41
 8002c20:	08002c49 	.word	0x08002c49
 8002c24:	08002c51 	.word	0x08002c51
 8002c28:	08002c67 	.word	0x08002c67
 8002c2c:	08002c57 	.word	0x08002c57
 8002c30:	08002c67 	.word	0x08002c67
 8002c34:	08002c67 	.word	0x08002c67
 8002c38:	08002c67 	.word	0x08002c67
 8002c3c:	08002c5f 	.word	0x08002c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c40:	f7ff fa7a 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8002c44:	61b8      	str	r0, [r7, #24]
        break;
 8002c46:	e013      	b.n	8002c70 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c48:	f7ff fa98 	bl	800217c <HAL_RCC_GetPCLK2Freq>
 8002c4c:	61b8      	str	r0, [r7, #24]
        break;
 8002c4e:	e00f      	b.n	8002c70 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c50:	4b4e      	ldr	r3, [pc, #312]	; (8002d8c <UART_SetConfig+0x268>)
 8002c52:	61bb      	str	r3, [r7, #24]
        break;
 8002c54:	e00c      	b.n	8002c70 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c56:	f7ff f9f9 	bl	800204c <HAL_RCC_GetSysClockFreq>
 8002c5a:	61b8      	str	r0, [r7, #24]
        break;
 8002c5c:	e008      	b.n	8002c70 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c62:	61bb      	str	r3, [r7, #24]
        break;
 8002c64:	e004      	b.n	8002c70 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	77bb      	strb	r3, [r7, #30]
        break;
 8002c6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d074      	beq.n	8002d60 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	005a      	lsls	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	085b      	lsrs	r3, r3, #1
 8002c80:	441a      	add	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	2b0f      	cmp	r3, #15
 8002c92:	d916      	bls.n	8002cc2 <UART_SetConfig+0x19e>
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9a:	d212      	bcs.n	8002cc2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	f023 030f 	bic.w	r3, r3, #15
 8002ca4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	085b      	lsrs	r3, r3, #1
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	89fb      	ldrh	r3, [r7, #14]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	89fa      	ldrh	r2, [r7, #14]
 8002cbe:	60da      	str	r2, [r3, #12]
 8002cc0:	e04e      	b.n	8002d60 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	77bb      	strb	r3, [r7, #30]
 8002cc6:	e04b      	b.n	8002d60 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cc8:	7ffb      	ldrb	r3, [r7, #31]
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d827      	bhi.n	8002d1e <UART_SetConfig+0x1fa>
 8002cce:	a201      	add	r2, pc, #4	; (adr r2, 8002cd4 <UART_SetConfig+0x1b0>)
 8002cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd4:	08002cf9 	.word	0x08002cf9
 8002cd8:	08002d01 	.word	0x08002d01
 8002cdc:	08002d09 	.word	0x08002d09
 8002ce0:	08002d1f 	.word	0x08002d1f
 8002ce4:	08002d0f 	.word	0x08002d0f
 8002ce8:	08002d1f 	.word	0x08002d1f
 8002cec:	08002d1f 	.word	0x08002d1f
 8002cf0:	08002d1f 	.word	0x08002d1f
 8002cf4:	08002d17 	.word	0x08002d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cf8:	f7ff fa1e 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8002cfc:	61b8      	str	r0, [r7, #24]
        break;
 8002cfe:	e013      	b.n	8002d28 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d00:	f7ff fa3c 	bl	800217c <HAL_RCC_GetPCLK2Freq>
 8002d04:	61b8      	str	r0, [r7, #24]
        break;
 8002d06:	e00f      	b.n	8002d28 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d08:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <UART_SetConfig+0x268>)
 8002d0a:	61bb      	str	r3, [r7, #24]
        break;
 8002d0c:	e00c      	b.n	8002d28 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d0e:	f7ff f99d 	bl	800204c <HAL_RCC_GetSysClockFreq>
 8002d12:	61b8      	str	r0, [r7, #24]
        break;
 8002d14:	e008      	b.n	8002d28 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d1a:	61bb      	str	r3, [r7, #24]
        break;
 8002d1c:	e004      	b.n	8002d28 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	77bb      	strb	r3, [r7, #30]
        break;
 8002d26:	bf00      	nop
    }

    if (pclk != 0U)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d018      	beq.n	8002d60 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	085a      	lsrs	r2, r3, #1
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	441a      	add	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	2b0f      	cmp	r3, #15
 8002d48:	d908      	bls.n	8002d5c <UART_SetConfig+0x238>
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d50:	d204      	bcs.n	8002d5c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	e001      	b.n	8002d60 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3720      	adds	r7, #32
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	efff69f3 	.word	0xefff69f3
 8002d7c:	40013800 	.word	0x40013800
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40004400 	.word	0x40004400
 8002d88:	40004800 	.word	0x40004800
 8002d8c:	007a1200 	.word	0x007a1200

08002d90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d01a      	beq.n	8002ea6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e8e:	d10a      	bne.n	8002ea6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	605a      	str	r2, [r3, #4]
  }
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ee4:	f7fd fbda 	bl	800069c <HAL_GetTick>
 8002ee8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d10e      	bne.n	8002f16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f82d 	bl	8002f66 <UART_WaitOnFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e023      	b.n	8002f5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d10e      	bne.n	8002f42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f817 	bl	8002f66 <UART_WaitOnFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e00d      	b.n	8002f5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2220      	movs	r2, #32
 8002f46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b09c      	sub	sp, #112	; 0x70
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	603b      	str	r3, [r7, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f76:	e0a5      	b.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f7e:	f000 80a1 	beq.w	80030c4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f82:	f7fd fb8b 	bl	800069c <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d302      	bcc.n	8002f98 <UART_WaitOnFlagUntilTimeout+0x32>
 8002f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d13e      	bne.n	8003016 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa0:	e853 3f00 	ldrex	r3, [r3]
 8002fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fac:	667b      	str	r3, [r7, #100]	; 0x64
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fb8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e6      	bne.n	8002f98 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3308      	adds	r3, #8
 8002fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd4:	e853 3f00 	ldrex	r3, [r3]
 8002fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	663b      	str	r3, [r7, #96]	; 0x60
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fea:	64ba      	str	r2, [r7, #72]	; 0x48
 8002fec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ff2:	e841 2300 	strex	r3, r2, [r1]
 8002ff6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e5      	bne.n	8002fca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e067      	b.n	80030e6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d04f      	beq.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800302e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003032:	d147      	bne.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800303c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003046:	e853 3f00 	ldrex	r3, [r3]
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003052:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800305c:	637b      	str	r3, [r7, #52]	; 0x34
 800305e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003060:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003064:	e841 2300 	strex	r3, r2, [r1]
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800306a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e6      	bne.n	800303e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3308      	adds	r3, #8
 8003076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	e853 3f00 	ldrex	r3, [r3]
 800307e:	613b      	str	r3, [r7, #16]
   return(result);
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	66bb      	str	r3, [r7, #104]	; 0x68
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3308      	adds	r3, #8
 800308e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003090:	623a      	str	r2, [r7, #32]
 8003092:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003094:	69f9      	ldr	r1, [r7, #28]
 8003096:	6a3a      	ldr	r2, [r7, #32]
 8003098:	e841 2300 	strex	r3, r2, [r1]
 800309c:	61bb      	str	r3, [r7, #24]
   return(result);
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1e5      	bne.n	8003070 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2220      	movs	r2, #32
 80030a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e010      	b.n	80030e6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4013      	ands	r3, r2
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	429a      	cmp	r2, r3
 80030e0:	f43f af4a 	beq.w	8002f78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3770      	adds	r7, #112	; 0x70
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b095      	sub	sp, #84	; 0x54
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fe:	e853 3f00 	ldrex	r3, [r3]
 8003102:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800310a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003114:	643b      	str	r3, [r7, #64]	; 0x40
 8003116:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003118:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800311a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800311c:	e841 2300 	strex	r3, r2, [r1]
 8003120:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e6      	bne.n	80030f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3308      	adds	r3, #8
 800312e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	e853 3f00 	ldrex	r3, [r3]
 8003136:	61fb      	str	r3, [r7, #28]
   return(result);
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3308      	adds	r3, #8
 8003146:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003148:	62fa      	str	r2, [r7, #44]	; 0x2c
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800314e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003150:	e841 2300 	strex	r3, r2, [r1]
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e5      	bne.n	8003128 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003160:	2b01      	cmp	r3, #1
 8003162:	d118      	bne.n	8003196 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	e853 3f00 	ldrex	r3, [r3]
 8003170:	60bb      	str	r3, [r7, #8]
   return(result);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f023 0310 	bic.w	r3, r3, #16
 8003178:	647b      	str	r3, [r7, #68]	; 0x44
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003182:	61bb      	str	r3, [r7, #24]
 8003184:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	6979      	ldr	r1, [r7, #20]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	e841 2300 	strex	r3, r2, [r1]
 800318e:	613b      	str	r3, [r7, #16]
   return(result);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e6      	bne.n	8003164 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2220      	movs	r2, #32
 800319a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80031a8:	bf00      	nop
 80031aa:	3754      	adds	r7, #84	; 0x54
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7ff fc90 	bl	8002af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	e853 3f00 	ldrex	r3, [r3]
 80031f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	61bb      	str	r3, [r7, #24]
 8003208:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320a:	6979      	ldr	r1, [r7, #20]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	e841 2300 	strex	r3, r2, [r1]
 8003212:	613b      	str	r3, [r7, #16]
   return(result);
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1e6      	bne.n	80031e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff fc5c 	bl	8002ae4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800322c:	bf00      	nop
 800322e:	3720      	adds	r7, #32
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <__libc_init_array>:
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d0d      	ldr	r5, [pc, #52]	; (8003280 <__libc_init_array+0x38>)
 800324c:	4c0d      	ldr	r4, [pc, #52]	; (8003284 <__libc_init_array+0x3c>)
 800324e:	1b64      	subs	r4, r4, r5
 8003250:	10a4      	asrs	r4, r4, #2
 8003252:	2600      	movs	r6, #0
 8003254:	42a6      	cmp	r6, r4
 8003256:	d109      	bne.n	800326c <__libc_init_array+0x24>
 8003258:	4d0b      	ldr	r5, [pc, #44]	; (8003288 <__libc_init_array+0x40>)
 800325a:	4c0c      	ldr	r4, [pc, #48]	; (800328c <__libc_init_array+0x44>)
 800325c:	f000 f820 	bl	80032a0 <_init>
 8003260:	1b64      	subs	r4, r4, r5
 8003262:	10a4      	asrs	r4, r4, #2
 8003264:	2600      	movs	r6, #0
 8003266:	42a6      	cmp	r6, r4
 8003268:	d105      	bne.n	8003276 <__libc_init_array+0x2e>
 800326a:	bd70      	pop	{r4, r5, r6, pc}
 800326c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003270:	4798      	blx	r3
 8003272:	3601      	adds	r6, #1
 8003274:	e7ee      	b.n	8003254 <__libc_init_array+0xc>
 8003276:	f855 3b04 	ldr.w	r3, [r5], #4
 800327a:	4798      	blx	r3
 800327c:	3601      	adds	r6, #1
 800327e:	e7f2      	b.n	8003266 <__libc_init_array+0x1e>
 8003280:	080032f0 	.word	0x080032f0
 8003284:	080032f0 	.word	0x080032f0
 8003288:	080032f0 	.word	0x080032f0
 800328c:	080032f4 	.word	0x080032f4

08003290 <memset>:
 8003290:	4402      	add	r2, r0
 8003292:	4603      	mov	r3, r0
 8003294:	4293      	cmp	r3, r2
 8003296:	d100      	bne.n	800329a <memset+0xa>
 8003298:	4770      	bx	lr
 800329a:	f803 1b01 	strb.w	r1, [r3], #1
 800329e:	e7f9      	b.n	8003294 <memset+0x4>

080032a0 <_init>:
 80032a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a2:	bf00      	nop
 80032a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a6:	bc08      	pop	{r3}
 80032a8:	469e      	mov	lr, r3
 80032aa:	4770      	bx	lr

080032ac <_fini>:
 80032ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ae:	bf00      	nop
 80032b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b2:	bc08      	pop	{r3}
 80032b4:	469e      	mov	lr, r3
 80032b6:	4770      	bx	lr
