
STM32F746_LinerSpeedInterrupt_Absolute_Homing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002018  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080021e0  080021e0  000121e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021f0  080021f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080021f0  080021f0  000121f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080021f8  080021f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021f8  080021f8  000121f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021fc  080021fc  000121fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  0800220c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  0800220c  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea1c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df9  00000000  00000000  0002ea58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000b7b8  00000000  00000000  00030851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  0003c010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a08  00000000  00000000  0003c818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024eb1  00000000  00000000  0003e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001017b  00000000  00000000  000630d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9640  00000000  00000000  0007324c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015c88c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c50  00000000  00000000  0015c8dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080021c8 	.word	0x080021c8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080021c8 	.word	0x080021c8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <Step0>:
	//pull+




	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <Step0+0x20>)
 800050e:	2200      	movs	r2, #0
 8000510:	f44f 5180 	mov.w	r1, #4096	; 0x1000
void Step0(){
 8000514:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000516:	f000 fd95 	bl	8001044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 800051a:	2201      	movs	r2, #1
 800051c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000520:	4802      	ldr	r0, [pc, #8]	; (800052c <Step0+0x20>)
	/*
	 * pull-
	 * HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
	 * HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
	 */
}
 8000522:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000526:	f000 bd8d 	b.w	8001044 <HAL_GPIO_WritePin>
 800052a:	bf00      	nop
 800052c:	40020800 	.word	0x40020800

08000530 <Dir0>:

void Dir0(int dir){
 8000530:	4602      	mov	r2, r0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, dir);
 8000532:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000536:	4802      	ldr	r0, [pc, #8]	; (8000540 <Dir0+0x10>)
 8000538:	b2d2      	uxtb	r2, r2
 800053a:	f000 bd83 	b.w	8001044 <HAL_GPIO_WritePin>
 800053e:	bf00      	nop
 8000540:	40020800 	.word	0x40020800

08000544 <HAL_GPIO_EXTI_Callback>:
	if(GPIO_Pin == GPIO_PIN_9 ){
 8000544:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000548:	d000      	beq.n	800054c <HAL_GPIO_EXTI_Callback+0x8>
 800054a:	4770      	bx	lr
		if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9)){
 800054c:	4601      	mov	r1, r0
 800054e:	480b      	ldr	r0, [pc, #44]	; (800057c <HAL_GPIO_EXTI_Callback+0x38>)
{
 8000550:	b508      	push	{r3, lr}
		if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9)){
 8000552:	f000 fd71 	bl	8001038 <HAL_GPIO_ReadPin>
 8000556:	b920      	cbnz	r0, 8000562 <HAL_GPIO_EXTI_Callback+0x1e>
			end_stop_state |= 1;
 8000558:	4a09      	ldr	r2, [pc, #36]	; (8000580 <HAL_GPIO_EXTI_Callback+0x3c>)
 800055a:	7813      	ldrb	r3, [r2, #0]
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	7013      	strb	r3, [r2, #0]
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9)){
 8000562:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000566:	4805      	ldr	r0, [pc, #20]	; (800057c <HAL_GPIO_EXTI_Callback+0x38>)
 8000568:	f000 fd66 	bl	8001038 <HAL_GPIO_ReadPin>
 800056c:	b120      	cbz	r0, 8000578 <HAL_GPIO_EXTI_Callback+0x34>
			end_stop_state &= ~1;
 800056e:	4a04      	ldr	r2, [pc, #16]	; (8000580 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000570:	7813      	ldrb	r3, [r2, #0]
 8000572:	f023 0301 	bic.w	r3, r3, #1
 8000576:	7013      	strb	r3, [r2, #0]
}
 8000578:	bd08      	pop	{r3, pc}
 800057a:	bf00      	nop
 800057c:	40020800 	.word	0x40020800
 8000580:	20000028 	.word	0x20000028

08000584 <HAL_TIM_OC_DelayElapsedCallback>:

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, mind);

}

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8000584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
	unsigned int tmpCtr = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 8000586:	4f5e      	ldr	r7, [pc, #376]	; (8000700 <HAL_TIM_OC_DelayElapsedCallback+0x17c>)
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65500);
 8000588:	f64f 73dc 	movw	r3, #65500	; 0xffdc


	for (int i = 0; i < NUM_STEPPERS; i++){
		if ( ! ( (1 << i) & remainingSteppersFlag )){
 800058c:	4d5d      	ldr	r5, [pc, #372]	; (8000704 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
	unsigned int tmpCtr = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 800058e:	6838      	ldr	r0, [r7, #0]
 8000590:	6b42      	ldr	r2, [r0, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65500);
 8000592:	6343      	str	r3, [r0, #52]	; 0x34
		if ( ! ( (1 << i) & remainingSteppersFlag )){
 8000594:	782b      	ldrb	r3, [r5, #0]
 8000596:	07d9      	lsls	r1, r3, #31
 8000598:	d555      	bpl.n	8000646 <HAL_TIM_OC_DelayElapsedCallback+0xc2>
			continue;
		}

		if( homing_flag & (1 << i)){
 800059a:	4b5b      	ldr	r3, [pc, #364]	; (8000708 <HAL_TIM_OC_DelayElapsedCallback+0x184>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	07db      	lsls	r3, r3, #31
 80005a0:	d504      	bpl.n	80005ac <HAL_TIM_OC_DelayElapsedCallback+0x28>
			if(end_stop_state & (1 << i)){
 80005a2:	4b5a      	ldr	r3, [pc, #360]	; (800070c <HAL_TIM_OC_DelayElapsedCallback+0x188>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	07de      	lsls	r6, r3, #31
 80005a8:	f100 809b 	bmi.w	80006e2 <HAL_TIM_OC_DelayElapsedCallback+0x15e>
				remainingSteppersFlag &= ~(1 << i);
				continue;
			}
		}

		if ( ! (nextStepperFlag & (1 << i)) ){
 80005ac:	4e58      	ldr	r6, [pc, #352]	; (8000710 <HAL_TIM_OC_DelayElapsedCallback+0x18c>)
 80005ae:	7833      	ldrb	r3, [r6, #0]
 80005b0:	07dc      	lsls	r4, r3, #31
 80005b2:	f140 8091 	bpl.w	80006d8 <HAL_TIM_OC_DelayElapsedCallback+0x154>

		volatile stepperInfo* s = &steppers[i];



		if( (s->stepCount) < (s->totalSteps) ){
 80005b6:	4c57      	ldr	r4, [pc, #348]	; (8000714 <HAL_TIM_OC_DelayElapsedCallback+0x190>)
 80005b8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80005ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80005bc:	429a      	cmp	r2, r3
 80005be:	d20e      	bcs.n	80005de <HAL_TIM_OC_DelayElapsedCallback+0x5a>
			s->stepFunc();
 80005c0:	68e3      	ldr	r3, [r4, #12]
 80005c2:	4798      	blx	r3
			s->stepCount++;
 80005c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80005c6:	3301      	adds	r3, #1
 80005c8:	64a3      	str	r3, [r4, #72]	; 0x48
			s->stepPosition += s->dir;
 80005ca:	69e2      	ldr	r2, [r4, #28]
 80005cc:	69a3      	ldr	r3, [r4, #24]
 80005ce:	4413      	add	r3, r2
 80005d0:	61a3      	str	r3, [r4, #24]
			if ( (s->stepCount) >= (s->totalSteps) ){
 80005d2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80005d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80005d6:	429a      	cmp	r2, r3
 80005d8:	f080 8089 	bcs.w	80006ee <HAL_TIM_OC_DelayElapsedCallback+0x16a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65500);
 80005dc:	6838      	ldr	r0, [r7, #0]
				s->movementDone = 1;
				remainingSteppersFlag &= ~(1 << i);
			}
		}

		if (s->rampUpStepCount == 0){
 80005de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d153      	bne.n	800068c <HAL_TIM_OC_DelayElapsedCallback+0x108>
			s->n++;
 80005e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80005e6:	3301      	adds	r3, #1
 80005e8:	63e3      	str	r3, [r4, #60]	; 0x3c
			s->d = s->d - (2*s->d) / (4*s->n +1);
 80005ea:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
 80005ee:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 80005f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80005f4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	3301      	adds	r3, #1
 80005fc:	ee07 3a90 	vmov	s15, r3
 8000600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000604:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8000608:	ee76 7ac6 	vsub.f32	s15, s13, s12
 800060c:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
			if (s->d <= s->minStepInterval ){
 8000610:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 8000614:	edd4 7a01 	vldr	s15, [r4, #4]
 8000618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800061c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000624:	d807      	bhi.n	8000636 <HAL_TIM_OC_DelayElapsedCallback+0xb2>
				s->d = s->minStepInterval;
 8000626:	edd4 7a01 	vldr	s15, [r4, #4]
 800062a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800062e:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
				s->rampUpStepCount = s->stepCount;
 8000632:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000634:	63a3      	str	r3, [r4, #56]	; 0x38
			}
			if (s->stepCount >= (s->totalSteps / 2) ){
 8000636:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000638:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800063a:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 800063e:	d344      	bcc.n	80006ca <HAL_TIM_OC_DelayElapsedCallback+0x146>
				s->rampUpStepCount = s->stepCount;
 8000640:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000642:	63a3      	str	r3, [r4, #56]	; 0x38
 8000644:	e041      	b.n	80006ca <HAL_TIM_OC_DelayElapsedCallback+0x146>
 8000646:	4e32      	ldr	r6, [pc, #200]	; (8000710 <HAL_TIM_OC_DelayElapsedCallback+0x18c>)
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di < mind ){
 8000648:	782b      	ldrb	r3, [r5, #0]
 800064a:	07d9      	lsls	r1, r3, #31
 800064c:	d504      	bpl.n	8000658 <HAL_TIM_OC_DelayElapsedCallback+0xd4>
 800064e:	4b31      	ldr	r3, [pc, #196]	; (8000714 <HAL_TIM_OC_DelayElapsedCallback+0x190>)
 8000650:	4a31      	ldr	r2, [pc, #196]	; (8000718 <HAL_TIM_OC_DelayElapsedCallback+0x194>)
 8000652:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000654:	4291      	cmp	r1, r2
 8000656:	d912      	bls.n	800067e <HAL_TIM_OC_DelayElapsedCallback+0xfa>
 8000658:	4b30      	ldr	r3, [pc, #192]	; (800071c <HAL_TIM_OC_DelayElapsedCallback+0x198>)
	nextStepperFlag = 0;
 800065a:	2200      	movs	r2, #0
 800065c:	7032      	strb	r2, [r6, #0]
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di == mind )
 800065e:	782a      	ldrb	r2, [r5, #0]
 8000660:	07d2      	lsls	r2, r2, #31
 8000662:	d503      	bpl.n	800066c <HAL_TIM_OC_DelayElapsedCallback+0xe8>
 8000664:	4a2b      	ldr	r2, [pc, #172]	; (8000714 <HAL_TIM_OC_DelayElapsedCallback+0x190>)
 8000666:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000668:	4293      	cmp	r3, r2
 800066a:	d00a      	beq.n	8000682 <HAL_TIM_OC_DelayElapsedCallback+0xfe>
	if (remainingSteppersFlag == 0){
 800066c:	782a      	ldrb	r2, [r5, #0]
 800066e:	b912      	cbnz	r2, 8000676 <HAL_TIM_OC_DelayElapsedCallback+0xf2>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65500);
 8000670:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8000674:	6342      	str	r2, [r0, #52]	; 0x34
		s->di = s->d;
	}

	setNextInterruptInterval();

	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000676:	2200      	movs	r2, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, mind);
 8000678:	6343      	str	r3, [r0, #52]	; 0x34
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800067a:	6242      	str	r2, [r0, #36]	; 0x24


}
 800067c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			mind = steppers[i].di;
 800067e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	for (int i = 0; i < NUM_STEPPERS; i++){
 8000680:	e7eb      	b.n	800065a <HAL_TIM_OC_DelayElapsedCallback+0xd6>
			nextStepperFlag |= (1 << i);
 8000682:	7832      	ldrb	r2, [r6, #0]
 8000684:	f042 0201 	orr.w	r2, r2, #1
 8000688:	7032      	strb	r2, [r6, #0]
	for (int i = 0; i < NUM_STEPPERS; i ++){
 800068a:	e7ef      	b.n	800066c <HAL_TIM_OC_DelayElapsedCallback+0xe8>
		} else if ( s->stepCount >= s->totalSteps - s->rampUpStepCount) {
 800068c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800068e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000690:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000692:	1a5b      	subs	r3, r3, r1
 8000694:	429a      	cmp	r2, r3
 8000696:	d318      	bcc.n	80006ca <HAL_TIM_OC_DelayElapsedCallback+0x146>
			s->d = (s->d * (4 * s->n + 1)) / (4 * s->n + 1 -2);
 8000698:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 800069c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	3301      	adds	r3, #1
 80006a2:	ee07 3a90 	vmov	s15, r3
 80006a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ae:	3b01      	subs	r3, #1
 80006b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006b4:	ee07 3a10 	vmov	s14, r3
 80006b8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80006bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80006c0:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
			s->n--;
 80006c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80006c6:	3b01      	subs	r3, #1
 80006c8:	63e3      	str	r3, [r4, #60]	; 0x3c
		s->di = s->d;
 80006ca:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 80006ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006d2:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
 80006d6:	e7b7      	b.n	8000648 <HAL_TIM_OC_DelayElapsedCallback+0xc4>
			steppers[i].di -= tmpCtr;
 80006d8:	490e      	ldr	r1, [pc, #56]	; (8000714 <HAL_TIM_OC_DelayElapsedCallback+0x190>)
 80006da:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80006dc:	1a9a      	subs	r2, r3, r2
 80006de:	644a      	str	r2, [r1, #68]	; 0x44
			continue;
 80006e0:	e7b2      	b.n	8000648 <HAL_TIM_OC_DelayElapsedCallback+0xc4>
				remainingSteppersFlag &= ~(1 << i);
 80006e2:	782b      	ldrb	r3, [r5, #0]
 80006e4:	4e0a      	ldr	r6, [pc, #40]	; (8000710 <HAL_TIM_OC_DelayElapsedCallback+0x18c>)
 80006e6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80006ea:	702b      	strb	r3, [r5, #0]
				continue;
 80006ec:	e7ac      	b.n	8000648 <HAL_TIM_OC_DelayElapsedCallback+0xc4>
				s->movementDone = 1;
 80006ee:	2301      	movs	r3, #1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65500);
 80006f0:	6838      	ldr	r0, [r7, #0]
				s->movementDone = 1;
 80006f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
				remainingSteppersFlag &= ~(1 << i);
 80006f6:	782b      	ldrb	r3, [r5, #0]
 80006f8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80006fc:	702b      	strb	r3, [r5, #0]
 80006fe:	e76e      	b.n	80005de <HAL_TIM_OC_DelayElapsedCallback+0x5a>
 8000700:	2000002c 	.word	0x2000002c
 8000704:	20000079 	.word	0x20000079
 8000708:	20000029 	.word	0x20000029
 800070c:	20000028 	.word	0x20000028
 8000710:	20000078 	.word	0x20000078
 8000714:	2000007c 	.word	0x2000007c
 8000718:	000f423e 	.word	0x000f423e
 800071c:	000f423f 	.word	0x000f423f

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	2300      	movs	r3, #0
{
 8000724:	b094      	sub	sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	492c      	ldr	r1, [pc, #176]	; (80007d8 <SystemClock_Config+0xb8>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2001      	movs	r0, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072c:	2402      	movs	r4, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072e:	9302      	str	r3, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000730:	930a      	str	r3, [sp, #40]	; 0x28
 8000732:	930d      	str	r3, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000734:	4a29      	ldr	r2, [pc, #164]	; (80007dc <SystemClock_Config+0xbc>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800073e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	640b      	str	r3, [r1, #64]	; 0x40
 800074a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000754:	6813      	ldr	r3, [r2, #0]
 8000756:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000762:	2210      	movs	r2, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	9408      	str	r4, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000766:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000770:	e9cd 020b 	strd	r0, r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000774:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80007c8 <SystemClock_Config+0xa8>
 800077c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8000780:	2202      	movs	r2, #2
 8000782:	2302      	movs	r3, #2
 8000784:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8000788:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f000 fca4 	bl	80010d8 <HAL_RCC_OscConfig>
 8000790:	b108      	cbz	r0, 8000796 <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000792:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	e7fe      	b.n	8000794 <SystemClock_Config+0x74>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000796:	f000 fc65 	bl	8001064 <HAL_PWREx_EnableOverDrive>
 800079a:	4603      	mov	r3, r0
 800079c:	b108      	cbz	r0, 80007a2 <SystemClock_Config+0x82>
 800079e:	b672      	cpsid	i
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <SystemClock_Config+0x80>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 80007d0 <SystemClock_Config+0xb0>
 80007a6:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007ae:	2103      	movs	r1, #3
 80007b0:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80007b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007ba:	f000 fe7b 	bl	80014b4 <HAL_RCC_ClockConfig>
 80007be:	b108      	cbz	r0, 80007c4 <SystemClock_Config+0xa4>
 80007c0:	b672      	cpsid	i
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <SystemClock_Config+0xa2>
}
 80007c4:	b014      	add	sp, #80	; 0x50
 80007c6:	bd10      	pop	{r4, pc}
 80007c8:	00000002 	.word	0x00000002
 80007cc:	00000000 	.word	0x00000000
 80007d0:	0000000f 	.word	0x0000000f
 80007d4:	00000002 	.word	0x00000002
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <main>:
{
 80007e0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80007e4:	b09f      	sub	sp, #124	; 0x7c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	2400      	movs	r4, #0
  HAL_Init();
 80007e8:	f000 fa3c 	bl	8000c64 <HAL_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80007ec:	2600      	movs	r6, #0
  SystemClock_Config();
 80007ee:	f7ff ff97 	bl	8000720 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4bb1      	ldr	r3, [pc, #708]	; (8000ab8 <main+0x2d8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80007f6:	4622      	mov	r2, r4
 80007f8:	48b0      	ldr	r0, [pc, #704]	; (8000abc <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80007fa:	2700      	movs	r7, #0
  htim1.Instance = TIM1;
 80007fc:	4db0      	ldr	r5, [pc, #704]	; (8000ac0 <main+0x2e0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 8000802:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000808:	f041 0104 	orr.w	r1, r1, #4
 800080c:	6319      	str	r1, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800080e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800081c:	f000 fc12 	bl	8001044 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000824:	4ba7      	ldr	r3, [pc, #668]	; (8000ac4 <main+0x2e4>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000826:	a912      	add	r1, sp, #72	; 0x48
 8000828:	48a4      	ldr	r0, [pc, #656]	; (8000abc <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800082c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000830:	f000 fabc 	bl	8000dac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000834:	2301      	movs	r3, #1
 8000836:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083a:	a912      	add	r1, sp, #72	; 0x48
 800083c:	489f      	ldr	r0, [pc, #636]	; (8000abc <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800083e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8000842:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000846:	f000 fab1 	bl	8000dac <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800084a:	4622      	mov	r2, r4
 800084c:	4621      	mov	r1, r4
 800084e:	2017      	movs	r0, #23
 8000850:	f000 fa4a 	bl	8000ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000854:	2017      	movs	r0, #23
 8000856:	f000 fa85 	bl	8000d64 <HAL_NVIC_EnableIRQ>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800085a:	222c      	movs	r2, #44	; 0x2c
 800085c:	4621      	mov	r1, r4
 800085e:	a812      	add	r0, sp, #72	; 0x48
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000860:	9406      	str	r4, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000862:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000864:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	9409      	str	r4, [sp, #36]	; 0x24
 8000868:	e9cd 4407 	strd	r4, r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086c:	e9cd 4403 	strd	r4, r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000870:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8000874:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8000878:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800087c:	f001 fc9c 	bl	80021b8 <memset>
  htim1.Init.Prescaler = 96-1;
 8000880:	235f      	movs	r3, #95	; 0x5f
 8000882:	4a91      	ldr	r2, [pc, #580]	; (8000ac8 <main+0x2e8>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000884:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	60ac      	str	r4, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000888:	61ac      	str	r4, [r5, #24]
  htim1.Init.Prescaler = 96-1;
 800088a:	e9c5 2300 	strd	r2, r3, [r5]
  htim1.Init.Period = 65535;
 800088e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Init.RepetitionCounter = 0;
 8000892:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.Period = 65535;
 8000896:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000898:	f000 fee0 	bl	800165c <HAL_TIM_Base_Init>
 800089c:	b108      	cbz	r0, 80008a2 <main+0xc2>
 800089e:	b672      	cpsid	i
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <main+0xc0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008a6:	a906      	add	r1, sp, #24
 80008a8:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008aa:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008ac:	f001 fa54 	bl	8001d58 <HAL_TIM_ConfigClockSource>
 80008b0:	b108      	cbz	r0, 80008b6 <main+0xd6>
 80008b2:	b672      	cpsid	i
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <main+0xd4>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80008b6:	4628      	mov	r0, r5
 80008b8:	f000 ff88 	bl	80017cc <HAL_TIM_OC_Init>
 80008bc:	b108      	cbz	r0, 80008c2 <main+0xe2>
 80008be:	b672      	cpsid	i
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <main+0xe0>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c2:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008c4:	a902      	add	r1, sp, #8
 80008c6:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c8:	e9cd 6702 	strd	r6, r7, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008cc:	f001 fbaa 	bl	8002024 <HAL_TIMEx_MasterConfigSynchronization>
 80008d0:	4602      	mov	r2, r0
 80008d2:	b108      	cbz	r0, 80008d8 <main+0xf8>
 80008d4:	b672      	cpsid	i
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <main+0xf6>
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008d8:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008da:	a90a      	add	r1, sp, #40	; 0x28
 80008dc:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80008de:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80008e2:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 80008e6:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ea:	f001 f8ef 	bl	8001acc <HAL_TIM_OC_ConfigChannel>
 80008ee:	b108      	cbz	r0, 80008f4 <main+0x114>
 80008f0:	b672      	cpsid	i
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <main+0x112>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80008f8:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008fa:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008fc:	a912      	add	r1, sp, #72	; 0x48
 80008fe:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000900:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090a:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800090e:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
 8000912:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 8000916:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800091a:	f001 fbdd 	bl	80020d8 <HAL_TIMEx_ConfigBreakDeadTime>
 800091e:	4680      	mov	r8, r0
 8000920:	b108      	cbz	r0, 8000926 <main+0x146>
 8000922:	b672      	cpsid	i
  while (1)
 8000924:	e7fe      	b.n	8000924 <main+0x144>
  steppers[0].dirFunc = Dir0;
 8000926:	4c69      	ldr	r4, [pc, #420]	; (8000acc <main+0x2ec>)
  steppers[0].dir_inv = 1;
 8000928:	2201      	movs	r2, #1
  steppers[0].dirFunc = Dir0;
 800092a:	4b69      	ldr	r3, [pc, #420]	; (8000ad0 <main+0x2f0>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800092c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000930:	4e68      	ldr	r6, [pc, #416]	; (8000ad4 <main+0x2f4>)
  steppers[0].dirFunc = Dir0;
 8000932:	60a3      	str	r3, [r4, #8]
  steppers[0].stepFunc = Step0;
 8000934:	4b68      	ldr	r3, [pc, #416]	; (8000ad8 <main+0x2f8>)
 8000936:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8000ae8 <main+0x308>
 800093a:	60e3      	str	r3, [r4, #12]
  steppers[0].acceleration = 5000;
 800093c:	4b67      	ldr	r3, [pc, #412]	; (8000adc <main+0x2fc>)
 800093e:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8000aec <main+0x30c>
 8000942:	6023      	str	r3, [r4, #0]
  steppers[0].minStepInterval = 100;
 8000944:	2364      	movs	r3, #100	; 0x64
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di < mind ){
 8000946:	4f66      	ldr	r7, [pc, #408]	; (8000ae0 <main+0x300>)
  steppers[0].minStepInterval = 100;
 8000948:	6063      	str	r3, [r4, #4]
  steppers[0].homing = 0;
 800094a:	7420      	strb	r0, [r4, #16]
  steppers[0].dir_inv = 1;
 800094c:	6222      	str	r2, [r4, #32]
  steppers[0].seeking_vel = 100;
 800094e:	62a3      	str	r3, [r4, #40]	; 0x28
  steppers[0].homing_vel = 200;
 8000950:	23c8      	movs	r3, #200	; 0xc8
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000952:	485a      	ldr	r0, [pc, #360]	; (8000abc <main+0x2dc>)
  steppers[0].homing_vel = 200;
 8000954:	62e3      	str	r3, [r4, #44]	; 0x2c
  steppers[0].pull_off = 500;
 8000956:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800095a:	6263      	str	r3, [r4, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800095c:	f000 fb72 	bl	8001044 <HAL_GPIO_WritePin>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000960:	4641      	mov	r1, r8
 8000962:	4628      	mov	r0, r5
 8000964:	f000 ffe8 	bl	8001938 <HAL_TIM_OC_Start_IT>
	int steps = absolute_steps - si->stepPosition;
 8000968:	69a2      	ldr	r2, [r4, #24]
 800096a:	f242 7b10 	movw	fp, #10000	; 0x2710
 800096e:	ebab 0b02 	sub.w	fp, fp, r2
	if(steps == 0){
 8000972:	f1bb 0f00 	cmp.w	fp, #0
 8000976:	d02d      	beq.n	80009d4 <main+0x1f4>
	si->dirFunc( steps < 0 ? 1 : 0);
 8000978:	68a2      	ldr	r2, [r4, #8]
 800097a:	ea4f 70db 	mov.w	r0, fp, lsr #31
 800097e:	4790      	blx	r2
	si->dir = steps > 0 ? 1:-1;
 8000980:	f1bb 0f00 	cmp.w	fp, #0
	si->totalSteps = abs(steps);
 8000984:	ea8b 73eb 	eor.w	r3, fp, fp, asr #31
	si->dir = steps > 0 ? 1:-1;
 8000988:	bfcc      	ite	gt
 800098a:	2201      	movgt	r2, #1
 800098c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
	si->totalSteps = abs(steps);
 8000990:	eba3 73eb 	sub.w	r3, r3, fp, asr #31
	si->dir = steps > 0 ? 1:-1;
 8000994:	61e2      	str	r2, [r4, #28]
	si->totalSteps = abs(steps);
 8000996:	6323      	str	r3, [r4, #48]	; 0x30
	si->c0 = si->acceleration;
 8000998:	edd4 7a00 	vldr	s15, [r4]
 800099c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009a0:	edc4 7a05 	vstr	s15, [r4, #20]
	si->d = si->c0;
 80009a4:	edd4 7a05 	vldr	s15, [r4, #20]
 80009a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009ac:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
	si->di = si->d;
 80009b0:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 80009b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009b8:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
	si->stepCount = 0;
 80009bc:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
	si->n = 0;
 80009c0:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	si->rampUpStepCount = 0;
 80009c4:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	si->movementDone = 0;
 80009c8:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
	remainingSteppersFlag |= (1 << whichMotor);
 80009cc:	7833      	ldrb	r3, [r6, #0]
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	7033      	strb	r3, [r6, #0]
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di < mind ){
 80009d4:	7833      	ldrb	r3, [r6, #0]
 80009d6:	07db      	lsls	r3, r3, #31
 80009d8:	d502      	bpl.n	80009e0 <main+0x200>
 80009da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009dc:	42bb      	cmp	r3, r7
 80009de:	d967      	bls.n	8000ab0 <main+0x2d0>
 80009e0:	4652      	mov	r2, sl
	nextStepperFlag = 0;
 80009e2:	f889 8000 	strb.w	r8, [r9]
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di == mind )
 80009e6:	7833      	ldrb	r3, [r6, #0]
 80009e8:	07d8      	lsls	r0, r3, #31
 80009ea:	d502      	bpl.n	80009f2 <main+0x212>
 80009ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d07e      	beq.n	8000af0 <main+0x310>
	if (remainingSteppersFlag == 0){
 80009f2:	7833      	ldrb	r3, [r6, #0]
 80009f4:	b91b      	cbnz	r3, 80009fe <main+0x21e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65500);
 80009f6:	682b      	ldr	r3, [r5, #0]
 80009f8:	f64f 71dc 	movw	r1, #65500	; 0xffdc
 80009fc:	6359      	str	r1, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, mind);
 80009fe:	682b      	ldr	r3, [r5, #0]
 8000a00:	635a      	str	r2, [r3, #52]	; 0x34
	while(remainingSteppersFlag);
 8000a02:	7833      	ldrb	r3, [r6, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1fc      	bne.n	8000a02 <main+0x222>
	  HAL_Delay(100);
 8000a08:	2064      	movs	r0, #100	; 0x64
 8000a0a:	f000 f949 	bl	8000ca0 <HAL_Delay>
	int steps = absolute_steps - si->stepPosition;
 8000a0e:	69a2      	ldr	r2, [r4, #24]
 8000a10:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <main+0x304>)
	if(steps == 0){
 8000a12:	ebb3 0b02 	subs.w	fp, r3, r2
 8000a16:	d02d      	beq.n	8000a74 <main+0x294>
	si->dirFunc( steps < 0 ? 1 : 0);
 8000a18:	68a2      	ldr	r2, [r4, #8]
 8000a1a:	ea4f 70db 	mov.w	r0, fp, lsr #31
 8000a1e:	4790      	blx	r2
	si->dir = steps > 0 ? 1:-1;
 8000a20:	f1bb 0f00 	cmp.w	fp, #0
	si->totalSteps = abs(steps);
 8000a24:	ea8b 73eb 	eor.w	r3, fp, fp, asr #31
	si->dir = steps > 0 ? 1:-1;
 8000a28:	bfcc      	ite	gt
 8000a2a:	2201      	movgt	r2, #1
 8000a2c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
	si->totalSteps = abs(steps);
 8000a30:	eba3 73eb 	sub.w	r3, r3, fp, asr #31
	si->dir = steps > 0 ? 1:-1;
 8000a34:	61e2      	str	r2, [r4, #28]
	si->totalSteps = abs(steps);
 8000a36:	6323      	str	r3, [r4, #48]	; 0x30
	si->c0 = si->acceleration;
 8000a38:	edd4 7a00 	vldr	s15, [r4]
 8000a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a40:	edc4 7a05 	vstr	s15, [r4, #20]
	si->d = si->c0;
 8000a44:	edd4 7a05 	vldr	s15, [r4, #20]
 8000a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a4c:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
	si->di = si->d;
 8000a50:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8000a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a58:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
	si->stepCount = 0;
 8000a5c:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
	si->n = 0;
 8000a60:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	si->rampUpStepCount = 0;
 8000a64:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	si->movementDone = 0;
 8000a68:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
	remainingSteppersFlag |= (1 << whichMotor);
 8000a6c:	7833      	ldrb	r3, [r6, #0]
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	7033      	strb	r3, [r6, #0]
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di < mind ){
 8000a74:	7833      	ldrb	r3, [r6, #0]
 8000a76:	07d9      	lsls	r1, r3, #31
 8000a78:	d502      	bpl.n	8000a80 <main+0x2a0>
 8000a7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a7c:	42bb      	cmp	r3, r7
 8000a7e:	d919      	bls.n	8000ab4 <main+0x2d4>
 8000a80:	4653      	mov	r3, sl
	nextStepperFlag = 0;
 8000a82:	f889 8000 	strb.w	r8, [r9]
		if( ((1 << i) & remainingSteppersFlag) && steppers[i].di == mind )
 8000a86:	7832      	ldrb	r2, [r6, #0]
 8000a88:	07d2      	lsls	r2, r2, #31
 8000a8a:	d502      	bpl.n	8000a92 <main+0x2b2>
 8000a8c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d035      	beq.n	8000afe <main+0x31e>
	if (remainingSteppersFlag == 0){
 8000a92:	7832      	ldrb	r2, [r6, #0]
 8000a94:	b91a      	cbnz	r2, 8000a9e <main+0x2be>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65500);
 8000a96:	682a      	ldr	r2, [r5, #0]
 8000a98:	f64f 71dc 	movw	r1, #65500	; 0xffdc
 8000a9c:	6351      	str	r1, [r2, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, mind);
 8000a9e:	682a      	ldr	r2, [r5, #0]
 8000aa0:	6353      	str	r3, [r2, #52]	; 0x34
	while(remainingSteppersFlag);
 8000aa2:	7833      	ldrb	r3, [r6, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d1fc      	bne.n	8000aa2 <main+0x2c2>
	  HAL_Delay(100);
 8000aa8:	2064      	movs	r0, #100	; 0x64
 8000aaa:	f000 f8f9 	bl	8000ca0 <HAL_Delay>
	  prepareAbsoluteMovement(0, 10000);
 8000aae:	e75b      	b.n	8000968 <main+0x188>
			mind = steppers[i].di;
 8000ab0:	6c62      	ldr	r2, [r4, #68]	; 0x44
	for (int i = 0; i < NUM_STEPPERS; i++){
 8000ab2:	e796      	b.n	80009e2 <main+0x202>
			mind = steppers[i].di;
 8000ab4:	6c63      	ldr	r3, [r4, #68]	; 0x44
	for (int i = 0; i < NUM_STEPPERS; i++){
 8000ab6:	e7e4      	b.n	8000a82 <main+0x2a2>
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020800 	.word	0x40020800
 8000ac0:	2000002c 	.word	0x2000002c
 8000ac4:	10310000 	.word	0x10310000
 8000ac8:	40010000 	.word	0x40010000
 8000acc:	2000007c 	.word	0x2000007c
 8000ad0:	08000531 	.word	0x08000531
 8000ad4:	20000079 	.word	0x20000079
 8000ad8:	0800050d 	.word	0x0800050d
 8000adc:	459c4000 	.word	0x459c4000
 8000ae0:	000f423e 	.word	0x000f423e
 8000ae4:	ffffd8f0 	.word	0xffffd8f0
 8000ae8:	20000078 	.word	0x20000078
 8000aec:	000f423f 	.word	0x000f423f
			nextStepperFlag |= (1 << i);
 8000af0:	f899 3000 	ldrb.w	r3, [r9]
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	f889 3000 	strb.w	r3, [r9]
	for (int i = 0; i < NUM_STEPPERS; i ++){
 8000afc:	e779      	b.n	80009f2 <main+0x212>
			nextStepperFlag |= (1 << i);
 8000afe:	f899 2000 	ldrb.w	r2, [r9]
 8000b02:	f042 0201 	orr.w	r2, r2, #1
 8000b06:	f889 2000 	strb.w	r2, [r9]
	for (int i = 0; i < NUM_STEPPERS; i ++){
 8000b0a:	e7c2      	b.n	8000a92 <main+0x2b2>

08000b0c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_MspInit+0x2c>)
{
 8000b0e:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b16:	641a      	str	r2, [r3, #64]	; 0x40
 8000b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b1a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000b1e:	9200      	str	r2, [sp, #0]
 8000b20:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b28:	645a      	str	r2, [r3, #68]	; 0x44
 8000b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b30:	9301      	str	r3, [sp, #4]
 8000b32:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b34:	b002      	add	sp, #8
 8000b36:	4770      	bx	lr
 8000b38:	40023800 	.word	0x40023800

08000b3c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_TIM_Base_MspInit+0x3c>)
 8000b3e:	6802      	ldr	r2, [r0, #0]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d000      	beq.n	8000b46 <HAL_TIM_Base_MspInit+0xa>
 8000b44:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b46:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	201b      	movs	r0, #27
 8000b4e:	4611      	mov	r1, r2
{
 8000b50:	b510      	push	{r4, lr}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b52:	6c5c      	ldr	r4, [r3, #68]	; 0x44
{
 8000b54:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b56:	f044 0401 	orr.w	r4, r4, #1
 8000b5a:	645c      	str	r4, [r3, #68]	; 0x44
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b66:	f000 f8bf 	bl	8000ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b6a:	201b      	movs	r0, #27
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b6c:	b002      	add	sp, #8
 8000b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b72:	f000 b8f7 	b.w	8000d64 <HAL_NVIC_EnableIRQ>
 8000b76:	bf00      	nop
 8000b78:	40010000 	.word	0x40010000

08000b7c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler>
 8000b7e:	bf00      	nop

08000b80 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <HardFault_Handler>
 8000b82:	bf00      	nop

08000b84 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler>
 8000b86:	bf00      	nop

08000b88 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <BusFault_Handler>
 8000b8a:	bf00      	nop

08000b8c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler>
 8000b8e:	bf00      	nop

08000b90 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <DebugMon_Handler>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <PendSV_Handler>:
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 b86e 	b.w	8000c7c <HAL_IncTick>

08000ba0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000ba0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ba4:	f000 ba52 	b.w	800104c <HAL_GPIO_EXTI_IRQHandler>

08000ba8 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ba8:	4801      	ldr	r0, [pc, #4]	; (8000bb0 <TIM1_CC_IRQHandler+0x8>)
 8000baa:	f001 b983 	b.w	8001eb4 <HAL_TIM_IRQHandler>
 8000bae:	bf00      	nop
 8000bb0:	2000002c 	.word	0x2000002c

08000bb4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb4:	4a03      	ldr	r2, [pc, #12]	; (8000bc4 <SystemInit+0x10>)
 8000bb6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000bba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bbe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bcc:	480d      	ldr	r0, [pc, #52]	; (8000c04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bce:	490e      	ldr	r1, [pc, #56]	; (8000c08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd0:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be4:	4c0b      	ldr	r4, [pc, #44]	; (8000c14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf2:	f7ff ffdf 	bl	8000bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f001 fabb 	bl	8002170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfa:	f7ff fdf1 	bl	80007e0 <main>
  bx  lr    
 8000bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c00:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c0c:	08002200 	.word	0x08002200
  ldr r2, =_sbss
 8000c10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c14:	200000cc 	.word	0x200000cc

08000c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC_IRQHandler>
	...

08000c1c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1c:	490e      	ldr	r1, [pc, #56]	; (8000c58 <HAL_InitTick+0x3c>)
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <HAL_InitTick+0x40>)
{
 8000c24:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c26:	7809      	ldrb	r1, [r1, #0]
{
 8000c28:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2a:	6812      	ldr	r2, [r2, #0]
 8000c2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c30:	fbb2 f0f3 	udiv	r0, r2, r3
 8000c34:	f000 f8a4 	bl	8000d80 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c38:	b908      	cbnz	r0, 8000c3e <HAL_InitTick+0x22>
 8000c3a:	2c0f      	cmp	r4, #15
 8000c3c:	d901      	bls.n	8000c42 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000c3e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000c40:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c42:	2200      	movs	r2, #0
 8000c44:	4621      	mov	r1, r4
 8000c46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c4a:	f000 f84d 	bl	8000ce8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <HAL_InitTick+0x44>)
 8000c50:	2000      	movs	r0, #0
 8000c52:	601c      	str	r4, [r3, #0]
}
 8000c54:	bd10      	pop	{r4, pc}
 8000c56:	bf00      	nop
 8000c58:	20000004 	.word	0x20000004
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000008 	.word	0x20000008

08000c64 <HAL_Init>:
{
 8000c64:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c66:	2003      	movs	r0, #3
 8000c68:	f000 f82c 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff ffd5 	bl	8000c1c <HAL_InitTick>
  HAL_MspInit();
 8000c72:	f7ff ff4b 	bl	8000b0c <HAL_MspInit>
}
 8000c76:	2000      	movs	r0, #0
 8000c78:	bd08      	pop	{r3, pc}
 8000c7a:	bf00      	nop

08000c7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c7c:	4a03      	ldr	r2, [pc, #12]	; (8000c8c <HAL_IncTick+0x10>)
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <HAL_IncTick+0x14>)
 8000c80:	6811      	ldr	r1, [r2, #0]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	440b      	add	r3, r1
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	200000c8 	.word	0x200000c8
 8000c90:	20000004 	.word	0x20000004

08000c94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c94:	4b01      	ldr	r3, [pc, #4]	; (8000c9c <HAL_GetTick+0x8>)
 8000c96:	6818      	ldr	r0, [r3, #0]
}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	200000c8 	.word	0x200000c8

08000ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca0:	b538      	push	{r3, r4, r5, lr}
 8000ca2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff fff6 	bl	8000c94 <HAL_GetTick>
 8000ca8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000caa:	1c63      	adds	r3, r4, #1
 8000cac:	d002      	beq.n	8000cb4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <HAL_Delay+0x20>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb4:	f7ff ffee 	bl	8000c94 <HAL_GetTick>
 8000cb8:	1b43      	subs	r3, r0, r5
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d3fa      	bcc.n	8000cb4 <HAL_Delay+0x14>
  {
  }
}
 8000cbe:	bd38      	pop	{r3, r4, r5, pc}
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4906      	ldr	r1, [pc, #24]	; (8000ce0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cca:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cce:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd4:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8000cda:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000cdc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00
 8000ce4:	05fa0000 	.word	0x05fa0000

08000ce8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <HAL_NVIC_SetPriority+0x70>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf2:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfa:	f1be 0f04 	cmp.w	lr, #4
 8000cfe:	bf28      	it	cs
 8000d00:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d04:	f1bc 0f06 	cmp.w	ip, #6
 8000d08:	d91a      	bls.n	8000d40 <HAL_NVIC_SetPriority+0x58>
 8000d0a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000d10:	fa0c fc03 	lsl.w	ip, ip, r3
 8000d14:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000d22:	ea21 010c 	bic.w	r1, r1, ip
 8000d26:	fa01 f103 	lsl.w	r1, r1, r3
 8000d2a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	db0a      	blt.n	8000d46 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d30:	0109      	lsls	r1, r1, #4
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_NVIC_SetPriority+0x74>)
 8000d34:	b2c9      	uxtb	r1, r1
 8000d36:	4403      	add	r3, r0
 8000d38:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d40:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d42:	4613      	mov	r3, r2
 8000d44:	e7e8      	b.n	8000d18 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d46:	f000 000f 	and.w	r0, r0, #15
 8000d4a:	0109      	lsls	r1, r1, #4
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <HAL_NVIC_SetPriority+0x78>)
 8000d4e:	b2c9      	uxtb	r1, r1
 8000d50:	4403      	add	r3, r0
 8000d52:	7619      	strb	r1, [r3, #24]
 8000d54:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d58:	e000ed00 	.word	0xe000ed00
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ecfc 	.word	0xe000ecfc

08000d64 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d64:	2800      	cmp	r0, #0
 8000d66:	db07      	blt.n	8000d78 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d68:	f000 011f 	and.w	r1, r0, #31
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	0940      	lsrs	r0, r0, #5
 8000d70:	4a02      	ldr	r2, [pc, #8]	; (8000d7c <HAL_NVIC_EnableIRQ+0x18>)
 8000d72:	408b      	lsls	r3, r1
 8000d74:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d80:	1e43      	subs	r3, r0, #1
 8000d82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d86:	d20c      	bcs.n	8000da2 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d88:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8e:	4906      	ldr	r1, [pc, #24]	; (8000da8 <HAL_SYSTICK_Config+0x28>)
 8000d90:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d94:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000da2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <HAL_GPIO_Init>:
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dac:	2200      	movs	r2, #0
{
 8000dae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
 8000db2:	4613      	mov	r3, r2
{
 8000db4:	b083      	sub	sp, #12
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db6:	680d      	ldr	r5, [r1, #0]
 8000db8:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8001024 <HAL_GPIO_Init+0x278>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dbc:	4e93      	ldr	r6, [pc, #588]	; (800100c <HAL_GPIO_Init+0x260>)
 8000dbe:	e003      	b.n	8000dc8 <HAL_GPIO_Init+0x1c>
  for(position = 0; position < GPIO_NUMBER; position++)
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	3202      	adds	r2, #2
 8000dc4:	2b10      	cmp	r3, #16
 8000dc6:	d05f      	beq.n	8000e88 <HAL_GPIO_Init+0xdc>
    ioposition = ((uint32_t)0x01) << position;
 8000dc8:	2401      	movs	r4, #1
 8000dca:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dcc:	ea04 0e05 	and.w	lr, r4, r5
    if(iocurrent == ioposition)
 8000dd0:	43ac      	bics	r4, r5
 8000dd2:	d1f5      	bne.n	8000dc0 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd4:	684c      	ldr	r4, [r1, #4]
 8000dd6:	f024 0910 	bic.w	r9, r4, #16
 8000dda:	f109 3cff 	add.w	ip, r9, #4294967295	; 0xffffffff
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dde:	f1bc 0f01 	cmp.w	ip, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000de2:	f04f 0c03 	mov.w	ip, #3
 8000de6:	fa0c fc02 	lsl.w	ip, ip, r2
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dea:	f200 80d4 	bhi.w	8000f96 <HAL_GPIO_Init+0x1ea>
        temp = GPIOx->OSPEEDR; 
 8000dee:	f8d0 a008 	ldr.w	sl, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000df2:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000df4:	ea2a 0a0c 	bic.w	sl, sl, ip
 8000df8:	ea6f 0c0c 	mvn.w	ip, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8000dfc:	fa07 fb02 	lsl.w	fp, r7, r2
 8000e00:	ea4b 0a0a 	orr.w	sl, fp, sl
        GPIOx->OSPEEDR = temp;
 8000e04:	f8c0 a008 	str.w	sl, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e08:	f3c4 1a00 	ubfx	sl, r4, #4, #1
        temp = GPIOx->OTYPER;
 8000e0c:	f8d0 b004 	ldr.w	fp, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e10:	fa0a fa03 	lsl.w	sl, sl, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e14:	ea2b 0b0e 	bic.w	fp, fp, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e18:	ea4a 0a0b 	orr.w	sl, sl, fp
        GPIOx->OTYPER = temp;
 8000e1c:	f8c0 a004 	str.w	sl, [r0, #4]
      temp = GPIOx->PUPDR;
 8000e20:	f8d0 a00c 	ldr.w	sl, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e24:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e28:	688f      	ldr	r7, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e2a:	ea0a 0a0c 	and.w	sl, sl, ip
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e2e:	fa07 fb02 	lsl.w	fp, r7, r2
 8000e32:	ea4b 0a0a 	orr.w	sl, fp, sl
      GPIOx->PUPDR = temp;
 8000e36:	f8c0 a00c 	str.w	sl, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e3a:	d128      	bne.n	8000e8e <HAL_GPIO_Init+0xe2>
        temp = GPIOx->AFR[position >> 3];
 8000e3c:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e40:	f003 0e07 	and.w	lr, r3, #7
 8000e44:	f04f 0a0f 	mov.w	sl, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e48:	690f      	ldr	r7, [r1, #16]
 8000e4a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e4e:	f004 0403 	and.w	r4, r4, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e52:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e56:	3301      	adds	r3, #1
        temp = GPIOx->AFR[position >> 3];
 8000e58:	f8d9 b020 	ldr.w	fp, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e5c:	4094      	lsls	r4, r2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e5e:	fa0a fa0e 	lsl.w	sl, sl, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e62:	fa07 fe0e 	lsl.w	lr, r7, lr
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e66:	2b10      	cmp	r3, #16
 8000e68:	f102 0202 	add.w	r2, r2, #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e6c:	ea2b 0a0a 	bic.w	sl, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e70:	ea4e 0e0a 	orr.w	lr, lr, sl
        GPIOx->AFR[position >> 3] = temp;
 8000e74:	f8c9 e020 	str.w	lr, [r9, #32]
      temp = GPIOx->MODER;
 8000e78:	f8d0 e000 	ldr.w	lr, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e7c:	ea0e 0c0c 	and.w	ip, lr, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e80:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8000e84:	6004      	str	r4, [r0, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e86:	d19f      	bne.n	8000dc8 <HAL_GPIO_Init+0x1c>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000e88:	b003      	add	sp, #12
 8000e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      temp = GPIOx->MODER;
 8000e8e:	f8d0 9000 	ldr.w	r9, [r0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e92:	00e7      	lsls	r7, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e94:	ea09 090c 	and.w	r9, r9, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e98:	f004 0c03 	and.w	ip, r4, #3
 8000e9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea0:	ea4c 0c09 	orr.w	ip, ip, r9
      GPIOx->MODER = temp;
 8000ea4:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ea8:	d58a      	bpl.n	8000dc0 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	4f59      	ldr	r7, [pc, #356]	; (8001010 <HAL_GPIO_Init+0x264>)
 8000eac:	f023 0903 	bic.w	r9, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000eb0:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb4:	f8d7 c044 	ldr.w	ip, [r7, #68]	; 0x44
 8000eb8:	44c1      	add	r9, r8
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000eba:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	f44c 4c80 	orr.w	ip, ip, #16384	; 0x4000
 8000ec2:	f8c7 c044 	str.w	ip, [r7, #68]	; 0x44
 8000ec6:	f8d7 c044 	ldr.w	ip, [r7, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000eca:	f5a7 5760 	sub.w	r7, r7, #14336	; 0x3800
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	f40c 4c80 	and.w	ip, ip, #16384	; 0x4000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ed2:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed4:	f8cd c004 	str.w	ip, [sp, #4]
 8000ed8:	f8dd c004 	ldr.w	ip, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000edc:	f04f 0c0f 	mov.w	ip, #15
        temp = SYSCFG->EXTICR[position >> 2];
 8000ee0:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ee4:	fa0c fc0a 	lsl.w	ip, ip, sl
 8000ee8:	ea2b 0c0c 	bic.w	ip, fp, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000eec:	d027      	beq.n	8000f3e <HAL_GPIO_Init+0x192>
 8000eee:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000ef2:	42b8      	cmp	r0, r7
 8000ef4:	d052      	beq.n	8000f9c <HAL_GPIO_Init+0x1f0>
 8000ef6:	4f47      	ldr	r7, [pc, #284]	; (8001014 <HAL_GPIO_Init+0x268>)
 8000ef8:	42b8      	cmp	r0, r7
 8000efa:	d056      	beq.n	8000faa <HAL_GPIO_Init+0x1fe>
 8000efc:	4f46      	ldr	r7, [pc, #280]	; (8001018 <HAL_GPIO_Init+0x26c>)
 8000efe:	42b8      	cmp	r0, r7
 8000f00:	d05a      	beq.n	8000fb8 <HAL_GPIO_Init+0x20c>
 8000f02:	4f46      	ldr	r7, [pc, #280]	; (800101c <HAL_GPIO_Init+0x270>)
 8000f04:	42b8      	cmp	r0, r7
 8000f06:	d05e      	beq.n	8000fc6 <HAL_GPIO_Init+0x21a>
 8000f08:	4f45      	ldr	r7, [pc, #276]	; (8001020 <HAL_GPIO_Init+0x274>)
 8000f0a:	42b8      	cmp	r0, r7
 8000f0c:	d069      	beq.n	8000fe2 <HAL_GPIO_Init+0x236>
 8000f0e:	f8df b118 	ldr.w	fp, [pc, #280]	; 8001028 <HAL_GPIO_Init+0x27c>
 8000f12:	4558      	cmp	r0, fp
 8000f14:	d06c      	beq.n	8000ff0 <HAL_GPIO_Init+0x244>
 8000f16:	f8df b114 	ldr.w	fp, [pc, #276]	; 800102c <HAL_GPIO_Init+0x280>
 8000f1a:	4558      	cmp	r0, fp
 8000f1c:	d05a      	beq.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000f1e:	f8df b110 	ldr.w	fp, [pc, #272]	; 8001030 <HAL_GPIO_Init+0x284>
 8000f22:	4558      	cmp	r0, fp
 8000f24:	d06b      	beq.n	8000ffe <HAL_GPIO_Init+0x252>
 8000f26:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8001034 <HAL_GPIO_Init+0x288>
 8000f2a:	4558      	cmp	r0, fp
 8000f2c:	bf0c      	ite	eq
 8000f2e:	f04f 0b09 	moveq.w	fp, #9
 8000f32:	f04f 0b0a 	movne.w	fp, #10
 8000f36:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000f3a:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f3e:	f8c9 c008 	str.w	ip, [r9, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f42:	03e7      	lsls	r7, r4, #15
        temp = EXTI->IMR;
 8000f44:	f8d6 c000 	ldr.w	ip, [r6]
        temp &= ~((uint32_t)iocurrent);
 8000f48:	ea6f 090e 	mvn.w	r9, lr
          temp |= iocurrent;
 8000f4c:	bf4c      	ite	mi
 8000f4e:	ea4e 0c0c 	orrmi.w	ip, lr, ip
        temp &= ~((uint32_t)iocurrent);
 8000f52:	ea09 0c0c 	andpl.w	ip, r9, ip
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f56:	03a7      	lsls	r7, r4, #14
        EXTI->IMR = temp;
 8000f58:	f8c6 c000 	str.w	ip, [r6]
        temp = EXTI->EMR;
 8000f5c:	f8d6 c004 	ldr.w	ip, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
 8000f60:	bf54      	ite	pl
 8000f62:	ea09 0c0c 	andpl.w	ip, r9, ip
          temp |= iocurrent;
 8000f66:	ea4e 0c0c 	orrmi.w	ip, lr, ip
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f6a:	02e7      	lsls	r7, r4, #11
        EXTI->EMR = temp;
 8000f6c:	f8c6 c004 	str.w	ip, [r6, #4]
        temp = EXTI->RTSR;
 8000f70:	f8d6 c008 	ldr.w	ip, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8000f74:	bf54      	ite	pl
 8000f76:	ea09 0c0c 	andpl.w	ip, r9, ip
          temp |= iocurrent;
 8000f7a:	ea4e 0c0c 	orrmi.w	ip, lr, ip
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f7e:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000f80:	f8c6 c008 	str.w	ip, [r6, #8]
        temp = EXTI->FTSR;
 8000f84:	f8d6 c00c 	ldr.w	ip, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
 8000f88:	bf54      	ite	pl
 8000f8a:	ea09 040c 	andpl.w	r4, r9, ip
          temp |= iocurrent;
 8000f8e:	ea4e 040c 	orrmi.w	r4, lr, ip
        EXTI->FTSR = temp;
 8000f92:	60f4      	str	r4, [r6, #12]
 8000f94:	e714      	b.n	8000dc0 <HAL_GPIO_Init+0x14>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f96:	ea6f 0c0c 	mvn.w	ip, ip
 8000f9a:	e741      	b.n	8000e20 <HAL_GPIO_Init+0x74>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f9c:	f04f 0b01 	mov.w	fp, #1
 8000fa0:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000fa4:	ea4c 0c0a 	orr.w	ip, ip, sl
 8000fa8:	e7c9      	b.n	8000f3e <HAL_GPIO_Init+0x192>
 8000faa:	f04f 0b02 	mov.w	fp, #2
 8000fae:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000fb2:	ea4c 0c0a 	orr.w	ip, ip, sl
 8000fb6:	e7c2      	b.n	8000f3e <HAL_GPIO_Init+0x192>
 8000fb8:	f04f 0b03 	mov.w	fp, #3
 8000fbc:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000fc0:	ea4c 0c0a 	orr.w	ip, ip, sl
 8000fc4:	e7bb      	b.n	8000f3e <HAL_GPIO_Init+0x192>
 8000fc6:	f04f 0b04 	mov.w	fp, #4
 8000fca:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000fce:	ea4c 0c0a 	orr.w	ip, ip, sl
 8000fd2:	e7b4      	b.n	8000f3e <HAL_GPIO_Init+0x192>
 8000fd4:	f04f 0b07 	mov.w	fp, #7
 8000fd8:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000fdc:	ea4c 0c0a 	orr.w	ip, ip, sl
 8000fe0:	e7ad      	b.n	8000f3e <HAL_GPIO_Init+0x192>
 8000fe2:	f04f 0b05 	mov.w	fp, #5
 8000fe6:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000fea:	ea4c 0c0a 	orr.w	ip, ip, sl
 8000fee:	e7a6      	b.n	8000f3e <HAL_GPIO_Init+0x192>
 8000ff0:	f04f 0b06 	mov.w	fp, #6
 8000ff4:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000ff8:	ea4c 0c0a 	orr.w	ip, ip, sl
 8000ffc:	e79f      	b.n	8000f3e <HAL_GPIO_Init+0x192>
 8000ffe:	f04f 0b08 	mov.w	fp, #8
 8001002:	fa0b fa0a 	lsl.w	sl, fp, sl
 8001006:	ea4c 0c0a 	orr.w	ip, ip, sl
 800100a:	e798      	b.n	8000f3e <HAL_GPIO_Init+0x192>
 800100c:	40013c00 	.word	0x40013c00
 8001010:	40023800 	.word	0x40023800
 8001014:	40020800 	.word	0x40020800
 8001018:	40020c00 	.word	0x40020c00
 800101c:	40021000 	.word	0x40021000
 8001020:	40021400 	.word	0x40021400
 8001024:	40013800 	.word	0x40013800
 8001028:	40021800 	.word	0x40021800
 800102c:	40021c00 	.word	0x40021c00
 8001030:	40022000 	.word	0x40022000
 8001034:	40022400 	.word	0x40022400

08001038 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001038:	6903      	ldr	r3, [r0, #16]
 800103a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800103c:	bf14      	ite	ne
 800103e:	2001      	movne	r0, #1
 8001040:	2000      	moveq	r0, #0
 8001042:	4770      	bx	lr

08001044 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001044:	b902      	cbnz	r2, 8001048 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001046:	0409      	lsls	r1, r1, #16
 8001048:	6181      	str	r1, [r0, #24]
  }
}
 800104a:	4770      	bx	lr

0800104c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800104e:	6951      	ldr	r1, [r2, #20]
 8001050:	4201      	tst	r1, r0
 8001052:	d100      	bne.n	8001056 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001054:	4770      	bx	lr
{
 8001056:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001058:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800105a:	f7ff fa73 	bl	8000544 <HAL_GPIO_EXTI_Callback>
  }
}
 800105e:	bd08      	pop	{r3, pc}
 8001060:	40013c00 	.word	0x40013c00

08001064 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <HAL_PWREx_EnableOverDrive+0x6c>)
 8001066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001068:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 800106c:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	641a      	str	r2, [r3, #64]	; 0x40
{
 8001070:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001074:	4c17      	ldr	r4, [pc, #92]	; (80010d4 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001084:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001086:	f7ff fe05 	bl	8000c94 <HAL_GetTick>
 800108a:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800108c:	e005      	b.n	800109a <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800108e:	f7ff fe01 	bl	8000c94 <HAL_GetTick>
 8001092:	1b40      	subs	r0, r0, r5
 8001094:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001098:	d817      	bhi.n	80010ca <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800109a:	6863      	ldr	r3, [r4, #4]
 800109c:	03da      	lsls	r2, r3, #15
 800109e:	d5f6      	bpl.n	800108e <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80010a0:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010a2:	4d0c      	ldr	r5, [pc, #48]	; (80010d4 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a8:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80010aa:	f7ff fdf3 	bl	8000c94 <HAL_GetTick>
 80010ae:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010b0:	e005      	b.n	80010be <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010b2:	f7ff fdef 	bl	8000c94 <HAL_GetTick>
 80010b6:	1b00      	subs	r0, r0, r4
 80010b8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80010bc:	d805      	bhi.n	80010ca <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010be:	686b      	ldr	r3, [r5, #4]
 80010c0:	039b      	lsls	r3, r3, #14
 80010c2:	d5f6      	bpl.n	80010b2 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80010c4:	2000      	movs	r0, #0
}
 80010c6:	b003      	add	sp, #12
 80010c8:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80010ca:	2003      	movs	r0, #3
}
 80010cc:	b003      	add	sp, #12
 80010ce:	bd30      	pop	{r4, r5, pc}
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40007000 	.word	0x40007000

080010d8 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010d8:	2800      	cmp	r0, #0
 80010da:	f000 81b6 	beq.w	800144a <HAL_RCC_OscConfig+0x372>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010de:	6803      	ldr	r3, [r0, #0]
{
 80010e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e4:	07dd      	lsls	r5, r3, #31
{
 80010e6:	b082      	sub	sp, #8
 80010e8:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ea:	d535      	bpl.n	8001158 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010ec:	499a      	ldr	r1, [pc, #616]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80010ee:	688a      	ldr	r2, [r1, #8]
 80010f0:	f002 020c 	and.w	r2, r2, #12
 80010f4:	2a04      	cmp	r2, #4
 80010f6:	f000 80e0 	beq.w	80012ba <HAL_RCC_OscConfig+0x1e2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010fa:	688a      	ldr	r2, [r1, #8]
 80010fc:	f002 020c 	and.w	r2, r2, #12
 8001100:	2a08      	cmp	r2, #8
 8001102:	f000 80d6 	beq.w	80012b2 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001106:	6863      	ldr	r3, [r4, #4]
 8001108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800110c:	d010      	beq.n	8001130 <HAL_RCC_OscConfig+0x58>
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 80fd 	beq.w	800130e <HAL_RCC_OscConfig+0x236>
 8001114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001118:	4b8f      	ldr	r3, [pc, #572]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	f000 8185 	beq.w	800142a <HAL_RCC_OscConfig+0x352>
 8001120:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	e004      	b.n	800113a <HAL_RCC_OscConfig+0x62>
 8001130:	4a89      	ldr	r2, [pc, #548]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001132:	6813      	ldr	r3, [r2, #0]
 8001134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001138:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113a:	f7ff fdab 	bl	8000c94 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	4e86      	ldr	r6, [pc, #536]	; (8001358 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8001140:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	e005      	b.n	8001150 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001144:	f7ff fda6 	bl	8000c94 <HAL_GetTick>
 8001148:	1b40      	subs	r0, r0, r5
 800114a:	2864      	cmp	r0, #100	; 0x64
 800114c:	f200 80db 	bhi.w	8001306 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001150:	6833      	ldr	r3, [r6, #0]
 8001152:	039a      	lsls	r2, r3, #14
 8001154:	d5f6      	bpl.n	8001144 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	079f      	lsls	r7, r3, #30
 800115a:	d527      	bpl.n	80011ac <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800115c:	4a7e      	ldr	r2, [pc, #504]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 800115e:	6891      	ldr	r1, [r2, #8]
 8001160:	f011 0f0c 	tst.w	r1, #12
 8001164:	d07e      	beq.n	8001264 <HAL_RCC_OscConfig+0x18c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001166:	6891      	ldr	r1, [r2, #8]
 8001168:	f001 010c 	and.w	r1, r1, #12
 800116c:	2908      	cmp	r1, #8
 800116e:	d076      	beq.n	800125e <HAL_RCC_OscConfig+0x186>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001170:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001172:	4d79      	ldr	r5, [pc, #484]	; (8001358 <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 8104 	beq.w	8001382 <HAL_RCC_OscConfig+0x2aa>
        __HAL_RCC_HSI_ENABLE();
 800117a:	682b      	ldr	r3, [r5, #0]
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001182:	f7ff fd87 	bl	8000c94 <HAL_GetTick>
 8001186:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001188:	e005      	b.n	8001196 <HAL_RCC_OscConfig+0xbe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800118a:	f7ff fd83 	bl	8000c94 <HAL_GetTick>
 800118e:	1b80      	subs	r0, r0, r6
 8001190:	2802      	cmp	r0, #2
 8001192:	f200 80b8 	bhi.w	8001306 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001196:	682b      	ldr	r3, [r5, #0]
 8001198:	0798      	lsls	r0, r3, #30
 800119a:	d5f6      	bpl.n	800118a <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119c:	682b      	ldr	r3, [r5, #0]
 800119e:	6922      	ldr	r2, [r4, #16]
 80011a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80011a4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011a8:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	071a      	lsls	r2, r3, #28
 80011ae:	d41f      	bmi.n	80011f0 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b0:	075d      	lsls	r5, r3, #29
 80011b2:	d534      	bpl.n	800121e <HAL_RCC_OscConfig+0x146>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b4:	4b68      	ldr	r3, [pc, #416]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80011b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011b8:	00d0      	lsls	r0, r2, #3
 80011ba:	d56f      	bpl.n	800129c <HAL_RCC_OscConfig+0x1c4>
  FlagStatus pwrclkchanged = RESET;
 80011bc:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011be:	4e67      	ldr	r6, [pc, #412]	; (800135c <HAL_RCC_OscConfig+0x284>)
 80011c0:	6833      	ldr	r3, [r6, #0]
 80011c2:	05d9      	lsls	r1, r3, #23
 80011c4:	f140 808f 	bpl.w	80012e6 <HAL_RCC_OscConfig+0x20e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c8:	68a3      	ldr	r3, [r4, #8]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	f000 80eb 	beq.w	80013a6 <HAL_RCC_OscConfig+0x2ce>
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80b2 	beq.w	800133a <HAL_RCC_OscConfig+0x262>
 80011d6:	2b05      	cmp	r3, #5
 80011d8:	4b5f      	ldr	r3, [pc, #380]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80011da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011dc:	f000 812d 	beq.w	800143a <HAL_RCC_OscConfig+0x362>
 80011e0:	f022 0201 	bic.w	r2, r2, #1
 80011e4:	671a      	str	r2, [r3, #112]	; 0x70
 80011e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011e8:	f022 0204 	bic.w	r2, r2, #4
 80011ec:	671a      	str	r2, [r3, #112]	; 0x70
 80011ee:	e0df      	b.n	80013b0 <HAL_RCC_OscConfig+0x2d8>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011f0:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80011f2:	4d59      	ldr	r5, [pc, #356]	; (8001358 <HAL_RCC_OscConfig+0x280>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d040      	beq.n	800127a <HAL_RCC_OscConfig+0x1a2>
      __HAL_RCC_LSI_ENABLE();
 80011f8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001200:	f7ff fd48 	bl	8000c94 <HAL_GetTick>
 8001204:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001206:	e004      	b.n	8001212 <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001208:	f7ff fd44 	bl	8000c94 <HAL_GetTick>
 800120c:	1b80      	subs	r0, r0, r6
 800120e:	2802      	cmp	r0, #2
 8001210:	d879      	bhi.n	8001306 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001212:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001214:	079b      	lsls	r3, r3, #30
 8001216:	d5f7      	bpl.n	8001208 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	075d      	lsls	r5, r3, #29
 800121c:	d4ca      	bmi.n	80011b4 <HAL_RCC_OscConfig+0xdc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800121e:	69a0      	ldr	r0, [r4, #24]
 8001220:	b1c8      	cbz	r0, 8001256 <HAL_RCC_OscConfig+0x17e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001222:	4d4d      	ldr	r5, [pc, #308]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001224:	68ab      	ldr	r3, [r5, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b08      	cmp	r3, #8
 800122c:	f000 80d3 	beq.w	80013d6 <HAL_RCC_OscConfig+0x2fe>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001230:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001232:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001234:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001238:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800123a:	f000 8108 	beq.w	800144e <HAL_RCC_OscConfig+0x376>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123e:	f7ff fd29 	bl	8000c94 <HAL_GetTick>
 8001242:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001244:	e004      	b.n	8001250 <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001246:	f7ff fd25 	bl	8000c94 <HAL_GetTick>
 800124a:	1b00      	subs	r0, r0, r4
 800124c:	2802      	cmp	r0, #2
 800124e:	d85a      	bhi.n	8001306 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	019b      	lsls	r3, r3, #6
 8001254:	d4f7      	bmi.n	8001246 <HAL_RCC_OscConfig+0x16e>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001256:	2000      	movs	r0, #0
}
 8001258:	b002      	add	sp, #8
 800125a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800125e:	6852      	ldr	r2, [r2, #4]
 8001260:	0256      	lsls	r6, r2, #9
 8001262:	d485      	bmi.n	8001170 <HAL_RCC_OscConfig+0x98>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001264:	4a3c      	ldr	r2, [pc, #240]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	0795      	lsls	r5, r2, #30
 800126a:	d530      	bpl.n	80012ce <HAL_RCC_OscConfig+0x1f6>
 800126c:	68e2      	ldr	r2, [r4, #12]
 800126e:	2a01      	cmp	r2, #1
 8001270:	d02d      	beq.n	80012ce <HAL_RCC_OscConfig+0x1f6>
        return HAL_ERROR;
 8001272:	2001      	movs	r0, #1
}
 8001274:	b002      	add	sp, #8
 8001276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800127a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001282:	f7ff fd07 	bl	8000c94 <HAL_GetTick>
 8001286:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001288:	e004      	b.n	8001294 <HAL_RCC_OscConfig+0x1bc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800128a:	f7ff fd03 	bl	8000c94 <HAL_GetTick>
 800128e:	1b80      	subs	r0, r0, r6
 8001290:	2802      	cmp	r0, #2
 8001292:	d838      	bhi.n	8001306 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001294:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001296:	079f      	lsls	r7, r3, #30
 8001298:	d4f7      	bmi.n	800128a <HAL_RCC_OscConfig+0x1b2>
 800129a:	e7bd      	b.n	8001218 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800129e:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012b0:	e785      	b.n	80011be <HAL_RCC_OscConfig+0xe6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b2:	684a      	ldr	r2, [r1, #4]
 80012b4:	0250      	lsls	r0, r2, #9
 80012b6:	f57f af26 	bpl.w	8001106 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ba:	4a27      	ldr	r2, [pc, #156]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	0391      	lsls	r1, r2, #14
 80012c0:	f57f af4a 	bpl.w	8001158 <HAL_RCC_OscConfig+0x80>
 80012c4:	6862      	ldr	r2, [r4, #4]
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	f47f af46 	bne.w	8001158 <HAL_RCC_OscConfig+0x80>
 80012cc:	e7d1      	b.n	8001272 <HAL_RCC_OscConfig+0x19a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ce:	4922      	ldr	r1, [pc, #136]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80012d0:	6920      	ldr	r0, [r4, #16]
 80012d2:	680a      	ldr	r2, [r1, #0]
 80012d4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80012d8:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80012dc:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012de:	071a      	lsls	r2, r3, #28
 80012e0:	f57f af66 	bpl.w	80011b0 <HAL_RCC_OscConfig+0xd8>
 80012e4:	e784      	b.n	80011f0 <HAL_RCC_OscConfig+0x118>
      PWR->CR1 |= PWR_CR1_DBP;
 80012e6:	6833      	ldr	r3, [r6, #0]
 80012e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ec:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80012ee:	f7ff fcd1 	bl	8000c94 <HAL_GetTick>
 80012f2:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012f4:	6833      	ldr	r3, [r6, #0]
 80012f6:	05da      	lsls	r2, r3, #23
 80012f8:	f53f af66 	bmi.w	80011c8 <HAL_RCC_OscConfig+0xf0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fc:	f7ff fcca 	bl	8000c94 <HAL_GetTick>
 8001300:	1bc0      	subs	r0, r0, r7
 8001302:	2864      	cmp	r0, #100	; 0x64
 8001304:	d9f6      	bls.n	80012f4 <HAL_RCC_OscConfig+0x21c>
            return HAL_TIMEOUT;
 8001306:	2003      	movs	r0, #3
}
 8001308:	b002      	add	sp, #8
 800130a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130e:	4d12      	ldr	r5, [pc, #72]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001310:	682b      	ldr	r3, [r5, #0]
 8001312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001316:	602b      	str	r3, [r5, #0]
 8001318:	682b      	ldr	r3, [r5, #0]
 800131a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001320:	f7ff fcb8 	bl	8000c94 <HAL_GetTick>
 8001324:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001326:	e004      	b.n	8001332 <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fcb4 	bl	8000c94 <HAL_GetTick>
 800132c:	1b80      	subs	r0, r0, r6
 800132e:	2864      	cmp	r0, #100	; 0x64
 8001330:	d8e9      	bhi.n	8001306 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	682b      	ldr	r3, [r5, #0]
 8001334:	039b      	lsls	r3, r3, #14
 8001336:	d4f7      	bmi.n	8001328 <HAL_RCC_OscConfig+0x250>
 8001338:	e70d      	b.n	8001156 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133a:	4e07      	ldr	r6, [pc, #28]	; (8001358 <HAL_RCC_OscConfig+0x280>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800133c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001340:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001342:	f023 0301 	bic.w	r3, r3, #1
 8001346:	6733      	str	r3, [r6, #112]	; 0x70
 8001348:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800134a:	f023 0304 	bic.w	r3, r3, #4
 800134e:	6733      	str	r3, [r6, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001350:	f7ff fca0 	bl	8000c94 <HAL_GetTick>
 8001354:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x292>
 8001358:	40023800 	.word	0x40023800
 800135c:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001360:	f7ff fc98 	bl	8000c94 <HAL_GetTick>
 8001364:	1bc0      	subs	r0, r0, r7
 8001366:	4540      	cmp	r0, r8
 8001368:	d8cd      	bhi.n	8001306 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800136a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800136c:	0798      	lsls	r0, r3, #30
 800136e:	d4f7      	bmi.n	8001360 <HAL_RCC_OscConfig+0x288>
    if (pwrclkchanged == SET)
 8001370:	2d00      	cmp	r5, #0
 8001372:	f43f af54 	beq.w	800121e <HAL_RCC_OscConfig+0x146>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001376:	4a4e      	ldr	r2, [pc, #312]	; (80014b0 <HAL_RCC_OscConfig+0x3d8>)
 8001378:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800137a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800137e:	6413      	str	r3, [r2, #64]	; 0x40
 8001380:	e74d      	b.n	800121e <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_DISABLE();
 8001382:	682b      	ldr	r3, [r5, #0]
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800138a:	f7ff fc83 	bl	8000c94 <HAL_GetTick>
 800138e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001390:	e004      	b.n	800139c <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001392:	f7ff fc7f 	bl	8000c94 <HAL_GetTick>
 8001396:	1b80      	subs	r0, r0, r6
 8001398:	2802      	cmp	r0, #2
 800139a:	d8b4      	bhi.n	8001306 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139c:	682b      	ldr	r3, [r5, #0]
 800139e:	0799      	lsls	r1, r3, #30
 80013a0:	d4f7      	bmi.n	8001392 <HAL_RCC_OscConfig+0x2ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a2:	6823      	ldr	r3, [r4, #0]
 80013a4:	e702      	b.n	80011ac <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a6:	4a42      	ldr	r2, [pc, #264]	; (80014b0 <HAL_RCC_OscConfig+0x3d8>)
 80013a8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80013b0:	f7ff fc70 	bl	8000c94 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b4:	4f3e      	ldr	r7, [pc, #248]	; (80014b0 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80013ba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013bc:	e004      	b.n	80013c8 <HAL_RCC_OscConfig+0x2f0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7ff fc69 	bl	8000c94 <HAL_GetTick>
 80013c2:	1b80      	subs	r0, r0, r6
 80013c4:	4540      	cmp	r0, r8
 80013c6:	d89e      	bhi.n	8001306 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013ca:	079b      	lsls	r3, r3, #30
 80013cc:	d5f7      	bpl.n	80013be <HAL_RCC_OscConfig+0x2e6>
    if (pwrclkchanged == SET)
 80013ce:	2d00      	cmp	r5, #0
 80013d0:	f43f af25 	beq.w	800121e <HAL_RCC_OscConfig+0x146>
 80013d4:	e7cf      	b.n	8001376 <HAL_RCC_OscConfig+0x29e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013d6:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 80013d8:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013da:	f43f af3d 	beq.w	8001258 <HAL_RCC_OscConfig+0x180>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013de:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013e2:	69e1      	ldr	r1, [r4, #28]
 80013e4:	428b      	cmp	r3, r1
 80013e6:	f47f af44 	bne.w	8001272 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013ea:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ee:	6a21      	ldr	r1, [r4, #32]
 80013f0:	428b      	cmp	r3, r1
 80013f2:	f47f af3e 	bne.w	8001272 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80013fc:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013fe:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001402:	f47f af36 	bne.w	8001272 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001406:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001408:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800140c:	085b      	lsrs	r3, r3, #1
 800140e:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001410:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001414:	f47f af2d 	bne.w	8001272 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001418:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800141a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800141e:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
  return HAL_OK;
 8001422:	bf14      	ite	ne
 8001424:	2001      	movne	r0, #1
 8001426:	2000      	moveq	r0, #0
 8001428:	e716      	b.n	8001258 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	e67f      	b.n	800113a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143a:	f042 0204 	orr.w	r2, r2, #4
 800143e:	671a      	str	r2, [r3, #112]	; 0x70
 8001440:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001442:	f042 0201 	orr.w	r2, r2, #1
 8001446:	671a      	str	r2, [r3, #112]	; 0x70
 8001448:	e7b2      	b.n	80013b0 <HAL_RCC_OscConfig+0x2d8>
    return HAL_ERROR;
 800144a:	2001      	movs	r0, #1
}
 800144c:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800144e:	f7ff fc21 	bl	8000c94 <HAL_GetTick>
 8001452:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001454:	e005      	b.n	8001462 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001456:	f7ff fc1d 	bl	8000c94 <HAL_GetTick>
 800145a:	1b80      	subs	r0, r0, r6
 800145c:	2802      	cmp	r0, #2
 800145e:	f63f af52 	bhi.w	8001306 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001462:	682b      	ldr	r3, [r5, #0]
 8001464:	0199      	lsls	r1, r3, #6
 8001466:	d4f6      	bmi.n	8001456 <HAL_RCC_OscConfig+0x37e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001468:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800146a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800146c:	0852      	lsrs	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146e:	4e10      	ldr	r6, [pc, #64]	; (80014b0 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001470:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8001474:	3a01      	subs	r2, #1
 8001476:	430b      	orrs	r3, r1
 8001478:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800147a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800147e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001482:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001486:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800148a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800148c:	682b      	ldr	r3, [r5, #0]
 800148e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001492:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001494:	f7ff fbfe 	bl	8000c94 <HAL_GetTick>
 8001498:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149a:	e005      	b.n	80014a8 <HAL_RCC_OscConfig+0x3d0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149c:	f7ff fbfa 	bl	8000c94 <HAL_GetTick>
 80014a0:	1b00      	subs	r0, r0, r4
 80014a2:	2802      	cmp	r0, #2
 80014a4:	f63f af2f 	bhi.w	8001306 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a8:	6833      	ldr	r3, [r6, #0]
 80014aa:	019a      	lsls	r2, r3, #6
 80014ac:	d5f6      	bpl.n	800149c <HAL_RCC_OscConfig+0x3c4>
 80014ae:	e6d2      	b.n	8001256 <HAL_RCC_OscConfig+0x17e>
 80014b0:	40023800 	.word	0x40023800

080014b4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014b4:	2800      	cmp	r0, #0
 80014b6:	f000 80b3 	beq.w	8001620 <HAL_RCC_ClockConfig+0x16c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014ba:	4a61      	ldr	r2, [pc, #388]	; (8001640 <HAL_RCC_ClockConfig+0x18c>)
 80014bc:	6813      	ldr	r3, [r2, #0]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	428b      	cmp	r3, r1
{
 80014c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014c8:	4604      	mov	r4, r0
 80014ca:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014cc:	d20c      	bcs.n	80014e8 <HAL_RCC_ClockConfig+0x34>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ce:	6813      	ldr	r3, [r2, #0]
 80014d0:	f023 030f 	bic.w	r3, r3, #15
 80014d4:	430b      	orrs	r3, r1
 80014d6:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d8:	6813      	ldr	r3, [r2, #0]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	428b      	cmp	r3, r1
 80014e0:	d002      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80014e2:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 80014e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	0798      	lsls	r0, r3, #30
 80014ec:	d514      	bpl.n	8001518 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ee:	0759      	lsls	r1, r3, #29
 80014f0:	d504      	bpl.n	80014fc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f2:	4954      	ldr	r1, [pc, #336]	; (8001644 <HAL_RCC_ClockConfig+0x190>)
 80014f4:	688a      	ldr	r2, [r1, #8]
 80014f6:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80014fa:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fc:	071a      	lsls	r2, r3, #28
 80014fe:	d504      	bpl.n	800150a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001500:	4950      	ldr	r1, [pc, #320]	; (8001644 <HAL_RCC_ClockConfig+0x190>)
 8001502:	688a      	ldr	r2, [r1, #8]
 8001504:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001508:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800150a:	494e      	ldr	r1, [pc, #312]	; (8001644 <HAL_RCC_ClockConfig+0x190>)
 800150c:	68a0      	ldr	r0, [r4, #8]
 800150e:	688a      	ldr	r2, [r1, #8]
 8001510:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001514:	4302      	orrs	r2, r0
 8001516:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001518:	07df      	lsls	r7, r3, #31
 800151a:	d520      	bpl.n	800155e <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	4b49      	ldr	r3, [pc, #292]	; (8001644 <HAL_RCC_ClockConfig+0x190>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001520:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001524:	d07e      	beq.n	8001624 <HAL_RCC_ClockConfig+0x170>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001526:	2a02      	cmp	r2, #2
 8001528:	d077      	beq.n	800161a <HAL_RCC_ClockConfig+0x166>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152a:	0799      	lsls	r1, r3, #30
 800152c:	d5d9      	bpl.n	80014e2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152e:	4e45      	ldr	r6, [pc, #276]	; (8001644 <HAL_RCC_ClockConfig+0x190>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001530:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001534:	68b3      	ldr	r3, [r6, #8]
 8001536:	f023 0303 	bic.w	r3, r3, #3
 800153a:	4313      	orrs	r3, r2
 800153c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800153e:	f7ff fba9 	bl	8000c94 <HAL_GetTick>
 8001542:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001544:	e004      	b.n	8001550 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001546:	f7ff fba5 	bl	8000c94 <HAL_GetTick>
 800154a:	1bc0      	subs	r0, r0, r7
 800154c:	4540      	cmp	r0, r8
 800154e:	d86c      	bhi.n	800162a <HAL_RCC_ClockConfig+0x176>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001550:	68b3      	ldr	r3, [r6, #8]
 8001552:	6862      	ldr	r2, [r4, #4]
 8001554:	f003 030c 	and.w	r3, r3, #12
 8001558:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800155c:	d1f3      	bne.n	8001546 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800155e:	4a38      	ldr	r2, [pc, #224]	; (8001640 <HAL_RCC_ClockConfig+0x18c>)
 8001560:	6813      	ldr	r3, [r2, #0]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	42ab      	cmp	r3, r5
 8001568:	d909      	bls.n	800157e <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156a:	6813      	ldr	r3, [r2, #0]
 800156c:	f023 030f 	bic.w	r3, r3, #15
 8001570:	432b      	orrs	r3, r5
 8001572:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001574:	6813      	ldr	r3, [r2, #0]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	42ab      	cmp	r3, r5
 800157c:	d1b1      	bne.n	80014e2 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	075a      	lsls	r2, r3, #29
 8001582:	d506      	bpl.n	8001592 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001584:	492f      	ldr	r1, [pc, #188]	; (8001644 <HAL_RCC_ClockConfig+0x190>)
 8001586:	68e0      	ldr	r0, [r4, #12]
 8001588:	688a      	ldr	r2, [r1, #8]
 800158a:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800158e:	4302      	orrs	r2, r0
 8001590:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001592:	071b      	lsls	r3, r3, #28
 8001594:	d431      	bmi.n	80015fa <HAL_RCC_ClockConfig+0x146>
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001596:	492b      	ldr	r1, [pc, #172]	; (8001644 <HAL_RCC_ClockConfig+0x190>)
 8001598:	688b      	ldr	r3, [r1, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d039      	beq.n	8001616 <HAL_RCC_ClockConfig+0x162>
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d118      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015a6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80015a8:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ae:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80015b0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80015b4:	d03b      	beq.n	800162e <HAL_RCC_ClockConfig+0x17a>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b6:	4824      	ldr	r0, [pc, #144]	; (8001648 <HAL_RCC_ClockConfig+0x194>)
 80015b8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80015bc:	2300      	movs	r3, #0
 80015be:	fba1 0100 	umull	r0, r1, r1, r0
 80015c2:	f7fe fe21 	bl	8000208 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <HAL_RCC_ClockConfig+0x190>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80015ce:	3301      	adds	r3, #1
 80015d0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80015d2:	fbb0 f3f3 	udiv	r3, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 80015d6:	e000      	b.n	80015da <HAL_RCC_ClockConfig+0x126>
      sysclockfreq = HSI_VALUE;
 80015d8:	4b1c      	ldr	r3, [pc, #112]	; (800164c <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015da:	4a1a      	ldr	r2, [pc, #104]	; (8001644 <HAL_RCC_ClockConfig+0x190>)
 80015dc:	4c1c      	ldr	r4, [pc, #112]	; (8001650 <HAL_RCC_ClockConfig+0x19c>)
 80015de:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 80015e0:	481c      	ldr	r0, [pc, #112]	; (8001654 <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015e2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80015e6:	491c      	ldr	r1, [pc, #112]	; (8001658 <HAL_RCC_ClockConfig+0x1a4>)
  HAL_InitTick(uwTickPrio);
 80015e8:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015ea:	5ca2      	ldrb	r2, [r4, r2]
 80015ec:	40d3      	lsrs	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 80015f0:	f7ff fb14 	bl	8000c1c <HAL_InitTick>
  return HAL_OK;
 80015f4:	2000      	movs	r0, #0
}
 80015f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <HAL_RCC_ClockConfig+0x190>)
 80015fc:	6921      	ldr	r1, [r4, #16]
 80015fe:	6893      	ldr	r3, [r2, #8]
 8001600:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001604:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001608:	490e      	ldr	r1, [pc, #56]	; (8001644 <HAL_RCC_ClockConfig+0x190>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800160a:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800160c:	688b      	ldr	r3, [r1, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b04      	cmp	r3, #4
 8001614:	d1c5      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xee>
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_RCC_ClockConfig+0x194>)
 8001618:	e7df      	b.n	80015da <HAL_RCC_ClockConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161a:	0198      	lsls	r0, r3, #6
 800161c:	d487      	bmi.n	800152e <HAL_RCC_ClockConfig+0x7a>
 800161e:	e760      	b.n	80014e2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001620:	2001      	movs	r0, #1
}
 8001622:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001624:	039e      	lsls	r6, r3, #14
 8001626:	d482      	bmi.n	800152e <HAL_RCC_ClockConfig+0x7a>
 8001628:	e75b      	b.n	80014e2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800162a:	2003      	movs	r0, #3
 800162c:	e75a      	b.n	80014e4 <HAL_RCC_ClockConfig+0x30>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800162e:	4807      	ldr	r0, [pc, #28]	; (800164c <HAL_RCC_ClockConfig+0x198>)
 8001630:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001634:	fba1 0100 	umull	r0, r1, r1, r0
 8001638:	f7fe fde6 	bl	8000208 <__aeabi_uldivmod>
 800163c:	e7c3      	b.n	80015c6 <HAL_RCC_ClockConfig+0x112>
 800163e:	bf00      	nop
 8001640:	40023c00 	.word	0x40023c00
 8001644:	40023800 	.word	0x40023800
 8001648:	017d7840 	.word	0x017d7840
 800164c:	00f42400 	.word	0x00f42400
 8001650:	080021e0 	.word	0x080021e0
 8001654:	20000008 	.word	0x20000008
 8001658:	20000000 	.word	0x20000000

0800165c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800165c:	2800      	cmp	r0, #0
 800165e:	f000 809e 	beq.w	800179e <HAL_TIM_Base_Init+0x142>
{
 8001662:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001664:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001668:	4604      	mov	r4, r0
 800166a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800166e:	2b00      	cmp	r3, #0
 8001670:	d07c      	beq.n	800176c <HAL_TIM_Base_Init+0x110>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001672:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001674:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001676:	494c      	ldr	r1, [pc, #304]	; (80017a8 <HAL_TIM_Base_Init+0x14c>)
 8001678:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800167c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001680:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8001684:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001686:	fab1 f181 	clz	r1, r1
 800168a:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800168e:	d036      	beq.n	80016fe <HAL_TIM_Base_Init+0xa2>
 8001690:	2900      	cmp	r1, #0
 8001692:	d134      	bne.n	80016fe <HAL_TIM_Base_Init+0xa2>
 8001694:	4d45      	ldr	r5, [pc, #276]	; (80017ac <HAL_TIM_Base_Init+0x150>)
 8001696:	4846      	ldr	r0, [pc, #280]	; (80017b0 <HAL_TIM_Base_Init+0x154>)
 8001698:	4282      	cmp	r2, r0
 800169a:	bf18      	it	ne
 800169c:	42aa      	cmpne	r2, r5
 800169e:	d06a      	beq.n	8001776 <HAL_TIM_Base_Init+0x11a>
 80016a0:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 80016a4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80016a8:	1b55      	subs	r5, r2, r5
 80016aa:	4282      	cmp	r2, r0
 80016ac:	fab5 f585 	clz	r5, r5
 80016b0:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80016b4:	d069      	beq.n	800178a <HAL_TIM_Base_Init+0x12e>
 80016b6:	2d00      	cmp	r5, #0
 80016b8:	d167      	bne.n	800178a <HAL_TIM_Base_Init+0x12e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016ba:	4d3e      	ldr	r5, [pc, #248]	; (80017b4 <HAL_TIM_Base_Init+0x158>)
 80016bc:	483e      	ldr	r0, [pc, #248]	; (80017b8 <HAL_TIM_Base_Init+0x15c>)
 80016be:	4282      	cmp	r2, r0
 80016c0:	bf18      	it	ne
 80016c2:	42aa      	cmpne	r2, r5
 80016c4:	bf0c      	ite	eq
 80016c6:	2501      	moveq	r5, #1
 80016c8:	2500      	movne	r5, #0
 80016ca:	d06a      	beq.n	80017a2 <HAL_TIM_Base_Init+0x146>
 80016cc:	4e3b      	ldr	r6, [pc, #236]	; (80017bc <HAL_TIM_Base_Init+0x160>)
 80016ce:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 80016d2:	4282      	cmp	r2, r0
 80016d4:	bf18      	it	ne
 80016d6:	42b2      	cmpne	r2, r6
 80016d8:	d01a      	beq.n	8001710 <HAL_TIM_Base_Init+0xb4>
 80016da:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80016de:	4282      	cmp	r2, r0
 80016e0:	d05f      	beq.n	80017a2 <HAL_TIM_Base_Init+0x146>
 80016e2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80016e6:	4282      	cmp	r2, r0
 80016e8:	d05b      	beq.n	80017a2 <HAL_TIM_Base_Init+0x146>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016ea:	69a0      	ldr	r0, [r4, #24]
 80016ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016f0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016f2:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80016f4:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80016f6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016f8:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80016fa:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016fc:	e017      	b.n	800172e <HAL_TIM_Base_Init+0xd2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016fe:	4d30      	ldr	r5, [pc, #192]	; (80017c0 <HAL_TIM_Base_Init+0x164>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001704:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001706:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 8001708:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800170a:	fab5 f585 	clz	r5, r5
 800170e:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001710:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001716:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001718:	69a0      	ldr	r0, [r4, #24]
 800171a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800171e:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8001720:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001722:	68e3      	ldr	r3, [r4, #12]
 8001724:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001726:	6863      	ldr	r3, [r4, #4]
 8001728:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800172a:	b9e1      	cbnz	r1, 8001766 <HAL_TIM_Base_Init+0x10a>
 800172c:	b9dd      	cbnz	r5, 8001766 <HAL_TIM_Base_Init+0x10a>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800172e:	2301      	movs	r3, #1
  return HAL_OK;
 8001730:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8001732:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001734:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001738:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800173c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001740:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001744:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8001748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800174c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001750:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001754:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001758:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800175c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8001760:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001764:	bd70      	pop	{r4, r5, r6, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8001766:	6963      	ldr	r3, [r4, #20]
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	e7e0      	b.n	800172e <HAL_TIM_Base_Init+0xd2>
    htim->Lock = HAL_UNLOCKED;
 800176c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001770:	f7ff f9e4 	bl	8000b3c <HAL_TIM_Base_MspInit>
 8001774:	e77d      	b.n	8001672 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001776:	4d12      	ldr	r5, [pc, #72]	; (80017c0 <HAL_TIM_Base_Init+0x164>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800177c:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800177e:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 8001780:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001782:	fab5 f585 	clz	r5, r5
 8001786:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001788:	e7c2      	b.n	8001710 <HAL_TIM_Base_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 800178a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800178c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001790:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001792:	480c      	ldr	r0, [pc, #48]	; (80017c4 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001794:	4282      	cmp	r2, r0
 8001796:	d0bb      	beq.n	8001710 <HAL_TIM_Base_Init+0xb4>
 8001798:	2d00      	cmp	r5, #0
 800179a:	d1b9      	bne.n	8001710 <HAL_TIM_Base_Init+0xb4>
 800179c:	e78d      	b.n	80016ba <HAL_TIM_Base_Init+0x5e>
    return HAL_ERROR;
 800179e:	2001      	movs	r0, #1
}
 80017a0:	4770      	bx	lr
 80017a2:	2500      	movs	r5, #0
 80017a4:	e7b4      	b.n	8001710 <HAL_TIM_Base_Init+0xb4>
 80017a6:	bf00      	nop
 80017a8:	40010000 	.word	0x40010000
 80017ac:	40000400 	.word	0x40000400
 80017b0:	40000800 	.word	0x40000800
 80017b4:	40014000 	.word	0x40014000
 80017b8:	40014400 	.word	0x40014400
 80017bc:	40014800 	.word	0x40014800
 80017c0:	40010400 	.word	0x40010400
 80017c4:	40000c00 	.word	0x40000c00

080017c8 <HAL_TIM_OC_MspInit>:
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop

080017cc <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80017cc:	2800      	cmp	r0, #0
 80017ce:	f000 809e 	beq.w	800190e <HAL_TIM_OC_Init+0x142>
{
 80017d2:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80017d4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80017d8:	4604      	mov	r4, r0
 80017da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d07c      	beq.n	80018dc <HAL_TIM_OC_Init+0x110>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80017e2:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80017e4:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017e6:	494c      	ldr	r1, [pc, #304]	; (8001918 <HAL_TIM_OC_Init+0x14c>)
 80017e8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 80017ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017f0:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 80017f4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017f6:	fab1 f181 	clz	r1, r1
 80017fa:	ea4f 1151 	mov.w	r1, r1, lsr #5
 80017fe:	d036      	beq.n	800186e <HAL_TIM_OC_Init+0xa2>
 8001800:	2900      	cmp	r1, #0
 8001802:	d134      	bne.n	800186e <HAL_TIM_OC_Init+0xa2>
 8001804:	4d45      	ldr	r5, [pc, #276]	; (800191c <HAL_TIM_OC_Init+0x150>)
 8001806:	4846      	ldr	r0, [pc, #280]	; (8001920 <HAL_TIM_OC_Init+0x154>)
 8001808:	4282      	cmp	r2, r0
 800180a:	bf18      	it	ne
 800180c:	42aa      	cmpne	r2, r5
 800180e:	d06a      	beq.n	80018e6 <HAL_TIM_OC_Init+0x11a>
 8001810:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8001814:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8001818:	1b55      	subs	r5, r2, r5
 800181a:	4282      	cmp	r2, r0
 800181c:	fab5 f585 	clz	r5, r5
 8001820:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8001824:	d069      	beq.n	80018fa <HAL_TIM_OC_Init+0x12e>
 8001826:	2d00      	cmp	r5, #0
 8001828:	d167      	bne.n	80018fa <HAL_TIM_OC_Init+0x12e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800182a:	4d3e      	ldr	r5, [pc, #248]	; (8001924 <HAL_TIM_OC_Init+0x158>)
 800182c:	483e      	ldr	r0, [pc, #248]	; (8001928 <HAL_TIM_OC_Init+0x15c>)
 800182e:	4282      	cmp	r2, r0
 8001830:	bf18      	it	ne
 8001832:	42aa      	cmpne	r2, r5
 8001834:	bf0c      	ite	eq
 8001836:	2501      	moveq	r5, #1
 8001838:	2500      	movne	r5, #0
 800183a:	d06a      	beq.n	8001912 <HAL_TIM_OC_Init+0x146>
 800183c:	4e3b      	ldr	r6, [pc, #236]	; (800192c <HAL_TIM_OC_Init+0x160>)
 800183e:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 8001842:	4282      	cmp	r2, r0
 8001844:	bf18      	it	ne
 8001846:	42b2      	cmpne	r2, r6
 8001848:	d01a      	beq.n	8001880 <HAL_TIM_OC_Init+0xb4>
 800184a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800184e:	4282      	cmp	r2, r0
 8001850:	d05f      	beq.n	8001912 <HAL_TIM_OC_Init+0x146>
 8001852:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8001856:	4282      	cmp	r2, r0
 8001858:	d05b      	beq.n	8001912 <HAL_TIM_OC_Init+0x146>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800185a:	69a0      	ldr	r0, [r4, #24]
 800185c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001860:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001862:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8001864:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8001866:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001868:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800186a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800186c:	e017      	b.n	800189e <HAL_TIM_OC_Init+0xd2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800186e:	4d30      	ldr	r5, [pc, #192]	; (8001930 <HAL_TIM_OC_Init+0x164>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001874:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001876:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 8001878:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800187a:	fab5 f585 	clz	r5, r5
 800187e:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001880:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001886:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001888:	69a0      	ldr	r0, [r4, #24]
 800188a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800188e:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8001890:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001892:	68e3      	ldr	r3, [r4, #12]
 8001894:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001896:	6863      	ldr	r3, [r4, #4]
 8001898:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800189a:	b9e1      	cbnz	r1, 80018d6 <HAL_TIM_OC_Init+0x10a>
 800189c:	b9dd      	cbnz	r5, 80018d6 <HAL_TIM_OC_Init+0x10a>
  TIMx->EGR = TIM_EGR_UG;
 800189e:	2301      	movs	r3, #1
  return HAL_OK;
 80018a0:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80018a2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018a4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80018ac:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80018b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80018b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80018b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80018c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80018c8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80018cc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80018d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80018d4:	bd70      	pop	{r4, r5, r6, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 80018d6:	6963      	ldr	r3, [r4, #20]
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	e7e0      	b.n	800189e <HAL_TIM_OC_Init+0xd2>
    htim->Lock = HAL_UNLOCKED;
 80018dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80018e0:	f7ff ff72 	bl	80017c8 <HAL_TIM_OC_MspInit>
 80018e4:	e77d      	b.n	80017e2 <HAL_TIM_OC_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018e6:	4d12      	ldr	r5, [pc, #72]	; (8001930 <HAL_TIM_OC_Init+0x164>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80018ec:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018ee:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 80018f0:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018f2:	fab5 f585 	clz	r5, r5
 80018f6:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018f8:	e7c2      	b.n	8001880 <HAL_TIM_OC_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 80018fa:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001900:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001902:	480c      	ldr	r0, [pc, #48]	; (8001934 <HAL_TIM_OC_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001904:	4282      	cmp	r2, r0
 8001906:	d0bb      	beq.n	8001880 <HAL_TIM_OC_Init+0xb4>
 8001908:	2d00      	cmp	r5, #0
 800190a:	d1b9      	bne.n	8001880 <HAL_TIM_OC_Init+0xb4>
 800190c:	e78d      	b.n	800182a <HAL_TIM_OC_Init+0x5e>
    return HAL_ERROR;
 800190e:	2001      	movs	r0, #1
}
 8001910:	4770      	bx	lr
 8001912:	2500      	movs	r5, #0
 8001914:	e7b4      	b.n	8001880 <HAL_TIM_OC_Init+0xb4>
 8001916:	bf00      	nop
 8001918:	40010000 	.word	0x40010000
 800191c:	40000400 	.word	0x40000400
 8001920:	40000800 	.word	0x40000800
 8001924:	40014000 	.word	0x40014000
 8001928:	40014400 	.word	0x40014400
 800192c:	40014800 	.word	0x40014800
 8001930:	40010400 	.word	0x40010400
 8001934:	40000c00 	.word	0x40000c00

08001938 <HAL_TIM_OC_Start_IT>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001938:	2900      	cmp	r1, #0
 800193a:	d14f      	bne.n	80019dc <HAL_TIM_OC_Start_IT+0xa4>
 800193c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001940:	2b01      	cmp	r3, #1
 8001942:	d155      	bne.n	80019f0 <HAL_TIM_OC_Start_IT+0xb8>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001944:	6803      	ldr	r3, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001946:	2202      	movs	r2, #2
 8001948:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	f042 0202 	orr.w	r2, r2, #2
 8001952:	60da      	str	r2, [r3, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001954:	2201      	movs	r2, #1
 8001956:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800195a:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800195c:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8001960:	ea20 0001 	bic.w	r0, r0, r1
{
 8001964:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8001966:	6218      	str	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001968:	4c51      	ldr	r4, [pc, #324]	; (8001ab0 <HAL_TIM_OC_Start_IT+0x178>)

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800196a:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800196c:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800196e:	ea41 0102 	orr.w	r1, r1, r2
 8001972:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001974:	d03e      	beq.n	80019f4 <HAL_TIM_OC_Start_IT+0xbc>
 8001976:	4a4f      	ldr	r2, [pc, #316]	; (8001ab4 <HAL_TIM_OC_Start_IT+0x17c>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d03b      	beq.n	80019f4 <HAL_TIM_OC_Start_IT+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800197c:	4a4e      	ldr	r2, [pc, #312]	; (8001ab8 <HAL_TIM_OC_Start_IT+0x180>)
 800197e:	4c4f      	ldr	r4, [pc, #316]	; (8001abc <HAL_TIM_OC_Start_IT+0x184>)
 8001980:	4293      	cmp	r3, r2
 8001982:	bf18      	it	ne
 8001984:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8001988:	484d      	ldr	r0, [pc, #308]	; (8001ac0 <HAL_TIM_OC_Start_IT+0x188>)
 800198a:	494e      	ldr	r1, [pc, #312]	; (8001ac4 <HAL_TIM_OC_Start_IT+0x18c>)
 800198c:	bf0c      	ite	eq
 800198e:	2201      	moveq	r2, #1
 8001990:	2200      	movne	r2, #0
 8001992:	42a3      	cmp	r3, r4
 8001994:	bf08      	it	eq
 8001996:	f042 0201 	orreq.w	r2, r2, #1
 800199a:	4283      	cmp	r3, r0
 800199c:	bf08      	it	eq
 800199e:	f042 0201 	orreq.w	r2, r2, #1
 80019a2:	428b      	cmp	r3, r1
 80019a4:	bf08      	it	eq
 80019a6:	f042 0201 	orreq.w	r2, r2, #1
 80019aa:	b93a      	cbnz	r2, 80019bc <HAL_TIM_OC_Start_IT+0x84>
 80019ac:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 80019b0:	1a18      	subs	r0, r3, r0
 80019b2:	fab0 f080 	clz	r0, r0
 80019b6:	0940      	lsrs	r0, r0, #5
 80019b8:	2800      	cmp	r0, #0
 80019ba:	d06a      	beq.n	8001a92 <HAL_TIM_OC_Start_IT+0x15a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019bc:	6899      	ldr	r1, [r3, #8]
 80019be:	4a42      	ldr	r2, [pc, #264]	; (8001ac8 <HAL_TIM_OC_Start_IT+0x190>)
 80019c0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019c2:	2a06      	cmp	r2, #6
 80019c4:	d01f      	beq.n	8001a06 <HAL_TIM_OC_Start_IT+0xce>
 80019c6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80019ca:	d01c      	beq.n	8001a06 <HAL_TIM_OC_Start_IT+0xce>
      __HAL_TIM_ENABLE(htim);
 80019cc:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80019ce:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80019d0:	f042 0201 	orr.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
}
 80019d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019da:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80019dc:	2904      	cmp	r1, #4
 80019de:	d042      	beq.n	8001a66 <HAL_TIM_OC_Start_IT+0x12e>
 80019e0:	2908      	cmp	r1, #8
 80019e2:	d033      	beq.n	8001a4c <HAL_TIM_OC_Start_IT+0x114>
 80019e4:	290c      	cmp	r1, #12
 80019e6:	d112      	bne.n	8001a0e <HAL_TIM_OC_Start_IT+0xd6>
 80019e8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d047      	beq.n	8001a80 <HAL_TIM_OC_Start_IT+0x148>
    return HAL_ERROR;
 80019f0:	2001      	movs	r0, #1
}
 80019f2:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 80019f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019fa:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019fc:	4a32      	ldr	r2, [pc, #200]	; (8001ac8 <HAL_TIM_OC_Start_IT+0x190>)
 80019fe:	6899      	ldr	r1, [r3, #8]
 8001a00:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a02:	2a06      	cmp	r2, #6
 8001a04:	d1df      	bne.n	80019c6 <HAL_TIM_OC_Start_IT+0x8e>
  return HAL_OK;
 8001a06:	2000      	movs	r0, #0
}
 8001a08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a0c:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a0e:	2910      	cmp	r1, #16
 8001a10:	d044      	beq.n	8001a9c <HAL_TIM_OC_Start_IT+0x164>
 8001a12:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8001a16:	3b01      	subs	r3, #1
 8001a18:	bf18      	it	ne
 8001a1a:	2301      	movne	r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1e7      	bne.n	80019f0 <HAL_TIM_OC_Start_IT+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a20:	2908      	cmp	r1, #8
 8001a22:	d017      	beq.n	8001a54 <HAL_TIM_OC_Start_IT+0x11c>
 8001a24:	290c      	cmp	r1, #12
 8001a26:	d02b      	beq.n	8001a80 <HAL_TIM_OC_Start_IT+0x148>
 8001a28:	2910      	cmp	r1, #16
 8001a2a:	f04f 0202 	mov.w	r2, #2
 8001a2e:	d03b      	beq.n	8001aa8 <HAL_TIM_OC_Start_IT+0x170>
  switch (Channel)
 8001a30:	1f0b      	subs	r3, r1, #4
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a32:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
  switch (Channel)
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d806      	bhi.n	8001a48 <HAL_TIM_OC_Start_IT+0x110>
 8001a3a:	e8df f003 	tbb	[pc, r3]
 8001a3e:	051b      	.short	0x051b
 8001a40:	050e0505 	.word	0x050e0505
 8001a44:	0505      	.short	0x0505
 8001a46:	24          	.byte	0x24
 8001a47:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001a48:	6803      	ldr	r3, [r0, #0]
 8001a4a:	e783      	b.n	8001954 <HAL_TIM_OC_Start_IT+0x1c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a4c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d1cd      	bne.n	80019f0 <HAL_TIM_OC_Start_IT+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a54:	2302      	movs	r3, #2
 8001a56:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001a5a:	6803      	ldr	r3, [r0, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	f042 0208 	orr.w	r2, r2, #8
 8001a62:	60da      	str	r2, [r3, #12]
      break;
 8001a64:	e776      	b.n	8001954 <HAL_TIM_OC_Start_IT+0x1c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a66:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d1c0      	bne.n	80019f0 <HAL_TIM_OC_Start_IT+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a6e:	2302      	movs	r3, #2
 8001a70:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001a74:	6803      	ldr	r3, [r0, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	f042 0204 	orr.w	r2, r2, #4
 8001a7c:	60da      	str	r2, [r3, #12]
      break;
 8001a7e:	e769      	b.n	8001954 <HAL_TIM_OC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a80:	2302      	movs	r3, #2
 8001a82:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001a86:	6803      	ldr	r3, [r0, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	f042 0210 	orr.w	r2, r2, #16
 8001a8e:	60da      	str	r2, [r3, #12]
      break;
 8001a90:	e760      	b.n	8001954 <HAL_TIM_OC_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	f042 0201 	orr.w	r2, r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	e79c      	b.n	80019d6 <HAL_TIM_OC_Start_IT+0x9e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a9c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	bf18      	it	ne
 8001aa4:	2301      	movne	r3, #1
 8001aa6:	e7b9      	b.n	8001a1c <HAL_TIM_OC_Start_IT+0xe4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001aa8:	6803      	ldr	r3, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001aaa:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  switch (Channel)
 8001aae:	e751      	b.n	8001954 <HAL_TIM_OC_Start_IT+0x1c>
 8001ab0:	40010000 	.word	0x40010000
 8001ab4:	40010400 	.word	0x40010400
 8001ab8:	40000400 	.word	0x40000400
 8001abc:	40000800 	.word	0x40000800
 8001ac0:	40000c00 	.word	0x40000c00
 8001ac4:	40014000 	.word	0x40014000
 8001ac8:	00010007 	.word	0x00010007

08001acc <HAL_TIM_OC_ConfigChannel>:
{
 8001acc:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8001ace:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8001ad2:	2801      	cmp	r0, #1
 8001ad4:	f000 80f7 	beq.w	8001cc6 <HAL_TIM_OC_ConfigChannel+0x1fa>
 8001ad8:	2001      	movs	r0, #1
{
 8001ada:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8001adc:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  switch (Channel)
 8001ae0:	2a14      	cmp	r2, #20
 8001ae2:	d834      	bhi.n	8001b4e <HAL_TIM_OC_ConfigChannel+0x82>
 8001ae4:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001ae8:	00330015 	.word	0x00330015
 8001aec:	00330033 	.word	0x00330033
 8001af0:	0033005f 	.word	0x0033005f
 8001af4:	00330033 	.word	0x00330033
 8001af8:	003300a9 	.word	0x003300a9
 8001afc:	00330033 	.word	0x00330033
 8001b00:	00330085 	.word	0x00330085
 8001b04:	00330033 	.word	0x00330033
 8001b08:	003300cc 	.word	0x003300cc
 8001b0c:	00330033 	.word	0x00330033
 8001b10:	0039      	.short	0x0039
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b12:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b14:	4c8b      	ldr	r4, [pc, #556]	; (8001d44 <HAL_TIM_OC_ConfigChannel+0x278>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b16:	6a10      	ldr	r0, [r2, #32]
 8001b18:	f020 0001 	bic.w	r0, r0, #1
 8001b1c:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001b1e:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001b20:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001b22:	6996      	ldr	r6, [r2, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8001b24:	f020 0002 	bic.w	r0, r0, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b28:	4034      	ands	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8001b2a:	680e      	ldr	r6, [r1, #0]
 8001b2c:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 8001b2e:	688e      	ldr	r6, [r1, #8]
 8001b30:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b32:	4e85      	ldr	r6, [pc, #532]	; (8001d48 <HAL_TIM_OC_ConfigChannel+0x27c>)
 8001b34:	42b2      	cmp	r2, r6
 8001b36:	f000 80d4 	beq.w	8001ce2 <HAL_TIM_OC_ConfigChannel+0x216>
 8001b3a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b3e:	42b2      	cmp	r2, r6
 8001b40:	f000 80cf 	beq.w	8001ce2 <HAL_TIM_OC_ConfigChannel+0x216>
  TIMx->CCR1 = OC_Config->Pulse;
 8001b44:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001b46:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001b48:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001b4a:	6351      	str	r1, [r2, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8001b4c:	6210      	str	r0, [r2, #32]
  __HAL_UNLOCK(htim);
 8001b4e:	2200      	movs	r2, #0
  return HAL_OK;
 8001b50:	4610      	mov	r0, r2
  __HAL_UNLOCK(htim);
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001b56:	bcf0      	pop	{r4, r5, r6, r7}
 8001b58:	4770      	bx	lr
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001b5a:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001b5c:	4c7b      	ldr	r4, [pc, #492]	; (8001d4c <HAL_TIM_OC_ConfigChannel+0x280>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001b5e:	6a10      	ldr	r0, [r2, #32]
 8001b60:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 8001b64:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001b66:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001b68:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8001b6a:	6d56      	ldr	r6, [r2, #84]	; 0x54
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001b6c:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001b70:	4034      	ands	r4, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b72:	680e      	ldr	r6, [r1, #0]
 8001b74:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001b78:	688e      	ldr	r6, [r1, #8]
 8001b7a:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b7e:	4e72      	ldr	r6, [pc, #456]	; (8001d48 <HAL_TIM_OC_ConfigChannel+0x27c>)
 8001b80:	42b2      	cmp	r2, r6
 8001b82:	f000 80a2 	beq.w	8001cca <HAL_TIM_OC_ConfigChannel+0x1fe>
 8001b86:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b8a:	42b2      	cmp	r2, r6
 8001b8c:	f000 809d 	beq.w	8001cca <HAL_TIM_OC_ConfigChannel+0x1fe>
  TIMx->CCR6 = OC_Config->Pulse;
 8001b90:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001b92:	6055      	str	r5, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8001b94:	6554      	str	r4, [r2, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8001b96:	65d1      	str	r1, [r2, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8001b98:	6210      	str	r0, [r2, #32]
  __HAL_UNLOCK(htim);
 8001b9a:	2200      	movs	r2, #0
  return HAL_OK;
 8001b9c:	4610      	mov	r0, r2
  __HAL_UNLOCK(htim);
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001ba2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba4:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ba6:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ba8:	4c69      	ldr	r4, [pc, #420]	; (8001d50 <HAL_TIM_OC_ConfigChannel+0x284>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001baa:	6a10      	ldr	r0, [r2, #32]
 8001bac:	f020 0010 	bic.w	r0, r0, #16
 8001bb0:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001bb2:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001bb4:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001bb6:	6996      	ldr	r6, [r2, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8001bb8:	f020 0020 	bic.w	r0, r0, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001bbc:	4034      	ands	r4, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bbe:	680e      	ldr	r6, [r1, #0]
 8001bc0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001bc4:	688e      	ldr	r6, [r1, #8]
 8001bc6:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001bca:	4e5f      	ldr	r6, [pc, #380]	; (8001d48 <HAL_TIM_OC_ConfigChannel+0x27c>)
 8001bcc:	42b2      	cmp	r2, r6
 8001bce:	f000 809b 	beq.w	8001d08 <HAL_TIM_OC_ConfigChannel+0x23c>
 8001bd2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001bd6:	42b2      	cmp	r2, r6
 8001bd8:	f000 8096 	beq.w	8001d08 <HAL_TIM_OC_ConfigChannel+0x23c>
  TIMx->CCR2 = OC_Config->Pulse;
 8001bdc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001bde:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001be0:	6194      	str	r4, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001be2:	6391      	str	r1, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001be4:	6210      	str	r0, [r2, #32]
  __HAL_UNLOCK(htim);
 8001be6:	2200      	movs	r2, #0
  return HAL_OK;
 8001be8:	4610      	mov	r0, r2
  __HAL_UNLOCK(htim);
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001bee:	bcf0      	pop	{r4, r5, r6, r7}
 8001bf0:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001bf2:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001bf4:	4c56      	ldr	r4, [pc, #344]	; (8001d50 <HAL_TIM_OC_ConfigChannel+0x284>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001bf6:	6a10      	ldr	r0, [r2, #32]
 8001bf8:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8001bfc:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001bfe:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001c00:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001c02:	69d6      	ldr	r6, [r2, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8001c04:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c08:	4034      	ands	r4, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c0a:	680e      	ldr	r6, [r1, #0]
 8001c0c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c10:	688e      	ldr	r6, [r1, #8]
 8001c12:	ea40 3006 	orr.w	r0, r0, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c16:	4e4c      	ldr	r6, [pc, #304]	; (8001d48 <HAL_TIM_OC_ConfigChannel+0x27c>)
 8001c18:	42b2      	cmp	r2, r6
 8001c1a:	d06f      	beq.n	8001cfc <HAL_TIM_OC_ConfigChannel+0x230>
 8001c1c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001c20:	42b2      	cmp	r2, r6
 8001c22:	d06b      	beq.n	8001cfc <HAL_TIM_OC_ConfigChannel+0x230>
  TIMx->CCR4 = OC_Config->Pulse;
 8001c24:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001c26:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001c28:	61d4      	str	r4, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001c2a:	6411      	str	r1, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8001c2c:	6210      	str	r0, [r2, #32]
  __HAL_UNLOCK(htim);
 8001c2e:	2200      	movs	r2, #0
  return HAL_OK;
 8001c30:	4610      	mov	r0, r2
  __HAL_UNLOCK(htim);
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001c36:	bcf0      	pop	{r4, r5, r6, r7}
 8001c38:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c3a:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c3c:	4c41      	ldr	r4, [pc, #260]	; (8001d44 <HAL_TIM_OC_ConfigChannel+0x278>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c3e:	6a10      	ldr	r0, [r2, #32]
 8001c40:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8001c44:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001c46:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001c48:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001c4a:	69d6      	ldr	r6, [r2, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8001c4c:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c50:	4034      	ands	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8001c52:	680e      	ldr	r6, [r1, #0]
 8001c54:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c56:	688e      	ldr	r6, [r1, #8]
 8001c58:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c5c:	4e3a      	ldr	r6, [pc, #232]	; (8001d48 <HAL_TIM_OC_ConfigChannel+0x27c>)
 8001c5e:	42b2      	cmp	r2, r6
 8001c60:	d061      	beq.n	8001d26 <HAL_TIM_OC_ConfigChannel+0x25a>
 8001c62:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001c66:	42b2      	cmp	r2, r6
 8001c68:	d05d      	beq.n	8001d26 <HAL_TIM_OC_ConfigChannel+0x25a>
  TIMx->CCR3 = OC_Config->Pulse;
 8001c6a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001c6c:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001c6e:	61d4      	str	r4, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001c70:	63d1      	str	r1, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8001c72:	6210      	str	r0, [r2, #32]
  __HAL_UNLOCK(htim);
 8001c74:	2200      	movs	r2, #0
  return HAL_OK;
 8001c76:	4610      	mov	r0, r2
  __HAL_UNLOCK(htim);
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001c7c:	bcf0      	pop	{r4, r5, r6, r7}
 8001c7e:	4770      	bx	lr
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001c80:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001c82:	4c34      	ldr	r4, [pc, #208]	; (8001d54 <HAL_TIM_OC_ConfigChannel+0x288>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001c84:	6a10      	ldr	r0, [r2, #32]
 8001c86:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8001c8a:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001c8c:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001c8e:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8001c90:	6d56      	ldr	r6, [r2, #84]	; 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 8001c92:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001c96:	4034      	ands	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8001c98:	680e      	ldr	r6, [r1, #0]
 8001c9a:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001c9c:	688e      	ldr	r6, [r1, #8]
 8001c9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ca2:	4e29      	ldr	r6, [pc, #164]	; (8001d48 <HAL_TIM_OC_ConfigChannel+0x27c>)
 8001ca4:	42b2      	cmp	r2, r6
 8001ca6:	d016      	beq.n	8001cd6 <HAL_TIM_OC_ConfigChannel+0x20a>
 8001ca8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001cac:	42b2      	cmp	r2, r6
 8001cae:	d012      	beq.n	8001cd6 <HAL_TIM_OC_ConfigChannel+0x20a>
  TIMx->CCR5 = OC_Config->Pulse;
 8001cb0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001cb2:	6055      	str	r5, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8001cb4:	6554      	str	r4, [r2, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8001cb6:	6591      	str	r1, [r2, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8001cb8:	6210      	str	r0, [r2, #32]
  __HAL_UNLOCK(htim);
 8001cba:	2200      	movs	r2, #0
  return HAL_OK;
 8001cbc:	4610      	mov	r0, r2
  __HAL_UNLOCK(htim);
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001cc2:	bcf0      	pop	{r4, r5, r6, r7}
 8001cc4:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001cc6:	2002      	movs	r0, #2
}
 8001cc8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001cca:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001cce:	694e      	ldr	r6, [r1, #20]
 8001cd0:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8001cd4:	e75c      	b.n	8001b90 <HAL_TIM_OC_ConfigChannel+0xc4>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001cd6:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001cda:	694e      	ldr	r6, [r1, #20]
 8001cdc:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8001ce0:	e7e6      	b.n	8001cb0 <HAL_TIM_OC_ConfigChannel+0x1e4>
    tmpccer |= OC_Config->OCNPolarity;
 8001ce2:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ce4:	f020 0008 	bic.w	r0, r0, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001ce8:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8001cec:	4330      	orrs	r0, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cee:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpccer &= ~TIM_CCER_CC1NE;
 8001cf2:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cf6:	433e      	orrs	r6, r7
 8001cf8:	4335      	orrs	r5, r6
 8001cfa:	e723      	b.n	8001b44 <HAL_TIM_OC_ConfigChannel+0x78>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001cfc:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001d00:	694e      	ldr	r6, [r1, #20]
 8001d02:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8001d06:	e78d      	b.n	8001c24 <HAL_TIM_OC_ConfigChannel+0x158>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d08:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d0a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d0e:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d12:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d16:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d1a:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d1e:	433e      	orrs	r6, r7
 8001d20:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 8001d24:	e75a      	b.n	8001bdc <HAL_TIM_OC_ConfigChannel+0x110>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d26:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001d28:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d2c:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d30:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d34:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d38:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d3c:	433e      	orrs	r6, r7
 8001d3e:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8001d42:	e792      	b.n	8001c6a <HAL_TIM_OC_ConfigChannel+0x19e>
 8001d44:	fffeff8c 	.word	0xfffeff8c
 8001d48:	40010000 	.word	0x40010000
 8001d4c:	feff8fff 	.word	0xfeff8fff
 8001d50:	feff8cff 	.word	0xfeff8cff
 8001d54:	fffeff8f 	.word	0xfffeff8f

08001d58 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001d58:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001d5c:	2a01      	cmp	r2, #1
 8001d5e:	d073      	beq.n	8001e48 <HAL_TIM_ConfigClockSource+0xf0>
 8001d60:	4603      	mov	r3, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8001d62:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8001d64:	6800      	ldr	r0, [r0, #0]
{
 8001d66:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8001d68:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001d6e:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d72:	4c4b      	ldr	r4, [pc, #300]	; (8001ea0 <HAL_TIM_ConfigClockSource+0x148>)
  tmpsmcr = htim->Instance->SMCR;
 8001d74:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d76:	4014      	ands	r4, r2
  switch (sClockSourceConfig->ClockSource)
 8001d78:	680a      	ldr	r2, [r1, #0]
 8001d7a:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8001d7c:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001d7e:	d065      	beq.n	8001e4c <HAL_TIM_ConfigClockSource+0xf4>
 8001d80:	d831      	bhi.n	8001de6 <HAL_TIM_ConfigClockSource+0x8e>
 8001d82:	2a40      	cmp	r2, #64	; 0x40
 8001d84:	d048      	beq.n	8001e18 <HAL_TIM_ConfigClockSource+0xc0>
 8001d86:	d921      	bls.n	8001dcc <HAL_TIM_ConfigClockSource+0x74>
 8001d88:	2a50      	cmp	r2, #80	; 0x50
 8001d8a:	d116      	bne.n	8001dba <HAL_TIM_ConfigClockSource+0x62>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d8c:	684c      	ldr	r4, [r1, #4]
 8001d8e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8001d90:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d92:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8001d96:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d98:	6a04      	ldr	r4, [r0, #32]
 8001d9a:	f024 0401 	bic.w	r4, r4, #1
 8001d9e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001da0:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001da2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001da6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001daa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001dac:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001dae:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001db0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001db4:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001db8:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 8001dba:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8001dbc:	2101      	movs	r1, #1
  return HAL_OK;
 8001dbe:	4610      	mov	r0, r2
  htim->State = HAL_TIM_STATE_READY;
 8001dc0:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001dc8:	bc30      	pop	{r4, r5}
 8001dca:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8001dcc:	2a20      	cmp	r2, #32
 8001dce:	d002      	beq.n	8001dd6 <HAL_TIM_ConfigClockSource+0x7e>
 8001dd0:	d91e      	bls.n	8001e10 <HAL_TIM_ConfigClockSource+0xb8>
 8001dd2:	2a30      	cmp	r2, #48	; 0x30
 8001dd4:	d1f1      	bne.n	8001dba <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr = TIMx->SMCR;
 8001dd6:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001dd8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8001de2:	6082      	str	r2, [r0, #8]
}
 8001de4:	e7e9      	b.n	8001dba <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8001de6:	2a70      	cmp	r2, #112	; 0x70
 8001de8:	d049      	beq.n	8001e7e <HAL_TIM_ConfigClockSource+0x126>
 8001dea:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001dee:	d1e4      	bne.n	8001dba <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr = TIMx->SMCR;
 8001df0:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001df2:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8001df6:	432a      	orrs	r2, r5
 8001df8:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dfa:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dfe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8001e02:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8001e04:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e06:	6882      	ldr	r2, [r0, #8]
 8001e08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e0c:	6082      	str	r2, [r0, #8]
      break;
 8001e0e:	e7d4      	b.n	8001dba <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8001e10:	f032 0110 	bics.w	r1, r2, #16
 8001e14:	d1d1      	bne.n	8001dba <HAL_TIM_ConfigClockSource+0x62>
 8001e16:	e7de      	b.n	8001dd6 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e18:	684c      	ldr	r4, [r1, #4]
 8001e1a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8001e1c:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e1e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8001e22:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e24:	6a04      	ldr	r4, [r0, #32]
 8001e26:	f024 0401 	bic.w	r4, r4, #1
 8001e2a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e2c:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e2e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e32:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001e36:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e38:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001e3a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e40:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8001e44:	6082      	str	r2, [r0, #8]
}
 8001e46:	e7b8      	b.n	8001dba <HAL_TIM_ConfigClockSource+0x62>
  __HAL_LOCK(htim);
 8001e48:	2002      	movs	r0, #2
}
 8001e4a:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e4c:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e4e:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e50:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e54:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e56:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e58:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e5a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e5e:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 8001e62:	6a02      	ldr	r2, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 8001e68:	6181      	str	r1, [r0, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e6a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 8001e6e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001e70:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e76:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8001e7a:	6082      	str	r2, [r0, #8]
}
 8001e7c:	e79d      	b.n	8001dba <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e7e:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001e82:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e84:	432a      	orrs	r2, r5
 8001e86:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e88:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e8c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8001e90:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8001e92:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001e94:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e96:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001e9a:	6082      	str	r2, [r0, #8]
      break;
 8001e9c:	e78d      	b.n	8001dba <HAL_TIM_ConfigClockSource+0x62>
 8001e9e:	bf00      	nop
 8001ea0:	fffe0088 	.word	0xfffe0088

08001ea4 <HAL_TIM_PeriodElapsedCallback>:
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop

08001ea8 <HAL_TIM_IC_CaptureCallback>:
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop

08001eac <HAL_TIM_PWM_PulseFinishedCallback>:
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop

08001eb0 <HAL_TIM_TriggerCallback>:
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop

08001eb4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001eb4:	6803      	ldr	r3, [r0, #0]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	0791      	lsls	r1, r2, #30
{
 8001eba:	b510      	push	{r4, lr}
 8001ebc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ebe:	d502      	bpl.n	8001ec6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	0792      	lsls	r2, r2, #30
 8001ec4:	d468      	bmi.n	8001f98 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	0752      	lsls	r2, r2, #29
 8001eca:	d502      	bpl.n	8001ed2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	0750      	lsls	r0, r2, #29
 8001ed0:	d44f      	bmi.n	8001f72 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	0711      	lsls	r1, r2, #28
 8001ed6:	d502      	bpl.n	8001ede <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	0712      	lsls	r2, r2, #28
 8001edc:	d437      	bmi.n	8001f4e <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	06d0      	lsls	r0, r2, #27
 8001ee2:	d502      	bpl.n	8001eea <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	06d1      	lsls	r1, r2, #27
 8001ee8:	d41e      	bmi.n	8001f28 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	07d2      	lsls	r2, r2, #31
 8001eee:	d502      	bpl.n	8001ef6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	07d0      	lsls	r0, r2, #31
 8001ef4:	d469      	bmi.n	8001fca <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	0611      	lsls	r1, r2, #24
 8001efa:	d502      	bpl.n	8001f02 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	0612      	lsls	r2, r2, #24
 8001f00:	d46b      	bmi.n	8001fda <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	05d0      	lsls	r0, r2, #23
 8001f06:	d502      	bpl.n	8001f0e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	0611      	lsls	r1, r2, #24
 8001f0c:	d46d      	bmi.n	8001fea <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	0652      	lsls	r2, r2, #25
 8001f12:	d502      	bpl.n	8001f1a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	0650      	lsls	r0, r2, #25
 8001f18:	d46f      	bmi.n	8001ffa <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	0691      	lsls	r1, r2, #26
 8001f1e:	d502      	bpl.n	8001f26 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	0692      	lsls	r2, r2, #26
 8001f24:	d449      	bmi.n	8001fba <HAL_TIM_IRQHandler+0x106>
}
 8001f26:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f28:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f2c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f30:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f32:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001f3a:	d16f      	bne.n	800201c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3c:	f7fe fb22 	bl	8000584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f40:	4620      	mov	r0, r4
 8001f42:	f7ff ffb3 	bl	8001eac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f46:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f48:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4a:	7722      	strb	r2, [r4, #28]
 8001f4c:	e7cd      	b.n	8001eea <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f4e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f52:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8001f54:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f56:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f58:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	079b      	lsls	r3, r3, #30
 8001f5e:	d15a      	bne.n	8002016 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f60:	f7fe fb10 	bl	8000584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f64:	4620      	mov	r0, r4
 8001f66:	f7ff ffa1 	bl	8001eac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f6c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	7722      	strb	r2, [r4, #28]
 8001f70:	e7b5      	b.n	8001ede <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f72:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f76:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001f78:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f7a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f7c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001f84:	d144      	bne.n	8002010 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f86:	f7fe fafd 	bl	8000584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	f7ff ff8e 	bl	8001eac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f90:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f92:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f94:	7722      	strb	r2, [r4, #28]
 8001f96:	e79c      	b.n	8001ed2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f98:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f9c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f9e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fa0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	0799      	lsls	r1, r3, #30
 8001fa6:	d130      	bne.n	800200a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa8:	f7fe faec 	bl	8000584 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fac:	4620      	mov	r0, r4
 8001fae:	f7ff ff7d 	bl	8001eac <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fb4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	7722      	strb	r2, [r4, #28]
 8001fb8:	e785      	b.n	8001ec6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fba:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001fbe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fc0:	611a      	str	r2, [r3, #16]
}
 8001fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001fc6:	f000 b8cd 	b.w	8002164 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fca:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fd0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fd2:	f7ff ff67 	bl	8001ea4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	e78d      	b.n	8001ef6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fda:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001fde:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fe0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001fe2:	f000 f8c1 	bl	8002168 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001fe6:	6823      	ldr	r3, [r4, #0]
 8001fe8:	e78b      	b.n	8001f02 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001fea:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8001fee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001ff0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001ff2:	f000 f8bb 	bl	800216c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	e789      	b.n	8001f0e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ffa:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001ffe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002000:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002002:	f7ff ff55 	bl	8001eb0 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002006:	6823      	ldr	r3, [r4, #0]
 8002008:	e787      	b.n	8001f1a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800200a:	f7ff ff4d 	bl	8001ea8 <HAL_TIM_IC_CaptureCallback>
 800200e:	e7d0      	b.n	8001fb2 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8002010:	f7ff ff4a 	bl	8001ea8 <HAL_TIM_IC_CaptureCallback>
 8002014:	e7bc      	b.n	8001f90 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8002016:	f7ff ff47 	bl	8001ea8 <HAL_TIM_IC_CaptureCallback>
 800201a:	e7a6      	b.n	8001f6a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800201c:	f7ff ff44 	bl	8001ea8 <HAL_TIM_IC_CaptureCallback>
 8002020:	e791      	b.n	8001f46 <HAL_TIM_IRQHandler+0x92>
 8002022:	bf00      	nop

08002024 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002024:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002028:	2b01      	cmp	r3, #1
 800202a:	d04b      	beq.n	80020c4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800202c:	6803      	ldr	r3, [r0, #0]
 800202e:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8002030:	2002      	movs	r0, #2
{
 8002032:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002034:	4d24      	ldr	r5, [pc, #144]	; (80020c8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002036:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800203a:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800203c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800203e:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002040:	d029      	beq.n	8002096 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002042:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002046:	42ab      	cmp	r3, r5
 8002048:	d025      	beq.n	8002096 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800204a:	4d20      	ldr	r5, [pc, #128]	; (80020cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800204c:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002050:	42ab      	cmp	r3, r5
 8002052:	bf18      	it	ne
 8002054:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8002058:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800205c:	bf0c      	ite	eq
 800205e:	f04f 0c01 	moveq.w	ip, #1
 8002062:	f04f 0c00 	movne.w	ip, #0
 8002066:	42ab      	cmp	r3, r5
 8002068:	bf08      	it	eq
 800206a:	f04c 0c01 	orreq.w	ip, ip, #1
 800206e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002072:	42ab      	cmp	r3, r5
 8002074:	bf08      	it	eq
 8002076:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800207a:	680d      	ldr	r5, [r1, #0]
 800207c:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800207e:	4d14      	ldr	r5, [pc, #80]	; (80020d0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 8002080:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002082:	42ab      	cmp	r3, r5
 8002084:	bf14      	ite	ne
 8002086:	4660      	movne	r0, ip
 8002088:	f04c 0001 	orreq.w	r0, ip, #1
 800208c:	b960      	cbnz	r0, 80020a8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800208e:	4811      	ldr	r0, [pc, #68]	; (80020d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002090:	4283      	cmp	r3, r0
 8002092:	d009      	beq.n	80020a8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002094:	e00d      	b.n	80020b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002096:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002098:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800209c:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800209e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80020a0:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020a4:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 80020a6:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020a8:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020aa:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020ae:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020b0:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80020b2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80020b4:	2101      	movs	r1, #1

  return HAL_OK;
 80020b6:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80020b8:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80020bc:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80020c0:	bc30      	pop	{r4, r5}
 80020c2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80020c4:	2002      	movs	r0, #2
}
 80020c6:	4770      	bx	lr
 80020c8:	40010000 	.word	0x40010000
 80020cc:	40000400 	.word	0x40000400
 80020d0:	40014000 	.word	0x40014000
 80020d4:	40001800 	.word	0x40001800

080020d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80020d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d03d      	beq.n	800215c <HAL_TIMEx_ConfigBreakDeadTime+0x84>
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80020e0:	4602      	mov	r2, r0
 80020e2:	6848      	ldr	r0, [r1, #4]
{
 80020e4:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80020e6:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80020ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ee:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80020f0:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80020f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020f6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80020f8:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80020fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020fe:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002100:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002102:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002106:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002108:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800210a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800210e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002110:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002116:	4303      	orrs	r3, r0

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002118:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800211a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800211e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002122:	4c0f      	ldr	r4, [pc, #60]	; (8002160 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8002124:	42a0      	cmp	r0, r4
 8002126:	d00b      	beq.n	8002140 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8002128:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800212c:	42a0      	cmp	r0, r4
 800212e:	d007      	beq.n	8002140 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8002130:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8002132:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8002134:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8002138:	4608      	mov	r0, r1
}
 800213a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800213e:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002140:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002142:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002146:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800214a:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800214e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002152:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002154:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002158:	430b      	orrs	r3, r1
 800215a:	e7e9      	b.n	8002130 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 800215c:	2002      	movs	r0, #2
}
 800215e:	4770      	bx	lr
 8002160:	40010000 	.word	0x40010000

08002164 <HAL_TIMEx_CommutCallback>:
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop

08002168 <HAL_TIMEx_BreakCallback>:
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop

0800216c <HAL_TIMEx_Break2Callback>:
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop

08002170 <__libc_init_array>:
 8002170:	b570      	push	{r4, r5, r6, lr}
 8002172:	4d0d      	ldr	r5, [pc, #52]	; (80021a8 <__libc_init_array+0x38>)
 8002174:	4c0d      	ldr	r4, [pc, #52]	; (80021ac <__libc_init_array+0x3c>)
 8002176:	1b64      	subs	r4, r4, r5
 8002178:	10a4      	asrs	r4, r4, #2
 800217a:	2600      	movs	r6, #0
 800217c:	42a6      	cmp	r6, r4
 800217e:	d109      	bne.n	8002194 <__libc_init_array+0x24>
 8002180:	4d0b      	ldr	r5, [pc, #44]	; (80021b0 <__libc_init_array+0x40>)
 8002182:	4c0c      	ldr	r4, [pc, #48]	; (80021b4 <__libc_init_array+0x44>)
 8002184:	f000 f820 	bl	80021c8 <_init>
 8002188:	1b64      	subs	r4, r4, r5
 800218a:	10a4      	asrs	r4, r4, #2
 800218c:	2600      	movs	r6, #0
 800218e:	42a6      	cmp	r6, r4
 8002190:	d105      	bne.n	800219e <__libc_init_array+0x2e>
 8002192:	bd70      	pop	{r4, r5, r6, pc}
 8002194:	f855 3b04 	ldr.w	r3, [r5], #4
 8002198:	4798      	blx	r3
 800219a:	3601      	adds	r6, #1
 800219c:	e7ee      	b.n	800217c <__libc_init_array+0xc>
 800219e:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a2:	4798      	blx	r3
 80021a4:	3601      	adds	r6, #1
 80021a6:	e7f2      	b.n	800218e <__libc_init_array+0x1e>
 80021a8:	080021f8 	.word	0x080021f8
 80021ac:	080021f8 	.word	0x080021f8
 80021b0:	080021f8 	.word	0x080021f8
 80021b4:	080021fc 	.word	0x080021fc

080021b8 <memset>:
 80021b8:	4402      	add	r2, r0
 80021ba:	4603      	mov	r3, r0
 80021bc:	4293      	cmp	r3, r2
 80021be:	d100      	bne.n	80021c2 <memset+0xa>
 80021c0:	4770      	bx	lr
 80021c2:	f803 1b01 	strb.w	r1, [r3], #1
 80021c6:	e7f9      	b.n	80021bc <memset+0x4>

080021c8 <_init>:
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	bf00      	nop
 80021cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ce:	bc08      	pop	{r3}
 80021d0:	469e      	mov	lr, r3
 80021d2:	4770      	bx	lr

080021d4 <_fini>:
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	bf00      	nop
 80021d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021da:	bc08      	pop	{r3}
 80021dc:	469e      	mov	lr, r3
 80021de:	4770      	bx	lr
